
2_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001084c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08010910  08010910  00020910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011210  08011210  000301ec  2**0
                  CONTENTS
  4 .ARM          00000000  08011210  08011210  000301ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011210  08011210  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011210  08011210  00021210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011214  08011214  00021214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08011218  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bac  200001f0  08011404  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d9c  08011404  00031d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002122f  00000000  00000000  00030257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005520  00000000  00000000  00051486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c70  00000000  00000000  000569a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015e7  00000000  00000000  00058618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002269d  00000000  00000000  00059bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026cbf  00000000  00000000  0007c29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb134  00000000  00000000  000a2f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078e4  00000000  00000000  0015e090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00165974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080108f4 	.word	0x080108f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	080108f4 	.word	0x080108f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff99 	bl	8001374 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fee9 	bl	8001224 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff8b 	bl	8001374 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff81 	bl	8001374 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff11 	bl	80012a8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff07 	bl	80012a8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fe1f 	bl	8002100 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa78 	bl	80019c0 <__aeabi_dsub>
 80004d0:	f001 fe16 	bl	8002100 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff87 	bl	800143c <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fe4a 	bl	80021cc <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff7e 	bl	800143c <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fa3a 	bl	80019c0 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fe03 	bl	800216c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff67 	bl	800143c <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fe2a 	bl	80021cc <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	0004      	movs	r4, r0
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	001f      	movs	r7, r3
 8000596:	030b      	lsls	r3, r1, #12
 8000598:	0010      	movs	r0, r2
 800059a:	004e      	lsls	r6, r1, #1
 800059c:	0a5b      	lsrs	r3, r3, #9
 800059e:	0fcd      	lsrs	r5, r1, #31
 80005a0:	0f61      	lsrs	r1, r4, #29
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	4319      	orrs	r1, r3
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	0fff      	lsrs	r7, r7, #31
 80005ac:	46bc      	mov	ip, r7
 80005ae:	0a64      	lsrs	r4, r4, #9
 80005b0:	0f47      	lsrs	r7, r0, #29
 80005b2:	4327      	orrs	r7, r4
 80005b4:	0d76      	lsrs	r6, r6, #21
 80005b6:	0d52      	lsrs	r2, r2, #21
 80005b8:	00c0      	lsls	r0, r0, #3
 80005ba:	46b9      	mov	r9, r7
 80005bc:	4680      	mov	r8, r0
 80005be:	1ab7      	subs	r7, r6, r2
 80005c0:	4565      	cmp	r5, ip
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e09b      	b.n	80006fe <__aeabi_dadd+0x176>
 80005c6:	2f00      	cmp	r7, #0
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_dadd+0x44>
 80005ca:	e084      	b.n	80006d6 <__aeabi_dadd+0x14e>
 80005cc:	2a00      	cmp	r2, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e0be      	b.n	8000750 <__aeabi_dadd+0x1c8>
 80005d2:	4ac8      	ldr	r2, [pc, #800]	; (80008f4 <__aeabi_dadd+0x36c>)
 80005d4:	4296      	cmp	r6, r2
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e124      	b.n	8000824 <__aeabi_dadd+0x29c>
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	464c      	mov	r4, r9
 80005de:	0412      	lsls	r2, r2, #16
 80005e0:	4314      	orrs	r4, r2
 80005e2:	46a1      	mov	r9, r4
 80005e4:	2f38      	cmp	r7, #56	; 0x38
 80005e6:	dd00      	ble.n	80005ea <__aeabi_dadd+0x62>
 80005e8:	e167      	b.n	80008ba <__aeabi_dadd+0x332>
 80005ea:	2f1f      	cmp	r7, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x68>
 80005ee:	e1d6      	b.n	800099e <__aeabi_dadd+0x416>
 80005f0:	2220      	movs	r2, #32
 80005f2:	464c      	mov	r4, r9
 80005f4:	1bd2      	subs	r2, r2, r7
 80005f6:	4094      	lsls	r4, r2
 80005f8:	46a2      	mov	sl, r4
 80005fa:	4644      	mov	r4, r8
 80005fc:	40fc      	lsrs	r4, r7
 80005fe:	0020      	movs	r0, r4
 8000600:	4654      	mov	r4, sl
 8000602:	4304      	orrs	r4, r0
 8000604:	4640      	mov	r0, r8
 8000606:	4090      	lsls	r0, r2
 8000608:	1e42      	subs	r2, r0, #1
 800060a:	4190      	sbcs	r0, r2
 800060c:	464a      	mov	r2, r9
 800060e:	40fa      	lsrs	r2, r7
 8000610:	4304      	orrs	r4, r0
 8000612:	1a89      	subs	r1, r1, r2
 8000614:	1b1c      	subs	r4, r3, r4
 8000616:	42a3      	cmp	r3, r4
 8000618:	4192      	sbcs	r2, r2
 800061a:	4252      	negs	r2, r2
 800061c:	1a8b      	subs	r3, r1, r2
 800061e:	469a      	mov	sl, r3
 8000620:	4653      	mov	r3, sl
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	d400      	bmi.n	8000628 <__aeabi_dadd+0xa0>
 8000626:	e0d4      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000628:	4653      	mov	r3, sl
 800062a:	025a      	lsls	r2, r3, #9
 800062c:	0a53      	lsrs	r3, r2, #9
 800062e:	469a      	mov	sl, r3
 8000630:	4653      	mov	r3, sl
 8000632:	2b00      	cmp	r3, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0xb0>
 8000636:	e104      	b.n	8000842 <__aeabi_dadd+0x2ba>
 8000638:	4650      	mov	r0, sl
 800063a:	f001 fe73 	bl	8002324 <__clzsi2>
 800063e:	0003      	movs	r3, r0
 8000640:	3b08      	subs	r3, #8
 8000642:	2220      	movs	r2, #32
 8000644:	0020      	movs	r0, r4
 8000646:	1ad2      	subs	r2, r2, r3
 8000648:	4651      	mov	r1, sl
 800064a:	40d0      	lsrs	r0, r2
 800064c:	4099      	lsls	r1, r3
 800064e:	0002      	movs	r2, r0
 8000650:	409c      	lsls	r4, r3
 8000652:	430a      	orrs	r2, r1
 8000654:	42b3      	cmp	r3, r6
 8000656:	da00      	bge.n	800065a <__aeabi_dadd+0xd2>
 8000658:	e102      	b.n	8000860 <__aeabi_dadd+0x2d8>
 800065a:	1b9b      	subs	r3, r3, r6
 800065c:	1c59      	adds	r1, r3, #1
 800065e:	291f      	cmp	r1, #31
 8000660:	dd00      	ble.n	8000664 <__aeabi_dadd+0xdc>
 8000662:	e0a7      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000664:	2320      	movs	r3, #32
 8000666:	0010      	movs	r0, r2
 8000668:	0026      	movs	r6, r4
 800066a:	1a5b      	subs	r3, r3, r1
 800066c:	409c      	lsls	r4, r3
 800066e:	4098      	lsls	r0, r3
 8000670:	40ce      	lsrs	r6, r1
 8000672:	40ca      	lsrs	r2, r1
 8000674:	1e63      	subs	r3, r4, #1
 8000676:	419c      	sbcs	r4, r3
 8000678:	4330      	orrs	r0, r6
 800067a:	4692      	mov	sl, r2
 800067c:	2600      	movs	r6, #0
 800067e:	4304      	orrs	r4, r0
 8000680:	0763      	lsls	r3, r4, #29
 8000682:	d009      	beq.n	8000698 <__aeabi_dadd+0x110>
 8000684:	230f      	movs	r3, #15
 8000686:	4023      	ands	r3, r4
 8000688:	2b04      	cmp	r3, #4
 800068a:	d005      	beq.n	8000698 <__aeabi_dadd+0x110>
 800068c:	1d23      	adds	r3, r4, #4
 800068e:	42a3      	cmp	r3, r4
 8000690:	41a4      	sbcs	r4, r4
 8000692:	4264      	negs	r4, r4
 8000694:	44a2      	add	sl, r4
 8000696:	001c      	movs	r4, r3
 8000698:	4653      	mov	r3, sl
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	d400      	bmi.n	80006a0 <__aeabi_dadd+0x118>
 800069e:	e09b      	b.n	80007d8 <__aeabi_dadd+0x250>
 80006a0:	4b94      	ldr	r3, [pc, #592]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a2:	3601      	adds	r6, #1
 80006a4:	429e      	cmp	r6, r3
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x122>
 80006a8:	e0b8      	b.n	800081c <__aeabi_dadd+0x294>
 80006aa:	4653      	mov	r3, sl
 80006ac:	4992      	ldr	r1, [pc, #584]	; (80008f8 <__aeabi_dadd+0x370>)
 80006ae:	08e4      	lsrs	r4, r4, #3
 80006b0:	400b      	ands	r3, r1
 80006b2:	0019      	movs	r1, r3
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	4323      	orrs	r3, r4
 80006b8:	0572      	lsls	r2, r6, #21
 80006ba:	024c      	lsls	r4, r1, #9
 80006bc:	0b24      	lsrs	r4, r4, #12
 80006be:	0d52      	lsrs	r2, r2, #21
 80006c0:	0512      	lsls	r2, r2, #20
 80006c2:	07ed      	lsls	r5, r5, #31
 80006c4:	4322      	orrs	r2, r4
 80006c6:	432a      	orrs	r2, r5
 80006c8:	0018      	movs	r0, r3
 80006ca:	0011      	movs	r1, r2
 80006cc:	bce0      	pop	{r5, r6, r7}
 80006ce:	46ba      	mov	sl, r7
 80006d0:	46b1      	mov	r9, r6
 80006d2:	46a8      	mov	r8, r5
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d048      	beq.n	800076c <__aeabi_dadd+0x1e4>
 80006da:	1b97      	subs	r7, r2, r6
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d000      	beq.n	80006e2 <__aeabi_dadd+0x15a>
 80006e0:	e10e      	b.n	8000900 <__aeabi_dadd+0x378>
 80006e2:	000c      	movs	r4, r1
 80006e4:	431c      	orrs	r4, r3
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x162>
 80006e8:	e1b7      	b.n	8000a5a <__aeabi_dadd+0x4d2>
 80006ea:	1e7c      	subs	r4, r7, #1
 80006ec:	2f01      	cmp	r7, #1
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x16a>
 80006f0:	e226      	b.n	8000b40 <__aeabi_dadd+0x5b8>
 80006f2:	4d80      	ldr	r5, [pc, #512]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006f4:	42af      	cmp	r7, r5
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x172>
 80006f8:	e1d5      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 80006fa:	0027      	movs	r7, r4
 80006fc:	e107      	b.n	800090e <__aeabi_dadd+0x386>
 80006fe:	2f00      	cmp	r7, #0
 8000700:	dc00      	bgt.n	8000704 <__aeabi_dadd+0x17c>
 8000702:	e0b2      	b.n	800086a <__aeabi_dadd+0x2e2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d047      	beq.n	8000798 <__aeabi_dadd+0x210>
 8000708:	4a7a      	ldr	r2, [pc, #488]	; (80008f4 <__aeabi_dadd+0x36c>)
 800070a:	4296      	cmp	r6, r2
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x188>
 800070e:	e089      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	464c      	mov	r4, r9
 8000714:	0412      	lsls	r2, r2, #16
 8000716:	4314      	orrs	r4, r2
 8000718:	46a1      	mov	r9, r4
 800071a:	2f38      	cmp	r7, #56	; 0x38
 800071c:	dc6b      	bgt.n	80007f6 <__aeabi_dadd+0x26e>
 800071e:	2f1f      	cmp	r7, #31
 8000720:	dc00      	bgt.n	8000724 <__aeabi_dadd+0x19c>
 8000722:	e16e      	b.n	8000a02 <__aeabi_dadd+0x47a>
 8000724:	003a      	movs	r2, r7
 8000726:	4648      	mov	r0, r9
 8000728:	3a20      	subs	r2, #32
 800072a:	40d0      	lsrs	r0, r2
 800072c:	4684      	mov	ip, r0
 800072e:	2f20      	cmp	r7, #32
 8000730:	d007      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000732:	2240      	movs	r2, #64	; 0x40
 8000734:	4648      	mov	r0, r9
 8000736:	1bd2      	subs	r2, r2, r7
 8000738:	4090      	lsls	r0, r2
 800073a:	0002      	movs	r2, r0
 800073c:	4640      	mov	r0, r8
 800073e:	4310      	orrs	r0, r2
 8000740:	4680      	mov	r8, r0
 8000742:	4640      	mov	r0, r8
 8000744:	1e42      	subs	r2, r0, #1
 8000746:	4190      	sbcs	r0, r2
 8000748:	4662      	mov	r2, ip
 800074a:	0004      	movs	r4, r0
 800074c:	4314      	orrs	r4, r2
 800074e:	e057      	b.n	8000800 <__aeabi_dadd+0x278>
 8000750:	464a      	mov	r2, r9
 8000752:	4302      	orrs	r2, r0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x1d0>
 8000756:	e103      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000758:	1e7a      	subs	r2, r7, #1
 800075a:	2f01      	cmp	r7, #1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x1d8>
 800075e:	e193      	b.n	8000a88 <__aeabi_dadd+0x500>
 8000760:	4c64      	ldr	r4, [pc, #400]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000762:	42a7      	cmp	r7, r4
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x1e0>
 8000766:	e18a      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 8000768:	0017      	movs	r7, r2
 800076a:	e73b      	b.n	80005e4 <__aeabi_dadd+0x5c>
 800076c:	4c63      	ldr	r4, [pc, #396]	; (80008fc <__aeabi_dadd+0x374>)
 800076e:	1c72      	adds	r2, r6, #1
 8000770:	4222      	tst	r2, r4
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x1ee>
 8000774:	e0e0      	b.n	8000938 <__aeabi_dadd+0x3b0>
 8000776:	000a      	movs	r2, r1
 8000778:	431a      	orrs	r2, r3
 800077a:	2e00      	cmp	r6, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dadd+0x1f8>
 800077e:	e174      	b.n	8000a6a <__aeabi_dadd+0x4e2>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x1fe>
 8000784:	e1d0      	b.n	8000b28 <__aeabi_dadd+0x5a0>
 8000786:	464a      	mov	r2, r9
 8000788:	4302      	orrs	r2, r0
 800078a:	d000      	beq.n	800078e <__aeabi_dadd+0x206>
 800078c:	e1e3      	b.n	8000b56 <__aeabi_dadd+0x5ce>
 800078e:	074a      	lsls	r2, r1, #29
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	4313      	orrs	r3, r2
 8000794:	08c9      	lsrs	r1, r1, #3
 8000796:	e029      	b.n	80007ec <__aeabi_dadd+0x264>
 8000798:	464a      	mov	r2, r9
 800079a:	4302      	orrs	r2, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x218>
 800079e:	e17d      	b.n	8000a9c <__aeabi_dadd+0x514>
 80007a0:	1e7a      	subs	r2, r7, #1
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c52      	ldr	r4, [pc, #328]	; (80008f4 <__aeabi_dadd+0x36c>)
 80007aa:	42a7      	cmp	r7, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e166      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 80007b0:	0017      	movs	r7, r2
 80007b2:	e7b2      	b.n	800071a <__aeabi_dadd+0x192>
 80007b4:	0010      	movs	r0, r2
 80007b6:	3b1f      	subs	r3, #31
 80007b8:	40d8      	lsrs	r0, r3
 80007ba:	2920      	cmp	r1, #32
 80007bc:	d003      	beq.n	80007c6 <__aeabi_dadd+0x23e>
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	1a5b      	subs	r3, r3, r1
 80007c2:	409a      	lsls	r2, r3
 80007c4:	4314      	orrs	r4, r2
 80007c6:	1e63      	subs	r3, r4, #1
 80007c8:	419c      	sbcs	r4, r3
 80007ca:	2300      	movs	r3, #0
 80007cc:	2600      	movs	r6, #0
 80007ce:	469a      	mov	sl, r3
 80007d0:	4304      	orrs	r4, r0
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e755      	b.n	8000684 <__aeabi_dadd+0xfc>
 80007d8:	4652      	mov	r2, sl
 80007da:	08e3      	lsrs	r3, r4, #3
 80007dc:	0752      	lsls	r2, r2, #29
 80007de:	4313      	orrs	r3, r2
 80007e0:	4652      	mov	r2, sl
 80007e2:	0037      	movs	r7, r6
 80007e4:	08d1      	lsrs	r1, r2, #3
 80007e6:	4a43      	ldr	r2, [pc, #268]	; (80008f4 <__aeabi_dadd+0x36c>)
 80007e8:	4297      	cmp	r7, r2
 80007ea:	d01f      	beq.n	800082c <__aeabi_dadd+0x2a4>
 80007ec:	0309      	lsls	r1, r1, #12
 80007ee:	057a      	lsls	r2, r7, #21
 80007f0:	0b0c      	lsrs	r4, r1, #12
 80007f2:	0d52      	lsrs	r2, r2, #21
 80007f4:	e764      	b.n	80006c0 <__aeabi_dadd+0x138>
 80007f6:	4642      	mov	r2, r8
 80007f8:	464c      	mov	r4, r9
 80007fa:	4314      	orrs	r4, r2
 80007fc:	1e62      	subs	r2, r4, #1
 80007fe:	4194      	sbcs	r4, r2
 8000800:	18e4      	adds	r4, r4, r3
 8000802:	429c      	cmp	r4, r3
 8000804:	4192      	sbcs	r2, r2
 8000806:	4252      	negs	r2, r2
 8000808:	4692      	mov	sl, r2
 800080a:	448a      	add	sl, r1
 800080c:	4653      	mov	r3, sl
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	d5df      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000814:	3601      	adds	r6, #1
 8000816:	429e      	cmp	r6, r3
 8000818:	d000      	beq.n	800081c <__aeabi_dadd+0x294>
 800081a:	e0b3      	b.n	8000984 <__aeabi_dadd+0x3fc>
 800081c:	0032      	movs	r2, r6
 800081e:	2400      	movs	r4, #0
 8000820:	2300      	movs	r3, #0
 8000822:	e74d      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000824:	074a      	lsls	r2, r1, #29
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	4313      	orrs	r3, r2
 800082a:	08c9      	lsrs	r1, r1, #3
 800082c:	001a      	movs	r2, r3
 800082e:	430a      	orrs	r2, r1
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x2ac>
 8000832:	e200      	b.n	8000c36 <__aeabi_dadd+0x6ae>
 8000834:	2480      	movs	r4, #128	; 0x80
 8000836:	0324      	lsls	r4, r4, #12
 8000838:	430c      	orrs	r4, r1
 800083a:	0324      	lsls	r4, r4, #12
 800083c:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <__aeabi_dadd+0x36c>)
 800083e:	0b24      	lsrs	r4, r4, #12
 8000840:	e73e      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000842:	0020      	movs	r0, r4
 8000844:	f001 fd6e 	bl	8002324 <__clzsi2>
 8000848:	0003      	movs	r3, r0
 800084a:	3318      	adds	r3, #24
 800084c:	2b1f      	cmp	r3, #31
 800084e:	dc00      	bgt.n	8000852 <__aeabi_dadd+0x2ca>
 8000850:	e6f7      	b.n	8000642 <__aeabi_dadd+0xba>
 8000852:	0022      	movs	r2, r4
 8000854:	3808      	subs	r0, #8
 8000856:	4082      	lsls	r2, r0
 8000858:	2400      	movs	r4, #0
 800085a:	42b3      	cmp	r3, r6
 800085c:	db00      	blt.n	8000860 <__aeabi_dadd+0x2d8>
 800085e:	e6fc      	b.n	800065a <__aeabi_dadd+0xd2>
 8000860:	1af6      	subs	r6, r6, r3
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <__aeabi_dadd+0x370>)
 8000864:	401a      	ands	r2, r3
 8000866:	4692      	mov	sl, r2
 8000868:	e70a      	b.n	8000680 <__aeabi_dadd+0xf8>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d02b      	beq.n	80008c6 <__aeabi_dadd+0x33e>
 800086e:	1b97      	subs	r7, r2, r6
 8000870:	2e00      	cmp	r6, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x2ee>
 8000874:	e0b8      	b.n	80009e8 <__aeabi_dadd+0x460>
 8000876:	4c1f      	ldr	r4, [pc, #124]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000878:	42a2      	cmp	r2, r4
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x2f6>
 800087c:	e11c      	b.n	8000ab8 <__aeabi_dadd+0x530>
 800087e:	2480      	movs	r4, #128	; 0x80
 8000880:	0424      	lsls	r4, r4, #16
 8000882:	4321      	orrs	r1, r4
 8000884:	2f38      	cmp	r7, #56	; 0x38
 8000886:	dd00      	ble.n	800088a <__aeabi_dadd+0x302>
 8000888:	e11e      	b.n	8000ac8 <__aeabi_dadd+0x540>
 800088a:	2f1f      	cmp	r7, #31
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x308>
 800088e:	e19e      	b.n	8000bce <__aeabi_dadd+0x646>
 8000890:	2620      	movs	r6, #32
 8000892:	000c      	movs	r4, r1
 8000894:	1bf6      	subs	r6, r6, r7
 8000896:	0018      	movs	r0, r3
 8000898:	40b3      	lsls	r3, r6
 800089a:	40b4      	lsls	r4, r6
 800089c:	40f8      	lsrs	r0, r7
 800089e:	1e5e      	subs	r6, r3, #1
 80008a0:	41b3      	sbcs	r3, r6
 80008a2:	40f9      	lsrs	r1, r7
 80008a4:	4304      	orrs	r4, r0
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4489      	add	r9, r1
 80008aa:	4444      	add	r4, r8
 80008ac:	4544      	cmp	r4, r8
 80008ae:	419b      	sbcs	r3, r3
 80008b0:	425b      	negs	r3, r3
 80008b2:	444b      	add	r3, r9
 80008b4:	469a      	mov	sl, r3
 80008b6:	0016      	movs	r6, r2
 80008b8:	e7a8      	b.n	800080c <__aeabi_dadd+0x284>
 80008ba:	4642      	mov	r2, r8
 80008bc:	464c      	mov	r4, r9
 80008be:	4314      	orrs	r4, r2
 80008c0:	1e62      	subs	r2, r4, #1
 80008c2:	4194      	sbcs	r4, r2
 80008c4:	e6a6      	b.n	8000614 <__aeabi_dadd+0x8c>
 80008c6:	4c0d      	ldr	r4, [pc, #52]	; (80008fc <__aeabi_dadd+0x374>)
 80008c8:	1c72      	adds	r2, r6, #1
 80008ca:	4222      	tst	r2, r4
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x348>
 80008ce:	e0a8      	b.n	8000a22 <__aeabi_dadd+0x49a>
 80008d0:	000a      	movs	r2, r1
 80008d2:	431a      	orrs	r2, r3
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x352>
 80008d8:	e10a      	b.n	8000af0 <__aeabi_dadd+0x568>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x358>
 80008de:	e15e      	b.n	8000b9e <__aeabi_dadd+0x616>
 80008e0:	464a      	mov	r2, r9
 80008e2:	4302      	orrs	r2, r0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_dadd+0x360>
 80008e6:	e161      	b.n	8000bac <__aeabi_dadd+0x624>
 80008e8:	074a      	lsls	r2, r1, #29
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	08c9      	lsrs	r1, r1, #3
 80008f0:	e77c      	b.n	80007ec <__aeabi_dadd+0x264>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	000007ff 	.word	0x000007ff
 80008f8:	ff7fffff 	.word	0xff7fffff
 80008fc:	000007fe 	.word	0x000007fe
 8000900:	4ccf      	ldr	r4, [pc, #828]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000902:	42a2      	cmp	r2, r4
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x380>
 8000906:	e0ce      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000908:	2480      	movs	r4, #128	; 0x80
 800090a:	0424      	lsls	r4, r4, #16
 800090c:	4321      	orrs	r1, r4
 800090e:	2f38      	cmp	r7, #56	; 0x38
 8000910:	dc5b      	bgt.n	80009ca <__aeabi_dadd+0x442>
 8000912:	2f1f      	cmp	r7, #31
 8000914:	dd00      	ble.n	8000918 <__aeabi_dadd+0x390>
 8000916:	e0dc      	b.n	8000ad2 <__aeabi_dadd+0x54a>
 8000918:	2520      	movs	r5, #32
 800091a:	000c      	movs	r4, r1
 800091c:	1bed      	subs	r5, r5, r7
 800091e:	001e      	movs	r6, r3
 8000920:	40ab      	lsls	r3, r5
 8000922:	40ac      	lsls	r4, r5
 8000924:	40fe      	lsrs	r6, r7
 8000926:	1e5d      	subs	r5, r3, #1
 8000928:	41ab      	sbcs	r3, r5
 800092a:	4334      	orrs	r4, r6
 800092c:	40f9      	lsrs	r1, r7
 800092e:	431c      	orrs	r4, r3
 8000930:	464b      	mov	r3, r9
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	4699      	mov	r9, r3
 8000936:	e04c      	b.n	80009d2 <__aeabi_dadd+0x44a>
 8000938:	464a      	mov	r2, r9
 800093a:	1a1c      	subs	r4, r3, r0
 800093c:	1a88      	subs	r0, r1, r2
 800093e:	42a3      	cmp	r3, r4
 8000940:	4192      	sbcs	r2, r2
 8000942:	4252      	negs	r2, r2
 8000944:	4692      	mov	sl, r2
 8000946:	0002      	movs	r2, r0
 8000948:	4650      	mov	r0, sl
 800094a:	1a12      	subs	r2, r2, r0
 800094c:	4692      	mov	sl, r2
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	d478      	bmi.n	8000a44 <__aeabi_dadd+0x4bc>
 8000952:	4653      	mov	r3, sl
 8000954:	4323      	orrs	r3, r4
 8000956:	d000      	beq.n	800095a <__aeabi_dadd+0x3d2>
 8000958:	e66a      	b.n	8000630 <__aeabi_dadd+0xa8>
 800095a:	2100      	movs	r1, #0
 800095c:	2500      	movs	r5, #0
 800095e:	e745      	b.n	80007ec <__aeabi_dadd+0x264>
 8000960:	074a      	lsls	r2, r1, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c9      	lsrs	r1, r1, #3
 8000968:	e73d      	b.n	80007e6 <__aeabi_dadd+0x25e>
 800096a:	181c      	adds	r4, r3, r0
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4449      	add	r1, r9
 8000972:	468a      	mov	sl, r1
 8000974:	425b      	negs	r3, r3
 8000976:	449a      	add	sl, r3
 8000978:	4653      	mov	r3, sl
 800097a:	2601      	movs	r6, #1
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	d400      	bmi.n	8000982 <__aeabi_dadd+0x3fa>
 8000980:	e727      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000982:	2602      	movs	r6, #2
 8000984:	4652      	mov	r2, sl
 8000986:	4baf      	ldr	r3, [pc, #700]	; (8000c44 <__aeabi_dadd+0x6bc>)
 8000988:	2101      	movs	r1, #1
 800098a:	401a      	ands	r2, r3
 800098c:	0013      	movs	r3, r2
 800098e:	4021      	ands	r1, r4
 8000990:	0862      	lsrs	r2, r4, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	07dc      	lsls	r4, r3, #31
 8000996:	085b      	lsrs	r3, r3, #1
 8000998:	469a      	mov	sl, r3
 800099a:	4314      	orrs	r4, r2
 800099c:	e670      	b.n	8000680 <__aeabi_dadd+0xf8>
 800099e:	003a      	movs	r2, r7
 80009a0:	464c      	mov	r4, r9
 80009a2:	3a20      	subs	r2, #32
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	46a4      	mov	ip, r4
 80009a8:	2f20      	cmp	r7, #32
 80009aa:	d007      	beq.n	80009bc <__aeabi_dadd+0x434>
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	4648      	mov	r0, r9
 80009b0:	1bd2      	subs	r2, r2, r7
 80009b2:	4090      	lsls	r0, r2
 80009b4:	0002      	movs	r2, r0
 80009b6:	4640      	mov	r0, r8
 80009b8:	4310      	orrs	r0, r2
 80009ba:	4680      	mov	r8, r0
 80009bc:	4640      	mov	r0, r8
 80009be:	1e42      	subs	r2, r0, #1
 80009c0:	4190      	sbcs	r0, r2
 80009c2:	4662      	mov	r2, ip
 80009c4:	0004      	movs	r4, r0
 80009c6:	4314      	orrs	r4, r2
 80009c8:	e624      	b.n	8000614 <__aeabi_dadd+0x8c>
 80009ca:	4319      	orrs	r1, r3
 80009cc:	000c      	movs	r4, r1
 80009ce:	1e63      	subs	r3, r4, #1
 80009d0:	419c      	sbcs	r4, r3
 80009d2:	4643      	mov	r3, r8
 80009d4:	1b1c      	subs	r4, r3, r4
 80009d6:	45a0      	cmp	r8, r4
 80009d8:	419b      	sbcs	r3, r3
 80009da:	4649      	mov	r1, r9
 80009dc:	425b      	negs	r3, r3
 80009de:	1acb      	subs	r3, r1, r3
 80009e0:	469a      	mov	sl, r3
 80009e2:	4665      	mov	r5, ip
 80009e4:	0016      	movs	r6, r2
 80009e6:	e61b      	b.n	8000620 <__aeabi_dadd+0x98>
 80009e8:	000c      	movs	r4, r1
 80009ea:	431c      	orrs	r4, r3
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x468>
 80009ee:	e0c7      	b.n	8000b80 <__aeabi_dadd+0x5f8>
 80009f0:	1e7c      	subs	r4, r7, #1
 80009f2:	2f01      	cmp	r7, #1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x470>
 80009f6:	e0f9      	b.n	8000bec <__aeabi_dadd+0x664>
 80009f8:	4e91      	ldr	r6, [pc, #580]	; (8000c40 <__aeabi_dadd+0x6b8>)
 80009fa:	42b7      	cmp	r7, r6
 80009fc:	d05c      	beq.n	8000ab8 <__aeabi_dadd+0x530>
 80009fe:	0027      	movs	r7, r4
 8000a00:	e740      	b.n	8000884 <__aeabi_dadd+0x2fc>
 8000a02:	2220      	movs	r2, #32
 8000a04:	464c      	mov	r4, r9
 8000a06:	4640      	mov	r0, r8
 8000a08:	1bd2      	subs	r2, r2, r7
 8000a0a:	4094      	lsls	r4, r2
 8000a0c:	40f8      	lsrs	r0, r7
 8000a0e:	4304      	orrs	r4, r0
 8000a10:	4640      	mov	r0, r8
 8000a12:	4090      	lsls	r0, r2
 8000a14:	1e42      	subs	r2, r0, #1
 8000a16:	4190      	sbcs	r0, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	40fa      	lsrs	r2, r7
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	1889      	adds	r1, r1, r2
 8000a20:	e6ee      	b.n	8000800 <__aeabi_dadd+0x278>
 8000a22:	4c87      	ldr	r4, [pc, #540]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000a24:	42a2      	cmp	r2, r4
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x4a2>
 8000a28:	e6f9      	b.n	800081e <__aeabi_dadd+0x296>
 8000a2a:	1818      	adds	r0, r3, r0
 8000a2c:	4298      	cmp	r0, r3
 8000a2e:	419b      	sbcs	r3, r3
 8000a30:	4449      	add	r1, r9
 8000a32:	425b      	negs	r3, r3
 8000a34:	18cb      	adds	r3, r1, r3
 8000a36:	07dc      	lsls	r4, r3, #31
 8000a38:	0840      	lsrs	r0, r0, #1
 8000a3a:	085b      	lsrs	r3, r3, #1
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	0016      	movs	r6, r2
 8000a40:	4304      	orrs	r4, r0
 8000a42:	e6c6      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a44:	4642      	mov	r2, r8
 8000a46:	1ad4      	subs	r4, r2, r3
 8000a48:	45a0      	cmp	r8, r4
 8000a4a:	4180      	sbcs	r0, r0
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	4240      	negs	r0, r0
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	1a0b      	subs	r3, r1, r0
 8000a54:	469a      	mov	sl, r3
 8000a56:	4665      	mov	r5, ip
 8000a58:	e5ea      	b.n	8000630 <__aeabi_dadd+0xa8>
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	08c0      	lsrs	r0, r0, #3
 8000a60:	075b      	lsls	r3, r3, #29
 8000a62:	4665      	mov	r5, ip
 8000a64:	4303      	orrs	r3, r0
 8000a66:	08d1      	lsrs	r1, r2, #3
 8000a68:	e6bd      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_dadd+0x4e8>
 8000a6e:	e08e      	b.n	8000b8e <__aeabi_dadd+0x606>
 8000a70:	464b      	mov	r3, r9
 8000a72:	4303      	orrs	r3, r0
 8000a74:	d117      	bne.n	8000aa6 <__aeabi_dadd+0x51e>
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	2500      	movs	r5, #0
 8000a7a:	0309      	lsls	r1, r1, #12
 8000a7c:	e6da      	b.n	8000834 <__aeabi_dadd+0x2ac>
 8000a7e:	074a      	lsls	r2, r1, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c9      	lsrs	r1, r1, #3
 8000a86:	e6d1      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a88:	1a1c      	subs	r4, r3, r0
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	419b      	sbcs	r3, r3
 8000a90:	1a89      	subs	r1, r1, r2
 8000a92:	425b      	negs	r3, r3
 8000a94:	1acb      	subs	r3, r1, r3
 8000a96:	469a      	mov	sl, r3
 8000a98:	2601      	movs	r6, #1
 8000a9a:	e5c1      	b.n	8000620 <__aeabi_dadd+0x98>
 8000a9c:	074a      	lsls	r2, r1, #29
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	08c9      	lsrs	r1, r1, #3
 8000aa4:	e69f      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	08d8      	lsrs	r0, r3, #3
 8000aaa:	464b      	mov	r3, r9
 8000aac:	464a      	mov	r2, r9
 8000aae:	075b      	lsls	r3, r3, #29
 8000ab0:	4665      	mov	r5, ip
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	08d1      	lsrs	r1, r2, #3
 8000ab6:	e6b9      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000ab8:	4643      	mov	r3, r8
 8000aba:	08d8      	lsrs	r0, r3, #3
 8000abc:	464b      	mov	r3, r9
 8000abe:	464a      	mov	r2, r9
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	08d1      	lsrs	r1, r2, #3
 8000ac6:	e6b1      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000ac8:	4319      	orrs	r1, r3
 8000aca:	000c      	movs	r4, r1
 8000acc:	1e63      	subs	r3, r4, #1
 8000ace:	419c      	sbcs	r4, r3
 8000ad0:	e6eb      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ad2:	003c      	movs	r4, r7
 8000ad4:	000d      	movs	r5, r1
 8000ad6:	3c20      	subs	r4, #32
 8000ad8:	40e5      	lsrs	r5, r4
 8000ada:	2f20      	cmp	r7, #32
 8000adc:	d003      	beq.n	8000ae6 <__aeabi_dadd+0x55e>
 8000ade:	2440      	movs	r4, #64	; 0x40
 8000ae0:	1be4      	subs	r4, r4, r7
 8000ae2:	40a1      	lsls	r1, r4
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	1e63      	subs	r3, r4, #1
 8000aea:	419c      	sbcs	r4, r3
 8000aec:	432c      	orrs	r4, r5
 8000aee:	e770      	b.n	80009d2 <__aeabi_dadd+0x44a>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d0e1      	beq.n	8000ab8 <__aeabi_dadd+0x530>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4302      	orrs	r2, r0
 8000af8:	d0c1      	beq.n	8000a7e <__aeabi_dadd+0x4f6>
 8000afa:	074a      	lsls	r2, r1, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	0312      	lsls	r2, r2, #12
 8000b06:	4211      	tst	r1, r2
 8000b08:	d008      	beq.n	8000b1c <__aeabi_dadd+0x594>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	08c4      	lsrs	r4, r0, #3
 8000b0e:	4214      	tst	r4, r2
 8000b10:	d104      	bne.n	8000b1c <__aeabi_dadd+0x594>
 8000b12:	4643      	mov	r3, r8
 8000b14:	0021      	movs	r1, r4
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	0742      	lsls	r2, r0, #29
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	0f5a      	lsrs	r2, r3, #29
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	0752      	lsls	r2, r2, #29
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	e681      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000b28:	464b      	mov	r3, r9
 8000b2a:	4303      	orrs	r3, r0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x5a8>
 8000b2e:	e714      	b.n	800095a <__aeabi_dadd+0x3d2>
 8000b30:	464b      	mov	r3, r9
 8000b32:	464a      	mov	r2, r9
 8000b34:	08c0      	lsrs	r0, r0, #3
 8000b36:	075b      	lsls	r3, r3, #29
 8000b38:	4665      	mov	r5, ip
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	08d1      	lsrs	r1, r2, #3
 8000b3e:	e655      	b.n	80007ec <__aeabi_dadd+0x264>
 8000b40:	1ac4      	subs	r4, r0, r3
 8000b42:	45a0      	cmp	r8, r4
 8000b44:	4180      	sbcs	r0, r0
 8000b46:	464b      	mov	r3, r9
 8000b48:	4240      	negs	r0, r0
 8000b4a:	1a59      	subs	r1, r3, r1
 8000b4c:	1a0b      	subs	r3, r1, r0
 8000b4e:	469a      	mov	sl, r3
 8000b50:	4665      	mov	r5, ip
 8000b52:	2601      	movs	r6, #1
 8000b54:	e564      	b.n	8000620 <__aeabi_dadd+0x98>
 8000b56:	1a1c      	subs	r4, r3, r0
 8000b58:	464a      	mov	r2, r9
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	1a8a      	subs	r2, r1, r2
 8000b60:	4240      	negs	r0, r0
 8000b62:	1a12      	subs	r2, r2, r0
 8000b64:	4692      	mov	sl, r2
 8000b66:	0212      	lsls	r2, r2, #8
 8000b68:	d549      	bpl.n	8000bfe <__aeabi_dadd+0x676>
 8000b6a:	4642      	mov	r2, r8
 8000b6c:	1ad4      	subs	r4, r2, r3
 8000b6e:	45a0      	cmp	r8, r4
 8000b70:	4180      	sbcs	r0, r0
 8000b72:	464b      	mov	r3, r9
 8000b74:	4240      	negs	r0, r0
 8000b76:	1a59      	subs	r1, r3, r1
 8000b78:	1a0b      	subs	r3, r1, r0
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	e57f      	b.n	8000680 <__aeabi_dadd+0xf8>
 8000b80:	464b      	mov	r3, r9
 8000b82:	464a      	mov	r2, r9
 8000b84:	08c0      	lsrs	r0, r0, #3
 8000b86:	075b      	lsls	r3, r3, #29
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	08d1      	lsrs	r1, r2, #3
 8000b8c:	e62b      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000b8e:	464a      	mov	r2, r9
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	4302      	orrs	r2, r0
 8000b94:	d138      	bne.n	8000c08 <__aeabi_dadd+0x680>
 8000b96:	074a      	lsls	r2, r1, #29
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e646      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	08c0      	lsrs	r0, r0, #3
 8000ba4:	075b      	lsls	r3, r3, #29
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e61f      	b.n	80007ec <__aeabi_dadd+0x264>
 8000bac:	181c      	adds	r4, r3, r0
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	419b      	sbcs	r3, r3
 8000bb2:	4449      	add	r1, r9
 8000bb4:	468a      	mov	sl, r1
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	449a      	add	sl, r3
 8000bba:	4653      	mov	r3, sl
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	d400      	bmi.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e607      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <__aeabi_dadd+0x6bc>)
 8000bc6:	2601      	movs	r6, #1
 8000bc8:	401a      	ands	r2, r3
 8000bca:	4692      	mov	sl, r2
 8000bcc:	e601      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bce:	003c      	movs	r4, r7
 8000bd0:	000e      	movs	r6, r1
 8000bd2:	3c20      	subs	r4, #32
 8000bd4:	40e6      	lsrs	r6, r4
 8000bd6:	2f20      	cmp	r7, #32
 8000bd8:	d003      	beq.n	8000be2 <__aeabi_dadd+0x65a>
 8000bda:	2440      	movs	r4, #64	; 0x40
 8000bdc:	1be4      	subs	r4, r4, r7
 8000bde:	40a1      	lsls	r1, r4
 8000be0:	430b      	orrs	r3, r1
 8000be2:	001c      	movs	r4, r3
 8000be4:	1e63      	subs	r3, r4, #1
 8000be6:	419c      	sbcs	r4, r3
 8000be8:	4334      	orrs	r4, r6
 8000bea:	e65e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bec:	4443      	add	r3, r8
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	4180      	sbcs	r0, r0
 8000bf2:	4449      	add	r1, r9
 8000bf4:	468a      	mov	sl, r1
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	001c      	movs	r4, r3
 8000bfa:	4482      	add	sl, r0
 8000bfc:	e6bc      	b.n	8000978 <__aeabi_dadd+0x3f0>
 8000bfe:	4653      	mov	r3, sl
 8000c00:	4323      	orrs	r3, r4
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x67e>
 8000c04:	e6a9      	b.n	800095a <__aeabi_dadd+0x3d2>
 8000c06:	e5e4      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000c08:	074a      	lsls	r2, r1, #29
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	08c9      	lsrs	r1, r1, #3
 8000c10:	0312      	lsls	r2, r2, #12
 8000c12:	4211      	tst	r1, r2
 8000c14:	d009      	beq.n	8000c2a <__aeabi_dadd+0x6a2>
 8000c16:	4648      	mov	r0, r9
 8000c18:	08c4      	lsrs	r4, r0, #3
 8000c1a:	4214      	tst	r4, r2
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_dadd+0x6a2>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	4665      	mov	r5, ip
 8000c22:	0021      	movs	r1, r4
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	0742      	lsls	r2, r0, #29
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	0f5a      	lsrs	r2, r3, #29
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	0752      	lsls	r2, r2, #29
 8000c32:	4313      	orrs	r3, r2
 8000c34:	e5fa      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000c36:	2300      	movs	r3, #0
 8000c38:	4a01      	ldr	r2, [pc, #4]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	e540      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	000007ff 	.word	0x000007ff
 8000c44:	ff7fffff 	.word	0xff7fffff

08000c48 <__aeabi_ddiv>:
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	4657      	mov	r7, sl
 8000c4c:	464e      	mov	r6, r9
 8000c4e:	4645      	mov	r5, r8
 8000c50:	46de      	mov	lr, fp
 8000c52:	b5e0      	push	{r5, r6, r7, lr}
 8000c54:	030c      	lsls	r4, r1, #12
 8000c56:	001f      	movs	r7, r3
 8000c58:	004b      	lsls	r3, r1, #1
 8000c5a:	4681      	mov	r9, r0
 8000c5c:	4692      	mov	sl, r2
 8000c5e:	0005      	movs	r5, r0
 8000c60:	b085      	sub	sp, #20
 8000c62:	0b24      	lsrs	r4, r4, #12
 8000c64:	0d5b      	lsrs	r3, r3, #21
 8000c66:	0fce      	lsrs	r6, r1, #31
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_ddiv+0x26>
 8000c6c:	e152      	b.n	8000f14 <__aeabi_ddiv+0x2cc>
 8000c6e:	4ad2      	ldr	r2, [pc, #840]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d100      	bne.n	8000c76 <__aeabi_ddiv+0x2e>
 8000c74:	e16e      	b.n	8000f54 <__aeabi_ddiv+0x30c>
 8000c76:	0f42      	lsrs	r2, r0, #29
 8000c78:	00e4      	lsls	r4, r4, #3
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	4322      	orrs	r2, r4
 8000c82:	4690      	mov	r8, r2
 8000c84:	4acd      	ldr	r2, [pc, #820]	; (8000fbc <__aeabi_ddiv+0x374>)
 8000c86:	00c5      	lsls	r5, r0, #3
 8000c88:	4693      	mov	fp, r2
 8000c8a:	449b      	add	fp, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4699      	mov	r9, r3
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	033c      	lsls	r4, r7, #12
 8000c94:	007b      	lsls	r3, r7, #1
 8000c96:	4650      	mov	r0, sl
 8000c98:	0b24      	lsrs	r4, r4, #12
 8000c9a:	0d5b      	lsrs	r3, r3, #21
 8000c9c:	0fff      	lsrs	r7, r7, #31
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x5c>
 8000ca2:	e11a      	b.n	8000eda <__aeabi_ddiv+0x292>
 8000ca4:	4ac4      	ldr	r2, [pc, #784]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x64>
 8000caa:	e15e      	b.n	8000f6a <__aeabi_ddiv+0x322>
 8000cac:	0f42      	lsrs	r2, r0, #29
 8000cae:	00e4      	lsls	r4, r4, #3
 8000cb0:	4322      	orrs	r2, r4
 8000cb2:	2480      	movs	r4, #128	; 0x80
 8000cb4:	0424      	lsls	r4, r4, #16
 8000cb6:	4314      	orrs	r4, r2
 8000cb8:	4ac0      	ldr	r2, [pc, #768]	; (8000fbc <__aeabi_ddiv+0x374>)
 8000cba:	00c1      	lsls	r1, r0, #3
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	465a      	mov	r2, fp
 8000cc0:	4463      	add	r3, ip
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	0033      	movs	r3, r6
 8000cca:	407b      	eors	r3, r7
 8000ccc:	469a      	mov	sl, r3
 8000cce:	464b      	mov	r3, r9
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d827      	bhi.n	8000d24 <__aeabi_ddiv+0xdc>
 8000cd4:	4aba      	ldr	r2, [pc, #744]	; (8000fc0 <__aeabi_ddiv+0x378>)
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	58d3      	ldr	r3, [r2, r3]
 8000cda:	469f      	mov	pc, r3
 8000cdc:	46b2      	mov	sl, r6
 8000cde:	9b00      	ldr	r3, [sp, #0]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d016      	beq.n	8000d12 <__aeabi_ddiv+0xca>
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d100      	bne.n	8000cea <__aeabi_ddiv+0xa2>
 8000ce8:	e287      	b.n	80011fa <__aeabi_ddiv+0x5b2>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_ddiv+0xa8>
 8000cee:	e0d5      	b.n	8000e9c <__aeabi_ddiv+0x254>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	051b      	lsls	r3, r3, #20
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	4652      	mov	r2, sl
 8000cfc:	07d2      	lsls	r2, r2, #31
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	0028      	movs	r0, r5
 8000d02:	0019      	movs	r1, r3
 8000d04:	b005      	add	sp, #20
 8000d06:	bcf0      	pop	{r4, r5, r6, r7}
 8000d08:	46bb      	mov	fp, r7
 8000d0a:	46b2      	mov	sl, r6
 8000d0c:	46a9      	mov	r9, r5
 8000d0e:	46a0      	mov	r8, r4
 8000d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d12:	2200      	movs	r2, #0
 8000d14:	2500      	movs	r5, #0
 8000d16:	4ba8      	ldr	r3, [pc, #672]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000d18:	e7ed      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000d1a:	46ba      	mov	sl, r7
 8000d1c:	46a0      	mov	r8, r4
 8000d1e:	000d      	movs	r5, r1
 8000d20:	9000      	str	r0, [sp, #0]
 8000d22:	e7dc      	b.n	8000cde <__aeabi_ddiv+0x96>
 8000d24:	4544      	cmp	r4, r8
 8000d26:	d200      	bcs.n	8000d2a <__aeabi_ddiv+0xe2>
 8000d28:	e1c4      	b.n	80010b4 <__aeabi_ddiv+0x46c>
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_ddiv+0xe6>
 8000d2c:	e1bf      	b.n	80010ae <__aeabi_ddiv+0x466>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425b      	negs	r3, r3
 8000d32:	469c      	mov	ip, r3
 8000d34:	002e      	movs	r6, r5
 8000d36:	4640      	mov	r0, r8
 8000d38:	2500      	movs	r5, #0
 8000d3a:	44e3      	add	fp, ip
 8000d3c:	0223      	lsls	r3, r4, #8
 8000d3e:	0e0c      	lsrs	r4, r1, #24
 8000d40:	431c      	orrs	r4, r3
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	4699      	mov	r9, r3
 8000d46:	0423      	lsls	r3, r4, #16
 8000d48:	020a      	lsls	r2, r1, #8
 8000d4a:	0c1f      	lsrs	r7, r3, #16
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	9701      	str	r7, [sp, #4]
 8000d52:	f7ff fa7b 	bl	800024c <__aeabi_uidivmod>
 8000d56:	0002      	movs	r2, r0
 8000d58:	437a      	muls	r2, r7
 8000d5a:	040b      	lsls	r3, r1, #16
 8000d5c:	0c31      	lsrs	r1, r6, #16
 8000d5e:	4680      	mov	r8, r0
 8000d60:	4319      	orrs	r1, r3
 8000d62:	428a      	cmp	r2, r1
 8000d64:	d907      	bls.n	8000d76 <__aeabi_ddiv+0x12e>
 8000d66:	2301      	movs	r3, #1
 8000d68:	425b      	negs	r3, r3
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	1909      	adds	r1, r1, r4
 8000d6e:	44e0      	add	r8, ip
 8000d70:	428c      	cmp	r4, r1
 8000d72:	d800      	bhi.n	8000d76 <__aeabi_ddiv+0x12e>
 8000d74:	e201      	b.n	800117a <__aeabi_ddiv+0x532>
 8000d76:	1a88      	subs	r0, r1, r2
 8000d78:	4649      	mov	r1, r9
 8000d7a:	f7ff fa67 	bl	800024c <__aeabi_uidivmod>
 8000d7e:	9a01      	ldr	r2, [sp, #4]
 8000d80:	0436      	lsls	r6, r6, #16
 8000d82:	4342      	muls	r2, r0
 8000d84:	0409      	lsls	r1, r1, #16
 8000d86:	0c36      	lsrs	r6, r6, #16
 8000d88:	0003      	movs	r3, r0
 8000d8a:	430e      	orrs	r6, r1
 8000d8c:	42b2      	cmp	r2, r6
 8000d8e:	d904      	bls.n	8000d9a <__aeabi_ddiv+0x152>
 8000d90:	1936      	adds	r6, r6, r4
 8000d92:	3b01      	subs	r3, #1
 8000d94:	42b4      	cmp	r4, r6
 8000d96:	d800      	bhi.n	8000d9a <__aeabi_ddiv+0x152>
 8000d98:	e1e9      	b.n	800116e <__aeabi_ddiv+0x526>
 8000d9a:	1ab0      	subs	r0, r6, r2
 8000d9c:	4642      	mov	r2, r8
 8000d9e:	9e00      	ldr	r6, [sp, #0]
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	431a      	orrs	r2, r3
 8000da4:	0c33      	lsrs	r3, r6, #16
 8000da6:	001f      	movs	r7, r3
 8000da8:	0c11      	lsrs	r1, r2, #16
 8000daa:	4690      	mov	r8, r2
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	0413      	lsls	r3, r2, #16
 8000db0:	0432      	lsls	r2, r6, #16
 8000db2:	0c16      	lsrs	r6, r2, #16
 8000db4:	0032      	movs	r2, r6
 8000db6:	0c1b      	lsrs	r3, r3, #16
 8000db8:	435a      	muls	r2, r3
 8000dba:	9603      	str	r6, [sp, #12]
 8000dbc:	437b      	muls	r3, r7
 8000dbe:	434e      	muls	r6, r1
 8000dc0:	4379      	muls	r1, r7
 8000dc2:	0c17      	lsrs	r7, r2, #16
 8000dc4:	46bc      	mov	ip, r7
 8000dc6:	199b      	adds	r3, r3, r6
 8000dc8:	4463      	add	r3, ip
 8000dca:	429e      	cmp	r6, r3
 8000dcc:	d903      	bls.n	8000dd6 <__aeabi_ddiv+0x18e>
 8000dce:	2680      	movs	r6, #128	; 0x80
 8000dd0:	0276      	lsls	r6, r6, #9
 8000dd2:	46b4      	mov	ip, r6
 8000dd4:	4461      	add	r1, ip
 8000dd6:	0c1e      	lsrs	r6, r3, #16
 8000dd8:	1871      	adds	r1, r6, r1
 8000dda:	0416      	lsls	r6, r2, #16
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	0c36      	lsrs	r6, r6, #16
 8000de0:	199e      	adds	r6, r3, r6
 8000de2:	4288      	cmp	r0, r1
 8000de4:	d302      	bcc.n	8000dec <__aeabi_ddiv+0x1a4>
 8000de6:	d112      	bne.n	8000e0e <__aeabi_ddiv+0x1c6>
 8000de8:	42b5      	cmp	r5, r6
 8000dea:	d210      	bcs.n	8000e0e <__aeabi_ddiv+0x1c6>
 8000dec:	4643      	mov	r3, r8
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	9b00      	ldr	r3, [sp, #0]
 8000df2:	469c      	mov	ip, r3
 8000df4:	4465      	add	r5, ip
 8000df6:	001f      	movs	r7, r3
 8000df8:	429d      	cmp	r5, r3
 8000dfa:	419b      	sbcs	r3, r3
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	191b      	adds	r3, r3, r4
 8000e00:	18c0      	adds	r0, r0, r3
 8000e02:	4284      	cmp	r4, r0
 8000e04:	d200      	bcs.n	8000e08 <__aeabi_ddiv+0x1c0>
 8000e06:	e19e      	b.n	8001146 <__aeabi_ddiv+0x4fe>
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x1c4>
 8000e0a:	e199      	b.n	8001140 <__aeabi_ddiv+0x4f8>
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	1bae      	subs	r6, r5, r6
 8000e10:	42b5      	cmp	r5, r6
 8000e12:	41ad      	sbcs	r5, r5
 8000e14:	1a40      	subs	r0, r0, r1
 8000e16:	426d      	negs	r5, r5
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	4284      	cmp	r4, r0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x1d8>
 8000e1e:	e1d2      	b.n	80011c6 <__aeabi_ddiv+0x57e>
 8000e20:	4649      	mov	r1, r9
 8000e22:	f7ff fa13 	bl	800024c <__aeabi_uidivmod>
 8000e26:	9a01      	ldr	r2, [sp, #4]
 8000e28:	040b      	lsls	r3, r1, #16
 8000e2a:	4342      	muls	r2, r0
 8000e2c:	0c31      	lsrs	r1, r6, #16
 8000e2e:	0005      	movs	r5, r0
 8000e30:	4319      	orrs	r1, r3
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d900      	bls.n	8000e38 <__aeabi_ddiv+0x1f0>
 8000e36:	e16c      	b.n	8001112 <__aeabi_ddiv+0x4ca>
 8000e38:	1a88      	subs	r0, r1, r2
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	f7ff fa06 	bl	800024c <__aeabi_uidivmod>
 8000e40:	9a01      	ldr	r2, [sp, #4]
 8000e42:	0436      	lsls	r6, r6, #16
 8000e44:	4342      	muls	r2, r0
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	0c36      	lsrs	r6, r6, #16
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	430e      	orrs	r6, r1
 8000e4e:	42b2      	cmp	r2, r6
 8000e50:	d900      	bls.n	8000e54 <__aeabi_ddiv+0x20c>
 8000e52:	e153      	b.n	80010fc <__aeabi_ddiv+0x4b4>
 8000e54:	9803      	ldr	r0, [sp, #12]
 8000e56:	1ab6      	subs	r6, r6, r2
 8000e58:	0002      	movs	r2, r0
 8000e5a:	042d      	lsls	r5, r5, #16
 8000e5c:	431d      	orrs	r5, r3
 8000e5e:	9f02      	ldr	r7, [sp, #8]
 8000e60:	042b      	lsls	r3, r5, #16
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	435a      	muls	r2, r3
 8000e66:	437b      	muls	r3, r7
 8000e68:	469c      	mov	ip, r3
 8000e6a:	0c29      	lsrs	r1, r5, #16
 8000e6c:	4348      	muls	r0, r1
 8000e6e:	0c13      	lsrs	r3, r2, #16
 8000e70:	4484      	add	ip, r0
 8000e72:	4463      	add	r3, ip
 8000e74:	4379      	muls	r1, r7
 8000e76:	4298      	cmp	r0, r3
 8000e78:	d903      	bls.n	8000e82 <__aeabi_ddiv+0x23a>
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	0240      	lsls	r0, r0, #9
 8000e7e:	4684      	mov	ip, r0
 8000e80:	4461      	add	r1, ip
 8000e82:	0c18      	lsrs	r0, r3, #16
 8000e84:	0412      	lsls	r2, r2, #16
 8000e86:	041b      	lsls	r3, r3, #16
 8000e88:	0c12      	lsrs	r2, r2, #16
 8000e8a:	1840      	adds	r0, r0, r1
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	4286      	cmp	r6, r0
 8000e90:	d200      	bcs.n	8000e94 <__aeabi_ddiv+0x24c>
 8000e92:	e100      	b.n	8001096 <__aeabi_ddiv+0x44e>
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0x250>
 8000e96:	e0fb      	b.n	8001090 <__aeabi_ddiv+0x448>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	431d      	orrs	r5, r3
 8000e9c:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <__aeabi_ddiv+0x37c>)
 8000e9e:	445b      	add	r3, fp
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dc00      	bgt.n	8000ea6 <__aeabi_ddiv+0x25e>
 8000ea4:	e0aa      	b.n	8000ffc <__aeabi_ddiv+0x3b4>
 8000ea6:	076a      	lsls	r2, r5, #29
 8000ea8:	d000      	beq.n	8000eac <__aeabi_ddiv+0x264>
 8000eaa:	e13d      	b.n	8001128 <__aeabi_ddiv+0x4e0>
 8000eac:	08e9      	lsrs	r1, r5, #3
 8000eae:	4642      	mov	r2, r8
 8000eb0:	01d2      	lsls	r2, r2, #7
 8000eb2:	d506      	bpl.n	8000ec2 <__aeabi_ddiv+0x27a>
 8000eb4:	4642      	mov	r2, r8
 8000eb6:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <__aeabi_ddiv+0x380>)
 8000eb8:	401a      	ands	r2, r3
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	445b      	add	r3, fp
 8000ec2:	4a42      	ldr	r2, [pc, #264]	; (8000fcc <__aeabi_ddiv+0x384>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	dd00      	ble.n	8000eca <__aeabi_ddiv+0x282>
 8000ec8:	e723      	b.n	8000d12 <__aeabi_ddiv+0xca>
 8000eca:	4642      	mov	r2, r8
 8000ecc:	055b      	lsls	r3, r3, #21
 8000ece:	0755      	lsls	r5, r2, #29
 8000ed0:	0252      	lsls	r2, r2, #9
 8000ed2:	430d      	orrs	r5, r1
 8000ed4:	0b12      	lsrs	r2, r2, #12
 8000ed6:	0d5b      	lsrs	r3, r3, #21
 8000ed8:	e70d      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000eda:	4651      	mov	r1, sl
 8000edc:	4321      	orrs	r1, r4
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x29a>
 8000ee0:	e07c      	b.n	8000fdc <__aeabi_ddiv+0x394>
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_ddiv+0x2a0>
 8000ee6:	e0fb      	b.n	80010e0 <__aeabi_ddiv+0x498>
 8000ee8:	0020      	movs	r0, r4
 8000eea:	f001 fa1b 	bl	8002324 <__clzsi2>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	3a0b      	subs	r2, #11
 8000ef2:	231d      	movs	r3, #29
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	0001      	movs	r1, r0
 8000efa:	40da      	lsrs	r2, r3
 8000efc:	4653      	mov	r3, sl
 8000efe:	3908      	subs	r1, #8
 8000f00:	408b      	lsls	r3, r1
 8000f02:	408c      	lsls	r4, r1
 8000f04:	0019      	movs	r1, r3
 8000f06:	4314      	orrs	r4, r2
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <__aeabi_ddiv+0x388>)
 8000f0a:	4458      	add	r0, fp
 8000f0c:	469b      	mov	fp, r3
 8000f0e:	4483      	add	fp, r0
 8000f10:	2000      	movs	r0, #0
 8000f12:	e6d9      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f14:	0003      	movs	r3, r0
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d044      	beq.n	8000fa6 <__aeabi_ddiv+0x35e>
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0x2da>
 8000f20:	e0cf      	b.n	80010c2 <__aeabi_ddiv+0x47a>
 8000f22:	0020      	movs	r0, r4
 8000f24:	f001 f9fe 	bl	8002324 <__clzsi2>
 8000f28:	0001      	movs	r1, r0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	390b      	subs	r1, #11
 8000f2e:	231d      	movs	r3, #29
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	4649      	mov	r1, r9
 8000f34:	0010      	movs	r0, r2
 8000f36:	40d9      	lsrs	r1, r3
 8000f38:	3808      	subs	r0, #8
 8000f3a:	4084      	lsls	r4, r0
 8000f3c:	000b      	movs	r3, r1
 8000f3e:	464d      	mov	r5, r9
 8000f40:	4323      	orrs	r3, r4
 8000f42:	4698      	mov	r8, r3
 8000f44:	4085      	lsls	r5, r0
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <__aeabi_ddiv+0x38c>)
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	469b      	mov	fp, r3
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4699      	mov	r9, r3
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	e69e      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000f54:	0002      	movs	r2, r0
 8000f56:	4322      	orrs	r2, r4
 8000f58:	4690      	mov	r8, r2
 8000f5a:	d11d      	bne.n	8000f98 <__aeabi_ddiv+0x350>
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	469b      	mov	fp, r3
 8000f60:	2302      	movs	r3, #2
 8000f62:	2500      	movs	r5, #0
 8000f64:	4691      	mov	r9, r2
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	e693      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000f6a:	4651      	mov	r1, sl
 8000f6c:	4321      	orrs	r1, r4
 8000f6e:	d109      	bne.n	8000f84 <__aeabi_ddiv+0x33c>
 8000f70:	2302      	movs	r3, #2
 8000f72:	464a      	mov	r2, r9
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <__aeabi_ddiv+0x390>)
 8000f78:	4691      	mov	r9, r2
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2002      	movs	r0, #2
 8000f80:	44e3      	add	fp, ip
 8000f82:	e6a1      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f84:	2303      	movs	r3, #3
 8000f86:	464a      	mov	r2, r9
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <__aeabi_ddiv+0x390>)
 8000f8c:	4691      	mov	r9, r2
 8000f8e:	469c      	mov	ip, r3
 8000f90:	4651      	mov	r1, sl
 8000f92:	2003      	movs	r0, #3
 8000f94:	44e3      	add	fp, ip
 8000f96:	e697      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f98:	220c      	movs	r2, #12
 8000f9a:	469b      	mov	fp, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	46a0      	mov	r8, r4
 8000fa0:	4691      	mov	r9, r2
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	e675      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	4699      	mov	r9, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	469b      	mov	fp, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	e66d      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	000007ff 	.word	0x000007ff
 8000fbc:	fffffc01 	.word	0xfffffc01
 8000fc0:	08010cd0 	.word	0x08010cd0
 8000fc4:	000003ff 	.word	0x000003ff
 8000fc8:	feffffff 	.word	0xfeffffff
 8000fcc:	000007fe 	.word	0x000007fe
 8000fd0:	000003f3 	.word	0x000003f3
 8000fd4:	fffffc0d 	.word	0xfffffc0d
 8000fd8:	fffff801 	.word	0xfffff801
 8000fdc:	464a      	mov	r2, r9
 8000fde:	2301      	movs	r3, #1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e66e      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000fea:	2300      	movs	r3, #0
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	469a      	mov	sl, r3
 8000ff0:	2500      	movs	r5, #0
 8000ff2:	4b88      	ldr	r3, [pc, #544]	; (8001214 <__aeabi_ddiv+0x5cc>)
 8000ff4:	0312      	lsls	r2, r2, #12
 8000ff6:	e67e      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000ff8:	2501      	movs	r5, #1
 8000ffa:	426d      	negs	r5, r5
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	2a38      	cmp	r2, #56	; 0x38
 8001002:	dd00      	ble.n	8001006 <__aeabi_ddiv+0x3be>
 8001004:	e674      	b.n	8000cf0 <__aeabi_ddiv+0xa8>
 8001006:	2a1f      	cmp	r2, #31
 8001008:	dc00      	bgt.n	800100c <__aeabi_ddiv+0x3c4>
 800100a:	e0bd      	b.n	8001188 <__aeabi_ddiv+0x540>
 800100c:	211f      	movs	r1, #31
 800100e:	4249      	negs	r1, r1
 8001010:	1acb      	subs	r3, r1, r3
 8001012:	4641      	mov	r1, r8
 8001014:	40d9      	lsrs	r1, r3
 8001016:	000b      	movs	r3, r1
 8001018:	2a20      	cmp	r2, #32
 800101a:	d004      	beq.n	8001026 <__aeabi_ddiv+0x3de>
 800101c:	4641      	mov	r1, r8
 800101e:	4a7e      	ldr	r2, [pc, #504]	; (8001218 <__aeabi_ddiv+0x5d0>)
 8001020:	445a      	add	r2, fp
 8001022:	4091      	lsls	r1, r2
 8001024:	430d      	orrs	r5, r1
 8001026:	0029      	movs	r1, r5
 8001028:	1e4a      	subs	r2, r1, #1
 800102a:	4191      	sbcs	r1, r2
 800102c:	4319      	orrs	r1, r3
 800102e:	2307      	movs	r3, #7
 8001030:	001d      	movs	r5, r3
 8001032:	2200      	movs	r2, #0
 8001034:	400d      	ands	r5, r1
 8001036:	420b      	tst	r3, r1
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x3f4>
 800103a:	e0d0      	b.n	80011de <__aeabi_ddiv+0x596>
 800103c:	220f      	movs	r2, #15
 800103e:	2300      	movs	r3, #0
 8001040:	400a      	ands	r2, r1
 8001042:	2a04      	cmp	r2, #4
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0x400>
 8001046:	e0c7      	b.n	80011d8 <__aeabi_ddiv+0x590>
 8001048:	1d0a      	adds	r2, r1, #4
 800104a:	428a      	cmp	r2, r1
 800104c:	4189      	sbcs	r1, r1
 800104e:	4249      	negs	r1, r1
 8001050:	185b      	adds	r3, r3, r1
 8001052:	0011      	movs	r1, r2
 8001054:	021a      	lsls	r2, r3, #8
 8001056:	d400      	bmi.n	800105a <__aeabi_ddiv+0x412>
 8001058:	e0be      	b.n	80011d8 <__aeabi_ddiv+0x590>
 800105a:	2301      	movs	r3, #1
 800105c:	2200      	movs	r2, #0
 800105e:	2500      	movs	r5, #0
 8001060:	e649      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	4643      	mov	r3, r8
 8001066:	0312      	lsls	r2, r2, #12
 8001068:	4213      	tst	r3, r2
 800106a:	d008      	beq.n	800107e <__aeabi_ddiv+0x436>
 800106c:	4214      	tst	r4, r2
 800106e:	d106      	bne.n	800107e <__aeabi_ddiv+0x436>
 8001070:	4322      	orrs	r2, r4
 8001072:	0312      	lsls	r2, r2, #12
 8001074:	46ba      	mov	sl, r7
 8001076:	000d      	movs	r5, r1
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <__aeabi_ddiv+0x5cc>)
 800107a:	0b12      	lsrs	r2, r2, #12
 800107c:	e63b      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	4643      	mov	r3, r8
 8001082:	0312      	lsls	r2, r2, #12
 8001084:	431a      	orrs	r2, r3
 8001086:	0312      	lsls	r2, r2, #12
 8001088:	46b2      	mov	sl, r6
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <__aeabi_ddiv+0x5cc>)
 800108c:	0b12      	lsrs	r2, r2, #12
 800108e:	e632      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x44e>
 8001094:	e702      	b.n	8000e9c <__aeabi_ddiv+0x254>
 8001096:	19a6      	adds	r6, r4, r6
 8001098:	1e6a      	subs	r2, r5, #1
 800109a:	42a6      	cmp	r6, r4
 800109c:	d200      	bcs.n	80010a0 <__aeabi_ddiv+0x458>
 800109e:	e089      	b.n	80011b4 <__aeabi_ddiv+0x56c>
 80010a0:	4286      	cmp	r6, r0
 80010a2:	d200      	bcs.n	80010a6 <__aeabi_ddiv+0x45e>
 80010a4:	e09f      	b.n	80011e6 <__aeabi_ddiv+0x59e>
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0x462>
 80010a8:	e0af      	b.n	800120a <__aeabi_ddiv+0x5c2>
 80010aa:	0015      	movs	r5, r2
 80010ac:	e6f4      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80010ae:	42a9      	cmp	r1, r5
 80010b0:	d900      	bls.n	80010b4 <__aeabi_ddiv+0x46c>
 80010b2:	e63c      	b.n	8000d2e <__aeabi_ddiv+0xe6>
 80010b4:	4643      	mov	r3, r8
 80010b6:	07de      	lsls	r6, r3, #31
 80010b8:	0858      	lsrs	r0, r3, #1
 80010ba:	086b      	lsrs	r3, r5, #1
 80010bc:	431e      	orrs	r6, r3
 80010be:	07ed      	lsls	r5, r5, #31
 80010c0:	e63c      	b.n	8000d3c <__aeabi_ddiv+0xf4>
 80010c2:	f001 f92f 	bl	8002324 <__clzsi2>
 80010c6:	0001      	movs	r1, r0
 80010c8:	0002      	movs	r2, r0
 80010ca:	3115      	adds	r1, #21
 80010cc:	3220      	adds	r2, #32
 80010ce:	291c      	cmp	r1, #28
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_ddiv+0x48c>
 80010d2:	e72c      	b.n	8000f2e <__aeabi_ddiv+0x2e6>
 80010d4:	464b      	mov	r3, r9
 80010d6:	3808      	subs	r0, #8
 80010d8:	4083      	lsls	r3, r0
 80010da:	2500      	movs	r5, #0
 80010dc:	4698      	mov	r8, r3
 80010de:	e732      	b.n	8000f46 <__aeabi_ddiv+0x2fe>
 80010e0:	f001 f920 	bl	8002324 <__clzsi2>
 80010e4:	0003      	movs	r3, r0
 80010e6:	001a      	movs	r2, r3
 80010e8:	3215      	adds	r2, #21
 80010ea:	3020      	adds	r0, #32
 80010ec:	2a1c      	cmp	r2, #28
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_ddiv+0x4aa>
 80010f0:	e6ff      	b.n	8000ef2 <__aeabi_ddiv+0x2aa>
 80010f2:	4654      	mov	r4, sl
 80010f4:	3b08      	subs	r3, #8
 80010f6:	2100      	movs	r1, #0
 80010f8:	409c      	lsls	r4, r3
 80010fa:	e705      	b.n	8000f08 <__aeabi_ddiv+0x2c0>
 80010fc:	1936      	adds	r6, r6, r4
 80010fe:	3b01      	subs	r3, #1
 8001100:	42b4      	cmp	r4, r6
 8001102:	d900      	bls.n	8001106 <__aeabi_ddiv+0x4be>
 8001104:	e6a6      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 8001106:	42b2      	cmp	r2, r6
 8001108:	d800      	bhi.n	800110c <__aeabi_ddiv+0x4c4>
 800110a:	e6a3      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 800110c:	1e83      	subs	r3, r0, #2
 800110e:	1936      	adds	r6, r6, r4
 8001110:	e6a0      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 8001112:	1909      	adds	r1, r1, r4
 8001114:	3d01      	subs	r5, #1
 8001116:	428c      	cmp	r4, r1
 8001118:	d900      	bls.n	800111c <__aeabi_ddiv+0x4d4>
 800111a:	e68d      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 800111c:	428a      	cmp	r2, r1
 800111e:	d800      	bhi.n	8001122 <__aeabi_ddiv+0x4da>
 8001120:	e68a      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 8001122:	1e85      	subs	r5, r0, #2
 8001124:	1909      	adds	r1, r1, r4
 8001126:	e687      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 8001128:	220f      	movs	r2, #15
 800112a:	402a      	ands	r2, r5
 800112c:	2a04      	cmp	r2, #4
 800112e:	d100      	bne.n	8001132 <__aeabi_ddiv+0x4ea>
 8001130:	e6bc      	b.n	8000eac <__aeabi_ddiv+0x264>
 8001132:	1d29      	adds	r1, r5, #4
 8001134:	42a9      	cmp	r1, r5
 8001136:	41ad      	sbcs	r5, r5
 8001138:	426d      	negs	r5, r5
 800113a:	08c9      	lsrs	r1, r1, #3
 800113c:	44a8      	add	r8, r5
 800113e:	e6b6      	b.n	8000eae <__aeabi_ddiv+0x266>
 8001140:	42af      	cmp	r7, r5
 8001142:	d900      	bls.n	8001146 <__aeabi_ddiv+0x4fe>
 8001144:	e662      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 8001146:	4281      	cmp	r1, r0
 8001148:	d804      	bhi.n	8001154 <__aeabi_ddiv+0x50c>
 800114a:	d000      	beq.n	800114e <__aeabi_ddiv+0x506>
 800114c:	e65e      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 800114e:	42ae      	cmp	r6, r5
 8001150:	d800      	bhi.n	8001154 <__aeabi_ddiv+0x50c>
 8001152:	e65b      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 8001154:	2302      	movs	r3, #2
 8001156:	425b      	negs	r3, r3
 8001158:	469c      	mov	ip, r3
 800115a:	9b00      	ldr	r3, [sp, #0]
 800115c:	44e0      	add	r8, ip
 800115e:	469c      	mov	ip, r3
 8001160:	4465      	add	r5, ip
 8001162:	429d      	cmp	r5, r3
 8001164:	419b      	sbcs	r3, r3
 8001166:	425b      	negs	r3, r3
 8001168:	191b      	adds	r3, r3, r4
 800116a:	18c0      	adds	r0, r0, r3
 800116c:	e64f      	b.n	8000e0e <__aeabi_ddiv+0x1c6>
 800116e:	42b2      	cmp	r2, r6
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x52c>
 8001172:	e612      	b.n	8000d9a <__aeabi_ddiv+0x152>
 8001174:	1e83      	subs	r3, r0, #2
 8001176:	1936      	adds	r6, r6, r4
 8001178:	e60f      	b.n	8000d9a <__aeabi_ddiv+0x152>
 800117a:	428a      	cmp	r2, r1
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x538>
 800117e:	e5fa      	b.n	8000d76 <__aeabi_ddiv+0x12e>
 8001180:	1e83      	subs	r3, r0, #2
 8001182:	4698      	mov	r8, r3
 8001184:	1909      	adds	r1, r1, r4
 8001186:	e5f6      	b.n	8000d76 <__aeabi_ddiv+0x12e>
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <__aeabi_ddiv+0x5d4>)
 800118a:	0028      	movs	r0, r5
 800118c:	445b      	add	r3, fp
 800118e:	4641      	mov	r1, r8
 8001190:	409d      	lsls	r5, r3
 8001192:	4099      	lsls	r1, r3
 8001194:	40d0      	lsrs	r0, r2
 8001196:	1e6b      	subs	r3, r5, #1
 8001198:	419d      	sbcs	r5, r3
 800119a:	4643      	mov	r3, r8
 800119c:	4301      	orrs	r1, r0
 800119e:	4329      	orrs	r1, r5
 80011a0:	40d3      	lsrs	r3, r2
 80011a2:	074a      	lsls	r2, r1, #29
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x560>
 80011a6:	e755      	b.n	8001054 <__aeabi_ddiv+0x40c>
 80011a8:	220f      	movs	r2, #15
 80011aa:	400a      	ands	r2, r1
 80011ac:	2a04      	cmp	r2, #4
 80011ae:	d000      	beq.n	80011b2 <__aeabi_ddiv+0x56a>
 80011b0:	e74a      	b.n	8001048 <__aeabi_ddiv+0x400>
 80011b2:	e74f      	b.n	8001054 <__aeabi_ddiv+0x40c>
 80011b4:	0015      	movs	r5, r2
 80011b6:	4286      	cmp	r6, r0
 80011b8:	d000      	beq.n	80011bc <__aeabi_ddiv+0x574>
 80011ba:	e66d      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80011bc:	9a00      	ldr	r2, [sp, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d000      	beq.n	80011c4 <__aeabi_ddiv+0x57c>
 80011c2:	e669      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80011c4:	e66a      	b.n	8000e9c <__aeabi_ddiv+0x254>
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <__aeabi_ddiv+0x5d8>)
 80011c8:	445b      	add	r3, fp
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc00      	bgt.n	80011d0 <__aeabi_ddiv+0x588>
 80011ce:	e713      	b.n	8000ff8 <__aeabi_ddiv+0x3b0>
 80011d0:	2501      	movs	r5, #1
 80011d2:	2100      	movs	r1, #0
 80011d4:	44a8      	add	r8, r5
 80011d6:	e66a      	b.n	8000eae <__aeabi_ddiv+0x266>
 80011d8:	075d      	lsls	r5, r3, #29
 80011da:	025b      	lsls	r3, r3, #9
 80011dc:	0b1a      	lsrs	r2, r3, #12
 80011de:	08c9      	lsrs	r1, r1, #3
 80011e0:	2300      	movs	r3, #0
 80011e2:	430d      	orrs	r5, r1
 80011e4:	e587      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 80011e6:	9900      	ldr	r1, [sp, #0]
 80011e8:	3d02      	subs	r5, #2
 80011ea:	004a      	lsls	r2, r1, #1
 80011ec:	428a      	cmp	r2, r1
 80011ee:	41bf      	sbcs	r7, r7
 80011f0:	427f      	negs	r7, r7
 80011f2:	193f      	adds	r7, r7, r4
 80011f4:	19f6      	adds	r6, r6, r7
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	e7dd      	b.n	80011b6 <__aeabi_ddiv+0x56e>
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	4643      	mov	r3, r8
 80011fe:	0312      	lsls	r2, r2, #12
 8001200:	431a      	orrs	r2, r3
 8001202:	0312      	lsls	r2, r2, #12
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <__aeabi_ddiv+0x5cc>)
 8001206:	0b12      	lsrs	r2, r2, #12
 8001208:	e575      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 800120a:	9900      	ldr	r1, [sp, #0]
 800120c:	4299      	cmp	r1, r3
 800120e:	d3ea      	bcc.n	80011e6 <__aeabi_ddiv+0x59e>
 8001210:	0015      	movs	r5, r2
 8001212:	e7d3      	b.n	80011bc <__aeabi_ddiv+0x574>
 8001214:	000007ff 	.word	0x000007ff
 8001218:	0000043e 	.word	0x0000043e
 800121c:	0000041e 	.word	0x0000041e
 8001220:	000003ff 	.word	0x000003ff

08001224 <__eqdf2>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	464e      	mov	r6, r9
 8001228:	4645      	mov	r5, r8
 800122a:	46de      	mov	lr, fp
 800122c:	4657      	mov	r7, sl
 800122e:	4690      	mov	r8, r2
 8001230:	b5e0      	push	{r5, r6, r7, lr}
 8001232:	0017      	movs	r7, r2
 8001234:	031a      	lsls	r2, r3, #12
 8001236:	0b12      	lsrs	r2, r2, #12
 8001238:	0005      	movs	r5, r0
 800123a:	4684      	mov	ip, r0
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <__eqdf2+0x80>)
 800123e:	030e      	lsls	r6, r1, #12
 8001240:	004c      	lsls	r4, r1, #1
 8001242:	4691      	mov	r9, r2
 8001244:	005a      	lsls	r2, r3, #1
 8001246:	0fdb      	lsrs	r3, r3, #31
 8001248:	469b      	mov	fp, r3
 800124a:	0b36      	lsrs	r6, r6, #12
 800124c:	0d64      	lsrs	r4, r4, #21
 800124e:	0fc9      	lsrs	r1, r1, #31
 8001250:	0d52      	lsrs	r2, r2, #21
 8001252:	4284      	cmp	r4, r0
 8001254:	d019      	beq.n	800128a <__eqdf2+0x66>
 8001256:	4282      	cmp	r2, r0
 8001258:	d010      	beq.n	800127c <__eqdf2+0x58>
 800125a:	2001      	movs	r0, #1
 800125c:	4294      	cmp	r4, r2
 800125e:	d10e      	bne.n	800127e <__eqdf2+0x5a>
 8001260:	454e      	cmp	r6, r9
 8001262:	d10c      	bne.n	800127e <__eqdf2+0x5a>
 8001264:	2001      	movs	r0, #1
 8001266:	45c4      	cmp	ip, r8
 8001268:	d109      	bne.n	800127e <__eqdf2+0x5a>
 800126a:	4559      	cmp	r1, fp
 800126c:	d017      	beq.n	800129e <__eqdf2+0x7a>
 800126e:	2c00      	cmp	r4, #0
 8001270:	d105      	bne.n	800127e <__eqdf2+0x5a>
 8001272:	0030      	movs	r0, r6
 8001274:	4328      	orrs	r0, r5
 8001276:	1e43      	subs	r3, r0, #1
 8001278:	4198      	sbcs	r0, r3
 800127a:	e000      	b.n	800127e <__eqdf2+0x5a>
 800127c:	2001      	movs	r0, #1
 800127e:	bcf0      	pop	{r4, r5, r6, r7}
 8001280:	46bb      	mov	fp, r7
 8001282:	46b2      	mov	sl, r6
 8001284:	46a9      	mov	r9, r5
 8001286:	46a0      	mov	r8, r4
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128a:	0033      	movs	r3, r6
 800128c:	2001      	movs	r0, #1
 800128e:	432b      	orrs	r3, r5
 8001290:	d1f5      	bne.n	800127e <__eqdf2+0x5a>
 8001292:	42a2      	cmp	r2, r4
 8001294:	d1f3      	bne.n	800127e <__eqdf2+0x5a>
 8001296:	464b      	mov	r3, r9
 8001298:	433b      	orrs	r3, r7
 800129a:	d1f0      	bne.n	800127e <__eqdf2+0x5a>
 800129c:	e7e2      	b.n	8001264 <__eqdf2+0x40>
 800129e:	2000      	movs	r0, #0
 80012a0:	e7ed      	b.n	800127e <__eqdf2+0x5a>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__gedf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	4647      	mov	r7, r8
 80012ac:	46ce      	mov	lr, r9
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	0016      	movs	r6, r2
 80012b4:	031b      	lsls	r3, r3, #12
 80012b6:	0b1b      	lsrs	r3, r3, #12
 80012b8:	4d2d      	ldr	r5, [pc, #180]	; (8001370 <__gedf2+0xc8>)
 80012ba:	004a      	lsls	r2, r1, #1
 80012bc:	4699      	mov	r9, r3
 80012be:	b580      	push	{r7, lr}
 80012c0:	0043      	lsls	r3, r0, #1
 80012c2:	030f      	lsls	r7, r1, #12
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d021      	beq.n	800131a <__gedf2+0x72>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d013      	beq.n	8001302 <__gedf2+0x5a>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d122      	bne.n	8001324 <__gedf2+0x7c>
 80012de:	433c      	orrs	r4, r7
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <__gedf2+0x42>
 80012e4:	464d      	mov	r5, r9
 80012e6:	432e      	orrs	r6, r5
 80012e8:	d022      	beq.n	8001330 <__gedf2+0x88>
 80012ea:	2c00      	cmp	r4, #0
 80012ec:	d010      	beq.n	8001310 <__gedf2+0x68>
 80012ee:	4281      	cmp	r1, r0
 80012f0:	d022      	beq.n	8001338 <__gedf2+0x90>
 80012f2:	2002      	movs	r0, #2
 80012f4:	3901      	subs	r1, #1
 80012f6:	4008      	ands	r0, r1
 80012f8:	3801      	subs	r0, #1
 80012fa:	bcc0      	pop	{r6, r7}
 80012fc:	46b9      	mov	r9, r7
 80012fe:	46b0      	mov	r8, r6
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001302:	464d      	mov	r5, r9
 8001304:	432e      	orrs	r6, r5
 8001306:	d129      	bne.n	800135c <__gedf2+0xb4>
 8001308:	2a00      	cmp	r2, #0
 800130a:	d1f0      	bne.n	80012ee <__gedf2+0x46>
 800130c:	433c      	orrs	r4, r7
 800130e:	d1ee      	bne.n	80012ee <__gedf2+0x46>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f2      	bne.n	80012fa <__gedf2+0x52>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7ef      	b.n	80012fa <__gedf2+0x52>
 800131a:	003d      	movs	r5, r7
 800131c:	4325      	orrs	r5, r4
 800131e:	d11d      	bne.n	800135c <__gedf2+0xb4>
 8001320:	4293      	cmp	r3, r2
 8001322:	d0ee      	beq.n	8001302 <__gedf2+0x5a>
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e2      	bne.n	80012ee <__gedf2+0x46>
 8001328:	464c      	mov	r4, r9
 800132a:	4326      	orrs	r6, r4
 800132c:	d1df      	bne.n	80012ee <__gedf2+0x46>
 800132e:	e7e0      	b.n	80012f2 <__gedf2+0x4a>
 8001330:	2000      	movs	r0, #0
 8001332:	2c00      	cmp	r4, #0
 8001334:	d0e1      	beq.n	80012fa <__gedf2+0x52>
 8001336:	e7dc      	b.n	80012f2 <__gedf2+0x4a>
 8001338:	429a      	cmp	r2, r3
 800133a:	dc0a      	bgt.n	8001352 <__gedf2+0xaa>
 800133c:	dbe8      	blt.n	8001310 <__gedf2+0x68>
 800133e:	454f      	cmp	r7, r9
 8001340:	d8d7      	bhi.n	80012f2 <__gedf2+0x4a>
 8001342:	d00e      	beq.n	8001362 <__gedf2+0xba>
 8001344:	2000      	movs	r0, #0
 8001346:	454f      	cmp	r7, r9
 8001348:	d2d7      	bcs.n	80012fa <__gedf2+0x52>
 800134a:	2900      	cmp	r1, #0
 800134c:	d0e2      	beq.n	8001314 <__gedf2+0x6c>
 800134e:	0008      	movs	r0, r1
 8001350:	e7d3      	b.n	80012fa <__gedf2+0x52>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	0040      	lsls	r0, r0, #1
 8001358:	3801      	subs	r0, #1
 800135a:	e7ce      	b.n	80012fa <__gedf2+0x52>
 800135c:	2002      	movs	r0, #2
 800135e:	4240      	negs	r0, r0
 8001360:	e7cb      	b.n	80012fa <__gedf2+0x52>
 8001362:	45c4      	cmp	ip, r8
 8001364:	d8c5      	bhi.n	80012f2 <__gedf2+0x4a>
 8001366:	2000      	movs	r0, #0
 8001368:	45c4      	cmp	ip, r8
 800136a:	d2c6      	bcs.n	80012fa <__gedf2+0x52>
 800136c:	e7ed      	b.n	800134a <__gedf2+0xa2>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	000007ff 	.word	0x000007ff

08001374 <__ledf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	4647      	mov	r7, r8
 8001378:	46ce      	mov	lr, r9
 800137a:	0004      	movs	r4, r0
 800137c:	0018      	movs	r0, r3
 800137e:	0016      	movs	r6, r2
 8001380:	031b      	lsls	r3, r3, #12
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	4d2c      	ldr	r5, [pc, #176]	; (8001438 <__ledf2+0xc4>)
 8001386:	004a      	lsls	r2, r1, #1
 8001388:	4699      	mov	r9, r3
 800138a:	b580      	push	{r7, lr}
 800138c:	0043      	lsls	r3, r0, #1
 800138e:	030f      	lsls	r7, r1, #12
 8001390:	46a4      	mov	ip, r4
 8001392:	46b0      	mov	r8, r6
 8001394:	0b3f      	lsrs	r7, r7, #12
 8001396:	0d52      	lsrs	r2, r2, #21
 8001398:	0fc9      	lsrs	r1, r1, #31
 800139a:	0d5b      	lsrs	r3, r3, #21
 800139c:	0fc0      	lsrs	r0, r0, #31
 800139e:	42aa      	cmp	r2, r5
 80013a0:	d00d      	beq.n	80013be <__ledf2+0x4a>
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	d010      	beq.n	80013c8 <__ledf2+0x54>
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d127      	bne.n	80013fa <__ledf2+0x86>
 80013aa:	433c      	orrs	r4, r7
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <__ledf2+0x60>
 80013b0:	464d      	mov	r5, r9
 80013b2:	432e      	orrs	r6, r5
 80013b4:	d10e      	bne.n	80013d4 <__ledf2+0x60>
 80013b6:	2000      	movs	r0, #0
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d015      	beq.n	80013e8 <__ledf2+0x74>
 80013bc:	e00e      	b.n	80013dc <__ledf2+0x68>
 80013be:	003d      	movs	r5, r7
 80013c0:	4325      	orrs	r5, r4
 80013c2:	d110      	bne.n	80013e6 <__ledf2+0x72>
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d118      	bne.n	80013fa <__ledf2+0x86>
 80013c8:	464d      	mov	r5, r9
 80013ca:	432e      	orrs	r6, r5
 80013cc:	d10b      	bne.n	80013e6 <__ledf2+0x72>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d102      	bne.n	80013d8 <__ledf2+0x64>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d00b      	beq.n	80013f0 <__ledf2+0x7c>
 80013d8:	4281      	cmp	r1, r0
 80013da:	d014      	beq.n	8001406 <__ledf2+0x92>
 80013dc:	2002      	movs	r0, #2
 80013de:	3901      	subs	r1, #1
 80013e0:	4008      	ands	r0, r1
 80013e2:	3801      	subs	r0, #1
 80013e4:	e000      	b.n	80013e8 <__ledf2+0x74>
 80013e6:	2002      	movs	r0, #2
 80013e8:	bcc0      	pop	{r6, r7}
 80013ea:	46b9      	mov	r9, r7
 80013ec:	46b0      	mov	r8, r6
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1f9      	bne.n	80013e8 <__ledf2+0x74>
 80013f4:	2001      	movs	r0, #1
 80013f6:	4240      	negs	r0, r0
 80013f8:	e7f6      	b.n	80013e8 <__ledf2+0x74>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ec      	bne.n	80013d8 <__ledf2+0x64>
 80013fe:	464c      	mov	r4, r9
 8001400:	4326      	orrs	r6, r4
 8001402:	d1e9      	bne.n	80013d8 <__ledf2+0x64>
 8001404:	e7ea      	b.n	80013dc <__ledf2+0x68>
 8001406:	429a      	cmp	r2, r3
 8001408:	dd04      	ble.n	8001414 <__ledf2+0xa0>
 800140a:	4243      	negs	r3, r0
 800140c:	4158      	adcs	r0, r3
 800140e:	0040      	lsls	r0, r0, #1
 8001410:	3801      	subs	r0, #1
 8001412:	e7e9      	b.n	80013e8 <__ledf2+0x74>
 8001414:	429a      	cmp	r2, r3
 8001416:	dbeb      	blt.n	80013f0 <__ledf2+0x7c>
 8001418:	454f      	cmp	r7, r9
 800141a:	d8df      	bhi.n	80013dc <__ledf2+0x68>
 800141c:	d006      	beq.n	800142c <__ledf2+0xb8>
 800141e:	2000      	movs	r0, #0
 8001420:	454f      	cmp	r7, r9
 8001422:	d2e1      	bcs.n	80013e8 <__ledf2+0x74>
 8001424:	2900      	cmp	r1, #0
 8001426:	d0e5      	beq.n	80013f4 <__ledf2+0x80>
 8001428:	0008      	movs	r0, r1
 800142a:	e7dd      	b.n	80013e8 <__ledf2+0x74>
 800142c:	45c4      	cmp	ip, r8
 800142e:	d8d5      	bhi.n	80013dc <__ledf2+0x68>
 8001430:	2000      	movs	r0, #0
 8001432:	45c4      	cmp	ip, r8
 8001434:	d2d8      	bcs.n	80013e8 <__ledf2+0x74>
 8001436:	e7f5      	b.n	8001424 <__ledf2+0xb0>
 8001438:	000007ff 	.word	0x000007ff

0800143c <__aeabi_dmul>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4645      	mov	r5, r8
 8001440:	46de      	mov	lr, fp
 8001442:	4657      	mov	r7, sl
 8001444:	464e      	mov	r6, r9
 8001446:	b5e0      	push	{r5, r6, r7, lr}
 8001448:	001f      	movs	r7, r3
 800144a:	030b      	lsls	r3, r1, #12
 800144c:	0b1b      	lsrs	r3, r3, #12
 800144e:	469b      	mov	fp, r3
 8001450:	004d      	lsls	r5, r1, #1
 8001452:	0fcb      	lsrs	r3, r1, #31
 8001454:	0004      	movs	r4, r0
 8001456:	4691      	mov	r9, r2
 8001458:	4698      	mov	r8, r3
 800145a:	b087      	sub	sp, #28
 800145c:	0d6d      	lsrs	r5, r5, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x26>
 8001460:	e1cd      	b.n	80017fe <__aeabi_dmul+0x3c2>
 8001462:	4bce      	ldr	r3, [pc, #824]	; (800179c <__aeabi_dmul+0x360>)
 8001464:	429d      	cmp	r5, r3
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x2e>
 8001468:	e1e9      	b.n	800183e <__aeabi_dmul+0x402>
 800146a:	465a      	mov	r2, fp
 800146c:	0f43      	lsrs	r3, r0, #29
 800146e:	00d2      	lsls	r2, r2, #3
 8001470:	4313      	orrs	r3, r2
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	00c3      	lsls	r3, r0, #3
 800147a:	469a      	mov	sl, r3
 800147c:	4bc8      	ldr	r3, [pc, #800]	; (80017a0 <__aeabi_dmul+0x364>)
 800147e:	4693      	mov	fp, r2
 8001480:	469c      	mov	ip, r3
 8001482:	2300      	movs	r3, #0
 8001484:	2600      	movs	r6, #0
 8001486:	4465      	add	r5, ip
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	033c      	lsls	r4, r7, #12
 800148c:	007b      	lsls	r3, r7, #1
 800148e:	4648      	mov	r0, r9
 8001490:	0b24      	lsrs	r4, r4, #12
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fff      	lsrs	r7, r7, #31
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <__aeabi_dmul+0x60>
 800149a:	e189      	b.n	80017b0 <__aeabi_dmul+0x374>
 800149c:	4abf      	ldr	r2, [pc, #764]	; (800179c <__aeabi_dmul+0x360>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <__aeabi_dmul+0x9a>
 80014a2:	0f42      	lsrs	r2, r0, #29
 80014a4:	00e4      	lsls	r4, r4, #3
 80014a6:	4322      	orrs	r2, r4
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	0424      	lsls	r4, r4, #16
 80014ac:	4314      	orrs	r4, r2
 80014ae:	4abc      	ldr	r2, [pc, #752]	; (80017a0 <__aeabi_dmul+0x364>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	4694      	mov	ip, r2
 80014b4:	4642      	mov	r2, r8
 80014b6:	4463      	add	r3, ip
 80014b8:	195b      	adds	r3, r3, r5
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]
 80014be:	407a      	eors	r2, r7
 80014c0:	3301      	adds	r3, #1
 80014c2:	00c0      	lsls	r0, r0, #3
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2e0a      	cmp	r6, #10
 80014ca:	dd1c      	ble.n	8001506 <__aeabi_dmul+0xca>
 80014cc:	003a      	movs	r2, r7
 80014ce:	2e0b      	cmp	r6, #11
 80014d0:	d05e      	beq.n	8001590 <__aeabi_dmul+0x154>
 80014d2:	4647      	mov	r7, r8
 80014d4:	e056      	b.n	8001584 <__aeabi_dmul+0x148>
 80014d6:	4649      	mov	r1, r9
 80014d8:	4bb0      	ldr	r3, [pc, #704]	; (800179c <__aeabi_dmul+0x360>)
 80014da:	4321      	orrs	r1, r4
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d12a      	bne.n	800153a <__aeabi_dmul+0xfe>
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	2202      	movs	r2, #2
 80014e8:	0100      	lsls	r0, r0, #4
 80014ea:	002b      	movs	r3, r5
 80014ec:	4684      	mov	ip, r0
 80014ee:	4316      	orrs	r6, r2
 80014f0:	4642      	mov	r2, r8
 80014f2:	4463      	add	r3, ip
 80014f4:	407a      	eors	r2, r7
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2e0a      	cmp	r6, #10
 80014fc:	dd00      	ble.n	8001500 <__aeabi_dmul+0xc4>
 80014fe:	e231      	b.n	8001964 <__aeabi_dmul+0x528>
 8001500:	2000      	movs	r0, #0
 8001502:	2400      	movs	r4, #0
 8001504:	2102      	movs	r1, #2
 8001506:	2e02      	cmp	r6, #2
 8001508:	dc26      	bgt.n	8001558 <__aeabi_dmul+0x11c>
 800150a:	3e01      	subs	r6, #1
 800150c:	2e01      	cmp	r6, #1
 800150e:	d852      	bhi.n	80015b6 <__aeabi_dmul+0x17a>
 8001510:	2902      	cmp	r1, #2
 8001512:	d04c      	beq.n	80015ae <__aeabi_dmul+0x172>
 8001514:	2901      	cmp	r1, #1
 8001516:	d000      	beq.n	800151a <__aeabi_dmul+0xde>
 8001518:	e118      	b.n	800174c <__aeabi_dmul+0x310>
 800151a:	2300      	movs	r3, #0
 800151c:	2400      	movs	r4, #0
 800151e:	2500      	movs	r5, #0
 8001520:	051b      	lsls	r3, r3, #20
 8001522:	4323      	orrs	r3, r4
 8001524:	07d2      	lsls	r2, r2, #31
 8001526:	4313      	orrs	r3, r2
 8001528:	0028      	movs	r0, r5
 800152a:	0019      	movs	r1, r3
 800152c:	b007      	add	sp, #28
 800152e:	bcf0      	pop	{r4, r5, r6, r7}
 8001530:	46bb      	mov	fp, r7
 8001532:	46b2      	mov	sl, r6
 8001534:	46a9      	mov	r9, r5
 8001536:	46a0      	mov	r8, r4
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	2203      	movs	r2, #3
 800153e:	0109      	lsls	r1, r1, #4
 8001540:	002b      	movs	r3, r5
 8001542:	468c      	mov	ip, r1
 8001544:	4316      	orrs	r6, r2
 8001546:	4642      	mov	r2, r8
 8001548:	4463      	add	r3, ip
 800154a:	407a      	eors	r2, r7
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2e0a      	cmp	r6, #10
 8001552:	dd00      	ble.n	8001556 <__aeabi_dmul+0x11a>
 8001554:	e228      	b.n	80019a8 <__aeabi_dmul+0x56c>
 8001556:	2103      	movs	r1, #3
 8001558:	2501      	movs	r5, #1
 800155a:	40b5      	lsls	r5, r6
 800155c:	46ac      	mov	ip, r5
 800155e:	26a6      	movs	r6, #166	; 0xa6
 8001560:	4663      	mov	r3, ip
 8001562:	00f6      	lsls	r6, r6, #3
 8001564:	4035      	ands	r5, r6
 8001566:	4233      	tst	r3, r6
 8001568:	d10b      	bne.n	8001582 <__aeabi_dmul+0x146>
 800156a:	2690      	movs	r6, #144	; 0x90
 800156c:	00b6      	lsls	r6, r6, #2
 800156e:	4233      	tst	r3, r6
 8001570:	d118      	bne.n	80015a4 <__aeabi_dmul+0x168>
 8001572:	3eb9      	subs	r6, #185	; 0xb9
 8001574:	3eff      	subs	r6, #255	; 0xff
 8001576:	421e      	tst	r6, r3
 8001578:	d01d      	beq.n	80015b6 <__aeabi_dmul+0x17a>
 800157a:	46a3      	mov	fp, r4
 800157c:	4682      	mov	sl, r0
 800157e:	9100      	str	r1, [sp, #0]
 8001580:	e000      	b.n	8001584 <__aeabi_dmul+0x148>
 8001582:	0017      	movs	r7, r2
 8001584:	9900      	ldr	r1, [sp, #0]
 8001586:	003a      	movs	r2, r7
 8001588:	2902      	cmp	r1, #2
 800158a:	d010      	beq.n	80015ae <__aeabi_dmul+0x172>
 800158c:	465c      	mov	r4, fp
 800158e:	4650      	mov	r0, sl
 8001590:	2903      	cmp	r1, #3
 8001592:	d1bf      	bne.n	8001514 <__aeabi_dmul+0xd8>
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	031b      	lsls	r3, r3, #12
 8001598:	431c      	orrs	r4, r3
 800159a:	0324      	lsls	r4, r4, #12
 800159c:	0005      	movs	r5, r0
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <__aeabi_dmul+0x360>)
 80015a0:	0b24      	lsrs	r4, r4, #12
 80015a2:	e7bd      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015a4:	2480      	movs	r4, #128	; 0x80
 80015a6:	2200      	movs	r2, #0
 80015a8:	4b7c      	ldr	r3, [pc, #496]	; (800179c <__aeabi_dmul+0x360>)
 80015aa:	0324      	lsls	r4, r4, #12
 80015ac:	e7b8      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015ae:	2400      	movs	r4, #0
 80015b0:	2500      	movs	r5, #0
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <__aeabi_dmul+0x360>)
 80015b4:	e7b4      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015b6:	4653      	mov	r3, sl
 80015b8:	041e      	lsls	r6, r3, #16
 80015ba:	0c36      	lsrs	r6, r6, #16
 80015bc:	0c1f      	lsrs	r7, r3, #16
 80015be:	0033      	movs	r3, r6
 80015c0:	0c01      	lsrs	r1, r0, #16
 80015c2:	0400      	lsls	r0, r0, #16
 80015c4:	0c00      	lsrs	r0, r0, #16
 80015c6:	4343      	muls	r3, r0
 80015c8:	4698      	mov	r8, r3
 80015ca:	0003      	movs	r3, r0
 80015cc:	437b      	muls	r3, r7
 80015ce:	4699      	mov	r9, r3
 80015d0:	0033      	movs	r3, r6
 80015d2:	434b      	muls	r3, r1
 80015d4:	469c      	mov	ip, r3
 80015d6:	4643      	mov	r3, r8
 80015d8:	000d      	movs	r5, r1
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	469a      	mov	sl, r3
 80015de:	437d      	muls	r5, r7
 80015e0:	44cc      	add	ip, r9
 80015e2:	44d4      	add	ip, sl
 80015e4:	9500      	str	r5, [sp, #0]
 80015e6:	45e1      	cmp	r9, ip
 80015e8:	d904      	bls.n	80015f4 <__aeabi_dmul+0x1b8>
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	4699      	mov	r9, r3
 80015f0:	444d      	add	r5, r9
 80015f2:	9500      	str	r5, [sp, #0]
 80015f4:	4663      	mov	r3, ip
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	001d      	movs	r5, r3
 80015fa:	4663      	mov	r3, ip
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	469c      	mov	ip, r3
 8001600:	4643      	mov	r3, r8
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	4698      	mov	r8, r3
 8001608:	4663      	mov	r3, ip
 800160a:	4443      	add	r3, r8
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	0c23      	lsrs	r3, r4, #16
 8001610:	4698      	mov	r8, r3
 8001612:	0033      	movs	r3, r6
 8001614:	0424      	lsls	r4, r4, #16
 8001616:	0c24      	lsrs	r4, r4, #16
 8001618:	4363      	muls	r3, r4
 800161a:	469c      	mov	ip, r3
 800161c:	0023      	movs	r3, r4
 800161e:	437b      	muls	r3, r7
 8001620:	4699      	mov	r9, r3
 8001622:	4643      	mov	r3, r8
 8001624:	435e      	muls	r6, r3
 8001626:	435f      	muls	r7, r3
 8001628:	444e      	add	r6, r9
 800162a:	4663      	mov	r3, ip
 800162c:	46b2      	mov	sl, r6
 800162e:	0c1e      	lsrs	r6, r3, #16
 8001630:	4456      	add	r6, sl
 8001632:	45b1      	cmp	r9, r6
 8001634:	d903      	bls.n	800163e <__aeabi_dmul+0x202>
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	4699      	mov	r9, r3
 800163c:	444f      	add	r7, r9
 800163e:	0c33      	lsrs	r3, r6, #16
 8001640:	4699      	mov	r9, r3
 8001642:	003b      	movs	r3, r7
 8001644:	444b      	add	r3, r9
 8001646:	9305      	str	r3, [sp, #20]
 8001648:	4663      	mov	r3, ip
 800164a:	46ac      	mov	ip, r5
 800164c:	041f      	lsls	r7, r3, #16
 800164e:	0c3f      	lsrs	r7, r7, #16
 8001650:	0436      	lsls	r6, r6, #16
 8001652:	19f6      	adds	r6, r6, r7
 8001654:	44b4      	add	ip, r6
 8001656:	4663      	mov	r3, ip
 8001658:	9304      	str	r3, [sp, #16]
 800165a:	465b      	mov	r3, fp
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	469c      	mov	ip, r3
 8001660:	465b      	mov	r3, fp
 8001662:	041f      	lsls	r7, r3, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	003b      	movs	r3, r7
 8001668:	4343      	muls	r3, r0
 800166a:	4699      	mov	r9, r3
 800166c:	4663      	mov	r3, ip
 800166e:	4343      	muls	r3, r0
 8001670:	469a      	mov	sl, r3
 8001672:	464b      	mov	r3, r9
 8001674:	4660      	mov	r0, ip
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	469b      	mov	fp, r3
 800167a:	4348      	muls	r0, r1
 800167c:	4379      	muls	r1, r7
 800167e:	4451      	add	r1, sl
 8001680:	4459      	add	r1, fp
 8001682:	458a      	cmp	sl, r1
 8001684:	d903      	bls.n	800168e <__aeabi_dmul+0x252>
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	469a      	mov	sl, r3
 800168c:	4450      	add	r0, sl
 800168e:	0c0b      	lsrs	r3, r1, #16
 8001690:	469a      	mov	sl, r3
 8001692:	464b      	mov	r3, r9
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	4699      	mov	r9, r3
 800169a:	003b      	movs	r3, r7
 800169c:	4363      	muls	r3, r4
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	4645      	mov	r5, r8
 80016a2:	4449      	add	r1, r9
 80016a4:	4699      	mov	r9, r3
 80016a6:	4663      	mov	r3, ip
 80016a8:	435c      	muls	r4, r3
 80016aa:	436b      	muls	r3, r5
 80016ac:	469c      	mov	ip, r3
 80016ae:	464b      	mov	r3, r9
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	4698      	mov	r8, r3
 80016b4:	436f      	muls	r7, r5
 80016b6:	193f      	adds	r7, r7, r4
 80016b8:	4447      	add	r7, r8
 80016ba:	4450      	add	r0, sl
 80016bc:	42bc      	cmp	r4, r7
 80016be:	d903      	bls.n	80016c8 <__aeabi_dmul+0x28c>
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	4698      	mov	r8, r3
 80016c6:	44c4      	add	ip, r8
 80016c8:	9b04      	ldr	r3, [sp, #16]
 80016ca:	9d00      	ldr	r5, [sp, #0]
 80016cc:	4698      	mov	r8, r3
 80016ce:	4445      	add	r5, r8
 80016d0:	42b5      	cmp	r5, r6
 80016d2:	41b6      	sbcs	r6, r6
 80016d4:	4273      	negs	r3, r6
 80016d6:	4698      	mov	r8, r3
 80016d8:	464b      	mov	r3, r9
 80016da:	041e      	lsls	r6, r3, #16
 80016dc:	9b05      	ldr	r3, [sp, #20]
 80016de:	043c      	lsls	r4, r7, #16
 80016e0:	4699      	mov	r9, r3
 80016e2:	0c36      	lsrs	r6, r6, #16
 80016e4:	19a4      	adds	r4, r4, r6
 80016e6:	444c      	add	r4, r9
 80016e8:	46a1      	mov	r9, r4
 80016ea:	4683      	mov	fp, r0
 80016ec:	186e      	adds	r6, r5, r1
 80016ee:	44c1      	add	r9, r8
 80016f0:	428e      	cmp	r6, r1
 80016f2:	4189      	sbcs	r1, r1
 80016f4:	44cb      	add	fp, r9
 80016f6:	465d      	mov	r5, fp
 80016f8:	4249      	negs	r1, r1
 80016fa:	186d      	adds	r5, r5, r1
 80016fc:	429c      	cmp	r4, r3
 80016fe:	41a4      	sbcs	r4, r4
 8001700:	45c1      	cmp	r9, r8
 8001702:	419b      	sbcs	r3, r3
 8001704:	4583      	cmp	fp, r0
 8001706:	4180      	sbcs	r0, r0
 8001708:	428d      	cmp	r5, r1
 800170a:	4189      	sbcs	r1, r1
 800170c:	425b      	negs	r3, r3
 800170e:	4264      	negs	r4, r4
 8001710:	431c      	orrs	r4, r3
 8001712:	4240      	negs	r0, r0
 8001714:	9b03      	ldr	r3, [sp, #12]
 8001716:	4249      	negs	r1, r1
 8001718:	4301      	orrs	r1, r0
 800171a:	0270      	lsls	r0, r6, #9
 800171c:	0c3f      	lsrs	r7, r7, #16
 800171e:	4318      	orrs	r0, r3
 8001720:	19e4      	adds	r4, r4, r7
 8001722:	1e47      	subs	r7, r0, #1
 8001724:	41b8      	sbcs	r0, r7
 8001726:	1864      	adds	r4, r4, r1
 8001728:	4464      	add	r4, ip
 800172a:	0df6      	lsrs	r6, r6, #23
 800172c:	0261      	lsls	r1, r4, #9
 800172e:	4330      	orrs	r0, r6
 8001730:	0dec      	lsrs	r4, r5, #23
 8001732:	026e      	lsls	r6, r5, #9
 8001734:	430c      	orrs	r4, r1
 8001736:	4330      	orrs	r0, r6
 8001738:	01c9      	lsls	r1, r1, #7
 800173a:	d400      	bmi.n	800173e <__aeabi_dmul+0x302>
 800173c:	e0f1      	b.n	8001922 <__aeabi_dmul+0x4e6>
 800173e:	2101      	movs	r1, #1
 8001740:	0843      	lsrs	r3, r0, #1
 8001742:	4001      	ands	r1, r0
 8001744:	430b      	orrs	r3, r1
 8001746:	07e0      	lsls	r0, r4, #31
 8001748:	4318      	orrs	r0, r3
 800174a:	0864      	lsrs	r4, r4, #1
 800174c:	4915      	ldr	r1, [pc, #84]	; (80017a4 <__aeabi_dmul+0x368>)
 800174e:	9b02      	ldr	r3, [sp, #8]
 8001750:	468c      	mov	ip, r1
 8001752:	4463      	add	r3, ip
 8001754:	2b00      	cmp	r3, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x31e>
 8001758:	e097      	b.n	800188a <__aeabi_dmul+0x44e>
 800175a:	0741      	lsls	r1, r0, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x336>
 800175e:	210f      	movs	r1, #15
 8001760:	4001      	ands	r1, r0
 8001762:	2904      	cmp	r1, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x336>
 8001766:	1d01      	adds	r1, r0, #4
 8001768:	4281      	cmp	r1, r0
 800176a:	4180      	sbcs	r0, r0
 800176c:	4240      	negs	r0, r0
 800176e:	1824      	adds	r4, r4, r0
 8001770:	0008      	movs	r0, r1
 8001772:	01e1      	lsls	r1, r4, #7
 8001774:	d506      	bpl.n	8001784 <__aeabi_dmul+0x348>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	00c9      	lsls	r1, r1, #3
 800177a:	468c      	mov	ip, r1
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <__aeabi_dmul+0x36c>)
 800177e:	401c      	ands	r4, r3
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4463      	add	r3, ip
 8001784:	4909      	ldr	r1, [pc, #36]	; (80017ac <__aeabi_dmul+0x370>)
 8001786:	428b      	cmp	r3, r1
 8001788:	dd00      	ble.n	800178c <__aeabi_dmul+0x350>
 800178a:	e710      	b.n	80015ae <__aeabi_dmul+0x172>
 800178c:	0761      	lsls	r1, r4, #29
 800178e:	08c5      	lsrs	r5, r0, #3
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	430d      	orrs	r5, r1
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d5b      	lsrs	r3, r3, #21
 800179a:	e6c1      	b.n	8001520 <__aeabi_dmul+0xe4>
 800179c:	000007ff 	.word	0x000007ff
 80017a0:	fffffc01 	.word	0xfffffc01
 80017a4:	000003ff 	.word	0x000003ff
 80017a8:	feffffff 	.word	0xfeffffff
 80017ac:	000007fe 	.word	0x000007fe
 80017b0:	464b      	mov	r3, r9
 80017b2:	4323      	orrs	r3, r4
 80017b4:	d059      	beq.n	800186a <__aeabi_dmul+0x42e>
 80017b6:	2c00      	cmp	r4, #0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dmul+0x380>
 80017ba:	e0a3      	b.n	8001904 <__aeabi_dmul+0x4c8>
 80017bc:	0020      	movs	r0, r4
 80017be:	f000 fdb1 	bl	8002324 <__clzsi2>
 80017c2:	0001      	movs	r1, r0
 80017c4:	0003      	movs	r3, r0
 80017c6:	390b      	subs	r1, #11
 80017c8:	221d      	movs	r2, #29
 80017ca:	1a52      	subs	r2, r2, r1
 80017cc:	4649      	mov	r1, r9
 80017ce:	0018      	movs	r0, r3
 80017d0:	40d1      	lsrs	r1, r2
 80017d2:	464a      	mov	r2, r9
 80017d4:	3808      	subs	r0, #8
 80017d6:	4082      	lsls	r2, r0
 80017d8:	4084      	lsls	r4, r0
 80017da:	0010      	movs	r0, r2
 80017dc:	430c      	orrs	r4, r1
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <__aeabi_dmul+0x574>)
 80017e0:	1aeb      	subs	r3, r5, r3
 80017e2:	4694      	mov	ip, r2
 80017e4:	4642      	mov	r2, r8
 80017e6:	4463      	add	r3, ip
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	407a      	eors	r2, r7
 80017ee:	3301      	adds	r3, #1
 80017f0:	2100      	movs	r1, #0
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	2e0a      	cmp	r6, #10
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dmul+0x3c0>
 80017fa:	e667      	b.n	80014cc <__aeabi_dmul+0x90>
 80017fc:	e683      	b.n	8001506 <__aeabi_dmul+0xca>
 80017fe:	465b      	mov	r3, fp
 8001800:	4303      	orrs	r3, r0
 8001802:	469a      	mov	sl, r3
 8001804:	d02a      	beq.n	800185c <__aeabi_dmul+0x420>
 8001806:	465b      	mov	r3, fp
 8001808:	2b00      	cmp	r3, #0
 800180a:	d06d      	beq.n	80018e8 <__aeabi_dmul+0x4ac>
 800180c:	4658      	mov	r0, fp
 800180e:	f000 fd89 	bl	8002324 <__clzsi2>
 8001812:	0001      	movs	r1, r0
 8001814:	0003      	movs	r3, r0
 8001816:	390b      	subs	r1, #11
 8001818:	221d      	movs	r2, #29
 800181a:	1a52      	subs	r2, r2, r1
 800181c:	0021      	movs	r1, r4
 800181e:	0018      	movs	r0, r3
 8001820:	465d      	mov	r5, fp
 8001822:	40d1      	lsrs	r1, r2
 8001824:	3808      	subs	r0, #8
 8001826:	4085      	lsls	r5, r0
 8001828:	000a      	movs	r2, r1
 800182a:	4084      	lsls	r4, r0
 800182c:	432a      	orrs	r2, r5
 800182e:	4693      	mov	fp, r2
 8001830:	46a2      	mov	sl, r4
 8001832:	4d5f      	ldr	r5, [pc, #380]	; (80019b0 <__aeabi_dmul+0x574>)
 8001834:	2600      	movs	r6, #0
 8001836:	1aed      	subs	r5, r5, r3
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	e625      	b.n	800148a <__aeabi_dmul+0x4e>
 800183e:	465b      	mov	r3, fp
 8001840:	4303      	orrs	r3, r0
 8001842:	469a      	mov	sl, r3
 8001844:	d105      	bne.n	8001852 <__aeabi_dmul+0x416>
 8001846:	2300      	movs	r3, #0
 8001848:	469b      	mov	fp, r3
 800184a:	3302      	adds	r3, #2
 800184c:	2608      	movs	r6, #8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	e61b      	b.n	800148a <__aeabi_dmul+0x4e>
 8001852:	2303      	movs	r3, #3
 8001854:	4682      	mov	sl, r0
 8001856:	260c      	movs	r6, #12
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	e616      	b.n	800148a <__aeabi_dmul+0x4e>
 800185c:	2300      	movs	r3, #0
 800185e:	469b      	mov	fp, r3
 8001860:	3301      	adds	r3, #1
 8001862:	2604      	movs	r6, #4
 8001864:	2500      	movs	r5, #0
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	e60f      	b.n	800148a <__aeabi_dmul+0x4e>
 800186a:	4642      	mov	r2, r8
 800186c:	3301      	adds	r3, #1
 800186e:	9501      	str	r5, [sp, #4]
 8001870:	431e      	orrs	r6, r3
 8001872:	9b01      	ldr	r3, [sp, #4]
 8001874:	407a      	eors	r2, r7
 8001876:	3301      	adds	r3, #1
 8001878:	2400      	movs	r4, #0
 800187a:	2000      	movs	r0, #0
 800187c:	2101      	movs	r1, #1
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2e0a      	cmp	r6, #10
 8001884:	dd00      	ble.n	8001888 <__aeabi_dmul+0x44c>
 8001886:	e621      	b.n	80014cc <__aeabi_dmul+0x90>
 8001888:	e63d      	b.n	8001506 <__aeabi_dmul+0xca>
 800188a:	2101      	movs	r1, #1
 800188c:	1ac9      	subs	r1, r1, r3
 800188e:	2938      	cmp	r1, #56	; 0x38
 8001890:	dd00      	ble.n	8001894 <__aeabi_dmul+0x458>
 8001892:	e642      	b.n	800151a <__aeabi_dmul+0xde>
 8001894:	291f      	cmp	r1, #31
 8001896:	dd47      	ble.n	8001928 <__aeabi_dmul+0x4ec>
 8001898:	261f      	movs	r6, #31
 800189a:	0025      	movs	r5, r4
 800189c:	4276      	negs	r6, r6
 800189e:	1af3      	subs	r3, r6, r3
 80018a0:	40dd      	lsrs	r5, r3
 80018a2:	002b      	movs	r3, r5
 80018a4:	2920      	cmp	r1, #32
 80018a6:	d005      	beq.n	80018b4 <__aeabi_dmul+0x478>
 80018a8:	4942      	ldr	r1, [pc, #264]	; (80019b4 <__aeabi_dmul+0x578>)
 80018aa:	9d02      	ldr	r5, [sp, #8]
 80018ac:	468c      	mov	ip, r1
 80018ae:	4465      	add	r5, ip
 80018b0:	40ac      	lsls	r4, r5
 80018b2:	4320      	orrs	r0, r4
 80018b4:	1e41      	subs	r1, r0, #1
 80018b6:	4188      	sbcs	r0, r1
 80018b8:	4318      	orrs	r0, r3
 80018ba:	2307      	movs	r3, #7
 80018bc:	001d      	movs	r5, r3
 80018be:	2400      	movs	r4, #0
 80018c0:	4005      	ands	r5, r0
 80018c2:	4203      	tst	r3, r0
 80018c4:	d04a      	beq.n	800195c <__aeabi_dmul+0x520>
 80018c6:	230f      	movs	r3, #15
 80018c8:	2400      	movs	r4, #0
 80018ca:	4003      	ands	r3, r0
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d042      	beq.n	8001956 <__aeabi_dmul+0x51a>
 80018d0:	1d03      	adds	r3, r0, #4
 80018d2:	4283      	cmp	r3, r0
 80018d4:	4180      	sbcs	r0, r0
 80018d6:	4240      	negs	r0, r0
 80018d8:	1824      	adds	r4, r4, r0
 80018da:	0018      	movs	r0, r3
 80018dc:	0223      	lsls	r3, r4, #8
 80018de:	d53a      	bpl.n	8001956 <__aeabi_dmul+0x51a>
 80018e0:	2301      	movs	r3, #1
 80018e2:	2400      	movs	r4, #0
 80018e4:	2500      	movs	r5, #0
 80018e6:	e61b      	b.n	8001520 <__aeabi_dmul+0xe4>
 80018e8:	f000 fd1c 	bl	8002324 <__clzsi2>
 80018ec:	0001      	movs	r1, r0
 80018ee:	0003      	movs	r3, r0
 80018f0:	3115      	adds	r1, #21
 80018f2:	3320      	adds	r3, #32
 80018f4:	291c      	cmp	r1, #28
 80018f6:	dd8f      	ble.n	8001818 <__aeabi_dmul+0x3dc>
 80018f8:	3808      	subs	r0, #8
 80018fa:	2200      	movs	r2, #0
 80018fc:	4084      	lsls	r4, r0
 80018fe:	4692      	mov	sl, r2
 8001900:	46a3      	mov	fp, r4
 8001902:	e796      	b.n	8001832 <__aeabi_dmul+0x3f6>
 8001904:	f000 fd0e 	bl	8002324 <__clzsi2>
 8001908:	0001      	movs	r1, r0
 800190a:	0003      	movs	r3, r0
 800190c:	3115      	adds	r1, #21
 800190e:	3320      	adds	r3, #32
 8001910:	291c      	cmp	r1, #28
 8001912:	dc00      	bgt.n	8001916 <__aeabi_dmul+0x4da>
 8001914:	e758      	b.n	80017c8 <__aeabi_dmul+0x38c>
 8001916:	0002      	movs	r2, r0
 8001918:	464c      	mov	r4, r9
 800191a:	3a08      	subs	r2, #8
 800191c:	2000      	movs	r0, #0
 800191e:	4094      	lsls	r4, r2
 8001920:	e75d      	b.n	80017de <__aeabi_dmul+0x3a2>
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	e711      	b.n	800174c <__aeabi_dmul+0x310>
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <__aeabi_dmul+0x57c>)
 800192a:	0026      	movs	r6, r4
 800192c:	469c      	mov	ip, r3
 800192e:	0003      	movs	r3, r0
 8001930:	9d02      	ldr	r5, [sp, #8]
 8001932:	40cb      	lsrs	r3, r1
 8001934:	4465      	add	r5, ip
 8001936:	40ae      	lsls	r6, r5
 8001938:	431e      	orrs	r6, r3
 800193a:	0003      	movs	r3, r0
 800193c:	40ab      	lsls	r3, r5
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	4183      	sbcs	r3, r0
 8001942:	0030      	movs	r0, r6
 8001944:	4318      	orrs	r0, r3
 8001946:	40cc      	lsrs	r4, r1
 8001948:	0743      	lsls	r3, r0, #29
 800194a:	d0c7      	beq.n	80018dc <__aeabi_dmul+0x4a0>
 800194c:	230f      	movs	r3, #15
 800194e:	4003      	ands	r3, r0
 8001950:	2b04      	cmp	r3, #4
 8001952:	d1bd      	bne.n	80018d0 <__aeabi_dmul+0x494>
 8001954:	e7c2      	b.n	80018dc <__aeabi_dmul+0x4a0>
 8001956:	0765      	lsls	r5, r4, #29
 8001958:	0264      	lsls	r4, r4, #9
 800195a:	0b24      	lsrs	r4, r4, #12
 800195c:	08c0      	lsrs	r0, r0, #3
 800195e:	2300      	movs	r3, #0
 8001960:	4305      	orrs	r5, r0
 8001962:	e5dd      	b.n	8001520 <__aeabi_dmul+0xe4>
 8001964:	2500      	movs	r5, #0
 8001966:	2302      	movs	r3, #2
 8001968:	2e0f      	cmp	r6, #15
 800196a:	d10c      	bne.n	8001986 <__aeabi_dmul+0x54a>
 800196c:	2480      	movs	r4, #128	; 0x80
 800196e:	465b      	mov	r3, fp
 8001970:	0324      	lsls	r4, r4, #12
 8001972:	4223      	tst	r3, r4
 8001974:	d00e      	beq.n	8001994 <__aeabi_dmul+0x558>
 8001976:	4221      	tst	r1, r4
 8001978:	d10c      	bne.n	8001994 <__aeabi_dmul+0x558>
 800197a:	430c      	orrs	r4, r1
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	003a      	movs	r2, r7
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <__aeabi_dmul+0x580>)
 8001982:	0b24      	lsrs	r4, r4, #12
 8001984:	e5cc      	b.n	8001520 <__aeabi_dmul+0xe4>
 8001986:	2e0b      	cmp	r6, #11
 8001988:	d000      	beq.n	800198c <__aeabi_dmul+0x550>
 800198a:	e5a2      	b.n	80014d2 <__aeabi_dmul+0x96>
 800198c:	468b      	mov	fp, r1
 800198e:	46aa      	mov	sl, r5
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	e5f7      	b.n	8001584 <__aeabi_dmul+0x148>
 8001994:	2480      	movs	r4, #128	; 0x80
 8001996:	465b      	mov	r3, fp
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	431c      	orrs	r4, r3
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	4642      	mov	r2, r8
 80019a0:	4655      	mov	r5, sl
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <__aeabi_dmul+0x580>)
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	e5bb      	b.n	8001520 <__aeabi_dmul+0xe4>
 80019a8:	464d      	mov	r5, r9
 80019aa:	0021      	movs	r1, r4
 80019ac:	2303      	movs	r3, #3
 80019ae:	e7db      	b.n	8001968 <__aeabi_dmul+0x52c>
 80019b0:	fffffc0d 	.word	0xfffffc0d
 80019b4:	0000043e 	.word	0x0000043e
 80019b8:	0000041e 	.word	0x0000041e
 80019bc:	000007ff 	.word	0x000007ff

080019c0 <__aeabi_dsub>:
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	4657      	mov	r7, sl
 80019c4:	464e      	mov	r6, r9
 80019c6:	4645      	mov	r5, r8
 80019c8:	46de      	mov	lr, fp
 80019ca:	b5e0      	push	{r5, r6, r7, lr}
 80019cc:	000d      	movs	r5, r1
 80019ce:	0004      	movs	r4, r0
 80019d0:	0019      	movs	r1, r3
 80019d2:	0010      	movs	r0, r2
 80019d4:	032b      	lsls	r3, r5, #12
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	0f62      	lsrs	r2, r4, #29
 80019da:	431a      	orrs	r2, r3
 80019dc:	00e3      	lsls	r3, r4, #3
 80019de:	030c      	lsls	r4, r1, #12
 80019e0:	0a64      	lsrs	r4, r4, #9
 80019e2:	0f47      	lsrs	r7, r0, #29
 80019e4:	4327      	orrs	r7, r4
 80019e6:	4cd0      	ldr	r4, [pc, #832]	; (8001d28 <__aeabi_dsub+0x368>)
 80019e8:	006e      	lsls	r6, r5, #1
 80019ea:	4691      	mov	r9, r2
 80019ec:	b083      	sub	sp, #12
 80019ee:	004a      	lsls	r2, r1, #1
 80019f0:	00c0      	lsls	r0, r0, #3
 80019f2:	4698      	mov	r8, r3
 80019f4:	46a2      	mov	sl, r4
 80019f6:	0d76      	lsrs	r6, r6, #21
 80019f8:	0fed      	lsrs	r5, r5, #31
 80019fa:	0d52      	lsrs	r2, r2, #21
 80019fc:	0fc9      	lsrs	r1, r1, #31
 80019fe:	9001      	str	r0, [sp, #4]
 8001a00:	42a2      	cmp	r2, r4
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x46>
 8001a04:	e0b9      	b.n	8001b7a <__aeabi_dsub+0x1ba>
 8001a06:	2401      	movs	r4, #1
 8001a08:	4061      	eors	r1, r4
 8001a0a:	468b      	mov	fp, r1
 8001a0c:	428d      	cmp	r5, r1
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x52>
 8001a10:	e08d      	b.n	8001b2e <__aeabi_dsub+0x16e>
 8001a12:	1ab4      	subs	r4, r6, r2
 8001a14:	46a4      	mov	ip, r4
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	dc00      	bgt.n	8001a1c <__aeabi_dsub+0x5c>
 8001a1a:	e0b7      	b.n	8001b8c <__aeabi_dsub+0x1cc>
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x62>
 8001a20:	e0cb      	b.n	8001bba <__aeabi_dsub+0x1fa>
 8001a22:	4ac1      	ldr	r2, [pc, #772]	; (8001d28 <__aeabi_dsub+0x368>)
 8001a24:	4296      	cmp	r6, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x6a>
 8001a28:	e186      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0412      	lsls	r2, r2, #16
 8001a2e:	4317      	orrs	r7, r2
 8001a30:	4662      	mov	r2, ip
 8001a32:	2a38      	cmp	r2, #56	; 0x38
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x78>
 8001a36:	e1a4      	b.n	8001d82 <__aeabi_dsub+0x3c2>
 8001a38:	2a1f      	cmp	r2, #31
 8001a3a:	dd00      	ble.n	8001a3e <__aeabi_dsub+0x7e>
 8001a3c:	e21d      	b.n	8001e7a <__aeabi_dsub+0x4ba>
 8001a3e:	4661      	mov	r1, ip
 8001a40:	2220      	movs	r2, #32
 8001a42:	003c      	movs	r4, r7
 8001a44:	1a52      	subs	r2, r2, r1
 8001a46:	0001      	movs	r1, r0
 8001a48:	4090      	lsls	r0, r2
 8001a4a:	4094      	lsls	r4, r2
 8001a4c:	1e42      	subs	r2, r0, #1
 8001a4e:	4190      	sbcs	r0, r2
 8001a50:	4662      	mov	r2, ip
 8001a52:	46a0      	mov	r8, r4
 8001a54:	4664      	mov	r4, ip
 8001a56:	40d7      	lsrs	r7, r2
 8001a58:	464a      	mov	r2, r9
 8001a5a:	40e1      	lsrs	r1, r4
 8001a5c:	4644      	mov	r4, r8
 8001a5e:	1bd2      	subs	r2, r2, r7
 8001a60:	4691      	mov	r9, r2
 8001a62:	430c      	orrs	r4, r1
 8001a64:	4304      	orrs	r4, r0
 8001a66:	1b1c      	subs	r4, r3, r4
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	4192      	sbcs	r2, r2
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	4252      	negs	r2, r2
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	469a      	mov	sl, r3
 8001a74:	4653      	mov	r3, sl
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	d400      	bmi.n	8001a7c <__aeabi_dsub+0xbc>
 8001a7a:	e12b      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001a7c:	4653      	mov	r3, sl
 8001a7e:	025a      	lsls	r2, r3, #9
 8001a80:	0a53      	lsrs	r3, r2, #9
 8001a82:	469a      	mov	sl, r3
 8001a84:	4653      	mov	r3, sl
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0xcc>
 8001a8a:	e166      	b.n	8001d5a <__aeabi_dsub+0x39a>
 8001a8c:	4650      	mov	r0, sl
 8001a8e:	f000 fc49 	bl	8002324 <__clzsi2>
 8001a92:	0003      	movs	r3, r0
 8001a94:	3b08      	subs	r3, #8
 8001a96:	2220      	movs	r2, #32
 8001a98:	0020      	movs	r0, r4
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	40d0      	lsrs	r0, r2
 8001aa0:	4099      	lsls	r1, r3
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	409c      	lsls	r4, r3
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	429e      	cmp	r6, r3
 8001aaa:	dd00      	ble.n	8001aae <__aeabi_dsub+0xee>
 8001aac:	e164      	b.n	8001d78 <__aeabi_dsub+0x3b8>
 8001aae:	1b9b      	subs	r3, r3, r6
 8001ab0:	1c59      	adds	r1, r3, #1
 8001ab2:	291f      	cmp	r1, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0xf8>
 8001ab6:	e0fe      	b.n	8001cb6 <__aeabi_dsub+0x2f6>
 8001ab8:	2320      	movs	r3, #32
 8001aba:	0010      	movs	r0, r2
 8001abc:	0026      	movs	r6, r4
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	409c      	lsls	r4, r3
 8001ac2:	4098      	lsls	r0, r3
 8001ac4:	40ce      	lsrs	r6, r1
 8001ac6:	40ca      	lsrs	r2, r1
 8001ac8:	1e63      	subs	r3, r4, #1
 8001aca:	419c      	sbcs	r4, r3
 8001acc:	4330      	orrs	r0, r6
 8001ace:	4692      	mov	sl, r2
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	4304      	orrs	r4, r0
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x12c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x12c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a2      	add	sl, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	4653      	mov	r3, sl
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x134>
 8001af2:	e0f2      	b.n	8001cda <__aeabi_dsub+0x31a>
 8001af4:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x368>)
 8001af6:	3601      	adds	r6, #1
 8001af8:	429e      	cmp	r6, r3
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0x13e>
 8001afc:	e10f      	b.n	8001d1e <__aeabi_dsub+0x35e>
 8001afe:	4653      	mov	r3, sl
 8001b00:	498a      	ldr	r1, [pc, #552]	; (8001d2c <__aeabi_dsub+0x36c>)
 8001b02:	08e4      	lsrs	r4, r4, #3
 8001b04:	400b      	ands	r3, r1
 8001b06:	0019      	movs	r1, r3
 8001b08:	075b      	lsls	r3, r3, #29
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	0572      	lsls	r2, r6, #21
 8001b0e:	024c      	lsls	r4, r1, #9
 8001b10:	0b24      	lsrs	r4, r4, #12
 8001b12:	0d52      	lsrs	r2, r2, #21
 8001b14:	0512      	lsls	r2, r2, #20
 8001b16:	4322      	orrs	r2, r4
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	432a      	orrs	r2, r5
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	0011      	movs	r1, r2
 8001b20:	b003      	add	sp, #12
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2e:	1ab4      	subs	r4, r6, r2
 8001b30:	46a4      	mov	ip, r4
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	dd59      	ble.n	8001bea <__aeabi_dsub+0x22a>
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x17c>
 8001b3a:	e0b0      	b.n	8001c9e <__aeabi_dsub+0x2de>
 8001b3c:	4556      	cmp	r6, sl
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x182>
 8001b40:	e0fa      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0412      	lsls	r2, r2, #16
 8001b46:	4317      	orrs	r7, r2
 8001b48:	4662      	mov	r2, ip
 8001b4a:	2a38      	cmp	r2, #56	; 0x38
 8001b4c:	dd00      	ble.n	8001b50 <__aeabi_dsub+0x190>
 8001b4e:	e0d4      	b.n	8001cfa <__aeabi_dsub+0x33a>
 8001b50:	2a1f      	cmp	r2, #31
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_dsub+0x196>
 8001b54:	e1c0      	b.n	8001ed8 <__aeabi_dsub+0x518>
 8001b56:	0039      	movs	r1, r7
 8001b58:	3a20      	subs	r2, #32
 8001b5a:	40d1      	lsrs	r1, r2
 8001b5c:	4662      	mov	r2, ip
 8001b5e:	2a20      	cmp	r2, #32
 8001b60:	d006      	beq.n	8001b70 <__aeabi_dsub+0x1b0>
 8001b62:	4664      	mov	r4, ip
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	1b12      	subs	r2, r2, r4
 8001b68:	003c      	movs	r4, r7
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4304      	orrs	r4, r0
 8001b6e:	9401      	str	r4, [sp, #4]
 8001b70:	9c01      	ldr	r4, [sp, #4]
 8001b72:	1e62      	subs	r2, r4, #1
 8001b74:	4194      	sbcs	r4, r2
 8001b76:	430c      	orrs	r4, r1
 8001b78:	e0c3      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001b7a:	003c      	movs	r4, r7
 8001b7c:	4304      	orrs	r4, r0
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x218>
 8001b80:	468b      	mov	fp, r1
 8001b82:	428d      	cmp	r5, r1
 8001b84:	d02e      	beq.n	8001be4 <__aeabi_dsub+0x224>
 8001b86:	4c6a      	ldr	r4, [pc, #424]	; (8001d30 <__aeabi_dsub+0x370>)
 8001b88:	46a4      	mov	ip, r4
 8001b8a:	44b4      	add	ip, r6
 8001b8c:	4664      	mov	r4, ip
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d05f      	beq.n	8001c52 <__aeabi_dsub+0x292>
 8001b92:	1b94      	subs	r4, r2, r6
 8001b94:	46a4      	mov	ip, r4
 8001b96:	2e00      	cmp	r6, #0
 8001b98:	d000      	beq.n	8001b9c <__aeabi_dsub+0x1dc>
 8001b9a:	e120      	b.n	8001dde <__aeabi_dsub+0x41e>
 8001b9c:	464c      	mov	r4, r9
 8001b9e:	431c      	orrs	r4, r3
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1e4>
 8001ba2:	e1c7      	b.n	8001f34 <__aeabi_dsub+0x574>
 8001ba4:	4661      	mov	r1, ip
 8001ba6:	1e4c      	subs	r4, r1, #1
 8001ba8:	2901      	cmp	r1, #1
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x1ee>
 8001bac:	e223      	b.n	8001ff6 <__aeabi_dsub+0x636>
 8001bae:	4d5e      	ldr	r5, [pc, #376]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bb0:	45ac      	cmp	ip, r5
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x1f6>
 8001bb4:	e1d8      	b.n	8001f68 <__aeabi_dsub+0x5a8>
 8001bb6:	46a4      	mov	ip, r4
 8001bb8:	e11a      	b.n	8001df0 <__aeabi_dsub+0x430>
 8001bba:	003a      	movs	r2, r7
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x202>
 8001bc0:	e0e4      	b.n	8001d8c <__aeabi_dsub+0x3cc>
 8001bc2:	0022      	movs	r2, r4
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	2c01      	cmp	r4, #1
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x20c>
 8001bca:	e1c3      	b.n	8001f54 <__aeabi_dsub+0x594>
 8001bcc:	4956      	ldr	r1, [pc, #344]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bce:	428c      	cmp	r4, r1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x214>
 8001bd2:	e0b1      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001bd4:	4694      	mov	ip, r2
 8001bd6:	e72b      	b.n	8001a30 <__aeabi_dsub+0x70>
 8001bd8:	2401      	movs	r4, #1
 8001bda:	4061      	eors	r1, r4
 8001bdc:	468b      	mov	fp, r1
 8001bde:	428d      	cmp	r5, r1
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dsub+0x224>
 8001be2:	e716      	b.n	8001a12 <__aeabi_dsub+0x52>
 8001be4:	4952      	ldr	r1, [pc, #328]	; (8001d30 <__aeabi_dsub+0x370>)
 8001be6:	468c      	mov	ip, r1
 8001be8:	44b4      	add	ip, r6
 8001bea:	4664      	mov	r4, ip
 8001bec:	2c00      	cmp	r4, #0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x232>
 8001bf0:	e0d3      	b.n	8001d9a <__aeabi_dsub+0x3da>
 8001bf2:	1b91      	subs	r1, r2, r6
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x23c>
 8001bfa:	e15e      	b.n	8001eba <__aeabi_dsub+0x4fa>
 8001bfc:	494a      	ldr	r1, [pc, #296]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bfe:	428a      	cmp	r2, r1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x244>
 8001c02:	e1be      	b.n	8001f82 <__aeabi_dsub+0x5c2>
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	464c      	mov	r4, r9
 8001c08:	0409      	lsls	r1, r1, #16
 8001c0a:	430c      	orrs	r4, r1
 8001c0c:	46a1      	mov	r9, r4
 8001c0e:	4661      	mov	r1, ip
 8001c10:	2938      	cmp	r1, #56	; 0x38
 8001c12:	dd00      	ble.n	8001c16 <__aeabi_dsub+0x256>
 8001c14:	e1ba      	b.n	8001f8c <__aeabi_dsub+0x5cc>
 8001c16:	291f      	cmp	r1, #31
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dsub+0x25c>
 8001c1a:	e227      	b.n	800206c <__aeabi_dsub+0x6ac>
 8001c1c:	2420      	movs	r4, #32
 8001c1e:	1a64      	subs	r4, r4, r1
 8001c20:	4649      	mov	r1, r9
 8001c22:	40a1      	lsls	r1, r4
 8001c24:	001e      	movs	r6, r3
 8001c26:	4688      	mov	r8, r1
 8001c28:	4661      	mov	r1, ip
 8001c2a:	40a3      	lsls	r3, r4
 8001c2c:	40ce      	lsrs	r6, r1
 8001c2e:	4641      	mov	r1, r8
 8001c30:	1e5c      	subs	r4, r3, #1
 8001c32:	41a3      	sbcs	r3, r4
 8001c34:	4331      	orrs	r1, r6
 8001c36:	4319      	orrs	r1, r3
 8001c38:	000c      	movs	r4, r1
 8001c3a:	4663      	mov	r3, ip
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	40d9      	lsrs	r1, r3
 8001c40:	187f      	adds	r7, r7, r1
 8001c42:	1824      	adds	r4, r4, r0
 8001c44:	4284      	cmp	r4, r0
 8001c46:	419b      	sbcs	r3, r3
 8001c48:	425b      	negs	r3, r3
 8001c4a:	469a      	mov	sl, r3
 8001c4c:	0016      	movs	r6, r2
 8001c4e:	44ba      	add	sl, r7
 8001c50:	e05d      	b.n	8001d0e <__aeabi_dsub+0x34e>
 8001c52:	4c38      	ldr	r4, [pc, #224]	; (8001d34 <__aeabi_dsub+0x374>)
 8001c54:	1c72      	adds	r2, r6, #1
 8001c56:	4222      	tst	r2, r4
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dsub+0x29c>
 8001c5a:	e0df      	b.n	8001e1c <__aeabi_dsub+0x45c>
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	2e00      	cmp	r6, #0
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x2a6>
 8001c64:	e15c      	b.n	8001f20 <__aeabi_dsub+0x560>
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x2ac>
 8001c6a:	e1cf      	b.n	800200c <__aeabi_dsub+0x64c>
 8001c6c:	003a      	movs	r2, r7
 8001c6e:	4302      	orrs	r2, r0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x2b4>
 8001c72:	e17f      	b.n	8001f74 <__aeabi_dsub+0x5b4>
 8001c74:	1a1c      	subs	r4, r3, r0
 8001c76:	464a      	mov	r2, r9
 8001c78:	42a3      	cmp	r3, r4
 8001c7a:	4189      	sbcs	r1, r1
 8001c7c:	1bd2      	subs	r2, r2, r7
 8001c7e:	4249      	negs	r1, r1
 8001c80:	1a52      	subs	r2, r2, r1
 8001c82:	4692      	mov	sl, r2
 8001c84:	0212      	lsls	r2, r2, #8
 8001c86:	d400      	bmi.n	8001c8a <__aeabi_dsub+0x2ca>
 8001c88:	e20a      	b.n	80020a0 <__aeabi_dsub+0x6e0>
 8001c8a:	1ac4      	subs	r4, r0, r3
 8001c8c:	42a0      	cmp	r0, r4
 8001c8e:	4180      	sbcs	r0, r0
 8001c90:	464b      	mov	r3, r9
 8001c92:	4240      	negs	r0, r0
 8001c94:	1aff      	subs	r7, r7, r3
 8001c96:	1a3b      	subs	r3, r7, r0
 8001c98:	469a      	mov	sl, r3
 8001c9a:	465d      	mov	r5, fp
 8001c9c:	e71a      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001c9e:	003a      	movs	r2, r7
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	d073      	beq.n	8001d8c <__aeabi_dsub+0x3cc>
 8001ca4:	0022      	movs	r2, r4
 8001ca6:	3a01      	subs	r2, #1
 8001ca8:	2c01      	cmp	r4, #1
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x2ee>
 8001cac:	e0cb      	b.n	8001e46 <__aeabi_dsub+0x486>
 8001cae:	4554      	cmp	r4, sl
 8001cb0:	d042      	beq.n	8001d38 <__aeabi_dsub+0x378>
 8001cb2:	4694      	mov	ip, r2
 8001cb4:	e748      	b.n	8001b48 <__aeabi_dsub+0x188>
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	3b1f      	subs	r3, #31
 8001cba:	40d8      	lsrs	r0, r3
 8001cbc:	2920      	cmp	r1, #32
 8001cbe:	d003      	beq.n	8001cc8 <__aeabi_dsub+0x308>
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	1a5b      	subs	r3, r3, r1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	4314      	orrs	r4, r2
 8001cc8:	1e63      	subs	r3, r4, #1
 8001cca:	419c      	sbcs	r4, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2600      	movs	r6, #0
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	4304      	orrs	r4, r0
 8001cd4:	0763      	lsls	r3, r4, #29
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x31a>
 8001cd8:	e6fe      	b.n	8001ad8 <__aeabi_dsub+0x118>
 8001cda:	4652      	mov	r2, sl
 8001cdc:	08e3      	lsrs	r3, r4, #3
 8001cde:	0752      	lsls	r2, r2, #29
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	4652      	mov	r2, sl
 8001ce4:	46b4      	mov	ip, r6
 8001ce6:	08d2      	lsrs	r2, r2, #3
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <__aeabi_dsub+0x368>)
 8001cea:	458c      	cmp	ip, r1
 8001cec:	d02a      	beq.n	8001d44 <__aeabi_dsub+0x384>
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	0b14      	lsrs	r4, r2, #12
 8001cf2:	4662      	mov	r2, ip
 8001cf4:	0552      	lsls	r2, r2, #21
 8001cf6:	0d52      	lsrs	r2, r2, #21
 8001cf8:	e70c      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001cfa:	003c      	movs	r4, r7
 8001cfc:	4304      	orrs	r4, r0
 8001cfe:	1e62      	subs	r2, r4, #1
 8001d00:	4194      	sbcs	r4, r2
 8001d02:	18e4      	adds	r4, r4, r3
 8001d04:	429c      	cmp	r4, r3
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	444a      	add	r2, r9
 8001d0c:	4692      	mov	sl, r2
 8001d0e:	4653      	mov	r3, sl
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	d5df      	bpl.n	8001cd4 <__aeabi_dsub+0x314>
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__aeabi_dsub+0x368>)
 8001d16:	3601      	adds	r6, #1
 8001d18:	429e      	cmp	r6, r3
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x35e>
 8001d1c:	e0a0      	b.n	8001e60 <__aeabi_dsub+0x4a0>
 8001d1e:	0032      	movs	r2, r6
 8001d20:	2400      	movs	r4, #0
 8001d22:	2300      	movs	r3, #0
 8001d24:	e6f6      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	464a      	mov	r2, r9
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	464a      	mov	r2, r9
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	0019      	movs	r1, r3
 8001d46:	4311      	orrs	r1, r2
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x38c>
 8001d4a:	e1b5      	b.n	80020b8 <__aeabi_dsub+0x6f8>
 8001d4c:	2480      	movs	r4, #128	; 0x80
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4ad5      	ldr	r2, [pc, #852]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e6dc      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 fae2 	bl	8002324 <__clzsi2>
 8001d60:	0003      	movs	r3, r0
 8001d62:	3318      	adds	r3, #24
 8001d64:	2b1f      	cmp	r3, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x3aa>
 8001d68:	e695      	b.n	8001a96 <__aeabi_dsub+0xd6>
 8001d6a:	0022      	movs	r2, r4
 8001d6c:	3808      	subs	r0, #8
 8001d6e:	4082      	lsls	r2, r0
 8001d70:	2400      	movs	r4, #0
 8001d72:	429e      	cmp	r6, r3
 8001d74:	dc00      	bgt.n	8001d78 <__aeabi_dsub+0x3b8>
 8001d76:	e69a      	b.n	8001aae <__aeabi_dsub+0xee>
 8001d78:	1af6      	subs	r6, r6, r3
 8001d7a:	4bcd      	ldr	r3, [pc, #820]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	4692      	mov	sl, r2
 8001d80:	e6a8      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001d82:	003c      	movs	r4, r7
 8001d84:	4304      	orrs	r4, r0
 8001d86:	1e62      	subs	r2, r4, #1
 8001d88:	4194      	sbcs	r4, r2
 8001d8a:	e66c      	b.n	8001a66 <__aeabi_dsub+0xa6>
 8001d8c:	464a      	mov	r2, r9
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	0752      	lsls	r2, r2, #29
 8001d92:	4313      	orrs	r3, r2
 8001d94:	464a      	mov	r2, r9
 8001d96:	08d2      	lsrs	r2, r2, #3
 8001d98:	e7a6      	b.n	8001ce8 <__aeabi_dsub+0x328>
 8001d9a:	4cc6      	ldr	r4, [pc, #792]	; (80020b4 <__aeabi_dsub+0x6f4>)
 8001d9c:	1c72      	adds	r2, r6, #1
 8001d9e:	4222      	tst	r2, r4
 8001da0:	d000      	beq.n	8001da4 <__aeabi_dsub+0x3e4>
 8001da2:	e0ac      	b.n	8001efe <__aeabi_dsub+0x53e>
 8001da4:	464a      	mov	r2, r9
 8001da6:	431a      	orrs	r2, r3
 8001da8:	2e00      	cmp	r6, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x3ee>
 8001dac:	e105      	b.n	8001fba <__aeabi_dsub+0x5fa>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x3f4>
 8001db2:	e156      	b.n	8002062 <__aeabi_dsub+0x6a2>
 8001db4:	003a      	movs	r2, r7
 8001db6:	4302      	orrs	r2, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x3fc>
 8001dba:	e0db      	b.n	8001f74 <__aeabi_dsub+0x5b4>
 8001dbc:	181c      	adds	r4, r3, r0
 8001dbe:	429c      	cmp	r4, r3
 8001dc0:	419b      	sbcs	r3, r3
 8001dc2:	444f      	add	r7, r9
 8001dc4:	46ba      	mov	sl, r7
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	449a      	add	sl, r3
 8001dca:	4653      	mov	r3, sl
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	d400      	bmi.n	8001dd2 <__aeabi_dsub+0x412>
 8001dd0:	e780      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	4bb6      	ldr	r3, [pc, #728]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001dd6:	2601      	movs	r6, #1
 8001dd8:	401a      	ands	r2, r3
 8001dda:	4692      	mov	sl, r2
 8001ddc:	e77a      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dde:	4cb3      	ldr	r4, [pc, #716]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001de0:	42a2      	cmp	r2, r4
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x426>
 8001de4:	e0c0      	b.n	8001f68 <__aeabi_dsub+0x5a8>
 8001de6:	2480      	movs	r4, #128	; 0x80
 8001de8:	464d      	mov	r5, r9
 8001dea:	0424      	lsls	r4, r4, #16
 8001dec:	4325      	orrs	r5, r4
 8001dee:	46a9      	mov	r9, r5
 8001df0:	4664      	mov	r4, ip
 8001df2:	2c38      	cmp	r4, #56	; 0x38
 8001df4:	dc53      	bgt.n	8001e9e <__aeabi_dsub+0x4de>
 8001df6:	4661      	mov	r1, ip
 8001df8:	2c1f      	cmp	r4, #31
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dsub+0x43e>
 8001dfc:	e0cd      	b.n	8001f9a <__aeabi_dsub+0x5da>
 8001dfe:	2520      	movs	r5, #32
 8001e00:	001e      	movs	r6, r3
 8001e02:	1b2d      	subs	r5, r5, r4
 8001e04:	464c      	mov	r4, r9
 8001e06:	40ab      	lsls	r3, r5
 8001e08:	40ac      	lsls	r4, r5
 8001e0a:	40ce      	lsrs	r6, r1
 8001e0c:	1e5d      	subs	r5, r3, #1
 8001e0e:	41ab      	sbcs	r3, r5
 8001e10:	4334      	orrs	r4, r6
 8001e12:	4323      	orrs	r3, r4
 8001e14:	464c      	mov	r4, r9
 8001e16:	40cc      	lsrs	r4, r1
 8001e18:	1b3f      	subs	r7, r7, r4
 8001e1a:	e045      	b.n	8001ea8 <__aeabi_dsub+0x4e8>
 8001e1c:	464a      	mov	r2, r9
 8001e1e:	1a1c      	subs	r4, r3, r0
 8001e20:	1bd1      	subs	r1, r2, r7
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	4192      	sbcs	r2, r2
 8001e26:	4252      	negs	r2, r2
 8001e28:	4692      	mov	sl, r2
 8001e2a:	000a      	movs	r2, r1
 8001e2c:	4651      	mov	r1, sl
 8001e2e:	1a52      	subs	r2, r2, r1
 8001e30:	4692      	mov	sl, r2
 8001e32:	0212      	lsls	r2, r2, #8
 8001e34:	d500      	bpl.n	8001e38 <__aeabi_dsub+0x478>
 8001e36:	e083      	b.n	8001f40 <__aeabi_dsub+0x580>
 8001e38:	4653      	mov	r3, sl
 8001e3a:	4323      	orrs	r3, r4
 8001e3c:	d000      	beq.n	8001e40 <__aeabi_dsub+0x480>
 8001e3e:	e621      	b.n	8001a84 <__aeabi_dsub+0xc4>
 8001e40:	2200      	movs	r2, #0
 8001e42:	2500      	movs	r5, #0
 8001e44:	e753      	b.n	8001cee <__aeabi_dsub+0x32e>
 8001e46:	181c      	adds	r4, r3, r0
 8001e48:	429c      	cmp	r4, r3
 8001e4a:	419b      	sbcs	r3, r3
 8001e4c:	444f      	add	r7, r9
 8001e4e:	46ba      	mov	sl, r7
 8001e50:	425b      	negs	r3, r3
 8001e52:	449a      	add	sl, r3
 8001e54:	4653      	mov	r3, sl
 8001e56:	2601      	movs	r6, #1
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x49e>
 8001e5c:	e73a      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001e5e:	2602      	movs	r6, #2
 8001e60:	4652      	mov	r2, sl
 8001e62:	4b93      	ldr	r3, [pc, #588]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	401a      	ands	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	4021      	ands	r1, r4
 8001e6c:	0862      	lsrs	r2, r4, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	07dc      	lsls	r4, r3, #31
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	469a      	mov	sl, r3
 8001e76:	4314      	orrs	r4, r2
 8001e78:	e62c      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001e7a:	0039      	movs	r1, r7
 8001e7c:	3a20      	subs	r2, #32
 8001e7e:	40d1      	lsrs	r1, r2
 8001e80:	4662      	mov	r2, ip
 8001e82:	2a20      	cmp	r2, #32
 8001e84:	d006      	beq.n	8001e94 <__aeabi_dsub+0x4d4>
 8001e86:	4664      	mov	r4, ip
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	1b12      	subs	r2, r2, r4
 8001e8c:	003c      	movs	r4, r7
 8001e8e:	4094      	lsls	r4, r2
 8001e90:	4304      	orrs	r4, r0
 8001e92:	9401      	str	r4, [sp, #4]
 8001e94:	9c01      	ldr	r4, [sp, #4]
 8001e96:	1e62      	subs	r2, r4, #1
 8001e98:	4194      	sbcs	r4, r2
 8001e9a:	430c      	orrs	r4, r1
 8001e9c:	e5e3      	b.n	8001a66 <__aeabi_dsub+0xa6>
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	4319      	orrs	r1, r3
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	1e5c      	subs	r4, r3, #1
 8001ea6:	41a3      	sbcs	r3, r4
 8001ea8:	1ac4      	subs	r4, r0, r3
 8001eaa:	42a0      	cmp	r0, r4
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	425b      	negs	r3, r3
 8001eb0:	1afb      	subs	r3, r7, r3
 8001eb2:	469a      	mov	sl, r3
 8001eb4:	465d      	mov	r5, fp
 8001eb6:	0016      	movs	r6, r2
 8001eb8:	e5dc      	b.n	8001a74 <__aeabi_dsub+0xb4>
 8001eba:	4649      	mov	r1, r9
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x502>
 8001ec0:	e0ae      	b.n	8002020 <__aeabi_dsub+0x660>
 8001ec2:	4661      	mov	r1, ip
 8001ec4:	4664      	mov	r4, ip
 8001ec6:	3901      	subs	r1, #1
 8001ec8:	2c01      	cmp	r4, #1
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x50e>
 8001ecc:	e0e0      	b.n	8002090 <__aeabi_dsub+0x6d0>
 8001ece:	4c77      	ldr	r4, [pc, #476]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001ed0:	45a4      	cmp	ip, r4
 8001ed2:	d056      	beq.n	8001f82 <__aeabi_dsub+0x5c2>
 8001ed4:	468c      	mov	ip, r1
 8001ed6:	e69a      	b.n	8001c0e <__aeabi_dsub+0x24e>
 8001ed8:	4661      	mov	r1, ip
 8001eda:	2220      	movs	r2, #32
 8001edc:	003c      	movs	r4, r7
 8001ede:	1a52      	subs	r2, r2, r1
 8001ee0:	4094      	lsls	r4, r2
 8001ee2:	0001      	movs	r1, r0
 8001ee4:	4090      	lsls	r0, r2
 8001ee6:	46a0      	mov	r8, r4
 8001ee8:	4664      	mov	r4, ip
 8001eea:	1e42      	subs	r2, r0, #1
 8001eec:	4190      	sbcs	r0, r2
 8001eee:	4662      	mov	r2, ip
 8001ef0:	40e1      	lsrs	r1, r4
 8001ef2:	4644      	mov	r4, r8
 8001ef4:	40d7      	lsrs	r7, r2
 8001ef6:	430c      	orrs	r4, r1
 8001ef8:	4304      	orrs	r4, r0
 8001efa:	44b9      	add	r9, r7
 8001efc:	e701      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001efe:	496b      	ldr	r1, [pc, #428]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x546>
 8001f04:	e70c      	b.n	8001d20 <__aeabi_dsub+0x360>
 8001f06:	1818      	adds	r0, r3, r0
 8001f08:	4298      	cmp	r0, r3
 8001f0a:	419b      	sbcs	r3, r3
 8001f0c:	444f      	add	r7, r9
 8001f0e:	425b      	negs	r3, r3
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	07dc      	lsls	r4, r3, #31
 8001f14:	0840      	lsrs	r0, r0, #1
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	469a      	mov	sl, r3
 8001f1a:	0016      	movs	r6, r2
 8001f1c:	4304      	orrs	r4, r0
 8001f1e:	e6d9      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x566>
 8001f24:	e081      	b.n	800202a <__aeabi_dsub+0x66a>
 8001f26:	003b      	movs	r3, r7
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	d11d      	bne.n	8001f68 <__aeabi_dsub+0x5a8>
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	2500      	movs	r5, #0
 8001f30:	0312      	lsls	r2, r2, #12
 8001f32:	e70b      	b.n	8001d4c <__aeabi_dsub+0x38c>
 8001f34:	08c0      	lsrs	r0, r0, #3
 8001f36:	077b      	lsls	r3, r7, #29
 8001f38:	465d      	mov	r5, fp
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	08fa      	lsrs	r2, r7, #3
 8001f3e:	e6d3      	b.n	8001ce8 <__aeabi_dsub+0x328>
 8001f40:	1ac4      	subs	r4, r0, r3
 8001f42:	42a0      	cmp	r0, r4
 8001f44:	4180      	sbcs	r0, r0
 8001f46:	464b      	mov	r3, r9
 8001f48:	4240      	negs	r0, r0
 8001f4a:	1aff      	subs	r7, r7, r3
 8001f4c:	1a3b      	subs	r3, r7, r0
 8001f4e:	469a      	mov	sl, r3
 8001f50:	465d      	mov	r5, fp
 8001f52:	e597      	b.n	8001a84 <__aeabi_dsub+0xc4>
 8001f54:	1a1c      	subs	r4, r3, r0
 8001f56:	464a      	mov	r2, r9
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	419b      	sbcs	r3, r3
 8001f5c:	1bd7      	subs	r7, r2, r7
 8001f5e:	425b      	negs	r3, r3
 8001f60:	1afb      	subs	r3, r7, r3
 8001f62:	469a      	mov	sl, r3
 8001f64:	2601      	movs	r6, #1
 8001f66:	e585      	b.n	8001a74 <__aeabi_dsub+0xb4>
 8001f68:	08c0      	lsrs	r0, r0, #3
 8001f6a:	077b      	lsls	r3, r7, #29
 8001f6c:	465d      	mov	r5, fp
 8001f6e:	4303      	orrs	r3, r0
 8001f70:	08fa      	lsrs	r2, r7, #3
 8001f72:	e6e7      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001f74:	464a      	mov	r2, r9
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	464a      	mov	r2, r9
 8001f7e:	08d2      	lsrs	r2, r2, #3
 8001f80:	e6b5      	b.n	8001cee <__aeabi_dsub+0x32e>
 8001f82:	08c0      	lsrs	r0, r0, #3
 8001f84:	077b      	lsls	r3, r7, #29
 8001f86:	4303      	orrs	r3, r0
 8001f88:	08fa      	lsrs	r2, r7, #3
 8001f8a:	e6db      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	4319      	orrs	r1, r3
 8001f90:	000b      	movs	r3, r1
 8001f92:	1e59      	subs	r1, r3, #1
 8001f94:	418b      	sbcs	r3, r1
 8001f96:	001c      	movs	r4, r3
 8001f98:	e653      	b.n	8001c42 <__aeabi_dsub+0x282>
 8001f9a:	464d      	mov	r5, r9
 8001f9c:	3c20      	subs	r4, #32
 8001f9e:	40e5      	lsrs	r5, r4
 8001fa0:	2920      	cmp	r1, #32
 8001fa2:	d005      	beq.n	8001fb0 <__aeabi_dsub+0x5f0>
 8001fa4:	2440      	movs	r4, #64	; 0x40
 8001fa6:	1a64      	subs	r4, r4, r1
 8001fa8:	4649      	mov	r1, r9
 8001faa:	40a1      	lsls	r1, r4
 8001fac:	430b      	orrs	r3, r1
 8001fae:	4698      	mov	r8, r3
 8001fb0:	4643      	mov	r3, r8
 8001fb2:	1e5c      	subs	r4, r3, #1
 8001fb4:	41a3      	sbcs	r3, r4
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	e776      	b.n	8001ea8 <__aeabi_dsub+0x4e8>
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d0e1      	beq.n	8001f82 <__aeabi_dsub+0x5c2>
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	4302      	orrs	r2, r0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x608>
 8001fc6:	e6b8      	b.n	8001d3a <__aeabi_dsub+0x37a>
 8001fc8:	464a      	mov	r2, r9
 8001fca:	0752      	lsls	r2, r2, #29
 8001fcc:	2480      	movs	r4, #128	; 0x80
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0324      	lsls	r4, r4, #12
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	4222      	tst	r2, r4
 8001fd8:	d007      	beq.n	8001fea <__aeabi_dsub+0x62a>
 8001fda:	08fe      	lsrs	r6, r7, #3
 8001fdc:	4226      	tst	r6, r4
 8001fde:	d104      	bne.n	8001fea <__aeabi_dsub+0x62a>
 8001fe0:	465d      	mov	r5, fp
 8001fe2:	0032      	movs	r2, r6
 8001fe4:	08c3      	lsrs	r3, r0, #3
 8001fe6:	077f      	lsls	r7, r7, #29
 8001fe8:	433b      	orrs	r3, r7
 8001fea:	0f59      	lsrs	r1, r3, #29
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	0749      	lsls	r1, r1, #29
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	e6a6      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001ff6:	1ac4      	subs	r4, r0, r3
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	4180      	sbcs	r0, r0
 8001ffc:	464b      	mov	r3, r9
 8001ffe:	4240      	negs	r0, r0
 8002000:	1aff      	subs	r7, r7, r3
 8002002:	1a3b      	subs	r3, r7, r0
 8002004:	469a      	mov	sl, r3
 8002006:	465d      	mov	r5, fp
 8002008:	2601      	movs	r6, #1
 800200a:	e533      	b.n	8001a74 <__aeabi_dsub+0xb4>
 800200c:	003b      	movs	r3, r7
 800200e:	4303      	orrs	r3, r0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x654>
 8002012:	e715      	b.n	8001e40 <__aeabi_dsub+0x480>
 8002014:	08c0      	lsrs	r0, r0, #3
 8002016:	077b      	lsls	r3, r7, #29
 8002018:	465d      	mov	r5, fp
 800201a:	4303      	orrs	r3, r0
 800201c:	08fa      	lsrs	r2, r7, #3
 800201e:	e666      	b.n	8001cee <__aeabi_dsub+0x32e>
 8002020:	08c0      	lsrs	r0, r0, #3
 8002022:	077b      	lsls	r3, r7, #29
 8002024:	4303      	orrs	r3, r0
 8002026:	08fa      	lsrs	r2, r7, #3
 8002028:	e65e      	b.n	8001ce8 <__aeabi_dsub+0x328>
 800202a:	003a      	movs	r2, r7
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	4302      	orrs	r2, r0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x674>
 8002032:	e682      	b.n	8001d3a <__aeabi_dsub+0x37a>
 8002034:	464a      	mov	r2, r9
 8002036:	0752      	lsls	r2, r2, #29
 8002038:	2480      	movs	r4, #128	; 0x80
 800203a:	4313      	orrs	r3, r2
 800203c:	464a      	mov	r2, r9
 800203e:	0324      	lsls	r4, r4, #12
 8002040:	08d2      	lsrs	r2, r2, #3
 8002042:	4222      	tst	r2, r4
 8002044:	d007      	beq.n	8002056 <__aeabi_dsub+0x696>
 8002046:	08fe      	lsrs	r6, r7, #3
 8002048:	4226      	tst	r6, r4
 800204a:	d104      	bne.n	8002056 <__aeabi_dsub+0x696>
 800204c:	465d      	mov	r5, fp
 800204e:	0032      	movs	r2, r6
 8002050:	08c3      	lsrs	r3, r0, #3
 8002052:	077f      	lsls	r7, r7, #29
 8002054:	433b      	orrs	r3, r7
 8002056:	0f59      	lsrs	r1, r3, #29
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	430b      	orrs	r3, r1
 8002060:	e670      	b.n	8001d44 <__aeabi_dsub+0x384>
 8002062:	08c0      	lsrs	r0, r0, #3
 8002064:	077b      	lsls	r3, r7, #29
 8002066:	4303      	orrs	r3, r0
 8002068:	08fa      	lsrs	r2, r7, #3
 800206a:	e640      	b.n	8001cee <__aeabi_dsub+0x32e>
 800206c:	464c      	mov	r4, r9
 800206e:	3920      	subs	r1, #32
 8002070:	40cc      	lsrs	r4, r1
 8002072:	4661      	mov	r1, ip
 8002074:	2920      	cmp	r1, #32
 8002076:	d006      	beq.n	8002086 <__aeabi_dsub+0x6c6>
 8002078:	4666      	mov	r6, ip
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	1b89      	subs	r1, r1, r6
 800207e:	464e      	mov	r6, r9
 8002080:	408e      	lsls	r6, r1
 8002082:	4333      	orrs	r3, r6
 8002084:	4698      	mov	r8, r3
 8002086:	4643      	mov	r3, r8
 8002088:	1e59      	subs	r1, r3, #1
 800208a:	418b      	sbcs	r3, r1
 800208c:	431c      	orrs	r4, r3
 800208e:	e5d8      	b.n	8001c42 <__aeabi_dsub+0x282>
 8002090:	181c      	adds	r4, r3, r0
 8002092:	4284      	cmp	r4, r0
 8002094:	4180      	sbcs	r0, r0
 8002096:	444f      	add	r7, r9
 8002098:	46ba      	mov	sl, r7
 800209a:	4240      	negs	r0, r0
 800209c:	4482      	add	sl, r0
 800209e:	e6d9      	b.n	8001e54 <__aeabi_dsub+0x494>
 80020a0:	4653      	mov	r3, sl
 80020a2:	4323      	orrs	r3, r4
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x6e8>
 80020a6:	e6cb      	b.n	8001e40 <__aeabi_dsub+0x480>
 80020a8:	e614      	b.n	8001cd4 <__aeabi_dsub+0x314>
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	ff7fffff 	.word	0xff7fffff
 80020b4:	000007fe 	.word	0x000007fe
 80020b8:	2300      	movs	r3, #0
 80020ba:	4a01      	ldr	r2, [pc, #4]	; (80020c0 <__aeabi_dsub+0x700>)
 80020bc:	001c      	movs	r4, r3
 80020be:	e529      	b.n	8001b14 <__aeabi_dsub+0x154>
 80020c0:	000007ff 	.word	0x000007ff

080020c4 <__aeabi_dcmpun>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	0005      	movs	r5, r0
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020ca:	031c      	lsls	r4, r3, #12
 80020cc:	0016      	movs	r6, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	030a      	lsls	r2, r1, #12
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	0b12      	lsrs	r2, r2, #12
 80020d6:	0d49      	lsrs	r1, r1, #21
 80020d8:	0b24      	lsrs	r4, r4, #12
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	4281      	cmp	r1, r0
 80020de:	d008      	beq.n	80020f2 <__aeabi_dcmpun+0x2e>
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020e2:	2000      	movs	r0, #0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d103      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020e8:	0020      	movs	r0, r4
 80020ea:	4330      	orrs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	2001      	movs	r0, #1
 80020f4:	432a      	orrs	r2, r5
 80020f6:	d1fb      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020f8:	e7f2      	b.n	80020e0 <__aeabi_dcmpun+0x1c>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__aeabi_d2iz>:
 8002100:	000a      	movs	r2, r1
 8002102:	b530      	push	{r4, r5, lr}
 8002104:	4c13      	ldr	r4, [pc, #76]	; (8002154 <__aeabi_d2iz+0x54>)
 8002106:	0053      	lsls	r3, r2, #1
 8002108:	0309      	lsls	r1, r1, #12
 800210a:	0005      	movs	r5, r0
 800210c:	0b09      	lsrs	r1, r1, #12
 800210e:	2000      	movs	r0, #0
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	0fd2      	lsrs	r2, r2, #31
 8002114:	42a3      	cmp	r3, r4
 8002116:	dd04      	ble.n	8002122 <__aeabi_d2iz+0x22>
 8002118:	480f      	ldr	r0, [pc, #60]	; (8002158 <__aeabi_d2iz+0x58>)
 800211a:	4283      	cmp	r3, r0
 800211c:	dd02      	ble.n	8002124 <__aeabi_d2iz+0x24>
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <__aeabi_d2iz+0x5c>)
 8002120:	18d0      	adds	r0, r2, r3
 8002122:	bd30      	pop	{r4, r5, pc}
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	0340      	lsls	r0, r0, #13
 8002128:	4301      	orrs	r1, r0
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <__aeabi_d2iz+0x60>)
 800212c:	1ac0      	subs	r0, r0, r3
 800212e:	281f      	cmp	r0, #31
 8002130:	dd08      	ble.n	8002144 <__aeabi_d2iz+0x44>
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <__aeabi_d2iz+0x64>)
 8002134:	1ac3      	subs	r3, r0, r3
 8002136:	40d9      	lsrs	r1, r3
 8002138:	000b      	movs	r3, r1
 800213a:	4258      	negs	r0, r3
 800213c:	2a00      	cmp	r2, #0
 800213e:	d1f0      	bne.n	8002122 <__aeabi_d2iz+0x22>
 8002140:	0018      	movs	r0, r3
 8002142:	e7ee      	b.n	8002122 <__aeabi_d2iz+0x22>
 8002144:	4c08      	ldr	r4, [pc, #32]	; (8002168 <__aeabi_d2iz+0x68>)
 8002146:	40c5      	lsrs	r5, r0
 8002148:	46a4      	mov	ip, r4
 800214a:	4463      	add	r3, ip
 800214c:	4099      	lsls	r1, r3
 800214e:	000b      	movs	r3, r1
 8002150:	432b      	orrs	r3, r5
 8002152:	e7f2      	b.n	800213a <__aeabi_d2iz+0x3a>
 8002154:	000003fe 	.word	0x000003fe
 8002158:	0000041d 	.word	0x0000041d
 800215c:	7fffffff 	.word	0x7fffffff
 8002160:	00000433 	.word	0x00000433
 8002164:	00000413 	.word	0x00000413
 8002168:	fffffbed 	.word	0xfffffbed

0800216c <__aeabi_i2d>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2800      	cmp	r0, #0
 8002170:	d016      	beq.n	80021a0 <__aeabi_i2d+0x34>
 8002172:	17c3      	asrs	r3, r0, #31
 8002174:	18c5      	adds	r5, r0, r3
 8002176:	405d      	eors	r5, r3
 8002178:	0fc4      	lsrs	r4, r0, #31
 800217a:	0028      	movs	r0, r5
 800217c:	f000 f8d2 	bl	8002324 <__clzsi2>
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <__aeabi_i2d+0x5c>)
 8002182:	1a1b      	subs	r3, r3, r0
 8002184:	280a      	cmp	r0, #10
 8002186:	dc16      	bgt.n	80021b6 <__aeabi_i2d+0x4a>
 8002188:	0002      	movs	r2, r0
 800218a:	002e      	movs	r6, r5
 800218c:	3215      	adds	r2, #21
 800218e:	4096      	lsls	r6, r2
 8002190:	220b      	movs	r2, #11
 8002192:	1a12      	subs	r2, r2, r0
 8002194:	40d5      	lsrs	r5, r2
 8002196:	055b      	lsls	r3, r3, #21
 8002198:	032d      	lsls	r5, r5, #12
 800219a:	0b2d      	lsrs	r5, r5, #12
 800219c:	0d5b      	lsrs	r3, r3, #21
 800219e:	e003      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021a0:	2400      	movs	r4, #0
 80021a2:	2300      	movs	r3, #0
 80021a4:	2500      	movs	r5, #0
 80021a6:	2600      	movs	r6, #0
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	432b      	orrs	r3, r5
 80021ac:	07e4      	lsls	r4, r4, #31
 80021ae:	4323      	orrs	r3, r4
 80021b0:	0030      	movs	r0, r6
 80021b2:	0019      	movs	r1, r3
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
 80021b6:	380b      	subs	r0, #11
 80021b8:	4085      	lsls	r5, r0
 80021ba:	055b      	lsls	r3, r3, #21
 80021bc:	032d      	lsls	r5, r5, #12
 80021be:	2600      	movs	r6, #0
 80021c0:	0b2d      	lsrs	r5, r5, #12
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	e7f0      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	0000041e 	.word	0x0000041e

080021cc <__aeabi_ui2d>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	1e04      	subs	r4, r0, #0
 80021d0:	d010      	beq.n	80021f4 <__aeabi_ui2d+0x28>
 80021d2:	f000 f8a7 	bl	8002324 <__clzsi2>
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <__aeabi_ui2d+0x48>)
 80021d8:	1a1b      	subs	r3, r3, r0
 80021da:	280a      	cmp	r0, #10
 80021dc:	dc11      	bgt.n	8002202 <__aeabi_ui2d+0x36>
 80021de:	220b      	movs	r2, #11
 80021e0:	0021      	movs	r1, r4
 80021e2:	1a12      	subs	r2, r2, r0
 80021e4:	40d1      	lsrs	r1, r2
 80021e6:	3015      	adds	r0, #21
 80021e8:	030a      	lsls	r2, r1, #12
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4084      	lsls	r4, r0
 80021ee:	0b12      	lsrs	r2, r2, #12
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	e001      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	051b      	lsls	r3, r3, #20
 80021fa:	4313      	orrs	r3, r2
 80021fc:	0020      	movs	r0, r4
 80021fe:	0019      	movs	r1, r3
 8002200:	bd10      	pop	{r4, pc}
 8002202:	0022      	movs	r2, r4
 8002204:	380b      	subs	r0, #11
 8002206:	4082      	lsls	r2, r0
 8002208:	055b      	lsls	r3, r3, #21
 800220a:	0312      	lsls	r2, r2, #12
 800220c:	2400      	movs	r4, #0
 800220e:	0b12      	lsrs	r2, r2, #12
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	e7f1      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 8002214:	0000041e 	.word	0x0000041e

08002218 <__aeabi_d2f>:
 8002218:	0002      	movs	r2, r0
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	004b      	lsls	r3, r1, #1
 800221e:	030d      	lsls	r5, r1, #12
 8002220:	0f40      	lsrs	r0, r0, #29
 8002222:	0d5b      	lsrs	r3, r3, #21
 8002224:	0fcc      	lsrs	r4, r1, #31
 8002226:	0a6d      	lsrs	r5, r5, #9
 8002228:	493a      	ldr	r1, [pc, #232]	; (8002314 <__aeabi_d2f+0xfc>)
 800222a:	4305      	orrs	r5, r0
 800222c:	1c58      	adds	r0, r3, #1
 800222e:	00d7      	lsls	r7, r2, #3
 8002230:	4208      	tst	r0, r1
 8002232:	d00a      	beq.n	800224a <__aeabi_d2f+0x32>
 8002234:	4938      	ldr	r1, [pc, #224]	; (8002318 <__aeabi_d2f+0x100>)
 8002236:	1859      	adds	r1, r3, r1
 8002238:	29fe      	cmp	r1, #254	; 0xfe
 800223a:	dd16      	ble.n	800226a <__aeabi_d2f+0x52>
 800223c:	20ff      	movs	r0, #255	; 0xff
 800223e:	2200      	movs	r2, #0
 8002240:	05c0      	lsls	r0, r0, #23
 8002242:	4310      	orrs	r0, r2
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4320      	orrs	r0, r4
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <__aeabi_d2f+0x44>
 800224e:	433d      	orrs	r5, r7
 8002250:	d026      	beq.n	80022a0 <__aeabi_d2f+0x88>
 8002252:	2205      	movs	r2, #5
 8002254:	0192      	lsls	r2, r2, #6
 8002256:	0a52      	lsrs	r2, r2, #9
 8002258:	b2d8      	uxtb	r0, r3
 800225a:	e7f1      	b.n	8002240 <__aeabi_d2f+0x28>
 800225c:	432f      	orrs	r7, r5
 800225e:	d0ed      	beq.n	800223c <__aeabi_d2f+0x24>
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	03d2      	lsls	r2, r2, #15
 8002264:	20ff      	movs	r0, #255	; 0xff
 8002266:	432a      	orrs	r2, r5
 8002268:	e7ea      	b.n	8002240 <__aeabi_d2f+0x28>
 800226a:	2900      	cmp	r1, #0
 800226c:	dd1b      	ble.n	80022a6 <__aeabi_d2f+0x8e>
 800226e:	0192      	lsls	r2, r2, #6
 8002270:	1e50      	subs	r0, r2, #1
 8002272:	4182      	sbcs	r2, r0
 8002274:	00ed      	lsls	r5, r5, #3
 8002276:	0f7f      	lsrs	r7, r7, #29
 8002278:	432a      	orrs	r2, r5
 800227a:	433a      	orrs	r2, r7
 800227c:	0753      	lsls	r3, r2, #29
 800227e:	d047      	beq.n	8002310 <__aeabi_d2f+0xf8>
 8002280:	230f      	movs	r3, #15
 8002282:	4013      	ands	r3, r2
 8002284:	2b04      	cmp	r3, #4
 8002286:	d000      	beq.n	800228a <__aeabi_d2f+0x72>
 8002288:	3204      	adds	r2, #4
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	04db      	lsls	r3, r3, #19
 800228e:	4013      	ands	r3, r2
 8002290:	d03e      	beq.n	8002310 <__aeabi_d2f+0xf8>
 8002292:	1c48      	adds	r0, r1, #1
 8002294:	29fe      	cmp	r1, #254	; 0xfe
 8002296:	d0d1      	beq.n	800223c <__aeabi_d2f+0x24>
 8002298:	0192      	lsls	r2, r2, #6
 800229a:	0a52      	lsrs	r2, r2, #9
 800229c:	b2c0      	uxtb	r0, r0
 800229e:	e7cf      	b.n	8002240 <__aeabi_d2f+0x28>
 80022a0:	2000      	movs	r0, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	e7cc      	b.n	8002240 <__aeabi_d2f+0x28>
 80022a6:	000a      	movs	r2, r1
 80022a8:	3217      	adds	r2, #23
 80022aa:	db2f      	blt.n	800230c <__aeabi_d2f+0xf4>
 80022ac:	2680      	movs	r6, #128	; 0x80
 80022ae:	0436      	lsls	r6, r6, #16
 80022b0:	432e      	orrs	r6, r5
 80022b2:	251e      	movs	r5, #30
 80022b4:	1a6d      	subs	r5, r5, r1
 80022b6:	2d1f      	cmp	r5, #31
 80022b8:	dd11      	ble.n	80022de <__aeabi_d2f+0xc6>
 80022ba:	2202      	movs	r2, #2
 80022bc:	4252      	negs	r2, r2
 80022be:	1a52      	subs	r2, r2, r1
 80022c0:	0031      	movs	r1, r6
 80022c2:	40d1      	lsrs	r1, r2
 80022c4:	2d20      	cmp	r5, #32
 80022c6:	d004      	beq.n	80022d2 <__aeabi_d2f+0xba>
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <__aeabi_d2f+0x104>)
 80022ca:	4694      	mov	ip, r2
 80022cc:	4463      	add	r3, ip
 80022ce:	409e      	lsls	r6, r3
 80022d0:	4337      	orrs	r7, r6
 80022d2:	003a      	movs	r2, r7
 80022d4:	1e53      	subs	r3, r2, #1
 80022d6:	419a      	sbcs	r2, r3
 80022d8:	430a      	orrs	r2, r1
 80022da:	2100      	movs	r1, #0
 80022dc:	e7ce      	b.n	800227c <__aeabi_d2f+0x64>
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <__aeabi_d2f+0x108>)
 80022e0:	0038      	movs	r0, r7
 80022e2:	4694      	mov	ip, r2
 80022e4:	4463      	add	r3, ip
 80022e6:	4098      	lsls	r0, r3
 80022e8:	003a      	movs	r2, r7
 80022ea:	1e41      	subs	r1, r0, #1
 80022ec:	4188      	sbcs	r0, r1
 80022ee:	409e      	lsls	r6, r3
 80022f0:	40ea      	lsrs	r2, r5
 80022f2:	4330      	orrs	r0, r6
 80022f4:	4302      	orrs	r2, r0
 80022f6:	2100      	movs	r1, #0
 80022f8:	0753      	lsls	r3, r2, #29
 80022fa:	d1c1      	bne.n	8002280 <__aeabi_d2f+0x68>
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0013      	movs	r3, r2
 8002300:	04c9      	lsls	r1, r1, #19
 8002302:	2001      	movs	r0, #1
 8002304:	400b      	ands	r3, r1
 8002306:	420a      	tst	r2, r1
 8002308:	d1c6      	bne.n	8002298 <__aeabi_d2f+0x80>
 800230a:	e7a3      	b.n	8002254 <__aeabi_d2f+0x3c>
 800230c:	2300      	movs	r3, #0
 800230e:	e7a0      	b.n	8002252 <__aeabi_d2f+0x3a>
 8002310:	000b      	movs	r3, r1
 8002312:	e79f      	b.n	8002254 <__aeabi_d2f+0x3c>
 8002314:	000007fe 	.word	0x000007fe
 8002318:	fffffc80 	.word	0xfffffc80
 800231c:	fffffca2 	.word	0xfffffca2
 8002320:	fffffc82 	.word	0xfffffc82

08002324 <__clzsi2>:
 8002324:	211c      	movs	r1, #28
 8002326:	2301      	movs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	4298      	cmp	r0, r3
 800232c:	d301      	bcc.n	8002332 <__clzsi2+0xe>
 800232e:	0c00      	lsrs	r0, r0, #16
 8002330:	3910      	subs	r1, #16
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	4298      	cmp	r0, r3
 8002336:	d301      	bcc.n	800233c <__clzsi2+0x18>
 8002338:	0a00      	lsrs	r0, r0, #8
 800233a:	3908      	subs	r1, #8
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	4298      	cmp	r0, r3
 8002340:	d301      	bcc.n	8002346 <__clzsi2+0x22>
 8002342:	0900      	lsrs	r0, r0, #4
 8002344:	3904      	subs	r1, #4
 8002346:	a202      	add	r2, pc, #8	; (adr r2, 8002350 <__clzsi2+0x2c>)
 8002348:	5c10      	ldrb	r0, [r2, r0]
 800234a:	1840      	adds	r0, r0, r1
 800234c:	4770      	bx	lr
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	02020304 	.word	0x02020304
 8002354:	01010101 	.word	0x01010101
	...

08002360 <HeadLights_initialize>:
uint8_t headLightPWM = 0;
bno055_vector_t v = {0};


void HeadLights_initialize()
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	  MX_I2C1_Init();
 8002364:	f002 f94a 	bl	80045fc <MX_I2C1_Init>
	  Servo_Init(&htim1,TIM_CHANNEL_3);
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HeadLights_initialize+0x2c>)
 800236a:	2108      	movs	r1, #8
 800236c:	0018      	movs	r0, r3
 800236e:	f001 f9bf 	bl	80036f0 <Servo_Init>
	  bno055_assignI2C(&hi2c1);
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <HeadLights_initialize+0x30>)
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f9ad 	bl	80026d4 <bno055_assignI2C>
	  bno055_setup();
 800237a:	f000 fb5f 	bl	8002a3c <bno055_setup>
	  bno055_setOperationModeNDOF();
 800237e:	f000 fb46 	bl	8002a0e <bno055_setOperationModeNDOF>
	  MX_GPIO_Init();
 8002382:	f002 f88d 	bl	80044a0 <MX_GPIO_Init>
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200003d4 	.word	0x200003d4
 8002390:	200002e0 	.word	0x200002e0

08002394 <HeadLights_control>:

void HeadLights_control(void) {
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b08b      	sub	sp, #44	; 0x2c
 8002398:	af00      	add	r7, sp, #0
    v = bno055_getVectorEuler(); // BNO055 센서로부터 Pitch 각도 읽기
 800239a:	4c0e      	ldr	r4, [pc, #56]	; (80023d4 <HeadLights_control+0x40>)
 800239c:	003b      	movs	r3, r7
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fca4 	bl	8002cec <bno055_getVectorEuler>
 80023a4:	003b      	movs	r3, r7
 80023a6:	0020      	movs	r0, r4
 80023a8:	0019      	movs	r1, r3
 80023aa:	2320      	movs	r3, #32
 80023ac:	001a      	movs	r2, r3
 80023ae:	f00a ff0b 	bl	800d1c8 <memcpy>
    double my_y = v.y;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HeadLights_control+0x40>)
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	623a      	str	r2, [r7, #32]
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24

    HeadLights_adjustPitch((int)my_y); // 계산된 각도를 전조등 조절 장치에 적용
 80023bc:	6a38      	ldr	r0, [r7, #32]
 80023be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c0:	f7ff fe9e 	bl	8002100 <__aeabi_d2iz>
 80023c4:	0003      	movs	r3, r0
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 f806 	bl	80023d8 <HeadLights_adjustPitch>
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b00b      	add	sp, #44	; 0x2c
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	20000218 	.word	0x20000218

080023d8 <HeadLights_adjustPitch>:

void HeadLights_adjustPitch(int new_pitch_angle) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    pitch_angle = new_pitch_angle;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HeadLights_adjustPitch+0x80>)
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	601a      	str	r2, [r3, #0]

    if (pitch_angle >= 0 && pitch_angle <= 5)
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HeadLights_adjustPitch+0x80>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db07      	blt.n	80023fe <HeadLights_adjustPitch+0x26>
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HeadLights_adjustPitch+0x80>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	dc03      	bgt.n	80023fe <HeadLights_adjustPitch+0x26>
    {
        headlight_mode = MODE0;
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <HeadLights_adjustPitch+0x84>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e022      	b.n	8002444 <HeadLights_adjustPitch+0x6c>
    }
    else if (pitch_angle > 5 && pitch_angle <= 10)
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HeadLights_adjustPitch+0x80>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b05      	cmp	r3, #5
 8002404:	dd07      	ble.n	8002416 <HeadLights_adjustPitch+0x3e>
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HeadLights_adjustPitch+0x80>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b0a      	cmp	r3, #10
 800240c:	dc03      	bgt.n	8002416 <HeadLights_adjustPitch+0x3e>
    {
        headlight_mode = MODE1;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HeadLights_adjustPitch+0x84>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e016      	b.n	8002444 <HeadLights_adjustPitch+0x6c>
    }
    else if (pitch_angle > 10 && pitch_angle <= 15)
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HeadLights_adjustPitch+0x80>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b0a      	cmp	r3, #10
 800241c:	dd07      	ble.n	800242e <HeadLights_adjustPitch+0x56>
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HeadLights_adjustPitch+0x80>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	dc03      	bgt.n	800242e <HeadLights_adjustPitch+0x56>
    {
        headlight_mode = MODE2;
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HeadLights_adjustPitch+0x84>)
 8002428:	2202      	movs	r2, #2
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e00a      	b.n	8002444 <HeadLights_adjustPitch+0x6c>
    }
    else if (pitch_angle > 15 && pitch_angle <= 20)
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HeadLights_adjustPitch+0x80>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	dd0c      	ble.n	8002450 <HeadLights_adjustPitch+0x78>
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HeadLights_adjustPitch+0x80>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b14      	cmp	r3, #20
 800243c:	dc08      	bgt.n	8002450 <HeadLights_adjustPitch+0x78>
    {
        headlight_mode = MODE3;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HeadLights_adjustPitch+0x84>)
 8002440:	2203      	movs	r2, #3
 8002442:	601a      	str	r2, [r3, #0]
    else
    {
        return;
    }

    HeadLights_setmotorAngle(headlight_mode);
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HeadLights_adjustPitch+0x84>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0018      	movs	r0, r3
 800244a:	f000 f809 	bl	8002460 <HeadLights_setmotorAngle>
 800244e:	e000      	b.n	8002452 <HeadLights_adjustPitch+0x7a>
        return;
 8002450:	46c0      	nop			; (mov r8, r8)
}
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000210 	.word	0x20000210
 800245c:	2000020c 	.word	0x2000020c

08002460 <HeadLights_setmotorAngle>:

void HeadLights_setmotorAngle(int headlight_mode) {
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    // headlight_mode에 따라 서보 모터 각도 설정
    uint8_t angle;


    switch (headlight_mode) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d013      	beq.n	8002496 <HeadLights_setmotorAngle+0x36>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b03      	cmp	r3, #3
 8002472:	dc15      	bgt.n	80024a0 <HeadLights_setmotorAngle+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d003      	beq.n	8002482 <HeadLights_setmotorAngle+0x22>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d005      	beq.n	800248c <HeadLights_setmotorAngle+0x2c>
 8002480:	e00e      	b.n	80024a0 <HeadLights_setmotorAngle+0x40>
        case 1:
            angle = MODE1_ANGLE;
 8002482:	230f      	movs	r3, #15
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2214      	movs	r2, #20
 8002488:	701a      	strb	r2, [r3, #0]
            break;
 800248a:	e00e      	b.n	80024aa <HeadLights_setmotorAngle+0x4a>
        case 2:
            angle = MODE2_ANGLE;
 800248c:	230f      	movs	r3, #15
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2228      	movs	r2, #40	; 0x28
 8002492:	701a      	strb	r2, [r3, #0]
            break;
 8002494:	e009      	b.n	80024aa <HeadLights_setmotorAngle+0x4a>
        case 3:
            angle = MODE3_ANGLE;
 8002496:	230f      	movs	r3, #15
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	223c      	movs	r2, #60	; 0x3c
 800249c:	701a      	strb	r2, [r3, #0]
            break;
 800249e:	e004      	b.n	80024aa <HeadLights_setmotorAngle+0x4a>
        default:
            angle = MODE0_ANGLE;
 80024a0:	230f      	movs	r3, #15
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2208      	movs	r2, #8
 80024a6:	701a      	strb	r2, [r3, #0]
            break;
 80024a8:	46c0      	nop			; (mov r8, r8)
    }
    headLightPWM = angle;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HeadLights_setmotorAngle+0x88>)
 80024ac:	250f      	movs	r5, #15
 80024ae:	197a      	adds	r2, r7, r5
 80024b0:	7812      	ldrb	r2, [r2, #0]
 80024b2:	701a      	strb	r2, [r3, #0]
    ServoAngleChange(&htim1,TIM_CHANNEL_3,angle);
 80024b4:	197b      	adds	r3, r7, r5
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HeadLights_setmotorAngle+0x8c>)
 80024ba:	2108      	movs	r1, #8
 80024bc:	0018      	movs	r0, r3
 80024be:	f001 f975 	bl	80037ac <ServoAngleChange>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HeadLights_setmotorAngle+0x8c>)
 80024c4:	2108      	movs	r1, #8
 80024c6:	0018      	movs	r0, r3
 80024c8:	f005 fa06 	bl	80078d8 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ServoAngleToCCR(angle));
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HeadLights_setmotorAngle+0x8c>)
 80024ce:	681c      	ldr	r4, [r3, #0]
 80024d0:	197b      	adds	r3, r7, r5
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f001 f99b 	bl	8003810 <ServoAngleToCCR>
 80024da:	0003      	movs	r3, r0
 80024dc:	63e3      	str	r3, [r4, #60]	; 0x3c
//    *(&TIM1->CCR3) = headLightPWM;
}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	20000214 	.word	0x20000214
 80024ec:	200003d4 	.word	0x200003d4

080024f0 <HeadLights_LEDoff>:

void HeadLights_LEDoff()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, xLEDState); // test led
	    HAL_GPIO_WritePin(headLight_LED_GPIO_Port, headLight_LED_Pin, RESET);
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <HeadLights_LEDoff+0x5c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0018      	movs	r0, r3
 80024fc:	f003 fcaf 	bl	8005e5e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(headLight_Laser_GPIO_Port, headLight_Laser_Pin, RESET);
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <HeadLights_LEDoff+0x5c>)
 8002502:	2200      	movs	r2, #0
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	0018      	movs	r0, r3
 8002508:	f003 fca9 	bl	8005e5e <HAL_GPIO_WritePin>

	    HAL_GPIO_WritePin(sideMirror_LED_U_GPIO_Port, sideMirror_LED_U_Pin, RESET);
 800250c:	2390      	movs	r3, #144	; 0x90
 800250e:	05db      	lsls	r3, r3, #23
 8002510:	2200      	movs	r2, #0
 8002512:	2110      	movs	r1, #16
 8002514:	0018      	movs	r0, r3
 8002516:	f003 fca2 	bl	8005e5e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(sideMirror_LED_D_GPIO_Port, sideMirror_LED_D_Pin, RESET);
 800251a:	2390      	movs	r3, #144	; 0x90
 800251c:	05db      	lsls	r3, r3, #23
 800251e:	2200      	movs	r2, #0
 8002520:	2120      	movs	r1, #32
 8002522:	0018      	movs	r0, r3
 8002524:	f003 fc9b 	bl	8005e5e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(sideMirror_LED_R_GPIO_Port, sideMirror_LED_R_Pin, RESET);
 8002528:	2390      	movs	r3, #144	; 0x90
 800252a:	05db      	lsls	r3, r3, #23
 800252c:	2200      	movs	r2, #0
 800252e:	2140      	movs	r1, #64	; 0x40
 8002530:	0018      	movs	r0, r3
 8002532:	f003 fc94 	bl	8005e5e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(sideMirror_LED_L_GPIO_Port, sideMirror_LED_L_Pin, RESET);
 8002536:	2390      	movs	r3, #144	; 0x90
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	2200      	movs	r2, #0
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0018      	movs	r0, r3
 8002540:	f003 fc8d 	bl	8005e5e <HAL_GPIO_WritePin>
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	48000800 	.word	0x48000800

08002550 <InitCarSetting_H>:

void InitCarSetting_H(void)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
	uint8_t angle;
	angle = MODE0_ANGLE;
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	2208      	movs	r2, #8
 800255a:	701a      	strb	r2, [r3, #0]
    ServoAngleChange(&htim1,TIM_CHANNEL_3,angle);
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <InitCarSetting_H+0x40>)
 8002562:	2108      	movs	r1, #8
 8002564:	0018      	movs	r0, r3
 8002566:	f001 f921 	bl	80037ac <ServoAngleChange>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <InitCarSetting_H+0x40>)
 800256c:	2108      	movs	r1, #8
 800256e:	0018      	movs	r0, r3
 8002570:	f005 f9b2 	bl	80078d8 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ServoAngleToCCR(angle));
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <InitCarSetting_H+0x40>)
 8002576:	681c      	ldr	r4, [r3, #0]
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	0018      	movs	r0, r3
 800257e:	f001 f947 	bl	8003810 <ServoAngleToCCR>
 8002582:	0003      	movs	r3, r0
 8002584:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b003      	add	sp, #12
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	200003d4 	.word	0x200003d4

08002594 <buzzer_init>:

extern TIM_HandleTypeDef htim2; // Adjust the timer according to your configuration

uint8_t value = 0; // the value for the duty cycle

void buzzer_init(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8002598:	f002 fc32 	bl	8004e00 <MX_TIM2_Init>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM on the configured channel
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <buzzer_init+0x18>)
 800259e:	2100      	movs	r1, #0
 80025a0:	0018      	movs	r0, r3
 80025a2:	f005 f999 	bl	80078d8 <HAL_TIM_PWM_Start>
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2000041c 	.word	0x2000041c

080025b0 <beep>:

void beep(uint32_t note, uint32_t duration) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
    if (note == NOTHING) {
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a25      	ldr	r2, [pc, #148]	; (8002654 <beep+0xa4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d104      	bne.n	80025cc <beep+0x1c>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <beep+0xa8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	635a      	str	r2, [r3, #52]	; 0x34
 80025ca:	e032      	b.n	8002632 <beep+0x82>
    } else {
        // Calculate prescaler and period for each note frequency
        uint32_t clock_frequency = 16000000; // 16 MHz base clock
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <beep+0xac>)
 80025ce:	617b      	str	r3, [r7, #20]
        uint32_t prescaler = (clock_frequency / note / 1000) - 1; // Prescaler for the timer
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7fd fdb4 	bl	8000140 <__udivsi3>
 80025d8:	0003      	movs	r3, r0
 80025da:	001a      	movs	r2, r3
 80025dc:	23fa      	movs	r3, #250	; 0xfa
 80025de:	0099      	lsls	r1, r3, #2
 80025e0:	0010      	movs	r0, r2
 80025e2:	f7fd fdad 	bl	8000140 <__udivsi3>
 80025e6:	0003      	movs	r3, r0
 80025e8:	3b01      	subs	r3, #1
 80025ea:	613b      	str	r3, [r7, #16]
        uint32_t period = (clock_frequency / (prescaler + 1) / note) - 1; // Period for the timer
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3301      	adds	r3, #1
 80025f0:	0019      	movs	r1, r3
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f7fd fda4 	bl	8000140 <__udivsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7fd fd9f 	bl	8000140 <__udivsi3>
 8002602:	0003      	movs	r3, r0
 8002604:	3b01      	subs	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]

        __HAL_TIM_SET_PRESCALER(&htim2, prescaler);
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <beep+0xa8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <beep+0xa8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <beep+0xa8>)
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, period / 2); // 50% duty cycle
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <beep+0xa8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	0852      	lsrs	r2, r2, #1
 8002626:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Ensure PWM is started with new settings
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <beep+0xa8>)
 800262a:	2100      	movs	r1, #0
 800262c:	0018      	movs	r0, r3
 800262e:	f005 f953 	bl	80078d8 <HAL_TIM_PWM_Start>

    }
    HAL_Delay(duration);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	0018      	movs	r0, r3
 8002636:	f002 fde1 	bl	80051fc <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // Stop the beep
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <beep+0xa8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Stop PWM
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <beep+0xa8>)
 8002644:	2100      	movs	r1, #0
 8002646:	0018      	movs	r0, r3
 8002648:	f005 f9fe 	bl	8007a48 <HAL_TIM_PWM_Stop>
}
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b006      	add	sp, #24
 8002652:	bd80      	pop	{r7, pc}
 8002654:	0007a120 	.word	0x0007a120
 8002658:	2000041c 	.word	0x2000041c
 800265c:	00f42400 	.word	0x00f42400

08002660 <welcomesound>:


void welcomesound(void) {
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
    beep(SOL_SHARP_L, 150);
 8002664:	23a0      	movs	r3, #160	; 0xa0
 8002666:	33ff      	adds	r3, #255	; 0xff
 8002668:	2196      	movs	r1, #150	; 0x96
 800266a:	0018      	movs	r0, r3
 800266c:	f7ff ffa0 	bl	80025b0 <beep>
    beep(RA_L, 150);
 8002670:	23dc      	movs	r3, #220	; 0xdc
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2196      	movs	r1, #150	; 0x96
 8002676:	0018      	movs	r0, r3
 8002678:	f7ff ff9a 	bl	80025b0 <beep>
    beep(MI_L, 200);
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <welcomesound+0x60>)
 800267e:	21c8      	movs	r1, #200	; 0xc8
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff ff95 	bl	80025b0 <beep>
    beep(NOTHING, 200);
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <welcomesound+0x64>)
 8002688:	21c8      	movs	r1, #200	; 0xc8
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff ff90 	bl	80025b0 <beep>
    beep(RE_SHARP, 150);
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <welcomesound+0x68>)
 8002692:	2196      	movs	r1, #150	; 0x96
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff ff8b 	bl	80025b0 <beep>
    beep(FA_SHARP, 150);
 800269a:	23b9      	movs	r3, #185	; 0xb9
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	2196      	movs	r1, #150	; 0x96
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff ff85 	bl	80025b0 <beep>
    beep(DO_SHARP_H, 200);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <welcomesound+0x6c>)
 80026a8:	21c8      	movs	r1, #200	; 0xc8
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7ff ff80 	bl	80025b0 <beep>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <welcomesound+0x70>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	00000293 	.word	0x00000293
 80026c4:	0007a120 	.word	0x0007a120
 80026c8:	0000026e 	.word	0x0000026e
 80026cc:	00000455 	.word	0x00000455
 80026d0:	2000041c 	.word	0x2000041c

080026d4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <bno055_assignI2C+0x18>)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000238 	.word	0x20000238

080026f0 <bno055_delay>:

void bno055_delay(int time) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f002 fd7e 	bl	80051fc <HAL_Delay>
#endif
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002708:	b5b0      	push	{r4, r5, r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af02      	add	r7, sp, #8
 800270e:	0002      	movs	r2, r0
 8002710:	1dfb      	adds	r3, r7, #7
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	1dbb      	adds	r3, r7, #6
 8002716:	1c0a      	adds	r2, r1, #0
 8002718:	701a      	strb	r2, [r3, #0]
  uint8_t txdata[2] = {reg, data};
 800271a:	210c      	movs	r1, #12
 800271c:	187b      	adds	r3, r7, r1
 800271e:	1dfa      	adds	r2, r7, #7
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	187b      	adds	r3, r7, r1
 8002726:	1dba      	adds	r2, r7, #6
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	705a      	strb	r2, [r3, #1]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800272c:	4b76      	ldr	r3, [pc, #472]	; (8002908 <bno055_writeData+0x200>)
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	2517      	movs	r5, #23
 8002732:	197c      	adds	r4, r7, r5
 8002734:	187a      	adds	r2, r7, r1
 8002736:	230a      	movs	r3, #10
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2302      	movs	r3, #2
 800273c:	2150      	movs	r1, #80	; 0x50
 800273e:	f003 fc41 	bl	8005fc4 <HAL_I2C_Master_Transmit>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d100      	bne.n	8002750 <bno055_writeData+0x48>
 800274e:	e0d4      	b.n	80028fa <bno055_writeData+0x1f2>
    return;
  }

  if (status == HAL_ERROR) {
 8002750:	197b      	adds	r3, r7, r5
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d104      	bne.n	8002762 <bno055_writeData+0x5a>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8002758:	4b6c      	ldr	r3, [pc, #432]	; (800290c <bno055_writeData+0x204>)
 800275a:	0018      	movs	r0, r3
 800275c:	f00a fb16 	bl	800cd8c <puts>
 8002760:	e01b      	b.n	800279a <bno055_writeData+0x92>
  } else if (status == HAL_TIMEOUT) {
 8002762:	2317      	movs	r3, #23
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d104      	bne.n	8002776 <bno055_writeData+0x6e>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800276c:	4b68      	ldr	r3, [pc, #416]	; (8002910 <bno055_writeData+0x208>)
 800276e:	0018      	movs	r0, r3
 8002770:	f00a fb0c 	bl	800cd8c <puts>
 8002774:	e011      	b.n	800279a <bno055_writeData+0x92>
  } else if (status == HAL_BUSY) {
 8002776:	2317      	movs	r3, #23
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d104      	bne.n	800278a <bno055_writeData+0x82>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <bno055_writeData+0x20c>)
 8002782:	0018      	movs	r0, r3
 8002784:	f00a fb02 	bl	800cd8c <puts>
 8002788:	e007      	b.n	800279a <bno055_writeData+0x92>
  } else {
    printf("Unknown status data %d", status);
 800278a:	2317      	movs	r3, #23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	4b61      	ldr	r3, [pc, #388]	; (8002918 <bno055_writeData+0x210>)
 8002792:	0011      	movs	r1, r2
 8002794:	0018      	movs	r0, r3
 8002796:	f00a fa93 	bl	800ccc0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800279a:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <bno055_writeData+0x200>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0018      	movs	r0, r3
 80027a0:	f003 fe2c 	bl	80063fc <HAL_I2C_GetError>
 80027a4:	0003      	movs	r3, r0
 80027a6:	613b      	str	r3, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d100      	bne.n	80027b0 <bno055_writeData+0xa8>
 80027ae:	e0a6      	b.n	80028fe <bno055_writeData+0x1f6>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d104      	bne.n	80027c0 <bno055_writeData+0xb8>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80027b6:	4b59      	ldr	r3, [pc, #356]	; (800291c <bno055_writeData+0x214>)
 80027b8:	0018      	movs	r0, r3
 80027ba:	f00a fae7 	bl	800cd8c <puts>
 80027be:	e026      	b.n	800280e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d104      	bne.n	80027d0 <bno055_writeData+0xc8>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80027c6:	4b56      	ldr	r3, [pc, #344]	; (8002920 <bno055_writeData+0x218>)
 80027c8:	0018      	movs	r0, r3
 80027ca:	f00a fadf 	bl	800cd8c <puts>
 80027ce:	e01e      	b.n	800280e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_AF) {
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d104      	bne.n	80027e0 <bno055_writeData+0xd8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80027d6:	4b53      	ldr	r3, [pc, #332]	; (8002924 <bno055_writeData+0x21c>)
 80027d8:	0018      	movs	r0, r3
 80027da:	f00a fad7 	bl	800cd8c <puts>
 80027de:	e016      	b.n	800280e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d104      	bne.n	80027f0 <bno055_writeData+0xe8>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80027e6:	4b50      	ldr	r3, [pc, #320]	; (8002928 <bno055_writeData+0x220>)
 80027e8:	0018      	movs	r0, r3
 80027ea:	f00a facf 	bl	800cd8c <puts>
 80027ee:	e00e      	b.n	800280e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d104      	bne.n	8002800 <bno055_writeData+0xf8>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80027f6:	4b4d      	ldr	r3, [pc, #308]	; (800292c <bno055_writeData+0x224>)
 80027f8:	0018      	movs	r0, r3
 80027fa:	f00a fac7 	bl	800cd8c <puts>
 80027fe:	e006      	b.n	800280e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b20      	cmp	r3, #32
 8002804:	d103      	bne.n	800280e <bno055_writeData+0x106>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <bno055_writeData+0x228>)
 8002808:	0018      	movs	r0, r3
 800280a:	f00a fabf 	bl	800cd8c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800280e:	4b3e      	ldr	r3, [pc, #248]	; (8002908 <bno055_writeData+0x200>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	250f      	movs	r5, #15
 8002814:	197c      	adds	r4, r7, r5
 8002816:	0018      	movs	r0, r3
 8002818:	f003 fde4 	bl	80063e4 <HAL_I2C_GetState>
 800281c:	0003      	movs	r3, r0
 800281e:	7023      	strb	r3, [r4, #0]
  if (state == HAL_I2C_STATE_RESET) {
 8002820:	197b      	adds	r3, r7, r5
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d104      	bne.n	8002832 <bno055_writeData+0x12a>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002828:	4b42      	ldr	r3, [pc, #264]	; (8002934 <bno055_writeData+0x22c>)
 800282a:	0018      	movs	r0, r3
 800282c:	f00a faae 	bl	800cd8c <puts>
 8002830:	e066      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_READY) {
 8002832:	230f      	movs	r3, #15
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b20      	cmp	r3, #32
 800283a:	d104      	bne.n	8002846 <bno055_writeData+0x13e>
    printf("HAL_I2C_STATE_RESET\r\n");
 800283c:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <bno055_writeData+0x22c>)
 800283e:	0018      	movs	r0, r3
 8002840:	f00a faa4 	bl	800cd8c <puts>
 8002844:	e05c      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002846:	230f      	movs	r3, #15
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b24      	cmp	r3, #36	; 0x24
 800284e:	d104      	bne.n	800285a <bno055_writeData+0x152>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <bno055_writeData+0x230>)
 8002852:	0018      	movs	r0, r3
 8002854:	f00a fa9a 	bl	800cd8c <puts>
 8002858:	e052      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 800285a:	230f      	movs	r3, #15
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b21      	cmp	r3, #33	; 0x21
 8002862:	d104      	bne.n	800286e <bno055_writeData+0x166>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002864:	4b35      	ldr	r3, [pc, #212]	; (800293c <bno055_writeData+0x234>)
 8002866:	0018      	movs	r0, r3
 8002868:	f00a fa90 	bl	800cd8c <puts>
 800286c:	e048      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800286e:	230f      	movs	r3, #15
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b22      	cmp	r3, #34	; 0x22
 8002876:	d104      	bne.n	8002882 <bno055_writeData+0x17a>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002878:	4b31      	ldr	r3, [pc, #196]	; (8002940 <bno055_writeData+0x238>)
 800287a:	0018      	movs	r0, r3
 800287c:	f00a fa86 	bl	800cd8c <puts>
 8002880:	e03e      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002882:	230f      	movs	r3, #15
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b28      	cmp	r3, #40	; 0x28
 800288a:	d104      	bne.n	8002896 <bno055_writeData+0x18e>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <bno055_writeData+0x23c>)
 800288e:	0018      	movs	r0, r3
 8002890:	f00a fa7c 	bl	800cd8c <puts>
 8002894:	e034      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002896:	230f      	movs	r3, #15
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b29      	cmp	r3, #41	; 0x29
 800289e:	d104      	bne.n	80028aa <bno055_writeData+0x1a2>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <bno055_writeData+0x240>)
 80028a2:	0018      	movs	r0, r3
 80028a4:	f00a fa72 	bl	800cd8c <puts>
 80028a8:	e02a      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80028aa:	230f      	movs	r3, #15
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b2a      	cmp	r3, #42	; 0x2a
 80028b2:	d104      	bne.n	80028be <bno055_writeData+0x1b6>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <bno055_writeData+0x244>)
 80028b6:	0018      	movs	r0, r3
 80028b8:	f00a fa68 	bl	800cd8c <puts>
 80028bc:	e020      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80028be:	230f      	movs	r3, #15
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b60      	cmp	r3, #96	; 0x60
 80028c6:	d104      	bne.n	80028d2 <bno055_writeData+0x1ca>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <bno055_writeData+0x248>)
 80028ca:	0018      	movs	r0, r3
 80028cc:	f00a fa5e 	bl	800cd8c <puts>
 80028d0:	e016      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80028d2:	230f      	movs	r3, #15
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2ba0      	cmp	r3, #160	; 0xa0
 80028da:	d104      	bne.n	80028e6 <bno055_writeData+0x1de>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <bno055_writeData+0x24c>)
 80028de:	0018      	movs	r0, r3
 80028e0:	f00a fa54 	bl	800cd8c <puts>
 80028e4:	e00c      	b.n	8002900 <bno055_writeData+0x1f8>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80028e6:	230f      	movs	r3, #15
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2be0      	cmp	r3, #224	; 0xe0
 80028ee:	d107      	bne.n	8002900 <bno055_writeData+0x1f8>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <bno055_writeData+0x250>)
 80028f2:	0018      	movs	r0, r3
 80028f4:	f00a fa4a 	bl	800cd8c <puts>
 80028f8:	e002      	b.n	8002900 <bno055_writeData+0x1f8>
    return;
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	e000      	b.n	8002900 <bno055_writeData+0x1f8>
    return;
 80028fe:	46c0      	nop			; (mov r8, r8)
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002900:	46bd      	mov	sp, r7
 8002902:	b006      	add	sp, #24
 8002904:	bdb0      	pop	{r4, r5, r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000238 	.word	0x20000238
 800290c:	08010910 	.word	0x08010910
 8002910:	08010934 	.word	0x08010934
 8002914:	0801095c 	.word	0x0801095c
 8002918:	08010980 	.word	0x08010980
 800291c:	08010998 	.word	0x08010998
 8002920:	080109ac 	.word	0x080109ac
 8002924:	080109c0 	.word	0x080109c0
 8002928:	080109d4 	.word	0x080109d4
 800292c:	080109e8 	.word	0x080109e8
 8002930:	080109fc 	.word	0x080109fc
 8002934:	08010a14 	.word	0x08010a14
 8002938:	08010a2c 	.word	0x08010a2c
 800293c:	08010a40 	.word	0x08010a40
 8002940:	08010a58 	.word	0x08010a58
 8002944:	08010a70 	.word	0x08010a70
 8002948:	08010a88 	.word	0x08010a88
 800294c:	08010aa8 	.word	0x08010aa8
 8002950:	08010ac8 	.word	0x08010ac8
 8002954:	08010ae0 	.word	0x08010ae0
 8002958:	08010af8 	.word	0x08010af8

0800295c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af02      	add	r7, sp, #8
 8002962:	6039      	str	r1, [r7, #0]
 8002964:	0011      	movs	r1, r2
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	1c02      	adds	r2, r0, #0
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	1dbb      	adds	r3, r7, #6
 800296e:	1c0a      	adds	r2, r1, #0
 8002970:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <bno055_readData+0x48>)
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	1dfa      	adds	r2, r7, #7
 8002978:	2364      	movs	r3, #100	; 0x64
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2301      	movs	r3, #1
 800297e:	2150      	movs	r1, #80	; 0x50
 8002980:	f003 fb20 	bl	8005fc4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <bno055_readData+0x48>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	1dbb      	adds	r3, r7, #6
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	2164      	movs	r1, #100	; 0x64
 8002992:	9100      	str	r1, [sp, #0]
 8002994:	2150      	movs	r1, #80	; 0x50
 8002996:	f003 fc1d 	bl	80061d4 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	20000238 	.word	0x20000238

080029a8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	0002      	movs	r2, r0
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	0019      	movs	r1, r3
 80029ba:	2007      	movs	r0, #7
 80029bc:	f7ff fea4 	bl	8002708 <bno055_writeData>
 80029c0:	46c0      	nop			; (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	0002      	movs	r2, r0
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	701a      	strb	r2, [r3, #0]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80029d4:	1dfb      	adds	r3, r7, #7
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	0019      	movs	r1, r3
 80029da:	203d      	movs	r0, #61	; 0x3d
 80029dc:	f7ff fe94 	bl	8002708 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80029e0:	1dfb      	adds	r3, r7, #7
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <bno055_setOperationMode+0x28>
    bno055_delay(19);
 80029e8:	2013      	movs	r0, #19
 80029ea:	f7ff fe81 	bl	80026f0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80029ee:	e002      	b.n	80029f6 <bno055_setOperationMode+0x2e>
    bno055_delay(7);
 80029f0:	2007      	movs	r0, #7
 80029f2:	f7ff fe7d 	bl	80026f0 <bno055_delay>
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b002      	add	sp, #8
 80029fc:	bd80      	pop	{r7, pc}

080029fe <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7ff ffe0 	bl	80029c8 <bno055_setOperationMode>
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8002a12:	200c      	movs	r0, #12
 8002a14:	f7ff ffd8 	bl	80029c8 <bno055_setOperationMode>
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002a22:	2120      	movs	r1, #32
 8002a24:	203f      	movs	r0, #63	; 0x3f
 8002a26:	f7ff fe6f 	bl	8002708 <bno055_writeData>
  bno055_delay(700);
 8002a2a:	23af      	movs	r3, #175	; 0xaf
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff fe5e 	bl	80026f0 <bno055_delay>
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
  bno055_reset();
 8002a42:	f7ff ffec 	bl	8002a1e <bno055_reset>

  uint8_t id = 0;
 8002a46:	1dfb      	adds	r3, r7, #7
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8002a4c:	1dfb      	adds	r3, r7, #7
 8002a4e:	2201      	movs	r2, #1
 8002a50:	0019      	movs	r1, r3
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7ff ff82 	bl	800295c <bno055_readData>
  if (id != BNO055_ID) {
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2ba0      	cmp	r3, #160	; 0xa0
 8002a5e:	d007      	beq.n	8002a70 <bno055_setup+0x34>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	001a      	movs	r2, r3
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <bno055_setup+0x54>)
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f00a f928 	bl	800ccc0 <iprintf>
  }
  bno055_setPage(0);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7ff ff99 	bl	80029a8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8002a76:	2100      	movs	r1, #0
 8002a78:	203f      	movs	r0, #63	; 0x3f
 8002a7a:	f7ff fe45 	bl	8002708 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8002a7e:	f7ff ffbe 	bl	80029fe <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002a82:	200a      	movs	r0, #10
 8002a84:	f7ff fe34 	bl	80026f0 <bno055_delay>
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	08010b10 	.word	0x08010b10

08002a94 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002a94:	b5b0      	push	{r4, r5, r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	1cfb      	adds	r3, r7, #3
 8002aa0:	701a      	strb	r2, [r3, #0]
  bno055_setPage(0);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7ff ff80 	bl	80029a8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002aa8:	1cfb      	adds	r3, r7, #3
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d108      	bne.n	8002ac2 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8002ab0:	2328      	movs	r3, #40	; 0x28
 8002ab2:	18f9      	adds	r1, r7, r3
 8002ab4:	1cfb      	adds	r3, r7, #3
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff ff4e 	bl	800295c <bno055_readData>
 8002ac0:	e007      	b.n	8002ad2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8002ac2:	2328      	movs	r3, #40	; 0x28
 8002ac4:	18f9      	adds	r1, r7, r3
 8002ac6:	1cfb      	adds	r3, r7, #3
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2206      	movs	r2, #6
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff ff45 	bl	800295c <bno055_readData>

  double scale = 1;
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4b7f      	ldr	r3, [pc, #508]	; (8002cd4 <bno055_getVector+0x240>)
 8002ad6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8002ada:	1cfb      	adds	r3, r7, #3
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b0e      	cmp	r3, #14
 8002ae0:	d109      	bne.n	8002af6 <bno055_getVector+0x62>
    scale = magScale;
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <bno055_getVector+0x244>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7ff fb70 	bl	80021cc <__aeabi_ui2d>
 8002aec:	0002      	movs	r2, r0
 8002aee:	000b      	movs	r3, r1
 8002af0:	633a      	str	r2, [r7, #48]	; 0x30
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
 8002af4:	e03e      	b.n	8002b74 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8002af6:	1cfb      	adds	r3, r7, #3
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d007      	beq.n	8002b0e <bno055_getVector+0x7a>
 8002afe:	1cfb      	adds	r3, r7, #3
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b28      	cmp	r3, #40	; 0x28
 8002b04:	d003      	beq.n	8002b0e <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8002b06:	1cfb      	adds	r3, r7, #3
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002b0c:	d109      	bne.n	8002b22 <bno055_getVector+0x8e>
    scale = accelScale;
 8002b0e:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <bno055_getVector+0x248>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7ff fb5a 	bl	80021cc <__aeabi_ui2d>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	000b      	movs	r3, r1
 8002b1c:	633a      	str	r2, [r7, #48]	; 0x30
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b20:	e028      	b.n	8002b74 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8002b22:	1cfb      	adds	r3, r7, #3
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b14      	cmp	r3, #20
 8002b28:	d109      	bne.n	8002b3e <bno055_getVector+0xaa>
    scale = angularRateScale;
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ce0 <bno055_getVector+0x24c>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff fb4c 	bl	80021cc <__aeabi_ui2d>
 8002b34:	0002      	movs	r2, r0
 8002b36:	000b      	movs	r3, r1
 8002b38:	633a      	str	r2, [r7, #48]	; 0x30
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3c:	e01a      	b.n	8002b74 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_EULER) {
 8002b3e:	1cfb      	adds	r3, r7, #3
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b1a      	cmp	r3, #26
 8002b44:	d109      	bne.n	8002b5a <bno055_getVector+0xc6>
    scale = eulerScale;
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <bno055_getVector+0x250>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff fb3e 	bl	80021cc <__aeabi_ui2d>
 8002b50:	0002      	movs	r2, r0
 8002b52:	000b      	movs	r3, r1
 8002b54:	633a      	str	r2, [r7, #48]	; 0x30
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
 8002b58:	e00c      	b.n	8002b74 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8002b5a:	1cfb      	adds	r3, r7, #3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d108      	bne.n	8002b74 <bno055_getVector+0xe0>
    scale = quaScale;
 8002b62:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <bno055_getVector+0x254>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7ff fb30 	bl	80021cc <__aeabi_ui2d>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	000b      	movs	r3, r1
 8002b70:	633a      	str	r2, [r7, #48]	; 0x30
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002b74:	2508      	movs	r5, #8
 8002b76:	197b      	adds	r3, r7, r5
 8002b78:	0018      	movs	r0, r3
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f00a fa20 	bl	800cfc4 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002b84:	1cfb      	adds	r3, r7, #3
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d155      	bne.n	8002c38 <bno055_getVector+0x1a4>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002b8c:	2428      	movs	r4, #40	; 0x28
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	193b      	adds	r3, r7, r4
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7ff fae3 	bl	800216c <__aeabi_i2d>
 8002ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002baa:	f7fe f84d 	bl	8000c48 <__aeabi_ddiv>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	000b      	movs	r3, r1
 8002bb2:	1979      	adds	r1, r7, r5
 8002bb4:	600a      	str	r2, [r1, #0]
 8002bb6:	604b      	str	r3, [r1, #4]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002bb8:	193b      	adds	r3, r7, r4
 8002bba:	78db      	ldrb	r3, [r3, #3]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	789b      	ldrb	r3, [r3, #2]
 8002bc4:	b21b      	sxth	r3, r3
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7ff face 	bl	800216c <__aeabi_i2d>
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	f7fe f838 	bl	8000c48 <__aeabi_ddiv>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	000b      	movs	r3, r1
 8002bdc:	1979      	adds	r1, r7, r5
 8002bde:	608a      	str	r2, [r1, #8]
 8002be0:	60cb      	str	r3, [r1, #12]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	795b      	ldrb	r3, [r3, #5]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	b21a      	sxth	r2, r3
 8002bea:	193b      	adds	r3, r7, r4
 8002bec:	791b      	ldrb	r3, [r3, #4]
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff fab9 	bl	800216c <__aeabi_i2d>
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	f7fe f823 	bl	8000c48 <__aeabi_ddiv>
 8002c02:	0002      	movs	r2, r0
 8002c04:	000b      	movs	r3, r1
 8002c06:	1979      	adds	r1, r7, r5
 8002c08:	610a      	str	r2, [r1, #16]
 8002c0a:	614b      	str	r3, [r1, #20]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	79db      	ldrb	r3, [r3, #7]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	193b      	adds	r3, r7, r4
 8002c16:	799b      	ldrb	r3, [r3, #6]
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff faa4 	bl	800216c <__aeabi_i2d>
 8002c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	f7fe f80e 	bl	8000c48 <__aeabi_ddiv>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	000b      	movs	r3, r1
 8002c30:	1979      	adds	r1, r7, r5
 8002c32:	618a      	str	r2, [r1, #24]
 8002c34:	61cb      	str	r3, [r1, #28]
 8002c36:	e040      	b.n	8002cba <bno055_getVector+0x226>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002c38:	2428      	movs	r4, #40	; 0x28
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	785b      	ldrb	r3, [r3, #1]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	b21a      	sxth	r2, r3
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b21b      	sxth	r3, r3
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	b21b      	sxth	r3, r3
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff fa8d 	bl	800216c <__aeabi_i2d>
 8002c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	f7fd fff7 	bl	8000c48 <__aeabi_ddiv>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	000b      	movs	r3, r1
 8002c5e:	2508      	movs	r5, #8
 8002c60:	1979      	adds	r1, r7, r5
 8002c62:	608a      	str	r2, [r1, #8]
 8002c64:	60cb      	str	r3, [r1, #12]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002c66:	193b      	adds	r3, r7, r4
 8002c68:	78db      	ldrb	r3, [r3, #3]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	b21a      	sxth	r2, r3
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	789b      	ldrb	r3, [r3, #2]
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	4313      	orrs	r3, r2
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7ff fa77 	bl	800216c <__aeabi_i2d>
 8002c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	f7fd ffe1 	bl	8000c48 <__aeabi_ddiv>
 8002c86:	0002      	movs	r2, r0
 8002c88:	000b      	movs	r3, r1
 8002c8a:	1979      	adds	r1, r7, r5
 8002c8c:	610a      	str	r2, [r1, #16]
 8002c8e:	614b      	str	r3, [r1, #20]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	795b      	ldrb	r3, [r3, #5]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	b21a      	sxth	r2, r3
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	791b      	ldrb	r3, [r3, #4]
 8002c9c:	b21b      	sxth	r3, r3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff fa62 	bl	800216c <__aeabi_i2d>
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	f7fd ffcc 	bl	8000c48 <__aeabi_ddiv>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	000b      	movs	r3, r1
 8002cb4:	1979      	adds	r1, r7, r5
 8002cb6:	618a      	str	r2, [r1, #24]
 8002cb8:	61cb      	str	r3, [r1, #28]
  }

  return xyz;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	f00a fa7e 	bl	800d1c8 <memcpy>
}
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b00e      	add	sp, #56	; 0x38
 8002cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd4:	3ff00000 	.word	0x3ff00000
 8002cd8:	20000006 	.word	0x20000006
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000002 	.word	0x20000002
 8002ce4:	20000004 	.word	0x20000004
 8002ce8:	20000008 	.word	0x20000008

08002cec <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_EULER);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	211a      	movs	r1, #26
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff fecb 	bl	8002a94 <bno055_getVector>
}
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b002      	add	sp, #8
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <checkJoystickState>:
uint16_t mapValue(uint32_t input, uint32_t minInput, uint32_t maxInput, uint16_t minOutput, uint16_t maxOutput) {
    return (uint16_t)(((input - minInput) * (maxOutput - minOutput)) / (maxInput - minInput) + minOutput);
}

uint8_t checkJoystickState(uint32_t *adc_value)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	// zero
	if (adc_value[0] > ZERO_MIN && adc_value[0] < ZERO_MAX
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	23c8      	movs	r3, #200	; 0xc8
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d913      	bls.n	8002d44 <checkJoystickState+0x3c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <checkJoystickState+0xa0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d80e      	bhi.n	8002d44 <checkJoystickState+0x3c>
			&& adc_value[1] > ZERO_MIN && adc_value[1] < ZERO_MAX) {
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	23c8      	movs	r3, #200	; 0xc8
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d907      	bls.n	8002d44 <checkJoystickState+0x3c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <checkJoystickState+0xa0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d801      	bhi.n	8002d44 <checkJoystickState+0x3c>
		return ZERO;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e02d      	b.n	8002da0 <checkJoystickState+0x98>
	}

	// x axis
	else if (adc_value[1] >= LEFT_MIN && adc_value[1] <= LEFT_MAX) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2396      	movs	r3, #150	; 0x96
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d801      	bhi.n	8002d56 <checkJoystickState+0x4e>
		return LEFT;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e024      	b.n	8002da0 <checkJoystickState+0x98>
	}
	else if (adc_value[1] >= RIGHT_MIN && adc_value[1] <= RIGHT_MAX) {
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <checkJoystickState+0xa4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d908      	bls.n	8002d74 <checkJoystickState+0x6c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	015b      	lsls	r3, r3, #5
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d201      	bcs.n	8002d74 <checkJoystickState+0x6c>
		return RIGHT;
 8002d70:	2302      	movs	r3, #2
 8002d72:	e015      	b.n	8002da0 <checkJoystickState+0x98>
	}
	// y axis
	if (adc_value[0] >= UP_MIN && adc_value[0] <= UP_MAX) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <checkJoystickState+0xa4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d907      	bls.n	8002d8e <checkJoystickState+0x86>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	015b      	lsls	r3, r3, #5
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d201      	bcs.n	8002d8e <checkJoystickState+0x86>
		return DOWN;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e008      	b.n	8002da0 <checkJoystickState+0x98>
	}
	else if (adc_value[0] >= DOWN_MIN && adc_value[0] <= DOWN_MAX) {
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2396      	movs	r3, #150	; 0x96
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d801      	bhi.n	8002d9e <checkJoystickState+0x96>
		return UP;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e000      	b.n	8002da0 <checkJoystickState+0x98>
	}
	else {
		return ZERO;
 8002d9e:	2300      	movs	r3, #0
	}
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00000897 	.word	0x00000897
 8002dac:	00000ed2 	.word	0x00000ed2

08002db0 <updateJoystickPWM>:


uint16_t updateJoystickPWM(uint8_t joystick_state, uint16_t current_pwm, uint8_t motor_id)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	0004      	movs	r4, r0
 8002db8:	0008      	movs	r0, r1
 8002dba:	0011      	movs	r1, r2
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	1c22      	adds	r2, r4, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	1c02      	adds	r2, r0, #0
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	1dbb      	adds	r3, r7, #6
 8002dca:	1c0a      	adds	r2, r1, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
    uint16_t reference_pwm = current_pwm; // 현재 PWM 값으로 초기화
 8002dce:	230e      	movs	r3, #14
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	1d3a      	adds	r2, r7, #4
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	801a      	strh	r2, [r3, #0]

    // motor_id에 따라 서로 다른 방향 처리
    if (motor_id == 1) { // 첫 번째 서보 모터 (UP-DOWN 제어)
 8002dd8:	1dbb      	adds	r3, r7, #6
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d11c      	bne.n	8002e1a <updateJoystickPWM+0x6a>
        switch (joystick_state) {
 8002de0:	1dfb      	adds	r3, r7, #7
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d002      	beq.n	8002dee <updateJoystickPWM+0x3e>
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d00b      	beq.n	8002e04 <updateJoystickPWM+0x54>
 8002dec:	e03c      	b.n	8002e68 <updateJoystickPWM+0xb8>
        case UP:
            if (current_pwm < PWM_MAX) reference_pwm += PWM_INCREASE;
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	2b4f      	cmp	r3, #79	; 0x4f
 8002df4:	d831      	bhi.n	8002e5a <updateJoystickPWM+0xaa>
 8002df6:	220e      	movs	r2, #14
 8002df8:	18bb      	adds	r3, r7, r2
 8002dfa:	18ba      	adds	r2, r7, r2
 8002dfc:	8812      	ldrh	r2, [r2, #0]
 8002dfe:	3201      	adds	r2, #1
 8002e00:	801a      	strh	r2, [r3, #0]
            break;
 8002e02:	e02a      	b.n	8002e5a <updateJoystickPWM+0xaa>
        case DOWN:
            if (current_pwm > PWM_MIN) reference_pwm -= PWM_DECREASE;
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	2b3c      	cmp	r3, #60	; 0x3c
 8002e0a:	d928      	bls.n	8002e5e <updateJoystickPWM+0xae>
 8002e0c:	220e      	movs	r2, #14
 8002e0e:	18bb      	adds	r3, r7, r2
 8002e10:	18ba      	adds	r2, r7, r2
 8002e12:	8812      	ldrh	r2, [r2, #0]
 8002e14:	3a01      	subs	r2, #1
 8002e16:	801a      	strh	r2, [r3, #0]
            break;
 8002e18:	e021      	b.n	8002e5e <updateJoystickPWM+0xae>
        }
    } else if (motor_id == 2) { // 두 번째 서보 모터 (RIGHT-LEFT 제어)
 8002e1a:	1dbb      	adds	r3, r7, #6
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d122      	bne.n	8002e68 <updateJoystickPWM+0xb8>
        switch (joystick_state) {
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d00c      	beq.n	8002e44 <updateJoystickPWM+0x94>
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d11c      	bne.n	8002e68 <updateJoystickPWM+0xb8>
        case RIGHT:
            if (current_pwm < PWM_MAX) reference_pwm += PWM_INCREASE;
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	2b4f      	cmp	r3, #79	; 0x4f
 8002e34:	d815      	bhi.n	8002e62 <updateJoystickPWM+0xb2>
 8002e36:	220e      	movs	r2, #14
 8002e38:	18bb      	adds	r3, r7, r2
 8002e3a:	18ba      	adds	r2, r7, r2
 8002e3c:	8812      	ldrh	r2, [r2, #0]
 8002e3e:	3201      	adds	r2, #1
 8002e40:	801a      	strh	r2, [r3, #0]
            break;
 8002e42:	e00e      	b.n	8002e62 <updateJoystickPWM+0xb2>
        case LEFT:
            if (current_pwm > PWM_MIN) reference_pwm -= PWM_DECREASE;
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	2b3c      	cmp	r3, #60	; 0x3c
 8002e4a:	d90c      	bls.n	8002e66 <updateJoystickPWM+0xb6>
 8002e4c:	220e      	movs	r2, #14
 8002e4e:	18bb      	adds	r3, r7, r2
 8002e50:	18ba      	adds	r2, r7, r2
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	3a01      	subs	r2, #1
 8002e56:	801a      	strh	r2, [r3, #0]
            break;
 8002e58:	e005      	b.n	8002e66 <updateJoystickPWM+0xb6>
            break;
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	e004      	b.n	8002e68 <updateJoystickPWM+0xb8>
            break;
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	e002      	b.n	8002e68 <updateJoystickPWM+0xb8>
            break;
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	e000      	b.n	8002e68 <updateJoystickPWM+0xb8>
            break;
 8002e66:	46c0      	nop			; (mov r8, r8)
        }
    }

    // 업데이트된 PWM 값을 반환
    return reference_pwm;
 8002e68:	230e      	movs	r3, #14
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	881b      	ldrh	r3, [r3, #0]
}
 8002e6e:	0018      	movs	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b005      	add	sp, #20
 8002e74:	bd90      	pop	{r4, r7, pc}
	...

08002e78 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	0002      	movs	r2, r0
 8002e80:	1dfb      	adds	r3, r7, #7
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	1dbb      	adds	r3, r7, #6
 8002e86:	1c0a      	adds	r2, r1, #0
 8002e88:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <I2C_LCD_ExpanderWrite+0x70>)
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	18d3      	adds	r3, r2, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	1dbb      	adds	r3, r7, #6
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	240f      	movs	r4, #15
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8002ea6:	1dfb      	adds	r3, r7, #7
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	4910      	ldr	r1, [pc, #64]	; (8002eec <I2C_LCD_ExpanderWrite+0x74>)
 8002eac:	0013      	movs	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	189b      	adds	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	18cb      	adds	r3, r1, r3
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	1dfb      	adds	r3, r7, #7
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	490b      	ldr	r1, [pc, #44]	; (8002eec <I2C_LCD_ExpanderWrite+0x74>)
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	18cb      	adds	r3, r1, r3
 8002eca:	3308      	adds	r3, #8
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	18db      	adds	r3, r3, r3
 8002ed2:	b299      	uxth	r1, r3
 8002ed4:	193a      	adds	r2, r7, r4
 8002ed6:	2364      	movs	r3, #100	; 0x64
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2301      	movs	r3, #1
 8002edc:	f003 f872 	bl	8005fc4 <HAL_I2C_Master_Transmit>
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b005      	add	sp, #20
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	2000023c 	.word	0x2000023c
 8002eec:	08010d10 	.word	0x08010d10

08002ef0 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	1dbb      	adds	r3, r7, #6
 8002efe:	1c0a      	adds	r2, r1, #0
 8002f00:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8002f02:	1dbb      	adds	r3, r7, #6
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2204      	movs	r2, #4
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	0011      	movs	r1, r2
 8002f12:	0018      	movs	r0, r3
 8002f14:	f7ff ffb0 	bl	8002e78 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <I2C_LCD_EnPulse+0xc0>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <I2C_LCD_EnPulse+0xc4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <I2C_LCD_EnPulse+0xc8>)
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7fd f90b 	bl	8000140 <__udivsi3>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	005c      	lsls	r4, r3, #1
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <I2C_LCD_EnPulse+0xc4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4921      	ldr	r1, [pc, #132]	; (8002fb8 <I2C_LCD_EnPulse+0xc8>)
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7fd f903 	bl	8000140 <__udivsi3>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	1ae3      	subs	r3, r4, r3
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <I2C_LCD_EnPulse+0xc0>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d8f8      	bhi.n	8002f42 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8002f50:	1dbb      	adds	r3, r7, #6
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2204      	movs	r2, #4
 8002f56:	4393      	bics	r3, r2
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	0011      	movs	r1, r2
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7ff ff89 	bl	8002e78 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <I2C_LCD_EnPulse+0xc0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <I2C_LCD_EnPulse+0xc4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4911      	ldr	r1, [pc, #68]	; (8002fb8 <I2C_LCD_EnPulse+0xc8>)
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7fd f8e4 	bl	8000140 <__udivsi3>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	2332      	movs	r3, #50	; 0x32
 8002f7e:	4353      	muls	r3, r2
 8002f80:	001c      	movs	r4, r3
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <I2C_LCD_EnPulse+0xc4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	490c      	ldr	r1, [pc, #48]	; (8002fb8 <I2C_LCD_EnPulse+0xc8>)
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7fd f8d9 	bl	8000140 <__udivsi3>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	1ae3      	subs	r3, r4, r3
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <I2C_LCD_EnPulse+0xc0>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d8f8      	bhi.n	8002f96 <I2C_LCD_EnPulse+0xa6>
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b007      	add	sp, #28
 8002fac:	bd90      	pop	{r4, r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	e000e010 	.word	0xe000e010
 8002fb4:	20000014 	.word	0x20000014
 8002fb8:	000f4240 	.word	0x000f4240

08002fbc <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	1dfb      	adds	r3, r7, #7
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	1c0a      	adds	r2, r1, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8002fce:	1dbb      	adds	r3, r7, #6
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff ff4d 	bl	8002e78 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8002fde:	1dbb      	adds	r3, r7, #6
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff ff81 	bl	8002ef0 <I2C_LCD_EnPulse>
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8002ff6:	b590      	push	{r4, r7, lr}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	0004      	movs	r4, r0
 8002ffe:	0008      	movs	r0, r1
 8003000:	0011      	movs	r1, r2
 8003002:	1dfb      	adds	r3, r7, #7
 8003004:	1c22      	adds	r2, r4, #0
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	1c02      	adds	r2, r0, #0
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	1d7b      	adds	r3, r7, #5
 8003010:	1c0a      	adds	r2, r1, #0
 8003012:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8003014:	200f      	movs	r0, #15
 8003016:	183b      	adds	r3, r7, r0
 8003018:	1dba      	adds	r2, r7, #6
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	210f      	movs	r1, #15
 800301e:	438a      	bics	r2, r1
 8003020:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	011a      	lsls	r2, r3, #4
 8003028:	240e      	movs	r4, #14
 800302a:	193b      	adds	r3, r7, r4
 800302c:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 800302e:	183a      	adds	r2, r7, r0
 8003030:	1d7b      	adds	r3, r7, #5
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	b2da      	uxtb	r2, r3
 800303a:	1dfb      	adds	r3, r7, #7
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff ffbb 	bl	8002fbc <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8003046:	193a      	adds	r2, r7, r4
 8003048:	1d7b      	adds	r3, r7, #5
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	b2da      	uxtb	r2, r3
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	0011      	movs	r1, r2
 8003058:	0018      	movs	r0, r3
 800305a:	f7ff ffaf 	bl	8002fbc <I2C_LCD_Write4Bits>
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b005      	add	sp, #20
 8003064:	bd90      	pop	{r4, r7, pc}

08003066 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	0002      	movs	r2, r0
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	1dbb      	adds	r3, r7, #6
 8003074:	1c0a      	adds	r2, r1, #0
 8003076:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8003078:	1dbb      	adds	r3, r7, #6
 800307a:	7819      	ldrb	r1, [r3, #0]
 800307c:	1dfb      	adds	r3, r7, #7
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff ffb7 	bl	8002ff6 <I2C_LCD_Send>
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	0002      	movs	r2, r0
 8003098:	1dfb      	adds	r3, r7, #7
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	1c0a      	adds	r2, r1, #0
 80030a0:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80030a2:	1dbb      	adds	r3, r7, #6
 80030a4:	7819      	ldrb	r1, [r3, #0]
 80030a6:	1dfb      	adds	r3, r7, #7
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2201      	movs	r2, #1
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7ff ffa2 	bl	8002ff6 <I2C_LCD_Send>
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b002      	add	sp, #8
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b08b      	sub	sp, #44	; 0x2c
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	0002      	movs	r2, r0
 80030c4:	1dfb      	adds	r3, r7, #7
 80030c6:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	f002 f88d 	bl	80051e8 <HAL_GetTick>
 80030ce:	0003      	movs	r3, r0
 80030d0:	2b31      	cmp	r3, #49	; 0x31
 80030d2:	d9fa      	bls.n	80030ca <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2130      	movs	r1, #48	; 0x30
 80030da:	0018      	movs	r0, r3
 80030dc:	f7ff ffc3 	bl	8003066 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
 80030e4:	e025      	b.n	8003132 <I2C_LCD_Init+0x76>
 80030e6:	4b57      	ldr	r3, [pc, #348]	; (8003244 <I2C_LCD_Init+0x188>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <I2C_LCD_Init+0x18c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4956      	ldr	r1, [pc, #344]	; (800324c <I2C_LCD_Init+0x190>)
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7fd f824 	bl	8000140 <__udivsi3>
 80030f8:	0003      	movs	r3, r0
 80030fa:	001a      	movs	r2, r3
 80030fc:	0013      	movs	r3, r2
 80030fe:	015b      	lsls	r3, r3, #5
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	189b      	adds	r3, r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	001c      	movs	r4, r3
 800310a:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <I2C_LCD_Init+0x18c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	494f      	ldr	r1, [pc, #316]	; (800324c <I2C_LCD_Init+0x190>)
 8003110:	0018      	movs	r0, r3
 8003112:	f7fd f815 	bl	8000140 <__udivsi3>
 8003116:	0003      	movs	r3, r0
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	1ae3      	subs	r3, r4, r3
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <I2C_LCD_Init+0x188>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d8f8      	bhi.n	800311e <I2C_LCD_Init+0x62>
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	3301      	adds	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	2b04      	cmp	r3, #4
 8003136:	d9d6      	bls.n	80030e6 <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8003138:	1dfb      	adds	r3, r7, #7
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2130      	movs	r1, #48	; 0x30
 800313e:	0018      	movs	r0, r3
 8003140:	f7ff ff91 	bl	8003066 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
 8003148:	e025      	b.n	8003196 <I2C_LCD_Init+0xda>
 800314a:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <I2C_LCD_Init+0x188>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <I2C_LCD_Init+0x18c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	493d      	ldr	r1, [pc, #244]	; (800324c <I2C_LCD_Init+0x190>)
 8003156:	0018      	movs	r0, r3
 8003158:	f7fc fff2 	bl	8000140 <__udivsi3>
 800315c:	0003      	movs	r3, r0
 800315e:	001a      	movs	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	015b      	lsls	r3, r3, #5
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	189b      	adds	r3, r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	001c      	movs	r4, r3
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <I2C_LCD_Init+0x18c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4936      	ldr	r1, [pc, #216]	; (800324c <I2C_LCD_Init+0x190>)
 8003174:	0018      	movs	r0, r3
 8003176:	f7fc ffe3 	bl	8000140 <__udivsi3>
 800317a:	0003      	movs	r3, r0
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	1ae3      	subs	r3, r4, r3
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <I2C_LCD_Init+0x188>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f8      	bhi.n	8003182 <I2C_LCD_Init+0xc6>
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	3301      	adds	r3, #1
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d9d6      	bls.n	800314a <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2130      	movs	r1, #48	; 0x30
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7ff ff5f 	bl	8003066 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80031a8:	4b26      	ldr	r3, [pc, #152]	; (8003244 <I2C_LCD_Init+0x188>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <I2C_LCD_Init+0x18c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4926      	ldr	r1, [pc, #152]	; (800324c <I2C_LCD_Init+0x190>)
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7fc ffc3 	bl	8000140 <__udivsi3>
 80031ba:	0003      	movs	r3, r0
 80031bc:	001a      	movs	r2, r3
 80031be:	2396      	movs	r3, #150	; 0x96
 80031c0:	4353      	muls	r3, r2
 80031c2:	001c      	movs	r4, r3
 80031c4:	4b20      	ldr	r3, [pc, #128]	; (8003248 <I2C_LCD_Init+0x18c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4920      	ldr	r1, [pc, #128]	; (800324c <I2C_LCD_Init+0x190>)
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7fc ffb8 	bl	8000140 <__udivsi3>
 80031d0:	0003      	movs	r3, r0
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	1ae3      	subs	r3, r4, r3
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <I2C_LCD_Init+0x188>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d8f8      	bhi.n	80031d8 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80031e6:	1dfb      	adds	r3, r7, #7
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2102      	movs	r1, #2
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff ff3a 	bl	8003066 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2128      	movs	r1, #40	; 0x28
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff ff34 	bl	8003066 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	210c      	movs	r1, #12
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff ff2e 	bl	8003066 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2106      	movs	r1, #6
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff ff28 	bl	8003066 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003216:	1dfb      	adds	r3, r7, #7
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <I2C_LCD_Init+0x194>)
 800321c:	0052      	lsls	r2, r2, #1
 800321e:	2104      	movs	r1, #4
 8003220:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <I2C_LCD_Init+0x194>)
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	18d3      	adds	r3, r2, r3
 800322c:	3301      	adds	r3, #1
 800322e:	2208      	movs	r2, #8
 8003230:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8003232:	1dfb      	adds	r3, r7, #7
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	0018      	movs	r0, r3
 8003238:	f000 f80c 	bl	8003254 <I2C_LCD_Clear>
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b00b      	add	sp, #44	; 0x2c
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	e000e010 	.word	0xe000e010
 8003248:	20000014 	.word	0x20000014
 800324c:	000f4240 	.word	0x000f4240
 8003250:	2000023c 	.word	0x2000023c

08003254 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	0002      	movs	r2, r0
 800325c:	1dfb      	adds	r3, r7, #7
 800325e:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8003260:	1dfb      	adds	r3, r7, #7
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff fefd 	bl	8003066 <I2C_LCD_Cmd>
    DELAY_MS(2);
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	e025      	b.n	80032be <I2C_LCD_Clear+0x6a>
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <I2C_LCD_Clear+0x7c>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <I2C_LCD_Clear+0x80>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4916      	ldr	r1, [pc, #88]	; (80032d8 <I2C_LCD_Clear+0x84>)
 800327e:	0018      	movs	r0, r3
 8003280:	f7fc ff5e 	bl	8000140 <__udivsi3>
 8003284:	0003      	movs	r3, r0
 8003286:	001a      	movs	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	015b      	lsls	r3, r3, #5
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	189b      	adds	r3, r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	001c      	movs	r4, r3
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <I2C_LCD_Clear+0x80>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	490f      	ldr	r1, [pc, #60]	; (80032d8 <I2C_LCD_Clear+0x84>)
 800329c:	0018      	movs	r0, r3
 800329e:	f7fc ff4f 	bl	8000140 <__udivsi3>
 80032a2:	0003      	movs	r3, r0
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	1ae3      	subs	r3, r4, r3
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <I2C_LCD_Clear+0x7c>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d8f8      	bhi.n	80032aa <I2C_LCD_Clear+0x56>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3301      	adds	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d9d6      	bls.n	8003272 <I2C_LCD_Clear+0x1e>
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b007      	add	sp, #28
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	e000e010 	.word	0xe000e010
 80032d4:	20000014 	.word	0x20000014
 80032d8:	000f4240 	.word	0x000f4240

080032dc <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	0004      	movs	r4, r0
 80032e4:	0008      	movs	r0, r1
 80032e6:	0011      	movs	r1, r2
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	1c22      	adds	r2, r4, #0
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	1dbb      	adds	r3, r7, #6
 80032f0:	1c02      	adds	r2, r0, #0
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	1d7b      	adds	r3, r7, #5
 80032f6:	1c0a      	adds	r2, r1, #0
 80032f8:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80032fa:	2308      	movs	r3, #8
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <I2C_LCD_SetCursor+0x98>)
 8003300:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003302:	c313      	stmia	r3!, {r0, r1, r4}
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8003308:	1dfb      	adds	r3, r7, #7
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	491a      	ldr	r1, [pc, #104]	; (8003378 <I2C_LCD_SetCursor+0x9c>)
 800330e:	0013      	movs	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	189b      	adds	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	18cb      	adds	r3, r1, r3
 8003318:	330a      	adds	r3, #10
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	1d7a      	adds	r2, r7, #5
 800331e:	7812      	ldrb	r2, [r2, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d90c      	bls.n	800333e <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	4913      	ldr	r1, [pc, #76]	; (8003378 <I2C_LCD_SetCursor+0x9c>)
 800332a:	0013      	movs	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	189b      	adds	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	18cb      	adds	r3, r1, r3
 8003334:	330a      	adds	r3, #10
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	1d7b      	adds	r3, r7, #5
 800333a:	3a01      	subs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800333e:	1d7b      	adds	r3, r7, #5
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	2308      	movs	r3, #8
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	58d3      	ldr	r3, [r2, r3]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	1dbb      	adds	r3, r7, #6
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	18d3      	adds	r3, r2, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	b25b      	sxtb	r3, r3
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	4252      	negs	r2, r2
 800335a:	4313      	orrs	r3, r2
 800335c:	b25b      	sxtb	r3, r3
 800335e:	b2da      	uxtb	r2, r3
 8003360:	1dfb      	adds	r3, r7, #7
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	0011      	movs	r1, r2
 8003366:	0018      	movs	r0, r3
 8003368:	f7ff fe7d 	bl	8003066 <I2C_LCD_Cmd>
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b007      	add	sp, #28
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	08010b4c 	.word	0x08010b4c
 8003378:	08010d10 	.word	0x08010d10

0800337c <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	0002      	movs	r2, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	701a      	strb	r2, [r3, #0]
    while (*Str)
 800338a:	e009      	b.n	80033a0 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	603a      	str	r2, [r7, #0]
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	0011      	movs	r1, r2
 800339a:	0018      	movs	r0, r3
 800339c:	f7ff fe78 	bl	8003090 <I2C_LCD_Data>
    while (*Str)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f1      	bne.n	800338c <I2C_LCD_WriteString+0x10>
    }
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <I2C_LCD_Backlight>:
{
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void I2C_LCD_Backlight(uint8_t I2C_LCD_InstanceIndex)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	0002      	movs	r2, r0
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <I2C_LCD_Backlight+0x30>)
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	2208      	movs	r2, #8
 80033ce:	701a      	strb	r2, [r3, #0]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2100      	movs	r1, #0
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7ff fd4e 	bl	8002e78 <I2C_LCD_ExpanderWrite>
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	2000023c 	.word	0x2000023c

080033e8 <I2C_LCD_NoBacklight>:

void I2C_LCD_NoBacklight(uint8_t I2C_LCD_InstanceIndex)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	0002      	movs	r2, r0
 80033f0:	1dfb      	adds	r3, r7, #7
 80033f2:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	4a07      	ldr	r2, [pc, #28]	; (8003418 <I2C_LCD_NoBacklight+0x30>)
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	18d3      	adds	r3, r2, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2100      	movs	r1, #0
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff fd34 	bl	8002e78 <I2C_LCD_ExpanderWrite>
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}
 8003418:	2000023c 	.word	0x2000023c

0800341c <I2C_LCD_Display>:

void I2C_LCD_Display(uint8_t I2C_LCD_InstanceIndex)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	0002      	movs	r2, r0
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_DISPLAYON;
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <I2C_LCD_Display+0x4c>)
 800342e:	0052      	lsls	r2, r2, #1
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	1dfa      	adds	r2, r7, #7
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	2104      	movs	r1, #4
 8003438:	430b      	orrs	r3, r1
 800343a:	b2d9      	uxtb	r1, r3
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <I2C_LCD_Display+0x4c>)
 800343e:	0052      	lsls	r2, r2, #1
 8003440:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <I2C_LCD_Display+0x4c>)
 8003448:	0052      	lsls	r2, r2, #1
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	2208      	movs	r2, #8
 800344e:	4313      	orrs	r3, r2
 8003450:	b2da      	uxtb	r2, r3
 8003452:	1dfb      	adds	r3, r7, #7
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff fe04 	bl	8003066 <I2C_LCD_Cmd>
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b002      	add	sp, #8
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	2000023c 	.word	0x2000023c

0800346c <I2C_LCD_NoDisplay>:

void I2C_LCD_NoDisplay(uint8_t I2C_LCD_InstanceIndex)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	0002      	movs	r2, r0
 8003474:	1dfb      	adds	r3, r7, #7
 8003476:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_DISPLAYON;
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	781a      	ldrb	r2, [r3, #0]
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <I2C_LCD_NoDisplay+0x4c>)
 800347e:	0052      	lsls	r2, r2, #1
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	1dfa      	adds	r2, r7, #7
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	2104      	movs	r1, #4
 8003488:	438b      	bics	r3, r1
 800348a:	b2d9      	uxtb	r1, r3
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <I2C_LCD_NoDisplay+0x4c>)
 800348e:	0052      	lsls	r2, r2, #1
 8003490:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 8003492:	1dfb      	adds	r3, r7, #7
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <I2C_LCD_NoDisplay+0x4c>)
 8003498:	0052      	lsls	r2, r2, #1
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	2208      	movs	r2, #8
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff fddc 	bl	8003066 <I2C_LCD_Cmd>
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	2000023c 	.word	0x2000023c

080034bc <I2C_LCD_GUIDELINE>:
{
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CharIndex, RS);
}

void I2C_LCD_GUIDELINE(uint8_t now_seq)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	0002      	movs	r2, r0
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	701a      	strb	r2, [r3, #0]
    static uint8_t last_seq = 255; // 이전에 표시된 seq 값을 저장하는 변수, 임의의 초기값 설정

    // 현재 seq 값이 이전과 다른 경우에만 화면을 업데이트
    if (last_seq != now_seq)
 80034c8:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <I2C_LCD_GUIDELINE+0x20c>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	1dfa      	adds	r2, r7, #7
 80034ce:	7812      	ldrb	r2, [r2, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d100      	bne.n	80034d6 <I2C_LCD_GUIDELINE+0x1a>
 80034d4:	e0f4      	b.n	80036c0 <I2C_LCD_GUIDELINE+0x204>
    {
        last_seq = now_seq; // 현재 seq 값을 last_seq에 저장
 80034d6:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <I2C_LCD_GUIDELINE+0x20c>)
 80034d8:	1dfa      	adds	r2, r7, #7
 80034da:	7812      	ldrb	r2, [r2, #0]
 80034dc:	701a      	strb	r2, [r3, #0]
        I2C_LCD_Clear(I2C_LCD_1); // LCD 화면 클리어
 80034de:	2000      	movs	r0, #0
 80034e0:	f7ff feb8 	bl	8003254 <I2C_LCD_Clear>

        // LED 제어 로직 추가
        // 상하 LED 2개
//        if (now_seq == SEQ_2 && Check_KeyState() == FAR)
        if (now_seq == SEQ_2)
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d11c      	bne.n	8003526 <I2C_LCD_GUIDELINE+0x6a>
        {
            HAL_GPIO_WritePin(sideMirror_LED_U_GPIO_Port, sideMirror_LED_U_Pin, GPIO_PIN_RESET); // LED_U 끄기
 80034ec:	2390      	movs	r3, #144	; 0x90
 80034ee:	05db      	lsls	r3, r3, #23
 80034f0:	2200      	movs	r2, #0
 80034f2:	2110      	movs	r1, #16
 80034f4:	0018      	movs	r0, r3
 80034f6:	f002 fcb2 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_D_GPIO_Port, sideMirror_LED_D_Pin, GPIO_PIN_RESET); // LED_D 끄기
 80034fa:	2390      	movs	r3, #144	; 0x90
 80034fc:	05db      	lsls	r3, r3, #23
 80034fe:	2200      	movs	r2, #0
 8003500:	2120      	movs	r1, #32
 8003502:	0018      	movs	r0, r3
 8003504:	f002 fcab 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_R_GPIO_Port, sideMirror_LED_R_Pin, GPIO_PIN_SET); // LED_R 켜기
 8003508:	2390      	movs	r3, #144	; 0x90
 800350a:	05db      	lsls	r3, r3, #23
 800350c:	2201      	movs	r2, #1
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	0018      	movs	r0, r3
 8003512:	f002 fca4 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_L_GPIO_Port, sideMirror_LED_L_Pin, GPIO_PIN_SET); // LED_L 켜기
 8003516:	2390      	movs	r3, #144	; 0x90
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	2201      	movs	r2, #1
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	0018      	movs	r0, r3
 8003520:	f002 fc9d 	bl	8005e5e <HAL_GPIO_WritePin>
 8003524:	e03c      	b.n	80035a0 <I2C_LCD_GUIDELINE+0xe4>
        }
        // 좌우 LED 2개
//        else if (now_seq == SEQ_3 && Check_KeyState() == FAR)
        else if (now_seq == SEQ_3)
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d11c      	bne.n	8003568 <I2C_LCD_GUIDELINE+0xac>
        {
            HAL_GPIO_WritePin(sideMirror_LED_U_GPIO_Port, sideMirror_LED_U_Pin, GPIO_PIN_SET); // LED_U 켜기
 800352e:	2390      	movs	r3, #144	; 0x90
 8003530:	05db      	lsls	r3, r3, #23
 8003532:	2201      	movs	r2, #1
 8003534:	2110      	movs	r1, #16
 8003536:	0018      	movs	r0, r3
 8003538:	f002 fc91 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_D_GPIO_Port, sideMirror_LED_D_Pin, GPIO_PIN_SET); // LED_D 켜기
 800353c:	2390      	movs	r3, #144	; 0x90
 800353e:	05db      	lsls	r3, r3, #23
 8003540:	2201      	movs	r2, #1
 8003542:	2120      	movs	r1, #32
 8003544:	0018      	movs	r0, r3
 8003546:	f002 fc8a 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_R_GPIO_Port, sideMirror_LED_R_Pin, GPIO_PIN_RESET); // LED_R 끄기
 800354a:	2390      	movs	r3, #144	; 0x90
 800354c:	05db      	lsls	r3, r3, #23
 800354e:	2200      	movs	r2, #0
 8003550:	2140      	movs	r1, #64	; 0x40
 8003552:	0018      	movs	r0, r3
 8003554:	f002 fc83 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_L_GPIO_Port, sideMirror_LED_L_Pin, GPIO_PIN_RESET); // LED_L 끄기
 8003558:	2390      	movs	r3, #144	; 0x90
 800355a:	05db      	lsls	r3, r3, #23
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	0018      	movs	r0, r3
 8003562:	f002 fc7c 	bl	8005e5e <HAL_GPIO_WritePin>
 8003566:	e01b      	b.n	80035a0 <I2C_LCD_GUIDELINE+0xe4>
        }
        else
        {
            // 나머지 상태에서는 모든 LED 끄기
            HAL_GPIO_WritePin(sideMirror_LED_U_GPIO_Port, sideMirror_LED_U_Pin, GPIO_PIN_RESET); // LED_U 끄기
 8003568:	2390      	movs	r3, #144	; 0x90
 800356a:	05db      	lsls	r3, r3, #23
 800356c:	2200      	movs	r2, #0
 800356e:	2110      	movs	r1, #16
 8003570:	0018      	movs	r0, r3
 8003572:	f002 fc74 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_D_GPIO_Port, sideMirror_LED_D_Pin, GPIO_PIN_RESET); // LED_D 끄기
 8003576:	2390      	movs	r3, #144	; 0x90
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	2200      	movs	r2, #0
 800357c:	2120      	movs	r1, #32
 800357e:	0018      	movs	r0, r3
 8003580:	f002 fc6d 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_R_GPIO_Port, sideMirror_LED_R_Pin, GPIO_PIN_RESET); // LED_R 켜기
 8003584:	2390      	movs	r3, #144	; 0x90
 8003586:	05db      	lsls	r3, r3, #23
 8003588:	2200      	movs	r2, #0
 800358a:	2140      	movs	r1, #64	; 0x40
 800358c:	0018      	movs	r0, r3
 800358e:	f002 fc66 	bl	8005e5e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sideMirror_LED_L_GPIO_Port, sideMirror_LED_L_Pin, GPIO_PIN_RESET); // LED_L 켜기
 8003592:	2390      	movs	r3, #144	; 0x90
 8003594:	05db      	lsls	r3, r3, #23
 8003596:	2200      	movs	r2, #0
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	0018      	movs	r0, r3
 800359c:	f002 fc5f 	bl	8005e5e <HAL_GPIO_WritePin>
        }

        // now_seq 값에 따른 메시지 표시
        switch (now_seq)
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d05f      	beq.n	8003668 <I2C_LCD_GUIDELINE+0x1ac>
 80035a8:	dd00      	ble.n	80035ac <I2C_LCD_GUIDELINE+0xf0>
 80035aa:	e089      	b.n	80036c0 <I2C_LCD_GUIDELINE+0x204>
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d02f      	beq.n	8003610 <I2C_LCD_GUIDELINE+0x154>
 80035b0:	dd00      	ble.n	80035b4 <I2C_LCD_GUIDELINE+0xf8>
 80035b2:	e085      	b.n	80036c0 <I2C_LCD_GUIDELINE+0x204>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <I2C_LCD_GUIDELINE+0x102>
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d007      	beq.n	80035cc <I2C_LCD_GUIDELINE+0x110>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 3);
                I2C_LCD_WriteString(I2C_LCD_1, "AT 1/4 CAR");
                break;
        }
    }
}
 80035bc:	e080      	b.n	80036c0 <I2C_LCD_GUIDELINE+0x204>
				I2C_LCD_NoBacklight(I2C_LCD_1);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7ff ff12 	bl	80033e8 <I2C_LCD_NoBacklight>
				I2C_LCD_NoDisplay(I2C_LCD_1);
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7ff ff51 	bl	800346c <I2C_LCD_NoDisplay>
				break;
 80035ca:	e079      	b.n	80036c0 <I2C_LCD_GUIDELINE+0x204>
            	I2C_LCD_Backlight(I2C_LCD_1);
 80035cc:	2000      	movs	r0, #0
 80035ce:	f7ff fef1 	bl	80033b4 <I2C_LCD_Backlight>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7ff fe80 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "SIDEMIRROR GUIDELINE ");
 80035dc:	4b3b      	ldr	r3, [pc, #236]	; (80036cc <I2C_LCD_GUIDELINE+0x210>)
 80035de:	0019      	movs	r1, r3
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7ff fecb 	bl	800337c <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 80035e6:	2201      	movs	r2, #1
 80035e8:	2100      	movs	r1, #0
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7ff fe76 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "IF YOU READY ");
 80035f0:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <I2C_LCD_GUIDELINE+0x214>)
 80035f2:	0019      	movs	r1, r3
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7ff fec1 	bl	800337c <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 2);
 80035fa:	2202      	movs	r2, #2
 80035fc:	2100      	movs	r1, #0
 80035fe:	2000      	movs	r0, #0
 8003600:	f7ff fe6c 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "PUSH BUTTON");
 8003604:	4b33      	ldr	r3, [pc, #204]	; (80036d4 <I2C_LCD_GUIDELINE+0x218>)
 8003606:	0019      	movs	r1, r3
 8003608:	2000      	movs	r0, #0
 800360a:	f7ff feb7 	bl	800337c <I2C_LCD_WriteString>
                break;
 800360e:	e057      	b.n	80036c0 <I2C_LCD_GUIDELINE+0x204>
            	I2C_LCD_Backlight(I2C_LCD_1);
 8003610:	2000      	movs	r0, #0
 8003612:	f7ff fecf 	bl	80033b4 <I2C_LCD_Backlight>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2000      	movs	r0, #0
 800361c:	f7ff fe5e 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "SIDEMIRROR GUIDELINE ");
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <I2C_LCD_GUIDELINE+0x210>)
 8003622:	0019      	movs	r1, r3
 8003624:	2000      	movs	r0, #0
 8003626:	f7ff fea9 	bl	800337c <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 800362a:	2201      	movs	r2, #1
 800362c:	2100      	movs	r1, #0
 800362e:	2000      	movs	r0, #0
 8003630:	f7ff fe54 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "ALIGN UP AND DOWN ");
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <I2C_LCD_GUIDELINE+0x21c>)
 8003636:	0019      	movs	r1, r3
 8003638:	2000      	movs	r0, #0
 800363a:	f7ff fe9f 	bl	800337c <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 2);
 800363e:	2202      	movs	r2, #2
 8003640:	2100      	movs	r1, #0
 8003642:	2000      	movs	r0, #0
 8003644:	f7ff fe4a 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "PLACE GREEN LED LINE");
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <I2C_LCD_GUIDELINE+0x220>)
 800364a:	0019      	movs	r1, r3
 800364c:	2000      	movs	r0, #0
 800364e:	f7ff fe95 	bl	800337c <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 3);
 8003652:	2203      	movs	r2, #3
 8003654:	2100      	movs	r1, #0
 8003656:	2000      	movs	r0, #0
 8003658:	f7ff fe40 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "AT HORIZON");
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <I2C_LCD_GUIDELINE+0x224>)
 800365e:	0019      	movs	r1, r3
 8003660:	2000      	movs	r0, #0
 8003662:	f7ff fe8b 	bl	800337c <I2C_LCD_WriteString>
                break;
 8003666:	e02b      	b.n	80036c0 <I2C_LCD_GUIDELINE+0x204>
            	I2C_LCD_Backlight(I2C_LCD_1);
 8003668:	2000      	movs	r0, #0
 800366a:	f7ff fea3 	bl	80033b4 <I2C_LCD_Backlight>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2100      	movs	r1, #0
 8003672:	2000      	movs	r0, #0
 8003674:	f7ff fe32 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "SIDEMIRROR GUIDELINE ");
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <I2C_LCD_GUIDELINE+0x210>)
 800367a:	0019      	movs	r1, r3
 800367c:	2000      	movs	r0, #0
 800367e:	f7ff fe7d 	bl	800337c <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 8003682:	2201      	movs	r2, #1
 8003684:	2100      	movs	r1, #0
 8003686:	2000      	movs	r0, #0
 8003688:	f7ff fe28 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "ALIGN LEFT AND RIGHT ");
 800368c:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <I2C_LCD_GUIDELINE+0x228>)
 800368e:	0019      	movs	r1, r3
 8003690:	2000      	movs	r0, #0
 8003692:	f7ff fe73 	bl	800337c <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 2);
 8003696:	2202      	movs	r2, #2
 8003698:	2100      	movs	r1, #0
 800369a:	2000      	movs	r0, #0
 800369c:	f7ff fe1e 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "PLACE RED LED LINE");
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <I2C_LCD_GUIDELINE+0x22c>)
 80036a2:	0019      	movs	r1, r3
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7ff fe69 	bl	800337c <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(I2C_LCD_1, 0, 3);
 80036aa:	2203      	movs	r2, #3
 80036ac:	2100      	movs	r1, #0
 80036ae:	2000      	movs	r0, #0
 80036b0:	f7ff fe14 	bl	80032dc <I2C_LCD_SetCursor>
                I2C_LCD_WriteString(I2C_LCD_1, "AT 1/4 CAR");
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <I2C_LCD_GUIDELINE+0x230>)
 80036b6:	0019      	movs	r1, r3
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7ff fe5f 	bl	800337c <I2C_LCD_WriteString>
                break;
 80036be:	46c0      	nop			; (mov r8, r8)
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	2000000a 	.word	0x2000000a
 80036cc:	08010b5c 	.word	0x08010b5c
 80036d0:	08010b74 	.word	0x08010b74
 80036d4:	08010b84 	.word	0x08010b84
 80036d8:	08010b90 	.word	0x08010b90
 80036dc:	08010ba4 	.word	0x08010ba4
 80036e0:	08010bbc 	.word	0x08010bbc
 80036e4:	08010bc8 	.word	0x08010bc8
 80036e8:	08010be0 	.word	0x08010be0
 80036ec:	08010bf4 	.word	0x08010bf4

080036f0 <Servo_Init>:

/* VARIABLES END */


void Servo_Init(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  //note : Check the parameters
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  //note : Set the TIM channel state
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <Servo_Init+0x1a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	223e      	movs	r2, #62	; 0x3e
 8003704:	2102      	movs	r1, #2
 8003706:	5499      	strb	r1, [r3, r2]
 8003708:	e013      	b.n	8003732 <Servo_Init+0x42>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d104      	bne.n	800371a <Servo_Init+0x2a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	223f      	movs	r2, #63	; 0x3f
 8003714:	2102      	movs	r1, #2
 8003716:	5499      	strb	r1, [r3, r2]
 8003718:	e00b      	b.n	8003732 <Servo_Init+0x42>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d104      	bne.n	800372a <Servo_Init+0x3a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	2102      	movs	r1, #2
 8003726:	5499      	strb	r1, [r3, r2]
 8003728:	e003      	b.n	8003732 <Servo_Init+0x42>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2241      	movs	r2, #65	; 0x41
 800372e:	2102      	movs	r1, #2
 8003730:	5499      	strb	r1, [r3, r2]

  //note : Enable the Capture compare channel
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	2201      	movs	r2, #1
 800373a:	0018      	movs	r0, r3
 800373c:	f004 ffe6 	bl	800870c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a15      	ldr	r2, [pc, #84]	; (800379c <Servo_Init+0xac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00e      	beq.n	8003768 <Servo_Init+0x78>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <Servo_Init+0xb0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d009      	beq.n	8003768 <Servo_Init+0x78>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <Servo_Init+0xb4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <Servo_Init+0x78>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <Servo_Init+0xb8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d101      	bne.n	800376c <Servo_Init+0x7c>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <Servo_Init+0x7e>
 800376c:	2300      	movs	r3, #0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <Servo_Init+0x94>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2180      	movs	r1, #128	; 0x80
 800377e:	0209      	lsls	r1, r1, #8
 8003780:	430a      	orrs	r2, r1
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
  }

  __HAL_TIM_ENABLE(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800

080037ac <ServoAngleChange>:

void ServoAngleChange(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t angle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	701a      	strb	r2, [r3, #0]
	uint32_t ccr = ServoAngleToCCR(angle);
 80037ba:	1dfb      	adds	r3, r7, #7
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 f826 	bl	8003810 <ServoAngleToCCR>
 80037c4:	0003      	movs	r3, r0
 80037c6:	617b      	str	r3, [r7, #20]

	if(Channel == TIM_CHANNEL_1)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <ServoAngleChange+0x2c>
	{
		htim->Instance->CCR1 = ccr;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
	else if(Channel == TIM_CHANNEL_4)
	{
		htim->Instance->CCR4 = ccr;
	}
	else;
}
 80037d6:	e016      	b.n	8003806 <ServoAngleChange+0x5a>
	else if(Channel == TIM_CHANNEL_2)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d104      	bne.n	80037e8 <ServoAngleChange+0x3c>
		htim->Instance->CCR2 = ccr;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80037e6:	e00e      	b.n	8003806 <ServoAngleChange+0x5a>
	else if(Channel == TIM_CHANNEL_3)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d104      	bne.n	80037f8 <ServoAngleChange+0x4c>
		htim->Instance->CCR3 = ccr;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80037f6:	e006      	b.n	8003806 <ServoAngleChange+0x5a>
	else if(Channel == TIM_CHANNEL_4)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d103      	bne.n	8003806 <ServoAngleChange+0x5a>
		htim->Instance->CCR4 = ccr;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b006      	add	sp, #24
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <ServoAngleToCCR>:

uint32_t ServoAngleToCCR(uint8_t angle)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	0002      	movs	r2, r0
 8003818:	1dfb      	adds	r3, r7, #7
 800381a:	701a      	strb	r2, [r3, #0]
	//note : 0~180 angle -> 20~120 CCR, convert
	if(angle > 180)
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2bb4      	cmp	r3, #180	; 0xb4
 8003822:	d902      	bls.n	800382a <ServoAngleToCCR+0x1a>
	{
		angle = 180;
 8003824:	1dfb      	adds	r3, r7, #7
 8003826:	22b4      	movs	r2, #180	; 0xb4
 8003828:	701a      	strb	r2, [r3, #0]
	}
	return (uint32_t)(DEG0TOCCR + (angle * DEGGAIN));
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	0018      	movs	r0, r3
 8003830:	f7fe fc9c 	bl	800216c <__aeabi_i2d>
 8003834:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <ServoAngleToCCR+0x54>)
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <ServoAngleToCCR+0x58>)
 8003838:	f7fd fe00 	bl	800143c <__aeabi_dmul>
 800383c:	0002      	movs	r2, r0
 800383e:	000b      	movs	r3, r1
 8003840:	0010      	movs	r0, r2
 8003842:	0019      	movs	r1, r3
 8003844:	2200      	movs	r2, #0
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <ServoAngleToCCR+0x5c>)
 8003848:	f7fc fe9e 	bl	8000588 <__aeabi_dadd>
 800384c:	0002      	movs	r2, r0
 800384e:	000b      	movs	r3, r1
 8003850:	0010      	movs	r0, r2
 8003852:	0019      	movs	r1, r3
 8003854:	f7fc fe28 	bl	80004a8 <__aeabi_d2uiz>
 8003858:	0003      	movs	r3, r0
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	1eb851ec 	.word	0x1eb851ec
 8003868:	3fe1eb85 	.word	0x3fe1eb85
 800386c:	40340000 	.word	0x40340000

08003870 <Switch_GetState1>:
    // GPIO initialization code specific to your setup
}

// Check and return the state of the button
// About LCD BUTTON
uint8_t Switch_GetState1(void) {
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
    static uint8_t prevButtonState = GPIO_PIN_SET; // Assume button is not pressed initially
//    uint8_t buttonState = HAL_GPIO_ReadPin(sideMirror_Joystick_Switch_GPIO_Port, sideMirror_Joystick_Switch_Pin); // Read the current button state
    uint8_t buttonState = HAL_GPIO_ReadPin(test_SW_GPIO_Port, test_SW_Pin); // Read the current button state
 8003876:	1dfc      	adds	r4, r7, #7
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <Switch_GetState1+0x48>)
 800387e:	0019      	movs	r1, r3
 8003880:	0010      	movs	r0, r2
 8003882:	f002 facf 	bl	8005e24 <HAL_GPIO_ReadPin>
 8003886:	0003      	movs	r3, r0
 8003888:	7023      	strb	r3, [r4, #0]

    if(buttonState == GPIO_PIN_RESET && prevButtonState == GPIO_PIN_SET) {
 800388a:	1dfb      	adds	r3, r7, #7
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <Switch_GetState1+0x36>
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <Switch_GetState1+0x4c>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <Switch_GetState1+0x36>
        // Button was just pressed
        prevButtonState = buttonState; // Update the previous button state
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <Switch_GetState1+0x4c>)
 800389c:	1dfa      	adds	r2, r7, #7
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	701a      	strb	r2, [r3, #0]
        return 1; // Return 1 to indicate button press
 80038a2:	2301      	movs	r3, #1
 80038a4:	e004      	b.n	80038b0 <Switch_GetState1+0x40>
    } else {
        // Update the previous button state
        prevButtonState = buttonState;
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <Switch_GetState1+0x4c>)
 80038a8:	1dfa      	adds	r2, r7, #7
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	701a      	strb	r2, [r3, #0]
        return 0; // Return 0, button not pressed
 80038ae:	2300      	movs	r3, #0
    }
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b003      	add	sp, #12
 80038b6:	bd90      	pop	{r4, r7, pc}
 80038b8:	48000800 	.word	0x48000800
 80038bc:	2000000b 	.word	0x2000000b

080038c0 <Switch_GetState2>:

// Check and return the state of the button
// About HeadLight Button
uint8_t Switch_GetState2(void) {
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
    static uint8_t prevButtonState = GPIO_PIN_SET; // Assume button is not pressed initially
    uint8_t buttonState = HAL_GPIO_ReadPin(headLight_SW_start_GPIO_Port, headLight_SW_start_Pin); // Read the current button state
 80038c6:	1dfc      	adds	r4, r7, #7
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <Switch_GetState2+0x48>)
 80038ce:	0019      	movs	r1, r3
 80038d0:	0010      	movs	r0, r2
 80038d2:	f002 faa7 	bl	8005e24 <HAL_GPIO_ReadPin>
 80038d6:	0003      	movs	r3, r0
 80038d8:	7023      	strb	r3, [r4, #0]
//    uint8_t buttonState = HAL_GPIO_ReadPin(test_SW_GPIO_Port, test_SW_Pin); // Read the current button state

    if(buttonState == GPIO_PIN_RESET && prevButtonState == GPIO_PIN_SET) {
 80038da:	1dfb      	adds	r3, r7, #7
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <Switch_GetState2+0x36>
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <Switch_GetState2+0x4c>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <Switch_GetState2+0x36>
        // Button was just pressed
        prevButtonState = buttonState; // Update the previous button state
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <Switch_GetState2+0x4c>)
 80038ec:	1dfa      	adds	r2, r7, #7
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	701a      	strb	r2, [r3, #0]
        return 1; // Return 1 to indicate button press
 80038f2:	2301      	movs	r3, #1
 80038f4:	e004      	b.n	8003900 <Switch_GetState2+0x40>
    } else {
        // Update the previous button state
        prevButtonState = buttonState;
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <Switch_GetState2+0x4c>)
 80038f8:	1dfa      	adds	r2, r7, #7
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	701a      	strb	r2, [r3, #0]
        return 0; // Return 0, button not pressed
 80038fe:	2300      	movs	r3, #0
    }
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b003      	add	sp, #12
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	48000800 	.word	0x48000800
 800390c:	2000000c 	.word	0x2000000c

08003910 <Uart_Init>:
uint8_t rx_side_rightleft = 0;
uint8_t state = IDLE;
/* VARIABLES END */

void Uart_Init()
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
	MX_USART3_UART_Init();
 8003914:	f001 fb92 	bl	800503c <MX_USART3_UART_Init>
   HAL_UART_Receive_IT(&huart3, (uint8_t*)RX_Data, DATALENGTH);
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <Uart_Init+0x1c>)
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <Uart_Init+0x20>)
 800391c:	2208      	movs	r2, #8
 800391e:	0018      	movs	r0, r3
 8003920:	f005 f8d8 	bl	8008ad4 <HAL_UART_Receive_IT>
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	20000254 	.word	0x20000254
 8003930:	20000464 	.word	0x20000464

08003934 <Comm_UartWrite>:

void Comm_UartWrite(uint8_t function1, uint8_t function2, uint32_t data)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	603a      	str	r2, [r7, #0]
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	1c02      	adds	r2, r0, #0
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	1dbb      	adds	r3, r7, #6
 8003944:	1c0a      	adds	r2, r1, #0
 8003946:	701a      	strb	r2, [r3, #0]
   uint8_t TX_Data[8] = {0,};
 8003948:	2408      	movs	r4, #8
 800394a:	193b      	adds	r3, r7, r4
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
   TX_Data[0] = '<';
 8003954:	193b      	adds	r3, r7, r4
 8003956:	223c      	movs	r2, #60	; 0x3c
 8003958:	701a      	strb	r2, [r3, #0]
   TX_Data[1] = 'R';
 800395a:	193b      	adds	r3, r7, r4
 800395c:	2252      	movs	r2, #82	; 0x52
 800395e:	705a      	strb	r2, [r3, #1]
   TX_Data[2] = function1;
 8003960:	193b      	adds	r3, r7, r4
 8003962:	1dfa      	adds	r2, r7, #7
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	709a      	strb	r2, [r3, #2]
   TX_Data[3] = function2;
 8003968:	193b      	adds	r3, r7, r4
 800396a:	1dba      	adds	r2, r7, #6
 800396c:	7812      	ldrb	r2, [r2, #0]
 800396e:	70da      	strb	r2, [r3, #3]
   TX_Data[4] = (data / 100) + '0';
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2164      	movs	r1, #100	; 0x64
 8003974:	0018      	movs	r0, r3
 8003976:	f7fc fbe3 	bl	8000140 <__udivsi3>
 800397a:	0003      	movs	r3, r0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	3330      	adds	r3, #48	; 0x30
 8003980:	b2da      	uxtb	r2, r3
 8003982:	193b      	adds	r3, r7, r4
 8003984:	711a      	strb	r2, [r3, #4]
   TX_Data[5] = ((data % 100) / 10) + '0';
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2164      	movs	r1, #100	; 0x64
 800398a:	0018      	movs	r0, r3
 800398c:	f7fc fc5e 	bl	800024c <__aeabi_uidivmod>
 8003990:	000b      	movs	r3, r1
 8003992:	210a      	movs	r1, #10
 8003994:	0018      	movs	r0, r3
 8003996:	f7fc fbd3 	bl	8000140 <__udivsi3>
 800399a:	0003      	movs	r3, r0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	3330      	adds	r3, #48	; 0x30
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	193b      	adds	r3, r7, r4
 80039a4:	715a      	strb	r2, [r3, #5]
   TX_Data[6] = (data % 10) + '0';
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	210a      	movs	r1, #10
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7fc fc4e 	bl	800024c <__aeabi_uidivmod>
 80039b0:	000b      	movs	r3, r1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	3330      	adds	r3, #48	; 0x30
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	193b      	adds	r3, r7, r4
 80039ba:	719a      	strb	r2, [r3, #6]
   TX_Data[7] = '>';
 80039bc:	193b      	adds	r3, r7, r4
 80039be:	223e      	movs	r2, #62	; 0x3e
 80039c0:	71da      	strb	r2, [r3, #7]
   HAL_UART_Transmit(&huart3,(uint8_t*)TX_Data, DATALENGTH, 10);
 80039c2:	1939      	adds	r1, r7, r4
 80039c4:	4804      	ldr	r0, [pc, #16]	; (80039d8 <Comm_UartWrite+0xa4>)
 80039c6:	230a      	movs	r3, #10
 80039c8:	2208      	movs	r2, #8
 80039ca:	f004 ffe3 	bl	8008994 <HAL_UART_Transmit>
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b005      	add	sp, #20
 80039d4:	bd90      	pop	{r4, r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	20000464 	.word	0x20000464

080039dc <Uart_Handler>:

void Uart_Handler()
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
	Rx_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE);
 80039e0:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <Uart_Handler+0x84>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	2220      	movs	r2, #32
 80039e8:	4013      	ands	r3, r2
 80039ea:	3b20      	subs	r3, #32
 80039ec:	425a      	negs	r2, r3
 80039ee:	4153      	adcs	r3, r2
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	001a      	movs	r2, r3
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <Uart_Handler+0x88>)
 80039f6:	601a      	str	r2, [r3, #0]
	Rx_it_source = __HAL_UART_GET_IT_SOURCE(&huart3, UART_IT_RXNE);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <Uart_Handler+0x84>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2220      	movs	r2, #32
 8003a00:	4013      	ands	r3, r2
 8003a02:	1e5a      	subs	r2, r3, #1
 8003a04:	4193      	sbcs	r3, r2
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	001a      	movs	r2, r3
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <Uart_Handler+0x8c>)
 8003a0c:	601a      	str	r2, [r3, #0]

	if ((Rx_flag != RESET) && (Rx_it_source != RESET)) {
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <Uart_Handler+0x88>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <Uart_Handler+0x6a>
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <Uart_Handler+0x8c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d013      	beq.n	8003a46 <Uart_Handler+0x6a>
		 /* 1Byte copy */
		 data = (uint8_t)(huart3.Instance->RDR & (uint8_t)0x00FF);
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <Uart_Handler+0x84>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <Uart_Handler+0x90>)
 8003a2a:	701a      	strb	r2, [r3, #0]
		 RX_Data[index_rx] = data;
 8003a2c:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <Uart_Handler+0x94>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	001a      	movs	r2, r3
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <Uart_Handler+0x90>)
 8003a34:	7819      	ldrb	r1, [r3, #0]
 8003a36:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <Uart_Handler+0x98>)
 8003a38:	5499      	strb	r1, [r3, r2]
		 index_rx++;
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <Uart_Handler+0x94>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <Uart_Handler+0x94>)
 8003a44:	701a      	strb	r2, [r3, #0]
	}
	else;

	if(index_rx >= 8)
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <Uart_Handler+0x94>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b07      	cmp	r3, #7
 8003a4c:	d904      	bls.n	8003a58 <Uart_Handler+0x7c>
	{
		Check_Protocol();
 8003a4e:	f000 f813 	bl	8003a78 <Check_Protocol>

		index_rx = 0;
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <Uart_Handler+0x94>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
	}
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	20000464 	.word	0x20000464
 8003a64:	2000025c 	.word	0x2000025c
 8003a68:	20000260 	.word	0x20000260
 8003a6c:	20000264 	.word	0x20000264
 8003a70:	20000265 	.word	0x20000265
 8003a74:	20000254 	.word	0x20000254

08003a78 <Check_Protocol>:

void Check_Protocol()
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	if(strncmp(RX_Data, "<WAH--->", 4) == 0 && RX_Data[7] == '>')
 8003a7c:	498f      	ldr	r1, [pc, #572]	; (8003cbc <Check_Protocol+0x244>)
 8003a7e:	4b90      	ldr	r3, [pc, #576]	; (8003cc0 <Check_Protocol+0x248>)
 8003a80:	2204      	movs	r2, #4
 8003a82:	0018      	movs	r0, r3
 8003a84:	f009 faa6 	bl	800cfd4 <strncmp>
 8003a88:	1e03      	subs	r3, r0, #0
 8003a8a:	d11d      	bne.n	8003ac8 <Check_Protocol+0x50>
 8003a8c:	4b8c      	ldr	r3, [pc, #560]	; (8003cc0 <Check_Protocol+0x248>)
 8003a8e:	79db      	ldrb	r3, [r3, #7]
 8003a90:	2b3e      	cmp	r3, #62	; 0x3e
 8003a92:	d119      	bne.n	8003ac8 <Check_Protocol+0x50>
	{
		FlagInfo.Air_Dir_Flag = 1;
 8003a94:	4b8b      	ldr	r3, [pc, #556]	; (8003cc4 <Check_Protocol+0x24c>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
		DataInfo.Air_Dir_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8003a9a:	4b89      	ldr	r3, [pc, #548]	; (8003cc0 <Check_Protocol+0x248>)
 8003a9c:	791b      	ldrb	r3, [r3, #4]
 8003a9e:	2264      	movs	r2, #100	; 0x64
 8003aa0:	4353      	muls	r3, r2
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b86      	ldr	r3, [pc, #536]	; (8003cc0 <Check_Protocol+0x248>)
 8003aa6:	795b      	ldrb	r3, [r3, #5]
 8003aa8:	1c19      	adds	r1, r3, #0
 8003aaa:	0089      	lsls	r1, r1, #2
 8003aac:	18cb      	adds	r3, r1, r3
 8003aae:	18db      	adds	r3, r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	18d3      	adds	r3, r2, r3
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b82      	ldr	r3, [pc, #520]	; (8003cc0 <Check_Protocol+0x248>)
 8003ab8:	799b      	ldrb	r3, [r3, #6]
 8003aba:	18d3      	adds	r3, r2, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	3330      	adds	r3, #48	; 0x30
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <Check_Protocol+0x250>)
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e0f5      	b.n	8003cb4 <Check_Protocol+0x23c>
	}
	else if(strncmp(RX_Data, "<WAL--->", 4) == 0 && RX_Data[7] == '>')
 8003ac8:	4980      	ldr	r1, [pc, #512]	; (8003ccc <Check_Protocol+0x254>)
 8003aca:	4b7d      	ldr	r3, [pc, #500]	; (8003cc0 <Check_Protocol+0x248>)
 8003acc:	2204      	movs	r2, #4
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f009 fa80 	bl	800cfd4 <strncmp>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d11d      	bne.n	8003b14 <Check_Protocol+0x9c>
 8003ad8:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <Check_Protocol+0x248>)
 8003ada:	79db      	ldrb	r3, [r3, #7]
 8003adc:	2b3e      	cmp	r3, #62	; 0x3e
 8003ade:	d119      	bne.n	8003b14 <Check_Protocol+0x9c>
	{
		FlagInfo.Air_Speed_Flag = 1;
 8003ae0:	4b78      	ldr	r3, [pc, #480]	; (8003cc4 <Check_Protocol+0x24c>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	705a      	strb	r2, [r3, #1]
		DataInfo.Air_Speed_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8003ae6:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <Check_Protocol+0x248>)
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	2264      	movs	r2, #100	; 0x64
 8003aec:	4353      	muls	r3, r2
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	4b73      	ldr	r3, [pc, #460]	; (8003cc0 <Check_Protocol+0x248>)
 8003af2:	795b      	ldrb	r3, [r3, #5]
 8003af4:	1c19      	adds	r1, r3, #0
 8003af6:	0089      	lsls	r1, r1, #2
 8003af8:	18cb      	adds	r3, r1, r3
 8003afa:	18db      	adds	r3, r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	18d3      	adds	r3, r2, r3
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <Check_Protocol+0x248>)
 8003b04:	799b      	ldrb	r3, [r3, #6]
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	3330      	adds	r3, #48	; 0x30
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4b6e      	ldr	r3, [pc, #440]	; (8003cc8 <Check_Protocol+0x250>)
 8003b10:	705a      	strb	r2, [r3, #1]
 8003b12:	e0cf      	b.n	8003cb4 <Check_Protocol+0x23c>
	}
	else if(strncmp(RX_Data, "<WCH--->", 4) == 0 && RX_Data[7] == '>')
 8003b14:	496e      	ldr	r1, [pc, #440]	; (8003cd0 <Check_Protocol+0x258>)
 8003b16:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <Check_Protocol+0x248>)
 8003b18:	2204      	movs	r2, #4
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f009 fa5a 	bl	800cfd4 <strncmp>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d11d      	bne.n	8003b60 <Check_Protocol+0xe8>
 8003b24:	4b66      	ldr	r3, [pc, #408]	; (8003cc0 <Check_Protocol+0x248>)
 8003b26:	79db      	ldrb	r3, [r3, #7]
 8003b28:	2b3e      	cmp	r3, #62	; 0x3e
 8003b2a:	d119      	bne.n	8003b60 <Check_Protocol+0xe8>
	{
		FlagInfo.Seat_UpDown_Flag = 1;
 8003b2c:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <Check_Protocol+0x24c>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	709a      	strb	r2, [r3, #2]
		DataInfo.Seat_UpDown_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8003b32:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <Check_Protocol+0x248>)
 8003b34:	791b      	ldrb	r3, [r3, #4]
 8003b36:	2264      	movs	r2, #100	; 0x64
 8003b38:	4353      	muls	r3, r2
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4b60      	ldr	r3, [pc, #384]	; (8003cc0 <Check_Protocol+0x248>)
 8003b3e:	795b      	ldrb	r3, [r3, #5]
 8003b40:	1c19      	adds	r1, r3, #0
 8003b42:	0089      	lsls	r1, r1, #2
 8003b44:	18cb      	adds	r3, r1, r3
 8003b46:	18db      	adds	r3, r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <Check_Protocol+0x248>)
 8003b50:	799b      	ldrb	r3, [r3, #6]
 8003b52:	18d3      	adds	r3, r2, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3330      	adds	r3, #48	; 0x30
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4b5b      	ldr	r3, [pc, #364]	; (8003cc8 <Check_Protocol+0x250>)
 8003b5c:	709a      	strb	r2, [r3, #2]
 8003b5e:	e0a9      	b.n	8003cb4 <Check_Protocol+0x23c>
	}
	else if(strncmp(RX_Data, "<WCL--->", 4) == 0 && RX_Data[7] == '>')
 8003b60:	495c      	ldr	r1, [pc, #368]	; (8003cd4 <Check_Protocol+0x25c>)
 8003b62:	4b57      	ldr	r3, [pc, #348]	; (8003cc0 <Check_Protocol+0x248>)
 8003b64:	2204      	movs	r2, #4
 8003b66:	0018      	movs	r0, r3
 8003b68:	f009 fa34 	bl	800cfd4 <strncmp>
 8003b6c:	1e03      	subs	r3, r0, #0
 8003b6e:	d11d      	bne.n	8003bac <Check_Protocol+0x134>
 8003b70:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <Check_Protocol+0x248>)
 8003b72:	79db      	ldrb	r3, [r3, #7]
 8003b74:	2b3e      	cmp	r3, #62	; 0x3e
 8003b76:	d119      	bne.n	8003bac <Check_Protocol+0x134>
	{
		FlagInfo.Seat_RightLeft_Flag = 1;
 8003b78:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <Check_Protocol+0x24c>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	70da      	strb	r2, [r3, #3]
		DataInfo.Seat_RightLeft_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8003b7e:	4b50      	ldr	r3, [pc, #320]	; (8003cc0 <Check_Protocol+0x248>)
 8003b80:	791b      	ldrb	r3, [r3, #4]
 8003b82:	2264      	movs	r2, #100	; 0x64
 8003b84:	4353      	muls	r3, r2
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	4b4d      	ldr	r3, [pc, #308]	; (8003cc0 <Check_Protocol+0x248>)
 8003b8a:	795b      	ldrb	r3, [r3, #5]
 8003b8c:	1c19      	adds	r1, r3, #0
 8003b8e:	0089      	lsls	r1, r1, #2
 8003b90:	18cb      	adds	r3, r1, r3
 8003b92:	18db      	adds	r3, r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	18d3      	adds	r3, r2, r3
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b49      	ldr	r3, [pc, #292]	; (8003cc0 <Check_Protocol+0x248>)
 8003b9c:	799b      	ldrb	r3, [r3, #6]
 8003b9e:	18d3      	adds	r3, r2, r3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	3330      	adds	r3, #48	; 0x30
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <Check_Protocol+0x250>)
 8003ba8:	70da      	strb	r2, [r3, #3]
 8003baa:	e083      	b.n	8003cb4 <Check_Protocol+0x23c>
	}
	else if(strncmp(RX_Data, "<WSH--->", 4) == 0 && RX_Data[7] == '>')
 8003bac:	494a      	ldr	r1, [pc, #296]	; (8003cd8 <Check_Protocol+0x260>)
 8003bae:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <Check_Protocol+0x248>)
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f009 fa0e 	bl	800cfd4 <strncmp>
 8003bb8:	1e03      	subs	r3, r0, #0
 8003bba:	d121      	bne.n	8003c00 <Check_Protocol+0x188>
 8003bbc:	4b40      	ldr	r3, [pc, #256]	; (8003cc0 <Check_Protocol+0x248>)
 8003bbe:	79db      	ldrb	r3, [r3, #7]
 8003bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8003bc2:	d11d      	bne.n	8003c00 <Check_Protocol+0x188>
	{
		FlagInfo.Side_UpDown_Flag = 1;
 8003bc4:	4b3f      	ldr	r3, [pc, #252]	; (8003cc4 <Check_Protocol+0x24c>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	711a      	strb	r2, [r3, #4]
		DataInfo.Side_UpDown_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8003bca:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <Check_Protocol+0x248>)
 8003bcc:	791b      	ldrb	r3, [r3, #4]
 8003bce:	2264      	movs	r2, #100	; 0x64
 8003bd0:	4353      	muls	r3, r2
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <Check_Protocol+0x248>)
 8003bd6:	795b      	ldrb	r3, [r3, #5]
 8003bd8:	1c19      	adds	r1, r3, #0
 8003bda:	0089      	lsls	r1, r1, #2
 8003bdc:	18cb      	adds	r3, r1, r3
 8003bde:	18db      	adds	r3, r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	18d3      	adds	r3, r2, r3
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <Check_Protocol+0x248>)
 8003be8:	799b      	ldrb	r3, [r3, #6]
 8003bea:	18d3      	adds	r3, r2, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	3330      	adds	r3, #48	; 0x30
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <Check_Protocol+0x250>)
 8003bf4:	711a      	strb	r2, [r3, #4]
		rx_side_updown = DataInfo.Side_UpDown_Data;
 8003bf6:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <Check_Protocol+0x250>)
 8003bf8:	791a      	ldrb	r2, [r3, #4]
 8003bfa:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <Check_Protocol+0x264>)
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e059      	b.n	8003cb4 <Check_Protocol+0x23c>
	}
	else if(strncmp(RX_Data, "<WSL--->", 4) == 0 && RX_Data[7] == '>')
 8003c00:	4937      	ldr	r1, [pc, #220]	; (8003ce0 <Check_Protocol+0x268>)
 8003c02:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <Check_Protocol+0x248>)
 8003c04:	2204      	movs	r2, #4
 8003c06:	0018      	movs	r0, r3
 8003c08:	f009 f9e4 	bl	800cfd4 <strncmp>
 8003c0c:	1e03      	subs	r3, r0, #0
 8003c0e:	d121      	bne.n	8003c54 <Check_Protocol+0x1dc>
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <Check_Protocol+0x248>)
 8003c12:	79db      	ldrb	r3, [r3, #7]
 8003c14:	2b3e      	cmp	r3, #62	; 0x3e
 8003c16:	d11d      	bne.n	8003c54 <Check_Protocol+0x1dc>
	{
		FlagInfo.Side_RightLeft_Flag = 1;
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <Check_Protocol+0x24c>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	715a      	strb	r2, [r3, #5]
		DataInfo.Side_RightLeft_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8003c1e:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <Check_Protocol+0x248>)
 8003c20:	791b      	ldrb	r3, [r3, #4]
 8003c22:	2264      	movs	r2, #100	; 0x64
 8003c24:	4353      	muls	r3, r2
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <Check_Protocol+0x248>)
 8003c2a:	795b      	ldrb	r3, [r3, #5]
 8003c2c:	1c19      	adds	r1, r3, #0
 8003c2e:	0089      	lsls	r1, r1, #2
 8003c30:	18cb      	adds	r3, r1, r3
 8003c32:	18db      	adds	r3, r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	18d3      	adds	r3, r2, r3
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <Check_Protocol+0x248>)
 8003c3c:	799b      	ldrb	r3, [r3, #6]
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3330      	adds	r3, #48	; 0x30
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <Check_Protocol+0x250>)
 8003c48:	715a      	strb	r2, [r3, #5]
		rx_side_rightleft = DataInfo.Side_RightLeft_Data;
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <Check_Protocol+0x250>)
 8003c4c:	795a      	ldrb	r2, [r3, #5]
 8003c4e:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <Check_Protocol+0x26c>)
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	e02f      	b.n	8003cb4 <Check_Protocol+0x23c>
	}
	else if(strncmp(RX_Data, "<WK0001>", 8) == 0)
 8003c54:	4924      	ldr	r1, [pc, #144]	; (8003ce8 <Check_Protocol+0x270>)
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <Check_Protocol+0x248>)
 8003c58:	2208      	movs	r2, #8
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f009 f9ba 	bl	800cfd4 <strncmp>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d103      	bne.n	8003c6c <Check_Protocol+0x1f4>
	{
		FlagInfo.Key_Close_Flag = 1;
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <Check_Protocol+0x24c>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	719a      	strb	r2, [r3, #6]
	else if(strncmp(RX_Data, "<WK0011>", 8) == 0)
	{
		FlagInfo.Key_On_Flag = 1;
	}
	else;
}
 8003c6a:	e023      	b.n	8003cb4 <Check_Protocol+0x23c>
	else if(strncmp(RX_Data, "<WK0000>", 8) == 0)
 8003c6c:	491f      	ldr	r1, [pc, #124]	; (8003cec <Check_Protocol+0x274>)
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <Check_Protocol+0x248>)
 8003c70:	2208      	movs	r2, #8
 8003c72:	0018      	movs	r0, r3
 8003c74:	f009 f9ae 	bl	800cfd4 <strncmp>
 8003c78:	1e03      	subs	r3, r0, #0
 8003c7a:	d103      	bne.n	8003c84 <Check_Protocol+0x20c>
		FlagInfo.Key_Far_Flag = 1;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <Check_Protocol+0x24c>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	71da      	strb	r2, [r3, #7]
}
 8003c82:	e017      	b.n	8003cb4 <Check_Protocol+0x23c>
	else if(strncmp(RX_Data, "<WK0010>", 8) == 0)
 8003c84:	491a      	ldr	r1, [pc, #104]	; (8003cf0 <Check_Protocol+0x278>)
 8003c86:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <Check_Protocol+0x248>)
 8003c88:	2208      	movs	r2, #8
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f009 f9a2 	bl	800cfd4 <strncmp>
 8003c90:	1e03      	subs	r3, r0, #0
 8003c92:	d103      	bne.n	8003c9c <Check_Protocol+0x224>
		FlagInfo.Key_Off_Flag = 1;
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <Check_Protocol+0x24c>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	721a      	strb	r2, [r3, #8]
}
 8003c9a:	e00b      	b.n	8003cb4 <Check_Protocol+0x23c>
	else if(strncmp(RX_Data, "<WK0011>", 8) == 0)
 8003c9c:	4915      	ldr	r1, [pc, #84]	; (8003cf4 <Check_Protocol+0x27c>)
 8003c9e:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <Check_Protocol+0x248>)
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f009 f996 	bl	800cfd4 <strncmp>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d103      	bne.n	8003cb4 <Check_Protocol+0x23c>
		FlagInfo.Key_On_Flag = 1;
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <Check_Protocol+0x24c>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	725a      	strb	r2, [r3, #9]
}
 8003cb2:	e7ff      	b.n	8003cb4 <Check_Protocol+0x23c>
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	08010c00 	.word	0x08010c00
 8003cc0:	20000254 	.word	0x20000254
 8003cc4:	20000240 	.word	0x20000240
 8003cc8:	2000024c 	.word	0x2000024c
 8003ccc:	08010c0c 	.word	0x08010c0c
 8003cd0:	08010c18 	.word	0x08010c18
 8003cd4:	08010c24 	.word	0x08010c24
 8003cd8:	08010c30 	.word	0x08010c30
 8003cdc:	20000266 	.word	0x20000266
 8003ce0:	08010c3c 	.word	0x08010c3c
 8003ce4:	20000267 	.word	0x20000267
 8003ce8:	08010c48 	.word	0x08010c48
 8003cec:	08010c54 	.word	0x08010c54
 8003cf0:	08010c60 	.word	0x08010c60
 8003cf4:	08010c6c 	.word	0x08010c6c

08003cf8 <Send_sideMirror>:
}

// pwm1 : up down motor
// pwm2 : right left motor
void Send_sideMirror(uint8_t pwm1, uint8_t pwm2)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	0002      	movs	r2, r0
 8003d00:	1dfb      	adds	r3, r7, #7
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	1dbb      	adds	r3, r7, #6
 8003d06:	1c0a      	adds	r2, r1, #0
 8003d08:	701a      	strb	r2, [r3, #0]
	DataInfo.Side_UpDown_Data = pwm1;
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <Send_sideMirror+0x4c>)
 8003d0c:	1dfa      	adds	r2, r7, #7
 8003d0e:	7812      	ldrb	r2, [r2, #0]
 8003d10:	711a      	strb	r2, [r3, #4]
	DataInfo.Side_RightLeft_Data = pwm2;
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <Send_sideMirror+0x4c>)
 8003d14:	1dba      	adds	r2, r7, #6
 8003d16:	7812      	ldrb	r2, [r2, #0]
 8003d18:	715a      	strb	r2, [r3, #5]
	Comm_UartWrite('S', 'H', DataInfo.Side_UpDown_Data);
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <Send_sideMirror+0x4c>)
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	001a      	movs	r2, r3
 8003d20:	2148      	movs	r1, #72	; 0x48
 8003d22:	2053      	movs	r0, #83	; 0x53
 8003d24:	f7ff fe06 	bl	8003934 <Comm_UartWrite>
	HAL_Delay(100);
 8003d28:	2064      	movs	r0, #100	; 0x64
 8003d2a:	f001 fa67 	bl	80051fc <HAL_Delay>
	Comm_UartWrite('S', 'L', DataInfo.Side_RightLeft_Data);
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <Send_sideMirror+0x4c>)
 8003d30:	795b      	ldrb	r3, [r3, #5]
 8003d32:	001a      	movs	r2, r3
 8003d34:	214c      	movs	r1, #76	; 0x4c
 8003d36:	2053      	movs	r0, #83	; 0x53
 8003d38:	f7ff fdfc 	bl	8003934 <Comm_UartWrite>
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	2000024c 	.word	0x2000024c

08003d48 <Check_CloseState>:

uint8_t Check_CloseState()
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
	if (FlagInfo.Key_Close_Flag == 1 && FlagInfo.Key_Far_Flag == 0)
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <Check_CloseState+0x48>)
 8003d4e:	799b      	ldrb	r3, [r3, #6]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d109      	bne.n	8003d68 <Check_CloseState+0x20>
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <Check_CloseState+0x48>)
 8003d56:	79db      	ldrb	r3, [r3, #7]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <Check_CloseState+0x20>
	{
		state = CLOSE;
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <Check_CloseState+0x4c>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
		FlagInfo.Key_Close_Flag = 0;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <Check_CloseState+0x48>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	719a      	strb	r2, [r3, #6]
	}
	if (FlagInfo.Key_Close_Flag == 0 && FlagInfo.Key_Far_Flag == 1)
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <Check_CloseState+0x48>)
 8003d6a:	799b      	ldrb	r3, [r3, #6]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <Check_CloseState+0x3c>
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <Check_CloseState+0x48>)
 8003d72:	79db      	ldrb	r3, [r3, #7]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d105      	bne.n	8003d84 <Check_CloseState+0x3c>
	{
		state = FAR;
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <Check_CloseState+0x4c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
		FlagInfo.Key_Far_Flag = 0;
 8003d7e:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <Check_CloseState+0x48>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	71da      	strb	r2, [r3, #7]
	}
	return state;
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <Check_CloseState+0x4c>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	20000240 	.word	0x20000240
 8003d94:	2000000d 	.word	0x2000000d

08003d98 <Check_KeyState>:

uint8_t Check_KeyState()
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
	if (FlagInfo.Key_On_Flag == 1 && FlagInfo.Key_Off_Flag == 0)
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <Check_KeyState+0x48>)
 8003d9e:	7a5b      	ldrb	r3, [r3, #9]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d109      	bne.n	8003db8 <Check_KeyState+0x20>
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <Check_KeyState+0x48>)
 8003da6:	7a1b      	ldrb	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <Check_KeyState+0x20>
	{
		state = KEYON;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <Check_KeyState+0x4c>)
 8003dae:	2203      	movs	r2, #3
 8003db0:	701a      	strb	r2, [r3, #0]
		FlagInfo.Key_On_Flag = 0;
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <Check_KeyState+0x48>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	725a      	strb	r2, [r3, #9]
	}
	if (FlagInfo.Key_On_Flag == 0 && FlagInfo.Key_Off_Flag == 1)
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <Check_KeyState+0x48>)
 8003dba:	7a5b      	ldrb	r3, [r3, #9]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <Check_KeyState+0x3c>
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <Check_KeyState+0x48>)
 8003dc2:	7a1b      	ldrb	r3, [r3, #8]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <Check_KeyState+0x3c>
	{
		state = KEYOFF;
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <Check_KeyState+0x4c>)
 8003dca:	2202      	movs	r2, #2
 8003dcc:	701a      	strb	r2, [r3, #0]
		FlagInfo.Key_Off_Flag = 0;
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <Check_KeyState+0x48>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	721a      	strb	r2, [r3, #8]
	}
	return state;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <Check_KeyState+0x4c>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	20000240 	.word	0x20000240
 8003de4:	2000000d 	.word	0x2000000d

08003de8 <Receieve_UDsideMirror>:

uint8_t Receieve_UDsideMirror()
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
	if (FlagInfo.Side_UpDown_Flag == 1)
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <Receieve_UDsideMirror+0x44>)
 8003dee:	791b      	ldrb	r3, [r3, #4]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d115      	bne.n	8003e20 <Receieve_UDsideMirror+0x38>
	{
		rx_side_updown = DataInfo.Side_UpDown_Data;
 8003df4:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <Receieve_UDsideMirror+0x48>)
 8003df6:	791a      	ldrb	r2, [r3, #4]
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <Receieve_UDsideMirror+0x4c>)
 8003dfa:	701a      	strb	r2, [r3, #0]
		if (rx_side_updown > 80 || rx_side_updown < 60 || rx_side_updown == 0) rx_side_updown = 70;
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <Receieve_UDsideMirror+0x4c>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b50      	cmp	r3, #80	; 0x50
 8003e02:	d807      	bhi.n	8003e14 <Receieve_UDsideMirror+0x2c>
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <Receieve_UDsideMirror+0x4c>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b3b      	cmp	r3, #59	; 0x3b
 8003e0a:	d903      	bls.n	8003e14 <Receieve_UDsideMirror+0x2c>
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <Receieve_UDsideMirror+0x4c>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <Receieve_UDsideMirror+0x32>
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <Receieve_UDsideMirror+0x4c>)
 8003e16:	2246      	movs	r2, #70	; 0x46
 8003e18:	701a      	strb	r2, [r3, #0]
		FlagInfo.Side_UpDown_Flag = 0;
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <Receieve_UDsideMirror+0x44>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	711a      	strb	r2, [r3, #4]
	}
	return rx_side_updown;
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <Receieve_UDsideMirror+0x4c>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	20000240 	.word	0x20000240
 8003e30:	2000024c 	.word	0x2000024c
 8003e34:	20000266 	.word	0x20000266

08003e38 <Receieve_RLsideMirror>:

uint8_t Receieve_RLsideMirror()
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	if (FlagInfo.Side_RightLeft_Flag == 1)
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <Receieve_RLsideMirror+0x44>)
 8003e3e:	795b      	ldrb	r3, [r3, #5]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d115      	bne.n	8003e70 <Receieve_RLsideMirror+0x38>
	{
		rx_side_rightleft = DataInfo.Side_RightLeft_Data;
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <Receieve_RLsideMirror+0x48>)
 8003e46:	795a      	ldrb	r2, [r3, #5]
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <Receieve_RLsideMirror+0x4c>)
 8003e4a:	701a      	strb	r2, [r3, #0]
		if (rx_side_rightleft > 80 || rx_side_rightleft < 60 || rx_side_updown == 0) rx_side_rightleft = 72;
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <Receieve_RLsideMirror+0x4c>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b50      	cmp	r3, #80	; 0x50
 8003e52:	d807      	bhi.n	8003e64 <Receieve_RLsideMirror+0x2c>
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <Receieve_RLsideMirror+0x4c>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b3b      	cmp	r3, #59	; 0x3b
 8003e5a:	d903      	bls.n	8003e64 <Receieve_RLsideMirror+0x2c>
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <Receieve_RLsideMirror+0x50>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <Receieve_RLsideMirror+0x32>
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <Receieve_RLsideMirror+0x4c>)
 8003e66:	2248      	movs	r2, #72	; 0x48
 8003e68:	701a      	strb	r2, [r3, #0]
		FlagInfo.Side_RightLeft_Flag = 0;
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <Receieve_RLsideMirror+0x44>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	715a      	strb	r2, [r3, #5]
	}
	return rx_side_rightleft;
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <Receieve_RLsideMirror+0x4c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	20000240 	.word	0x20000240
 8003e80:	2000024c 	.word	0x2000024c
 8003e84:	20000267 	.word	0x20000267
 8003e88:	20000266 	.word	0x20000266

08003e8c <SideMirror_Init>:
SideMirrorMotorPWM SideMirrorPWM = {70, 72};

uint8_t GuideLine_seq = 0;

// 사이드미러 초기화
void SideMirror_Init(void) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
    // 사이드미러 모터와 관련된 하드웨어 초기화 로직
	MX_ADC_Init();
 8003e90:	f000 f8d4 	bl	800403c <MX_ADC_Init>
	MX_TIM1_Init();
 8003e94:	f000 fed8 	bl	8004c48 <MX_TIM1_Init>
    MX_GPIO_Init();
 8003e98:	f000 fb02 	bl	80044a0 <MX_GPIO_Init>
    MX_I2C2_Init();
 8003e9c:	f000 fbee 	bl	800467c <MX_I2C2_Init>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <SideMirror_Init+0x34>)
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f003 fd17 	bl	80078d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <SideMirror_Init+0x34>)
 8003eac:	2104      	movs	r1, #4
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f003 fd12 	bl	80078d8 <HAL_TIM_PWM_Start>
    I2C_LCD_Init(I2C_LCD_1);
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f7ff f901 	bl	80030bc <I2C_LCD_Init>
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200003d4 	.word	0x200003d4

08003ec4 <AdjustSideMirrorByJoystick>:

// 조이스틱을 이용한 사이드미러 조정
void AdjustSideMirrorByJoystick(void) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
    // 조이스틱 입력을 받아 사이드미러 모터의 PWM을 조정하는 로직
	ADC_read(Adc_val, ADC_CHANNEL_NUMS);
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <AdjustSideMirrorByJoystick+0x74>)
 8003eca:	2102      	movs	r1, #2
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f963 	bl	8004198 <ADC_read>
	Joystick_val[0] = Adc_val[0];
 8003ed2:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <AdjustSideMirrorByJoystick+0x74>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <AdjustSideMirrorByJoystick+0x78>)
 8003ed8:	601a      	str	r2, [r3, #0]
	Joystick_val[1] = Adc_val[1];
 8003eda:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <AdjustSideMirrorByJoystick+0x74>)
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <AdjustSideMirrorByJoystick+0x78>)
 8003ee0:	605a      	str	r2, [r3, #4]
	joystick_state = checkJoystickState(Joystick_val);
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <AdjustSideMirrorByJoystick+0x78>)
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7fe ff0f 	bl	8002d08 <checkJoystickState>
 8003eea:	0003      	movs	r3, r0
 8003eec:	001a      	movs	r2, r3
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <AdjustSideMirrorByJoystick+0x7c>)
 8003ef0:	701a      	strb	r2, [r3, #0]

	SideMirrorPWM.motorX_pwm = updateJoystickPWM(joystick_state, SideMirrorPWM.motorX_pwm, 1);
 8003ef2:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <AdjustSideMirrorByJoystick+0x7c>)
 8003ef4:	7818      	ldrb	r0, [r3, #0]
 8003ef6:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <AdjustSideMirrorByJoystick+0x80>)
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	2201      	movs	r2, #1
 8003efc:	0019      	movs	r1, r3
 8003efe:	f7fe ff57 	bl	8002db0 <updateJoystickPWM>
 8003f02:	0003      	movs	r3, r0
 8003f04:	001a      	movs	r2, r3
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <AdjustSideMirrorByJoystick+0x80>)
 8003f08:	801a      	strh	r2, [r3, #0]
	SideMirrorPWM.motorY_pwm = updateJoystickPWM(joystick_state, SideMirrorPWM.motorY_pwm, 2);
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <AdjustSideMirrorByJoystick+0x7c>)
 8003f0c:	7818      	ldrb	r0, [r3, #0]
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <AdjustSideMirrorByJoystick+0x80>)
 8003f10:	885b      	ldrh	r3, [r3, #2]
 8003f12:	2202      	movs	r2, #2
 8003f14:	0019      	movs	r1, r3
 8003f16:	f7fe ff4b 	bl	8002db0 <updateJoystickPWM>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <AdjustSideMirrorByJoystick+0x80>)
 8003f20:	805a      	strh	r2, [r3, #2]
	*(&TIM1->CCR1) = SideMirrorPWM.motorX_pwm;
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <AdjustSideMirrorByJoystick+0x80>)
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <AdjustSideMirrorByJoystick+0x84>)
 8003f28:	601a      	str	r2, [r3, #0]
	*(&TIM1->CCR2) = SideMirrorPWM.motorY_pwm;
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <AdjustSideMirrorByJoystick+0x80>)
 8003f2c:	885a      	ldrh	r2, [r3, #2]
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <AdjustSideMirrorByJoystick+0x88>)
 8003f30:	601a      	str	r2, [r3, #0]
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000268 	.word	0x20000268
 8003f3c:	20000270 	.word	0x20000270
 8003f40:	20000278 	.word	0x20000278
 8003f44:	20000010 	.word	0x20000010
 8003f48:	40012c34 	.word	0x40012c34
 8003f4c:	40012c38 	.word	0x40012c38

08003f50 <SaveCurrentPWMSettings>:

// 현재 PWM 설정 저장
void SaveCurrentPWMSettings(void) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
    // 현재 사이드미러 모터의 PWM 설정을 저장하는 로직
	// usart protocol기반으로 SideMirrorPWM 값 보내주기
	uint8_t ud_pwm = SideMirrorPWM.motorX_pwm;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <SaveCurrentPWMSettings+0x30>)
 8003f58:	881a      	ldrh	r2, [r3, #0]
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	701a      	strb	r2, [r3, #0]
	uint8_t rl_pwm = SideMirrorPWM.motorY_pwm;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <SaveCurrentPWMSettings+0x30>)
 8003f60:	885a      	ldrh	r2, [r3, #2]
 8003f62:	1dbb      	adds	r3, r7, #6
 8003f64:	701a      	strb	r2, [r3, #0]
	Send_sideMirror(ud_pwm, rl_pwm);
 8003f66:	1dbb      	adds	r3, r7, #6
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	1dfb      	adds	r3, r7, #7
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	0011      	movs	r1, r2
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7ff fec1 	bl	8003cf8 <Send_sideMirror>
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b002      	add	sp, #8
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	20000010 	.word	0x20000010

08003f84 <LoadUserSettings>:

// 사용자 설정 로드
void LoadUserSettings(void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
    // 사용자 정보가 있을 경우 해당 정보를 로드하여 PWM 설정을 적용하는 로직
	// usart protocol기반으로 SideMirrorPWM 값 불러오기
	SideMirrorPWM.motorX_pwm = Receieve_UDsideMirror();
 8003f88:	f7ff ff2e 	bl	8003de8 <Receieve_UDsideMirror>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <LoadUserSettings+0x34>)
 8003f92:	801a      	strh	r2, [r3, #0]
	SideMirrorPWM.motorY_pwm = Receieve_RLsideMirror();
 8003f94:	f7ff ff50 	bl	8003e38 <Receieve_RLsideMirror>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <LoadUserSettings+0x34>)
 8003f9e:	805a      	strh	r2, [r3, #2]
	*(&TIM1->CCR1) = SideMirrorPWM.motorX_pwm;
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <LoadUserSettings+0x34>)
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <LoadUserSettings+0x38>)
 8003fa6:	601a      	str	r2, [r3, #0]
	*(&TIM1->CCR2) = SideMirrorPWM.motorY_pwm;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <LoadUserSettings+0x34>)
 8003faa:	885a      	ldrh	r2, [r3, #2]
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <LoadUserSettings+0x3c>)
 8003fae:	601a      	str	r2, [r3, #0]
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	20000010 	.word	0x20000010
 8003fbc:	40012c34 	.word	0x40012c34
 8003fc0:	40012c38 	.word	0x40012c38

08003fc4 <DisplayGuideline>:

// LCD 가이드라인 표시
void DisplayGuideline(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
    // LCD를 사용하여 사이드미러 조정 가이드라인을 표시하는 로직
    if (Switch_GetState1() == 1) {
 8003fc8:	f7ff fc52 	bl	8003870 <Switch_GetState1>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10f      	bne.n	8003ff2 <DisplayGuideline+0x2e>
        I2C_LCD_Display(I2C_LCD_1);
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f7ff fa22 	bl	800341c <I2C_LCD_Display>
        GuideLine_seq++;
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <DisplayGuideline+0x40>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <DisplayGuideline+0x40>)
 8003fe2:	701a      	strb	r2, [r3, #0]
        if (GuideLine_seq > SEQ_3) {
 8003fe4:	4b07      	ldr	r3, [pc, #28]	; (8004004 <DisplayGuideline+0x40>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d902      	bls.n	8003ff2 <DisplayGuideline+0x2e>
        	GuideLine_seq = 0;
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <DisplayGuideline+0x40>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
        }
    }
    I2C_LCD_GUIDELINE(GuideLine_seq); // Display the current step on the LCD
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <DisplayGuideline+0x40>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7ff fa60 	bl	80034bc <I2C_LCD_GUIDELINE>
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	20000279 	.word	0x20000279

08004008 <InitCarSetting>:

void InitCarSetting(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
	SideMirrorPWM.motorX_pwm = 70;
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <InitCarSetting+0x28>)
 800400e:	2246      	movs	r2, #70	; 0x46
 8004010:	801a      	strh	r2, [r3, #0]
	SideMirrorPWM.motorY_pwm = 72;
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <InitCarSetting+0x28>)
 8004014:	2248      	movs	r2, #72	; 0x48
 8004016:	805a      	strh	r2, [r3, #2]
	*(&TIM1->CCR1) = SideMirrorPWM.motorX_pwm;
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <InitCarSetting+0x28>)
 800401a:	881a      	ldrh	r2, [r3, #0]
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <InitCarSetting+0x2c>)
 800401e:	601a      	str	r2, [r3, #0]
	*(&TIM1->CCR2) = SideMirrorPWM.motorY_pwm;
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <InitCarSetting+0x28>)
 8004022:	885a      	ldrh	r2, [r3, #2]
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <InitCarSetting+0x30>)
 8004026:	601a      	str	r2, [r3, #0]
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	20000010 	.word	0x20000010
 8004034:	40012c34 	.word	0x40012c34
 8004038:	40012c38 	.word	0x40012c38

0800403c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	0018      	movs	r0, r3
 8004046:	230c      	movs	r3, #12
 8004048:	001a      	movs	r2, r3
 800404a:	2100      	movs	r1, #0
 800404c:	f008 ffba 	bl	800cfc4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004050:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <MX_ADC_Init+0xc8>)
 8004052:	4a2d      	ldr	r2, [pc, #180]	; (8004108 <MX_ADC_Init+0xcc>)
 8004054:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004056:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <MX_ADC_Init+0xc8>)
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <MX_ADC_Init+0xc8>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004062:	4b28      	ldr	r3, [pc, #160]	; (8004104 <MX_ADC_Init+0xc8>)
 8004064:	2200      	movs	r2, #0
 8004066:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <MX_ADC_Init+0xc8>)
 800406a:	2201      	movs	r2, #1
 800406c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800406e:	4b25      	ldr	r3, [pc, #148]	; (8004104 <MX_ADC_Init+0xc8>)
 8004070:	2208      	movs	r2, #8
 8004072:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004074:	4b23      	ldr	r3, [pc, #140]	; (8004104 <MX_ADC_Init+0xc8>)
 8004076:	2200      	movs	r2, #0
 8004078:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800407a:	4b22      	ldr	r3, [pc, #136]	; (8004104 <MX_ADC_Init+0xc8>)
 800407c:	2200      	movs	r2, #0
 800407e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <MX_ADC_Init+0xc8>)
 8004082:	2200      	movs	r2, #0
 8004084:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004086:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <MX_ADC_Init+0xc8>)
 8004088:	2201      	movs	r2, #1
 800408a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <MX_ADC_Init+0xc8>)
 800408e:	22c2      	movs	r2, #194	; 0xc2
 8004090:	32ff      	adds	r2, #255	; 0xff
 8004092:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <MX_ADC_Init+0xc8>)
 8004096:	2200      	movs	r2, #0
 8004098:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <MX_ADC_Init+0xc8>)
 800409c:	2224      	movs	r2, #36	; 0x24
 800409e:	2100      	movs	r1, #0
 80040a0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80040a2:	4b18      	ldr	r3, [pc, #96]	; (8004104 <MX_ADC_Init+0xc8>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80040a8:	4b16      	ldr	r3, [pc, #88]	; (8004104 <MX_ADC_Init+0xc8>)
 80040aa:	0018      	movs	r0, r3
 80040ac:	f001 f8ca 	bl	8005244 <HAL_ADC_Init>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d001      	beq.n	80040b8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80040b4:	f000 fc36 	bl	8004924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	0152      	lsls	r2, r2, #5
 80040c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	2203      	movs	r2, #3
 80040ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80040cc:	1d3a      	adds	r2, r7, #4
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <MX_ADC_Init+0xc8>)
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f001 faee 	bl	80056b4 <HAL_ADC_ConfigChannel>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d001      	beq.n	80040e0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80040dc:	f000 fc22 	bl	8004924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2201      	movs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80040e6:	1d3a      	adds	r2, r7, #4
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <MX_ADC_Init+0xc8>)
 80040ea:	0011      	movs	r1, r2
 80040ec:	0018      	movs	r0, r3
 80040ee:	f001 fae1 	bl	80056b4 <HAL_ADC_ConfigChannel>
 80040f2:	1e03      	subs	r3, r0, #0
 80040f4:	d001      	beq.n	80040fa <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80040f6:	f000 fc15 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b004      	add	sp, #16
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	2000027c 	.word	0x2000027c
 8004108:	40012400 	.word	0x40012400

0800410c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b08b      	sub	sp, #44	; 0x2c
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	2414      	movs	r4, #20
 8004116:	193b      	adds	r3, r7, r4
 8004118:	0018      	movs	r0, r3
 800411a:	2314      	movs	r3, #20
 800411c:	001a      	movs	r2, r3
 800411e:	2100      	movs	r1, #0
 8004120:	f008 ff50 	bl	800cfc4 <memset>
  if(adcHandle->Instance==ADC1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_ADC_MspInit+0x84>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d12b      	bne.n	8004186 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_ADC_MspInit+0x88>)
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_ADC_MspInit+0x88>)
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	0089      	lsls	r1, r1, #2
 8004138:	430a      	orrs	r2, r1
 800413a:	619a      	str	r2, [r3, #24]
 800413c:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_ADC_MspInit+0x88>)
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_ADC_MspInit+0x88>)
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <HAL_ADC_MspInit+0x88>)
 8004150:	2180      	movs	r1, #128	; 0x80
 8004152:	0289      	lsls	r1, r1, #10
 8004154:	430a      	orrs	r2, r1
 8004156:	615a      	str	r2, [r3, #20]
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <HAL_ADC_MspInit+0x88>)
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	029b      	lsls	r3, r3, #10
 8004160:	4013      	ands	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = sideMirror_Joystick_UD_Pin|sideMirror_Joystick_RL_Pin;
 8004166:	193b      	adds	r3, r7, r4
 8004168:	2203      	movs	r2, #3
 800416a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800416c:	193b      	adds	r3, r7, r4
 800416e:	2203      	movs	r2, #3
 8004170:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	193b      	adds	r3, r7, r4
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004178:	193a      	adds	r2, r7, r4
 800417a:	2390      	movs	r3, #144	; 0x90
 800417c:	05db      	lsls	r3, r3, #23
 800417e:	0011      	movs	r1, r2
 8004180:	0018      	movs	r0, r3
 8004182:	f001 fcd7 	bl	8005b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	b00b      	add	sp, #44	; 0x2c
 800418c:	bd90      	pop	{r4, r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	40012400 	.word	0x40012400
 8004194:	40021000 	.word	0x40021000

08004198 <ADC_read>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC_read(uint32_t *adc_val, uint8_t channels) {
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	000a      	movs	r2, r1
 80041a2:	1cfb      	adds	r3, r7, #3
 80041a4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < channels; ++i) {
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e015      	b.n	80041d8 <ADC_read+0x40>
		HAL_ADC_Start(&hadc);
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <ADC_read+0x54>)
 80041ae:	0018      	movs	r0, r3
 80041b0:	f001 f988 	bl	80054c4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1);
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <ADC_read+0x54>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	0018      	movs	r0, r3
 80041ba:	f001 f9d7 	bl	800556c <HAL_ADC_PollForConversion>
		adc_val[i] = HAL_ADC_GetValue(&hadc);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	18d4      	adds	r4, r2, r3
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <ADC_read+0x54>)
 80041c8:	0018      	movs	r0, r3
 80041ca:	f001 fa67 	bl	800569c <HAL_ADC_GetValue>
 80041ce:	0003      	movs	r3, r0
 80041d0:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < channels; ++i) {
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	1cfb      	adds	r3, r7, #3
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	429a      	cmp	r2, r3
 80041e0:	dbe4      	blt.n	80041ac <ADC_read+0x14>
	}
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b005      	add	sp, #20
 80041ea:	bd90      	pop	{r4, r7, pc}
 80041ec:	2000027c 	.word	0x2000027c

080041f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af02      	add	r7, sp, #8
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  xTimerBlinkLED = xTimerCreate("TimerBlinkLED", pdMS_TO_TICKS(1000), pdTRUE, (void *)0, vTimerBlinkLEDCallback);
 80041f6:	23fa      	movs	r3, #250	; 0xfa
 80041f8:	0099      	lsls	r1, r3, #2
 80041fa:	4814      	ldr	r0, [pc, #80]	; (800424c <MX_FREERTOS_Init+0x5c>)
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <MX_FREERTOS_Init+0x60>)
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	2300      	movs	r3, #0
 8004202:	2201      	movs	r2, #1
 8004204:	f007 f842 	bl	800b28c <xTimerCreate>
 8004208:	0002      	movs	r2, r0
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <MX_FREERTOS_Init+0x64>)
 800420c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sideMirrorTask */
  sideMirrorTaskHandle = osThreadNew(FsideMirrorTask, NULL, &sideMirrorTask_attributes);
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <MX_FREERTOS_Init+0x68>)
 8004210:	4b12      	ldr	r3, [pc, #72]	; (800425c <MX_FREERTOS_Init+0x6c>)
 8004212:	2100      	movs	r1, #0
 8004214:	0018      	movs	r0, r3
 8004216:	f005 fbb5 	bl	8009984 <osThreadNew>
 800421a:	0002      	movs	r2, r0
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <MX_FREERTOS_Init+0x70>)
 800421e:	601a      	str	r2, [r3, #0]

  /* creation of headLightTask */
  headLightTaskHandle = osThreadNew(FheadLightTask, NULL, &headLightTask_attributes);
 8004220:	4a10      	ldr	r2, [pc, #64]	; (8004264 <MX_FREERTOS_Init+0x74>)
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <MX_FREERTOS_Init+0x78>)
 8004224:	2100      	movs	r1, #0
 8004226:	0018      	movs	r0, r3
 8004228:	f005 fbac 	bl	8009984 <osThreadNew>
 800422c:	0002      	movs	r2, r0
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <MX_FREERTOS_Init+0x7c>)
 8004230:	601a      	str	r2, [r3, #0]

  /* creation of checkPacketTask */
  checkPacketTaskHandle = osThreadNew(FcheckPacketTask, NULL, &checkPacketTask_attributes);
 8004232:	4a0f      	ldr	r2, [pc, #60]	; (8004270 <MX_FREERTOS_Init+0x80>)
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <MX_FREERTOS_Init+0x84>)
 8004236:	2100      	movs	r1, #0
 8004238:	0018      	movs	r0, r3
 800423a:	f005 fba3 	bl	8009984 <osThreadNew>
 800423e:	0002      	movs	r2, r0
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <MX_FREERTOS_Init+0x88>)
 8004242:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	08010ca8 	.word	0x08010ca8
 8004250:	08004411 	.word	0x08004411
 8004254:	200002bc 	.word	0x200002bc
 8004258:	08010d1c 	.word	0x08010d1c
 800425c:	0800427d 	.word	0x0800427d
 8004260:	200002d0 	.word	0x200002d0
 8004264:	08010d40 	.word	0x08010d40
 8004268:	08004299 	.word	0x08004299
 800426c:	200002d4 	.word	0x200002d4
 8004270:	08010d64 	.word	0x08010d64
 8004274:	08004301 	.word	0x08004301
 8004278:	200002d8 	.word	0x200002d8

0800427c <FsideMirrorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FsideMirrorTask */
void FsideMirrorTask(void *argument)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FsideMirrorTask */
  /* Infinite loop */
	SideMirror_Init();
 8004284:	f7ff fe02 	bl	8003e8c <SideMirror_Init>

  for(;;)
  {
	  AdjustSideMirrorByJoystick();
 8004288:	f7ff fe1c 	bl	8003ec4 <AdjustSideMirrorByJoystick>
	  DisplayGuideline();
 800428c:	f7ff fe9a 	bl	8003fc4 <DisplayGuideline>
    osDelay(10);
 8004290:	200a      	movs	r0, #10
 8004292:	f005 fc1f 	bl	8009ad4 <osDelay>
	  AdjustSideMirrorByJoystick();
 8004296:	e7f7      	b.n	8004288 <FsideMirrorTask+0xc>

08004298 <FheadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FheadLightTask */
void FheadLightTask(void *argument)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FheadLightTask */
  /* Infinite loop */
	HeadLights_initialize();
 80042a0:	f7fe f85e 	bl	8002360 <HeadLights_initialize>
	InitCarSetting_H();
 80042a4:	f7fe f954 	bl	8002550 <InitCarSetting_H>
	for(;;)
	{
		if (Switch_GetState2() == 1)
 80042a8:	f7ff fb0a 	bl	80038c0 <Switch_GetState2>
 80042ac:	0003      	movs	r3, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10e      	bne.n	80042d0 <FheadLightTask+0x38>
		{
			HeadLights_control();
 80042b2:	f7fe f86f 	bl	8002394 <HeadLights_control>
			HAL_GPIO_WritePin(headLight_Laser_GPIO_Port, headLight_Laser_Pin, SET);
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <FheadLightTask+0x64>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	2140      	movs	r1, #64	; 0x40
 80042bc:	0018      	movs	r0, r3
 80042be:	f001 fdce 	bl	8005e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(headLight_LED_GPIO_Port, headLight_LED_Pin, SET);
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <FheadLightTask+0x64>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	0018      	movs	r0, r3
 80042ca:	f001 fdc8 	bl	8005e5e <HAL_GPIO_WritePin>
 80042ce:	e010      	b.n	80042f2 <FheadLightTask+0x5a>
		}
		else if (Check_KeyState() == KEYON)
 80042d0:	f7ff fd62 	bl	8003d98 <Check_KeyState>
 80042d4:	0003      	movs	r3, r0
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d10b      	bne.n	80042f2 <FheadLightTask+0x5a>
		{
			HAL_GPIO_WritePin(headLight_Laser_GPIO_Port, headLight_Laser_Pin, SET);
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <FheadLightTask+0x64>)
 80042dc:	2201      	movs	r2, #1
 80042de:	2140      	movs	r1, #64	; 0x40
 80042e0:	0018      	movs	r0, r3
 80042e2:	f001 fdbc 	bl	8005e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(headLight_LED_GPIO_Port, headLight_LED_Pin, SET);
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <FheadLightTask+0x64>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	0018      	movs	r0, r3
 80042ee:	f001 fdb6 	bl	8005e5e <HAL_GPIO_WritePin>
		}
		osDelay(10);
 80042f2:	200a      	movs	r0, #10
 80042f4:	f005 fbee 	bl	8009ad4 <osDelay>
		if (Switch_GetState2() == 1)
 80042f8:	e7d6      	b.n	80042a8 <FheadLightTask+0x10>
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	48000800 	.word	0x48000800

08004300 <FcheckPacketTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FcheckPacketTask */
void FcheckPacketTask(void *argument)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b085      	sub	sp, #20
 8004304:	af02      	add	r7, sp, #8
 8004306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FcheckPacketTask */
  /* Infinite loop */
	Uart_Init();
 8004308:	f7ff fb02 	bl	8003910 <Uart_Init>
	buzzer_init();
 800430c:	f7fe f942 	bl	8002594 <buzzer_init>
  for(;;)
  {
      if (Check_CloseState() == CLOSE)
 8004310:	f7ff fd1a 	bl	8003d48 <Check_CloseState>
 8004314:	0003      	movs	r3, r0
 8004316:	2b01      	cmp	r3, #1
 8004318:	d119      	bne.n	800434e <FcheckPacketTask+0x4e>
      {	  // WELCOME LIGHT ON -> UNSYNC
          if (xTimerIsTimerActive(xTimerBlinkLED) == pdFALSE)
 800431a:	4b38      	ldr	r3, [pc, #224]	; (80043fc <FcheckPacketTask+0xfc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0018      	movs	r0, r3
 8004320:	f007 fa92 	bl	800b848 <xTimerIsTimerActive>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d10e      	bne.n	8004346 <FcheckPacketTask+0x46>
          {
              xTimerStart(xTimerBlinkLED, 0);
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <FcheckPacketTask+0xfc>)
 800432a:	681c      	ldr	r4, [r3, #0]
 800432c:	f006 fba6 	bl	800aa7c <xTaskGetTickCount>
 8004330:	0002      	movs	r2, r0
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	2101      	movs	r1, #1
 800433a:	0020      	movs	r0, r4
 800433c:	f006 fff2 	bl	800b324 <xTimerGenericCommand>
              farSettingValue = 0;
 8004340:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <FcheckPacketTask+0x100>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
          }
          aaaa = CLOSE;
 8004346:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <FcheckPacketTask+0x104>)
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	e018      	b.n	8004380 <FcheckPacketTask+0x80>
      }
      else if (Check_CloseState() == FAR && farSettingValue == 0)
 800434e:	f7ff fcfb 	bl	8003d48 <Check_CloseState>
 8004352:	1e03      	subs	r3, r0, #0
 8004354:	d114      	bne.n	8004380 <FcheckPacketTask+0x80>
 8004356:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <FcheckPacketTask+0x100>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d110      	bne.n	8004380 <FcheckPacketTask+0x80>
      {	  // WELCOME LIGHT OFF
          xTimerStop(xTimerBlinkLED, 0);
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <FcheckPacketTask+0xfc>)
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2300      	movs	r3, #0
 8004368:	2200      	movs	r2, #0
 800436a:	2103      	movs	r1, #3
 800436c:	f006 ffda 	bl	800b324 <xTimerGenericCommand>
          HeadLights_LEDoff();
 8004370:	f7fe f8be 	bl	80024f0 <HeadLights_LEDoff>
          farSettingValue = 1;
 8004374:	4b22      	ldr	r3, [pc, #136]	; (8004400 <FcheckPacketTask+0x100>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]
          aaaa = FAR;
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <FcheckPacketTask+0x104>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
      }

	  if (Check_KeyState() == KEYON && loadSettingValue == 0)
 8004380:	f7ff fd0a 	bl	8003d98 <Check_KeyState>
 8004384:	0003      	movs	r3, r0
 8004386:	2b03      	cmp	r3, #3
 8004388:	d11b      	bne.n	80043c2 <FcheckPacketTask+0xc2>
 800438a:	4b1f      	ldr	r3, [pc, #124]	; (8004408 <FcheckPacketTask+0x108>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d117      	bne.n	80043c2 <FcheckPacketTask+0xc2>
	  {
		  // WELCOME LIGHT OFF
		  xTimerStop(xTimerBlinkLED, 0);
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <FcheckPacketTask+0xfc>)
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	2200      	movs	r2, #0
 800439e:	2103      	movs	r1, #3
 80043a0:	f006 ffc0 	bl	800b324 <xTimerGenericCommand>
		  HeadLights_LEDoff();
 80043a4:	f7fe f8a4 	bl	80024f0 <HeadLights_LEDoff>
		  aaaa=KEYON;
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <FcheckPacketTask+0x104>)
 80043aa:	2203      	movs	r2, #3
 80043ac:	701a      	strb	r2, [r3, #0]

		  welcomesound();
 80043ae:	f7fe f957 	bl	8002660 <welcomesound>

		  // LOAD USER INFO
		  LoadUserSettings();
 80043b2:	f7ff fde7 	bl	8003f84 <LoadUserSettings>
		  loadSettingValue = 1;
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <FcheckPacketTask+0x108>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
		  saveSettingValue = 0;
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <FcheckPacketTask+0x10c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
	  }
	  if (Check_KeyState() == KEYOFF && saveSettingValue == 0)
 80043c2:	f7ff fce9 	bl	8003d98 <Check_KeyState>
 80043c6:	0003      	movs	r3, r0
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d112      	bne.n	80043f2 <FcheckPacketTask+0xf2>
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <FcheckPacketTask+0x10c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10e      	bne.n	80043f2 <FcheckPacketTask+0xf2>
	  {
		  SaveCurrentPWMSettings();
 80043d4:	f7ff fdbc 	bl	8003f50 <SaveCurrentPWMSettings>
		  InitCarSetting();
 80043d8:	f7ff fe16 	bl	8004008 <InitCarSetting>
		  InitCarSetting_H();
 80043dc:	f7fe f8b8 	bl	8002550 <InitCarSetting_H>
		  aaaa=KEYOFF;
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <FcheckPacketTask+0x104>)
 80043e2:	2202      	movs	r2, #2
 80043e4:	701a      	strb	r2, [r3, #0]
		  loadSettingValue = 0;
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <FcheckPacketTask+0x108>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
		  saveSettingValue = 1;
 80043ec:	4b07      	ldr	r3, [pc, #28]	; (800440c <FcheckPacketTask+0x10c>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

	  }
	  osDelay(10);
 80043f2:	200a      	movs	r0, #10
 80043f4:	f005 fb6e 	bl	8009ad4 <osDelay>
      if (Check_CloseState() == CLOSE)
 80043f8:	e78a      	b.n	8004310 <FcheckPacketTask+0x10>
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	200002bc 	.word	0x200002bc
 8004400:	200002cc 	.word	0x200002cc
 8004404:	200002c0 	.word	0x200002c0
 8004408:	200002c4 	.word	0x200002c4
 800440c:	200002c8 	.word	0x200002c8

08004410 <vTimerBlinkLEDCallback>:
  /* USER CODE END FcheckPacketTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vTimerBlinkLEDCallback(TimerHandle_t xTimer) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    static BaseType_t xLEDState = pdFALSE;

    xLEDState = !xLEDState;
 8004418:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <vTimerBlinkLEDCallback+0x88>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	425a      	negs	r2, r3
 800441e:	4153      	adcs	r3, r2
 8004420:	b2db      	uxtb	r3, r3
 8004422:	001a      	movs	r2, r3
 8004424:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <vTimerBlinkLEDCallback+0x88>)
 8004426:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(headLight_LED_GPIO_Port, headLight_LED_Pin, xLEDState);
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <vTimerBlinkLEDCallback+0x88>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	481b      	ldr	r0, [pc, #108]	; (800449c <vTimerBlinkLEDCallback+0x8c>)
 8004430:	001a      	movs	r2, r3
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	f001 fd13 	bl	8005e5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(headLight_Laser_GPIO_Port, headLight_Laser_Pin, xLEDState);
 8004438:	4b17      	ldr	r3, [pc, #92]	; (8004498 <vTimerBlinkLEDCallback+0x88>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	4817      	ldr	r0, [pc, #92]	; (800449c <vTimerBlinkLEDCallback+0x8c>)
 8004440:	001a      	movs	r2, r3
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	f001 fd0b 	bl	8005e5e <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(sideMirror_LED_U_GPIO_Port, sideMirror_LED_U_Pin, xLEDState);
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <vTimerBlinkLEDCallback+0x88>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	2390      	movs	r3, #144	; 0x90
 8004450:	05db      	lsls	r3, r3, #23
 8004452:	2110      	movs	r1, #16
 8004454:	0018      	movs	r0, r3
 8004456:	f001 fd02 	bl	8005e5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(sideMirror_LED_D_GPIO_Port, sideMirror_LED_D_Pin, xLEDState);
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <vTimerBlinkLEDCallback+0x88>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	2390      	movs	r3, #144	; 0x90
 8004462:	05db      	lsls	r3, r3, #23
 8004464:	2120      	movs	r1, #32
 8004466:	0018      	movs	r0, r3
 8004468:	f001 fcf9 	bl	8005e5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(sideMirror_LED_R_GPIO_Port, sideMirror_LED_R_Pin, xLEDState);
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <vTimerBlinkLEDCallback+0x88>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	2390      	movs	r3, #144	; 0x90
 8004474:	05db      	lsls	r3, r3, #23
 8004476:	2140      	movs	r1, #64	; 0x40
 8004478:	0018      	movs	r0, r3
 800447a:	f001 fcf0 	bl	8005e5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(sideMirror_LED_L_GPIO_Port, sideMirror_LED_L_Pin, xLEDState);
 800447e:	4b06      	ldr	r3, [pc, #24]	; (8004498 <vTimerBlinkLEDCallback+0x88>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	2390      	movs	r3, #144	; 0x90
 8004486:	05db      	lsls	r3, r3, #23
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0018      	movs	r0, r3
 800448c:	f001 fce7 	bl	8005e5e <HAL_GPIO_WritePin>
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}
 8004498:	200002dc 	.word	0x200002dc
 800449c:	48000800 	.word	0x48000800

080044a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b08b      	sub	sp, #44	; 0x2c
 80044a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a6:	2414      	movs	r4, #20
 80044a8:	193b      	adds	r3, r7, r4
 80044aa:	0018      	movs	r0, r3
 80044ac:	2314      	movs	r3, #20
 80044ae:	001a      	movs	r2, r3
 80044b0:	2100      	movs	r1, #0
 80044b2:	f008 fd87 	bl	800cfc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b6:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	4b4e      	ldr	r3, [pc, #312]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	0309      	lsls	r1, r1, #12
 80044c0:	430a      	orrs	r2, r1
 80044c2:	615a      	str	r2, [r3, #20]
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	031b      	lsls	r3, r3, #12
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044d2:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044d8:	2180      	movs	r1, #128	; 0x80
 80044da:	03c9      	lsls	r1, r1, #15
 80044dc:	430a      	orrs	r2, r1
 80044de:	615a      	str	r2, [r3, #20]
 80044e0:	4b44      	ldr	r3, [pc, #272]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	03db      	lsls	r3, r3, #15
 80044e8:	4013      	ands	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ee:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	4b40      	ldr	r3, [pc, #256]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044f4:	2180      	movs	r1, #128	; 0x80
 80044f6:	0289      	lsls	r1, r1, #10
 80044f8:	430a      	orrs	r2, r1
 80044fa:	615a      	str	r2, [r3, #20]
 80044fc:	4b3d      	ldr	r3, [pc, #244]	; (80045f4 <MX_GPIO_Init+0x154>)
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	4013      	ands	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800450a:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <MX_GPIO_Init+0x154>)
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <MX_GPIO_Init+0x154>)
 8004510:	2180      	movs	r1, #128	; 0x80
 8004512:	02c9      	lsls	r1, r1, #11
 8004514:	430a      	orrs	r2, r1
 8004516:	615a      	str	r2, [r3, #20]
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <MX_GPIO_Init+0x154>)
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	02db      	lsls	r3, r3, #11
 8004520:	4013      	ands	r3, r2
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, sideMirror_LED_U_Pin|sideMirror_LED_D_Pin|sideMirror_LED_R_Pin|sideMirror_LED_L_Pin, GPIO_PIN_RESET);
 8004526:	2390      	movs	r3, #144	; 0x90
 8004528:	05db      	lsls	r3, r3, #23
 800452a:	2200      	movs	r2, #0
 800452c:	21f0      	movs	r1, #240	; 0xf0
 800452e:	0018      	movs	r0, r3
 8004530:	f001 fc95 	bl	8005e5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, headLight_Laser_Pin|headLight_LED_Pin, GPIO_PIN_RESET);
 8004534:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <MX_GPIO_Init+0x158>)
 8004536:	2200      	movs	r2, #0
 8004538:	21c0      	movs	r1, #192	; 0xc0
 800453a:	0018      	movs	r0, r3
 800453c:	f001 fc8f 	bl	8005e5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_SW_Pin;
 8004540:	193b      	adds	r3, r7, r4
 8004542:	2280      	movs	r2, #128	; 0x80
 8004544:	0192      	lsls	r2, r2, #6
 8004546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004548:	193b      	adds	r3, r7, r4
 800454a:	2200      	movs	r2, #0
 800454c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454e:	193b      	adds	r3, r7, r4
 8004550:	2200      	movs	r2, #0
 8004552:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(test_SW_GPIO_Port, &GPIO_InitStruct);
 8004554:	193b      	adds	r3, r7, r4
 8004556:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <MX_GPIO_Init+0x158>)
 8004558:	0019      	movs	r1, r3
 800455a:	0010      	movs	r0, r2
 800455c:	f001 faea 	bl	8005b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sideMirror_Joystick_Switch_Pin;
 8004560:	193b      	adds	r3, r7, r4
 8004562:	2204      	movs	r2, #4
 8004564:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004566:	193b      	adds	r3, r7, r4
 8004568:	2200      	movs	r2, #0
 800456a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800456c:	193b      	adds	r3, r7, r4
 800456e:	2201      	movs	r2, #1
 8004570:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(sideMirror_Joystick_Switch_GPIO_Port, &GPIO_InitStruct);
 8004572:	193a      	adds	r2, r7, r4
 8004574:	2390      	movs	r3, #144	; 0x90
 8004576:	05db      	lsls	r3, r3, #23
 8004578:	0011      	movs	r1, r2
 800457a:	0018      	movs	r0, r3
 800457c:	f001 fada 	bl	8005b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = sideMirror_LED_U_Pin|sideMirror_LED_D_Pin|sideMirror_LED_R_Pin|sideMirror_LED_L_Pin;
 8004580:	193b      	adds	r3, r7, r4
 8004582:	22f0      	movs	r2, #240	; 0xf0
 8004584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004586:	193b      	adds	r3, r7, r4
 8004588:	2201      	movs	r2, #1
 800458a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458c:	193b      	adds	r3, r7, r4
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004592:	193b      	adds	r3, r7, r4
 8004594:	2200      	movs	r2, #0
 8004596:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004598:	193a      	adds	r2, r7, r4
 800459a:	2390      	movs	r3, #144	; 0x90
 800459c:	05db      	lsls	r3, r3, #23
 800459e:	0011      	movs	r1, r2
 80045a0:	0018      	movs	r0, r3
 80045a2:	f001 fac7 	bl	8005b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = headLight_Laser_Pin|headLight_LED_Pin;
 80045a6:	193b      	adds	r3, r7, r4
 80045a8:	22c0      	movs	r2, #192	; 0xc0
 80045aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ac:	193b      	adds	r3, r7, r4
 80045ae:	2201      	movs	r2, #1
 80045b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b2:	193b      	adds	r3, r7, r4
 80045b4:	2200      	movs	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b8:	193b      	adds	r3, r7, r4
 80045ba:	2200      	movs	r2, #0
 80045bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045be:	193b      	adds	r3, r7, r4
 80045c0:	4a0d      	ldr	r2, [pc, #52]	; (80045f8 <MX_GPIO_Init+0x158>)
 80045c2:	0019      	movs	r1, r3
 80045c4:	0010      	movs	r0, r2
 80045c6:	f001 fab5 	bl	8005b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = headLight_SW_start_Pin;
 80045ca:	0021      	movs	r1, r4
 80045cc:	187b      	adds	r3, r7, r1
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	0052      	lsls	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	2200      	movs	r2, #0
 80045d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045da:	187b      	adds	r3, r7, r1
 80045dc:	2201      	movs	r2, #1
 80045de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(headLight_SW_start_GPIO_Port, &GPIO_InitStruct);
 80045e0:	187b      	adds	r3, r7, r1
 80045e2:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <MX_GPIO_Init+0x158>)
 80045e4:	0019      	movs	r1, r3
 80045e6:	0010      	movs	r0, r2
 80045e8:	f001 faa4 	bl	8005b34 <HAL_GPIO_Init>

}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b00b      	add	sp, #44	; 0x2c
 80045f2:	bd90      	pop	{r4, r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	48000800 	.word	0x48000800

080045fc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <MX_I2C1_Init+0x74>)
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <MX_I2C1_Init+0x78>)
 8004604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004606:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <MX_I2C1_Init+0x74>)
 8004608:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <MX_I2C1_Init+0x7c>)
 800460a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <MX_I2C1_Init+0x74>)
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004612:	4b17      	ldr	r3, [pc, #92]	; (8004670 <MX_I2C1_Init+0x74>)
 8004614:	2201      	movs	r2, #1
 8004616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004618:	4b15      	ldr	r3, [pc, #84]	; (8004670 <MX_I2C1_Init+0x74>)
 800461a:	2200      	movs	r2, #0
 800461c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800461e:	4b14      	ldr	r3, [pc, #80]	; (8004670 <MX_I2C1_Init+0x74>)
 8004620:	2200      	movs	r2, #0
 8004622:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <MX_I2C1_Init+0x74>)
 8004626:	2200      	movs	r2, #0
 8004628:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <MX_I2C1_Init+0x74>)
 800462c:	2200      	movs	r2, #0
 800462e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <MX_I2C1_Init+0x74>)
 8004632:	2200      	movs	r2, #0
 8004634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <MX_I2C1_Init+0x74>)
 8004638:	0018      	movs	r0, r3
 800463a:	f001 fc2d 	bl	8005e98 <HAL_I2C_Init>
 800463e:	1e03      	subs	r3, r0, #0
 8004640:	d001      	beq.n	8004646 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004642:	f000 f96f 	bl	8004924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <MX_I2C1_Init+0x74>)
 8004648:	2100      	movs	r1, #0
 800464a:	0018      	movs	r0, r3
 800464c:	f002 f996 	bl	800697c <HAL_I2CEx_ConfigAnalogFilter>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004654:	f000 f966 	bl	8004924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <MX_I2C1_Init+0x74>)
 800465a:	2100      	movs	r1, #0
 800465c:	0018      	movs	r0, r3
 800465e:	f002 f9d9 	bl	8006a14 <HAL_I2CEx_ConfigDigitalFilter>
 8004662:	1e03      	subs	r3, r0, #0
 8004664:	d001      	beq.n	800466a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004666:	f000 f95d 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	200002e0 	.word	0x200002e0
 8004674:	40005400 	.word	0x40005400
 8004678:	2000090e 	.word	0x2000090e

0800467c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <MX_I2C2_Init+0x74>)
 8004682:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <MX_I2C2_Init+0x78>)
 8004684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <MX_I2C2_Init+0x74>)
 8004688:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <MX_I2C2_Init+0x7c>)
 800468a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <MX_I2C2_Init+0x74>)
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004692:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <MX_I2C2_Init+0x74>)
 8004694:	2201      	movs	r2, #1
 8004696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <MX_I2C2_Init+0x74>)
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <MX_I2C2_Init+0x74>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80046a4:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <MX_I2C2_Init+0x74>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <MX_I2C2_Init+0x74>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <MX_I2C2_Init+0x74>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <MX_I2C2_Init+0x74>)
 80046b8:	0018      	movs	r0, r3
 80046ba:	f001 fbed 	bl	8005e98 <HAL_I2C_Init>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d001      	beq.n	80046c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80046c2:	f000 f92f 	bl	8004924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <MX_I2C2_Init+0x74>)
 80046c8:	2100      	movs	r1, #0
 80046ca:	0018      	movs	r0, r3
 80046cc:	f002 f956 	bl	800697c <HAL_I2CEx_ConfigAnalogFilter>
 80046d0:	1e03      	subs	r3, r0, #0
 80046d2:	d001      	beq.n	80046d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80046d4:	f000 f926 	bl	8004924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <MX_I2C2_Init+0x74>)
 80046da:	2100      	movs	r1, #0
 80046dc:	0018      	movs	r0, r3
 80046de:	f002 f999 	bl	8006a14 <HAL_I2CEx_ConfigDigitalFilter>
 80046e2:	1e03      	subs	r3, r0, #0
 80046e4:	d001      	beq.n	80046ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80046e6:	f000 f91d 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000334 	.word	0x20000334
 80046f4:	40005800 	.word	0x40005800
 80046f8:	0010061a 	.word	0x0010061a

080046fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b08d      	sub	sp, #52	; 0x34
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004704:	241c      	movs	r4, #28
 8004706:	193b      	adds	r3, r7, r4
 8004708:	0018      	movs	r0, r3
 800470a:	2314      	movs	r3, #20
 800470c:	001a      	movs	r2, r3
 800470e:	2100      	movs	r1, #0
 8004710:	f008 fc58 	bl	800cfc4 <memset>
  if(i2cHandle->Instance==I2C1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a38      	ldr	r2, [pc, #224]	; (80047fc <HAL_I2C_MspInit+0x100>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d132      	bne.n	8004784 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800471e:	4b38      	ldr	r3, [pc, #224]	; (8004800 <HAL_I2C_MspInit+0x104>)
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <HAL_I2C_MspInit+0x104>)
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	02c9      	lsls	r1, r1, #11
 8004728:	430a      	orrs	r2, r1
 800472a:	615a      	str	r2, [r3, #20]
 800472c:	4b34      	ldr	r3, [pc, #208]	; (8004800 <HAL_I2C_MspInit+0x104>)
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	02db      	lsls	r3, r3, #11
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = headLight_IMU_SCL_Pin|headLight_IMU_SDA_Pin;
 800473a:	0021      	movs	r1, r4
 800473c:	187b      	adds	r3, r7, r1
 800473e:	22c0      	movs	r2, #192	; 0xc0
 8004740:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004742:	187b      	adds	r3, r7, r1
 8004744:	2212      	movs	r2, #18
 8004746:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	187b      	adds	r3, r7, r1
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800474e:	187b      	adds	r3, r7, r1
 8004750:	2203      	movs	r2, #3
 8004752:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004754:	187b      	adds	r3, r7, r1
 8004756:	2201      	movs	r2, #1
 8004758:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800475a:	187b      	adds	r3, r7, r1
 800475c:	4a29      	ldr	r2, [pc, #164]	; (8004804 <HAL_I2C_MspInit+0x108>)
 800475e:	0019      	movs	r1, r3
 8004760:	0010      	movs	r0, r2
 8004762:	f001 f9e7 	bl	8005b34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004766:	4b26      	ldr	r3, [pc, #152]	; (8004800 <HAL_I2C_MspInit+0x104>)
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_I2C_MspInit+0x104>)
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	0389      	lsls	r1, r1, #14
 8004770:	430a      	orrs	r2, r1
 8004772:	61da      	str	r2, [r3, #28]
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_I2C_MspInit+0x104>)
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	039b      	lsls	r3, r3, #14
 800477c:	4013      	ands	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004782:	e037      	b.n	80047f4 <HAL_I2C_MspInit+0xf8>
  else if(i2cHandle->Instance==I2C2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <HAL_I2C_MspInit+0x10c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d132      	bne.n	80047f4 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <HAL_I2C_MspInit+0x104>)
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <HAL_I2C_MspInit+0x104>)
 8004794:	2180      	movs	r1, #128	; 0x80
 8004796:	02c9      	lsls	r1, r1, #11
 8004798:	430a      	orrs	r2, r1
 800479a:	615a      	str	r2, [r3, #20]
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <HAL_I2C_MspInit+0x104>)
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	02db      	lsls	r3, r3, #11
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = sideMirror_LCD_SCL_Pin|sideMirror_LCD_SDA_Pin;
 80047aa:	211c      	movs	r1, #28
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	22c0      	movs	r2, #192	; 0xc0
 80047b0:	0112      	lsls	r2, r2, #4
 80047b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	2212      	movs	r2, #18
 80047b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ba:	187b      	adds	r3, r7, r1
 80047bc:	2200      	movs	r2, #0
 80047be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047c0:	187b      	adds	r3, r7, r1
 80047c2:	2203      	movs	r2, #3
 80047c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	2201      	movs	r2, #1
 80047ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047cc:	187b      	adds	r3, r7, r1
 80047ce:	4a0d      	ldr	r2, [pc, #52]	; (8004804 <HAL_I2C_MspInit+0x108>)
 80047d0:	0019      	movs	r1, r3
 80047d2:	0010      	movs	r0, r2
 80047d4:	f001 f9ae 	bl	8005b34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_I2C_MspInit+0x104>)
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_I2C_MspInit+0x104>)
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	03c9      	lsls	r1, r1, #15
 80047e2:	430a      	orrs	r2, r1
 80047e4:	61da      	str	r2, [r3, #28]
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_I2C_MspInit+0x104>)
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	03db      	lsls	r3, r3, #15
 80047ee:	4013      	ands	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b00d      	add	sp, #52	; 0x34
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	40005400 	.word	0x40005400
 8004800:	40021000 	.word	0x40021000
 8004804:	48000400 	.word	0x48000400
 8004808:	40005800 	.word	0x40005800

0800480c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004810:	f000 fcc4 	bl	800519c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004814:	f000 f808 	bl	8004828 <SystemClock_Config>
//  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004818:	f005 f85a 	bl	80098d0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800481c:	f7ff fce8 	bl	80041f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004820:	f005 f882 	bl	8009928 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004824:	e7fe      	b.n	8004824 <main+0x18>
	...

08004828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b099      	sub	sp, #100	; 0x64
 800482c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800482e:	242c      	movs	r4, #44	; 0x2c
 8004830:	193b      	adds	r3, r7, r4
 8004832:	0018      	movs	r0, r3
 8004834:	2334      	movs	r3, #52	; 0x34
 8004836:	001a      	movs	r2, r3
 8004838:	2100      	movs	r1, #0
 800483a:	f008 fbc3 	bl	800cfc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800483e:	231c      	movs	r3, #28
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	0018      	movs	r0, r3
 8004844:	2310      	movs	r3, #16
 8004846:	001a      	movs	r2, r3
 8004848:	2100      	movs	r1, #0
 800484a:	f008 fbbb 	bl	800cfc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800484e:	003b      	movs	r3, r7
 8004850:	0018      	movs	r0, r3
 8004852:	231c      	movs	r3, #28
 8004854:	001a      	movs	r2, r3
 8004856:	2100      	movs	r1, #0
 8004858:	f008 fbb4 	bl	800cfc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800485c:	0021      	movs	r1, r4
 800485e:	187b      	adds	r3, r7, r1
 8004860:	2212      	movs	r2, #18
 8004862:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004864:	187b      	adds	r3, r7, r1
 8004866:	2201      	movs	r2, #1
 8004868:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800486a:	187b      	adds	r3, r7, r1
 800486c:	2201      	movs	r2, #1
 800486e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004870:	187b      	adds	r3, r7, r1
 8004872:	2210      	movs	r2, #16
 8004874:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004876:	187b      	adds	r3, r7, r1
 8004878:	2210      	movs	r2, #16
 800487a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800487c:	187b      	adds	r3, r7, r1
 800487e:	2202      	movs	r2, #2
 8004880:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004882:	187b      	adds	r3, r7, r1
 8004884:	2280      	movs	r2, #128	; 0x80
 8004886:	0212      	lsls	r2, r2, #8
 8004888:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800488a:	187b      	adds	r3, r7, r1
 800488c:	2200      	movs	r2, #0
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004890:	187b      	adds	r3, r7, r1
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004896:	187b      	adds	r3, r7, r1
 8004898:	0018      	movs	r0, r3
 800489a:	f002 f907 	bl	8006aac <HAL_RCC_OscConfig>
 800489e:	1e03      	subs	r3, r0, #0
 80048a0:	d001      	beq.n	80048a6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80048a2:	f000 f83f 	bl	8004924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048a6:	211c      	movs	r1, #28
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	2207      	movs	r2, #7
 80048ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	2202      	movs	r2, #2
 80048b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80048ba:	187b      	adds	r3, r7, r1
 80048bc:	2200      	movs	r2, #0
 80048be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	2100      	movs	r1, #0
 80048c4:	0018      	movs	r0, r3
 80048c6:	f002 fc77 	bl	80071b8 <HAL_RCC_ClockConfig>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d001      	beq.n	80048d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80048ce:	f000 f829 	bl	8004924 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 80048d2:	003b      	movs	r3, r7
 80048d4:	4a09      	ldr	r2, [pc, #36]	; (80048fc <SystemClock_Config+0xd4>)
 80048d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80048d8:	003b      	movs	r3, r7
 80048da:	2200      	movs	r2, #0
 80048dc:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80048de:	003b      	movs	r3, r7
 80048e0:	2200      	movs	r2, #0
 80048e2:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048e4:	003b      	movs	r3, r7
 80048e6:	0018      	movs	r0, r3
 80048e8:	f002 fdfc 	bl	80074e4 <HAL_RCCEx_PeriphCLKConfig>
 80048ec:	1e03      	subs	r3, r0, #0
 80048ee:	d001      	beq.n	80048f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80048f0:	f000 f818 	bl	8004924 <Error_Handler>
  }
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b019      	add	sp, #100	; 0x64
 80048fa:	bd90      	pop	{r4, r7, pc}
 80048fc:	00040020 	.word	0x00040020

08004900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d101      	bne.n	8004916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004912:	f000 fc57 	bl	80051c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b002      	add	sp, #8
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	40014400 	.word	0x40014400

08004924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004928:	b672      	cpsid	i
}
 800492a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800492c:	e7fe      	b.n	800492c <Error_Handler+0x8>
	...

08004930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_MspInit+0x50>)
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_MspInit+0x50>)
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	619a      	str	r2, [r3, #24]
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_MspInit+0x50>)
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2201      	movs	r2, #1
 8004948:	4013      	ands	r3, r2
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_MspInit+0x50>)
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_MspInit+0x50>)
 8004954:	2180      	movs	r1, #128	; 0x80
 8004956:	0549      	lsls	r1, r1, #21
 8004958:	430a      	orrs	r2, r1
 800495a:	61da      	str	r2, [r3, #28]
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <HAL_MspInit+0x50>)
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	055b      	lsls	r3, r3, #21
 8004964:	4013      	ands	r3, r2
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800496a:	2302      	movs	r3, #2
 800496c:	425b      	negs	r3, r3
 800496e:	2200      	movs	r2, #0
 8004970:	2103      	movs	r1, #3
 8004972:	0018      	movs	r0, r3
 8004974:	f001 f8b8 	bl	8005ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	b002      	add	sp, #8
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000

08004984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004984:	b5b0      	push	{r4, r5, r7, lr}
 8004986:	b08c      	sub	sp, #48	; 0x30
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004994:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <HAL_InitTick+0xf4>)
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <HAL_InitTick+0xf4>)
 800499a:	2180      	movs	r1, #128	; 0x80
 800499c:	0289      	lsls	r1, r1, #10
 800499e:	430a      	orrs	r2, r1
 80049a0:	619a      	str	r2, [r3, #24]
 80049a2:	4b35      	ldr	r3, [pc, #212]	; (8004a78 <HAL_InitTick+0xf4>)
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	029b      	lsls	r3, r3, #10
 80049aa:	4013      	ands	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049b0:	230c      	movs	r3, #12
 80049b2:	18fa      	adds	r2, r7, r3
 80049b4:	2410      	movs	r4, #16
 80049b6:	193b      	adds	r3, r7, r4
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f002 fd68 	bl	8007490 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80049c0:	193b      	adds	r3, r7, r4
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM16 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80049cc:	f002 fd4a 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 80049d0:	0003      	movs	r3, r0
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d4:	e004      	b.n	80049e0 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80049d6:	f002 fd45 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 80049da:	0003      	movs	r3, r0
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	4926      	ldr	r1, [pc, #152]	; (8004a7c <HAL_InitTick+0xf8>)
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fb fbab 	bl	8000140 <__udivsi3>
 80049ea:	0003      	movs	r3, r0
 80049ec:	3b01      	subs	r3, #1
 80049ee:	623b      	str	r3, [r7, #32]

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80049f0:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_InitTick+0xfc>)
 80049f2:	4a24      	ldr	r2, [pc, #144]	; (8004a84 <HAL_InitTick+0x100>)
 80049f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <HAL_InitTick+0xfc>)
 80049f8:	4a23      	ldr	r2, [pc, #140]	; (8004a88 <HAL_InitTick+0x104>)
 80049fa:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80049fc:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <HAL_InitTick+0xfc>)
 80049fe:	6a3a      	ldr	r2, [r7, #32]
 8004a00:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8004a02:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <HAL_InitTick+0xfc>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <HAL_InitTick+0xfc>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <HAL_InitTick+0xfc>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8004a14:	252b      	movs	r5, #43	; 0x2b
 8004a16:	197c      	adds	r4, r7, r5
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_InitTick+0xfc>)
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f002 fe62 	bl	80076e4 <HAL_TIM_Base_Init>
 8004a20:	0003      	movs	r3, r0
 8004a22:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8004a24:	197b      	adds	r3, r7, r5
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11e      	bne.n	8004a6a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8004a2c:	197c      	adds	r4, r7, r5
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <HAL_InitTick+0xfc>)
 8004a30:	0018      	movs	r0, r3
 8004a32:	f002 fea7 	bl	8007784 <HAL_TIM_Base_Start_IT>
 8004a36:	0003      	movs	r3, r0
 8004a38:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8004a3a:	197b      	adds	r3, r7, r5
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d113      	bne.n	8004a6a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004a42:	2015      	movs	r0, #21
 8004a44:	f001 f865 	bl	8005b12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d809      	bhi.n	8004a62 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority, 0U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	0019      	movs	r1, r3
 8004a54:	2015      	movs	r0, #21
 8004a56:	f001 f847 	bl	8005ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <HAL_InitTick+0x108>)
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e003      	b.n	8004a6a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8004a62:	232b      	movs	r3, #43	; 0x2b
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8004a6a:	232b      	movs	r3, #43	; 0x2b
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	781b      	ldrb	r3, [r3, #0]
}
 8004a70:	0018      	movs	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b00c      	add	sp, #48	; 0x30
 8004a76:	bdb0      	pop	{r4, r5, r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	000f4240 	.word	0x000f4240
 8004a80:	20000388 	.word	0x20000388
 8004a84:	40014400 	.word	0x40014400
 8004a88:	000003e7 	.word	0x000003e7
 8004a8c:	20000018 	.word	0x20000018

08004a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a94:	e7fe      	b.n	8004a94 <NMI_Handler+0x4>

08004a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a9a:	e7fe      	b.n	8004a9a <HardFault_Handler+0x4>

08004a9c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004aa0:	4b03      	ldr	r3, [pc, #12]	; (8004ab0 <TIM16_IRQHandler+0x14>)
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f003 f84c 	bl	8007b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004aa8:	46c0      	nop			; (mov r8, r8)
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	20000388 	.word	0x20000388

08004ab4 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */
//	Uart_Handler();
  /* USER CODE END USART3_8_IRQn 0 */
  /* USER CODE BEGIN USART3_8_IRQn 1 */
	Uart_Handler();
 8004ab8:	f7fe ff90 	bl	80039dc <Uart_Handler>
  /* USER CODE END USART3_8_IRQn 1 */
}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	af00      	add	r7, sp, #0
  return 1;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <_kill>:

int _kill(int pid, int sig)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ad8:	f008 fb3e 	bl	800d158 <__errno>
 8004adc:	0003      	movs	r3, r0
 8004ade:	2216      	movs	r2, #22
 8004ae0:	601a      	str	r2, [r3, #0]
  return -1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	425b      	negs	r3, r3
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b002      	add	sp, #8
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_exit>:

void _exit (int status)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004af6:	2301      	movs	r3, #1
 8004af8:	425a      	negs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0011      	movs	r1, r2
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7ff ffe5 	bl	8004ace <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b04:	e7fe      	b.n	8004b04 <_exit+0x16>

08004b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e00a      	b.n	8004b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b18:	e000      	b.n	8004b1c <_read+0x16>
 8004b1a:	bf00      	nop
 8004b1c:	0001      	movs	r1, r0
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	60ba      	str	r2, [r7, #8]
 8004b24:	b2ca      	uxtb	r2, r1
 8004b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	dbf0      	blt.n	8004b18 <_read+0x12>
  }

  return len;
 8004b36:	687b      	ldr	r3, [r7, #4]
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b006      	add	sp, #24
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	e009      	b.n	8004b66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	60ba      	str	r2, [r7, #8]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	e000      	b.n	8004b60 <_write+0x20>
 8004b5e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3301      	adds	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	dbf1      	blt.n	8004b52 <_write+0x12>
  }
  return len;
 8004b6e:	687b      	ldr	r3, [r7, #4]
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b006      	add	sp, #24
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_close>:

int _close(int file)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b80:	2301      	movs	r3, #1
 8004b82:	425b      	negs	r3, r3
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b002      	add	sp, #8
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2280      	movs	r2, #128	; 0x80
 8004b9a:	0192      	lsls	r2, r2, #6
 8004b9c:	605a      	str	r2, [r3, #4]
  return 0;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <_isatty>:

int _isatty(int file)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bb0:	2301      	movs	r3, #1
}
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b002      	add	sp, #8
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b004      	add	sp, #16
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bd8:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <_sbrk+0x5c>)
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <_sbrk+0x60>)
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004be4:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <_sbrk+0x64>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bec:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <_sbrk+0x64>)
 8004bee:	4a12      	ldr	r2, [pc, #72]	; (8004c38 <_sbrk+0x68>)
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <_sbrk+0x64>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	18d3      	adds	r3, r2, r3
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d207      	bcs.n	8004c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c00:	f008 faaa 	bl	800d158 <__errno>
 8004c04:	0003      	movs	r3, r0
 8004c06:	220c      	movs	r2, #12
 8004c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	425b      	negs	r3, r3
 8004c0e:	e009      	b.n	8004c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <_sbrk+0x64>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <_sbrk+0x64>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	18d2      	adds	r2, r2, r3
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <_sbrk+0x64>)
 8004c20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	0018      	movs	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b006      	add	sp, #24
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20008000 	.word	0x20008000
 8004c30:	00000400 	.word	0x00000400
 8004c34:	200003d0 	.word	0x200003d0
 8004c38:	20001da0 	.word	0x20001da0

08004c3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b096      	sub	sp, #88	; 0x58
 8004c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c4e:	2348      	movs	r3, #72	; 0x48
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	0018      	movs	r0, r3
 8004c54:	2310      	movs	r3, #16
 8004c56:	001a      	movs	r2, r3
 8004c58:	2100      	movs	r1, #0
 8004c5a:	f008 f9b3 	bl	800cfc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c5e:	2340      	movs	r3, #64	; 0x40
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	0018      	movs	r0, r3
 8004c64:	2308      	movs	r3, #8
 8004c66:	001a      	movs	r2, r3
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f008 f9ab 	bl	800cfc4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c6e:	2324      	movs	r3, #36	; 0x24
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	0018      	movs	r0, r3
 8004c74:	231c      	movs	r3, #28
 8004c76:	001a      	movs	r2, r3
 8004c78:	2100      	movs	r1, #0
 8004c7a:	f008 f9a3 	bl	800cfc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c7e:	1d3b      	adds	r3, r7, #4
 8004c80:	0018      	movs	r0, r3
 8004c82:	2320      	movs	r3, #32
 8004c84:	001a      	movs	r2, r3
 8004c86:	2100      	movs	r1, #0
 8004c88:	f008 f99c 	bl	800cfc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c8c:	4b59      	ldr	r3, [pc, #356]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004c8e:	4a5a      	ldr	r2, [pc, #360]	; (8004df8 <MX_TIM1_Init+0x1b0>)
 8004c90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8004c92:	4b58      	ldr	r3, [pc, #352]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004c94:	2240      	movs	r2, #64	; 0x40
 8004c96:	32ff      	adds	r2, #255	; 0xff
 8004c98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c9a:	4b56      	ldr	r3, [pc, #344]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004ca0:	4b54      	ldr	r3, [pc, #336]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004ca2:	4a56      	ldr	r2, [pc, #344]	; (8004dfc <MX_TIM1_Init+0x1b4>)
 8004ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ca6:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004cac:	4b51      	ldr	r3, [pc, #324]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cb2:	4b50      	ldr	r3, [pc, #320]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004cb8:	4b4e      	ldr	r3, [pc, #312]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f002 fd12 	bl	80076e4 <HAL_TIM_Base_Init>
 8004cc0:	1e03      	subs	r3, r0, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8004cc4:	f7ff fe2e 	bl	8004924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cc8:	2148      	movs	r1, #72	; 0x48
 8004cca:	187b      	adds	r3, r7, r1
 8004ccc:	2280      	movs	r2, #128	; 0x80
 8004cce:	0152      	lsls	r2, r2, #5
 8004cd0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004cd2:	187a      	adds	r2, r7, r1
 8004cd4:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004cd6:	0011      	movs	r1, r2
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f003 f90d 	bl	8007ef8 <HAL_TIM_ConfigClockSource>
 8004cde:	1e03      	subs	r3, r0, #0
 8004ce0:	d001      	beq.n	8004ce6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8004ce2:	f7ff fe1f 	bl	8004924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f002 fd9d 	bl	8007828 <HAL_TIM_PWM_Init>
 8004cee:	1e03      	subs	r3, r0, #0
 8004cf0:	d001      	beq.n	8004cf6 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8004cf2:	f7ff fe17 	bl	8004924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cf6:	2140      	movs	r1, #64	; 0x40
 8004cf8:	187b      	adds	r3, r7, r1
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cfe:	187b      	adds	r3, r7, r1
 8004d00:	2200      	movs	r2, #0
 8004d02:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d04:	187a      	adds	r2, r7, r1
 8004d06:	4b3b      	ldr	r3, [pc, #236]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004d08:	0011      	movs	r1, r2
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f003 fd22 	bl	8008754 <HAL_TIMEx_MasterConfigSynchronization>
 8004d10:	1e03      	subs	r3, r0, #0
 8004d12:	d001      	beq.n	8004d18 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8004d14:	f7ff fe06 	bl	8004924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d18:	2124      	movs	r1, #36	; 0x24
 8004d1a:	187b      	adds	r3, r7, r1
 8004d1c:	2260      	movs	r2, #96	; 0x60
 8004d1e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500-1;
 8004d20:	187b      	adds	r3, r7, r1
 8004d22:	22f4      	movs	r2, #244	; 0xf4
 8004d24:	32ff      	adds	r2, #255	; 0xff
 8004d26:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d2e:	187b      	adds	r3, r7, r1
 8004d30:	2200      	movs	r2, #0
 8004d32:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d34:	187b      	adds	r3, r7, r1
 8004d36:	2200      	movs	r2, #0
 8004d38:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d3a:	187b      	adds	r3, r7, r1
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d40:	187b      	adds	r3, r7, r1
 8004d42:	2200      	movs	r2, #0
 8004d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d46:	1879      	adds	r1, r7, r1
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f003 f80d 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8004d52:	1e03      	subs	r3, r0, #0
 8004d54:	d001      	beq.n	8004d5a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8004d56:	f7ff fde5 	bl	8004924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d5a:	2324      	movs	r3, #36	; 0x24
 8004d5c:	18f9      	adds	r1, r7, r3
 8004d5e:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004d60:	2204      	movs	r2, #4
 8004d62:	0018      	movs	r0, r3
 8004d64:	f003 f802 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8004d68:	1e03      	subs	r3, r0, #0
 8004d6a:	d001      	beq.n	8004d70 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004d6c:	f7ff fdda 	bl	8004924 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8004d70:	2124      	movs	r1, #36	; 0x24
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	2200      	movs	r2, #0
 8004d76:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d78:	1879      	adds	r1, r7, r1
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f002 fff4 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8004d84:	1e03      	subs	r3, r0, #0
 8004d86:	d001      	beq.n	8004d8c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004d88:	f7ff fdcc 	bl	8004924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d8c:	2324      	movs	r3, #36	; 0x24
 8004d8e:	18f9      	adds	r1, r7, r3
 8004d90:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004d92:	220c      	movs	r2, #12
 8004d94:	0018      	movs	r0, r3
 8004d96:	f002 ffe9 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8004d9a:	1e03      	subs	r3, r0, #0
 8004d9c:	d001      	beq.n	8004da2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8004d9e:	f7ff fdc1 	bl	8004924 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	2200      	movs	r2, #0
 8004dac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dae:	1d3b      	adds	r3, r7, #4
 8004db0:	2200      	movs	r2, #0
 8004db2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004db4:	1d3b      	adds	r3, r7, #4
 8004db6:	2200      	movs	r2, #0
 8004db8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	2280      	movs	r2, #128	; 0x80
 8004dc4:	0192      	lsls	r2, r2, #6
 8004dc6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	2200      	movs	r2, #0
 8004dcc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004dce:	1d3a      	adds	r2, r7, #4
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004dd2:	0011      	movs	r1, r2
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f003 fd1b 	bl	8008810 <HAL_TIMEx_ConfigBreakDeadTime>
 8004dda:	1e03      	subs	r3, r0, #0
 8004ddc:	d001      	beq.n	8004de2 <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 8004dde:	f7ff fda1 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004de2:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <MX_TIM1_Init+0x1ac>)
 8004de4:	0018      	movs	r0, r3
 8004de6:	f000 f8bd 	bl	8004f64 <HAL_TIM_MspPostInit>

}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b016      	add	sp, #88	; 0x58
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	200003d4 	.word	0x200003d4
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	000003e7 	.word	0x000003e7

08004e00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08e      	sub	sp, #56	; 0x38
 8004e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e06:	2328      	movs	r3, #40	; 0x28
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	001a      	movs	r2, r3
 8004e10:	2100      	movs	r1, #0
 8004e12:	f008 f8d7 	bl	800cfc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e16:	2320      	movs	r3, #32
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	001a      	movs	r2, r3
 8004e20:	2100      	movs	r1, #0
 8004e22:	f008 f8cf 	bl	800cfc4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e26:	1d3b      	adds	r3, r7, #4
 8004e28:	0018      	movs	r0, r3
 8004e2a:	231c      	movs	r3, #28
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	2100      	movs	r1, #0
 8004e30:	f008 f8c8 	bl	800cfc4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e34:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	05d2      	lsls	r2, r2, #23
 8004e3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e3e:	2240      	movs	r2, #64	; 0x40
 8004e40:	32ff      	adds	r2, #255	; 0xff
 8004e42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e44:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8004e4a:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	; (8004efc <MX_TIM2_Init+0xfc>)
 8004e4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e50:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e56:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f002 fc40 	bl	80076e4 <HAL_TIM_Base_Init>
 8004e64:	1e03      	subs	r3, r0, #0
 8004e66:	d001      	beq.n	8004e6c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8004e68:	f7ff fd5c 	bl	8004924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e6c:	2128      	movs	r1, #40	; 0x28
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	0152      	lsls	r2, r2, #5
 8004e74:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e76:	187a      	adds	r2, r7, r1
 8004e78:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e7a:	0011      	movs	r1, r2
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f003 f83b 	bl	8007ef8 <HAL_TIM_ConfigClockSource>
 8004e82:	1e03      	subs	r3, r0, #0
 8004e84:	d001      	beq.n	8004e8a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8004e86:	f7ff fd4d 	bl	8004924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f002 fccb 	bl	8007828 <HAL_TIM_PWM_Init>
 8004e92:	1e03      	subs	r3, r0, #0
 8004e94:	d001      	beq.n	8004e9a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004e96:	f7ff fd45 	bl	8004924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	187b      	adds	r3, r7, r1
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ea2:	187b      	adds	r3, r7, r1
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ea8:	187a      	adds	r2, r7, r1
 8004eaa:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004eac:	0011      	movs	r1, r2
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f003 fc50 	bl	8008754 <HAL_TIMEx_MasterConfigSynchronization>
 8004eb4:	1e03      	subs	r3, r0, #0
 8004eb6:	d001      	beq.n	8004ebc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8004eb8:	f7ff fd34 	bl	8004924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ebc:	1d3b      	adds	r3, r7, #4
 8004ebe:	2260      	movs	r2, #96	; 0x60
 8004ec0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ec8:	1d3b      	adds	r3, r7, #4
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ed4:	1d39      	adds	r1, r7, #4
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	0018      	movs	r0, r3
 8004edc:	f002 ff46 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8004ee0:	1e03      	subs	r3, r0, #0
 8004ee2:	d001      	beq.n	8004ee8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8004ee4:	f7ff fd1e 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <MX_TIM2_Init+0xf8>)
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 f83a 	bl	8004f64 <HAL_TIM_MspPostInit>

}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b00e      	add	sp, #56	; 0x38
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	2000041c 	.word	0x2000041c
 8004efc:	000003e7 	.word	0x000003e7

08004f00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <HAL_TIM_Base_MspInit+0x5c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d10e      	bne.n	8004f30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f12:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <HAL_TIM_Base_MspInit+0x60>)
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <HAL_TIM_Base_MspInit+0x60>)
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	0109      	lsls	r1, r1, #4
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	619a      	str	r2, [r3, #24]
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <HAL_TIM_Base_MspInit+0x60>)
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004f2e:	e011      	b.n	8004f54 <HAL_TIM_Base_MspInit+0x54>
  else if(tim_baseHandle->Instance==TIM2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	2380      	movs	r3, #128	; 0x80
 8004f36:	05db      	lsls	r3, r3, #23
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d10b      	bne.n	8004f54 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <HAL_TIM_Base_MspInit+0x60>)
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <HAL_TIM_Base_MspInit+0x60>)
 8004f42:	2101      	movs	r1, #1
 8004f44:	430a      	orrs	r2, r1
 8004f46:	61da      	str	r2, [r3, #28]
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_TIM_Base_MspInit+0x60>)
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4013      	ands	r3, r2
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b004      	add	sp, #16
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40012c00 	.word	0x40012c00
 8004f60:	40021000 	.word	0x40021000

08004f64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b08b      	sub	sp, #44	; 0x2c
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f6c:	2414      	movs	r4, #20
 8004f6e:	193b      	adds	r3, r7, r4
 8004f70:	0018      	movs	r0, r3
 8004f72:	2314      	movs	r3, #20
 8004f74:	001a      	movs	r2, r3
 8004f76:	2100      	movs	r1, #0
 8004f78:	f008 f824 	bl	800cfc4 <memset>
  if(timHandle->Instance==TIM1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2c      	ldr	r2, [pc, #176]	; (8005034 <HAL_TIM_MspPostInit+0xd0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d126      	bne.n	8004fd4 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f86:	4b2c      	ldr	r3, [pc, #176]	; (8005038 <HAL_TIM_MspPostInit+0xd4>)
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_TIM_MspPostInit+0xd4>)
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	0289      	lsls	r1, r1, #10
 8004f90:	430a      	orrs	r2, r1
 8004f92:	615a      	str	r2, [r3, #20]
 8004f94:	4b28      	ldr	r3, [pc, #160]	; (8005038 <HAL_TIM_MspPostInit+0xd4>)
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	029b      	lsls	r3, r3, #10
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = sideMirror_motor_UD_Pin|sideMirror_motor_RL_Pin|headLight_motor_UD_Pin|GPIO_PIN_11;
 8004fa2:	193b      	adds	r3, r7, r4
 8004fa4:	22f0      	movs	r2, #240	; 0xf0
 8004fa6:	0112      	lsls	r2, r2, #4
 8004fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004faa:	0021      	movs	r1, r4
 8004fac:	187b      	adds	r3, r7, r1
 8004fae:	2202      	movs	r2, #2
 8004fb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	187b      	adds	r3, r7, r1
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb8:	187b      	adds	r3, r7, r1
 8004fba:	2200      	movs	r2, #0
 8004fbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004fbe:	187b      	adds	r3, r7, r1
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc4:	187a      	adds	r2, r7, r1
 8004fc6:	2390      	movs	r3, #144	; 0x90
 8004fc8:	05db      	lsls	r3, r3, #23
 8004fca:	0011      	movs	r1, r2
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 fdb1 	bl	8005b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004fd2:	e02b      	b.n	800502c <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM2)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	05db      	lsls	r3, r3, #23
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d125      	bne.n	800502c <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe0:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_TIM_MspPostInit+0xd4>)
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	4b14      	ldr	r3, [pc, #80]	; (8005038 <HAL_TIM_MspPostInit+0xd4>)
 8004fe6:	2180      	movs	r1, #128	; 0x80
 8004fe8:	0289      	lsls	r1, r1, #10
 8004fea:	430a      	orrs	r2, r1
 8004fec:	615a      	str	r2, [r3, #20]
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <HAL_TIM_MspPostInit+0xd4>)
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = welcome_sound_buzzer_Pin;
 8004ffc:	2114      	movs	r1, #20
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	2280      	movs	r2, #128	; 0x80
 8005002:	0212      	lsls	r2, r2, #8
 8005004:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005006:	187b      	adds	r3, r7, r1
 8005008:	2202      	movs	r2, #2
 800500a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	187b      	adds	r3, r7, r1
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005012:	187b      	adds	r3, r7, r1
 8005014:	2200      	movs	r2, #0
 8005016:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005018:	187b      	adds	r3, r7, r1
 800501a:	2202      	movs	r2, #2
 800501c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(welcome_sound_buzzer_GPIO_Port, &GPIO_InitStruct);
 800501e:	187a      	adds	r2, r7, r1
 8005020:	2390      	movs	r3, #144	; 0x90
 8005022:	05db      	lsls	r3, r3, #23
 8005024:	0011      	movs	r1, r2
 8005026:	0018      	movs	r0, r3
 8005028:	f000 fd84 	bl	8005b34 <HAL_GPIO_Init>
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b00b      	add	sp, #44	; 0x2c
 8005032:	bd90      	pop	{r4, r7, pc}
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40021000 	.word	0x40021000

0800503c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005040:	4b14      	ldr	r3, [pc, #80]	; (8005094 <MX_USART3_UART_Init+0x58>)
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <MX_USART3_UART_Init+0x5c>)
 8005044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005046:	4b13      	ldr	r3, [pc, #76]	; (8005094 <MX_USART3_UART_Init+0x58>)
 8005048:	22e1      	movs	r2, #225	; 0xe1
 800504a:	0252      	lsls	r2, r2, #9
 800504c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800504e:	4b11      	ldr	r3, [pc, #68]	; (8005094 <MX_USART3_UART_Init+0x58>)
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <MX_USART3_UART_Init+0x58>)
 8005056:	2200      	movs	r2, #0
 8005058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800505a:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <MX_USART3_UART_Init+0x58>)
 800505c:	2200      	movs	r2, #0
 800505e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <MX_USART3_UART_Init+0x58>)
 8005062:	220c      	movs	r2, #12
 8005064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <MX_USART3_UART_Init+0x58>)
 8005068:	2200      	movs	r2, #0
 800506a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <MX_USART3_UART_Init+0x58>)
 800506e:	2200      	movs	r2, #0
 8005070:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <MX_USART3_UART_Init+0x58>)
 8005074:	2200      	movs	r2, #0
 8005076:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <MX_USART3_UART_Init+0x58>)
 800507a:	2200      	movs	r2, #0
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <MX_USART3_UART_Init+0x58>)
 8005080:	0018      	movs	r0, r3
 8005082:	f003 fc33 	bl	80088ec <HAL_UART_Init>
 8005086:	1e03      	subs	r3, r0, #0
 8005088:	d001      	beq.n	800508e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800508a:	f7ff fc4b 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000464 	.word	0x20000464
 8005098:	40004800 	.word	0x40004800

0800509c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b08b      	sub	sp, #44	; 0x2c
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a4:	2414      	movs	r4, #20
 80050a6:	193b      	adds	r3, r7, r4
 80050a8:	0018      	movs	r0, r3
 80050aa:	2314      	movs	r3, #20
 80050ac:	001a      	movs	r2, r3
 80050ae:	2100      	movs	r1, #0
 80050b0:	f007 ff88 	bl	800cfc4 <memset>
  if(uartHandle->Instance==USART3)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a20      	ldr	r2, [pc, #128]	; (800513c <HAL_UART_MspInit+0xa0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d139      	bne.n	8005132 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_UART_MspInit+0xa4>)
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	4b1f      	ldr	r3, [pc, #124]	; (8005140 <HAL_UART_MspInit+0xa4>)
 80050c4:	2180      	movs	r1, #128	; 0x80
 80050c6:	02c9      	lsls	r1, r1, #11
 80050c8:	430a      	orrs	r2, r1
 80050ca:	61da      	str	r2, [r3, #28]
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <HAL_UART_MspInit+0xa4>)
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	02db      	lsls	r3, r3, #11
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050da:	4b19      	ldr	r3, [pc, #100]	; (8005140 <HAL_UART_MspInit+0xa4>)
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <HAL_UART_MspInit+0xa4>)
 80050e0:	2180      	movs	r1, #128	; 0x80
 80050e2:	0309      	lsls	r1, r1, #12
 80050e4:	430a      	orrs	r2, r1
 80050e6:	615a      	str	r2, [r3, #20]
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_UART_MspInit+0xa4>)
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	031b      	lsls	r3, r3, #12
 80050f0:	4013      	ands	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = Ras_Stm_usart3_TX_Pin|Ras_Stm_usart3_RX_Pin;
 80050f6:	0021      	movs	r1, r4
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	2230      	movs	r2, #48	; 0x30
 80050fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fe:	187b      	adds	r3, r7, r1
 8005100:	2202      	movs	r2, #2
 8005102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005104:	187b      	adds	r3, r7, r1
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800510a:	187b      	adds	r3, r7, r1
 800510c:	2203      	movs	r2, #3
 800510e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8005110:	187b      	adds	r3, r7, r1
 8005112:	2201      	movs	r2, #1
 8005114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005116:	187b      	adds	r3, r7, r1
 8005118:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <HAL_UART_MspInit+0xa8>)
 800511a:	0019      	movs	r1, r3
 800511c:	0010      	movs	r0, r2
 800511e:	f000 fd09 	bl	8005b34 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8005122:	2200      	movs	r2, #0
 8005124:	2103      	movs	r1, #3
 8005126:	201d      	movs	r0, #29
 8005128:	f000 fcde 	bl	8005ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800512c:	201d      	movs	r0, #29
 800512e:	f000 fcf0 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b00b      	add	sp, #44	; 0x2c
 8005138:	bd90      	pop	{r4, r7, pc}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	40004800 	.word	0x40004800
 8005140:	40021000 	.word	0x40021000
 8005144:	48000800 	.word	0x48000800

08005148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005148:	480d      	ldr	r0, [pc, #52]	; (8005180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800514a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800514c:	f7ff fd76 	bl	8004c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005150:	480c      	ldr	r0, [pc, #48]	; (8005184 <LoopForever+0x6>)
  ldr r1, =_edata
 8005152:	490d      	ldr	r1, [pc, #52]	; (8005188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <LoopForever+0xe>)
  movs r3, #0
 8005156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005158:	e002      	b.n	8005160 <LoopCopyDataInit>

0800515a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800515a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800515c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800515e:	3304      	adds	r3, #4

08005160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005164:	d3f9      	bcc.n	800515a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005168:	4c0a      	ldr	r4, [pc, #40]	; (8005194 <LoopForever+0x16>)
  movs r3, #0
 800516a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800516c:	e001      	b.n	8005172 <LoopFillZerobss>

0800516e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800516e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005170:	3204      	adds	r2, #4

08005172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005174:	d3fb      	bcc.n	800516e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005176:	f007 fff5 	bl	800d164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800517a:	f7ff fb47 	bl	800480c <main>

0800517e <LoopForever>:

LoopForever:
    b LoopForever
 800517e:	e7fe      	b.n	800517e <LoopForever>
  ldr   r0, =_estack
 8005180:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005188:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800518c:	08011218 	.word	0x08011218
  ldr r2, =_sbss
 8005190:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005194:	20001d9c 	.word	0x20001d9c

08005198 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005198:	e7fe      	b.n	8005198 <ADC1_COMP_IRQHandler>
	...

0800519c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <HAL_Init+0x24>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_Init+0x24>)
 80051a6:	2110      	movs	r1, #16
 80051a8:	430a      	orrs	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80051ac:	2003      	movs	r0, #3
 80051ae:	f7ff fbe9 	bl	8004984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051b2:	f7ff fbbd 	bl	8004930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	40022000 	.word	0x40022000

080051c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_IncTick+0x1c>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	001a      	movs	r2, r3
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <HAL_IncTick+0x20>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	18d2      	adds	r2, r2, r3
 80051d4:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <HAL_IncTick+0x20>)
 80051d6:	601a      	str	r2, [r3, #0]
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	2000001c 	.word	0x2000001c
 80051e4:	200004ec 	.word	0x200004ec

080051e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  return uwTick;
 80051ec:	4b02      	ldr	r3, [pc, #8]	; (80051f8 <HAL_GetTick+0x10>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	200004ec 	.word	0x200004ec

080051fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005204:	f7ff fff0 	bl	80051e8 <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	d005      	beq.n	8005222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <HAL_Delay+0x44>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	001a      	movs	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	189b      	adds	r3, r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	f7ff ffe0 	bl	80051e8 <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	429a      	cmp	r2, r3
 8005232:	d8f7      	bhi.n	8005224 <HAL_Delay+0x28>
  {
  }
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	46bd      	mov	sp, r7
 800523a:	b004      	add	sp, #16
 800523c:	bd80      	pop	{r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	2000001c 	.word	0x2000001c

08005244 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800524c:	230f      	movs	r3, #15
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e125      	b.n	80054ae <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2234      	movs	r2, #52	; 0x34
 8005274:	2100      	movs	r1, #0
 8005276:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	0018      	movs	r0, r3
 800527c:	f7fe ff46 	bl	800410c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	2210      	movs	r2, #16
 8005286:	4013      	ands	r3, r2
 8005288:	d000      	beq.n	800528c <HAL_ADC_Init+0x48>
 800528a:	e103      	b.n	8005494 <HAL_ADC_Init+0x250>
 800528c:	230f      	movs	r3, #15
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d000      	beq.n	8005298 <HAL_ADC_Init+0x54>
 8005296:	e0fd      	b.n	8005494 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2204      	movs	r2, #4
 80052a0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80052a2:	d000      	beq.n	80052a6 <HAL_ADC_Init+0x62>
 80052a4:	e0f6      	b.n	8005494 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	4a83      	ldr	r2, [pc, #524]	; (80054b8 <HAL_ADC_Init+0x274>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	2202      	movs	r2, #2
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2203      	movs	r2, #3
 80052be:	4013      	ands	r3, r2
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d112      	bne.n	80052ea <HAL_ADC_Init+0xa6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2201      	movs	r2, #1
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d009      	beq.n	80052e6 <HAL_ADC_Init+0xa2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	401a      	ands	r2, r3
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d101      	bne.n	80052ea <HAL_ADC_Init+0xa6>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_ADC_Init+0xa8>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d116      	bne.n	800531e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2218      	movs	r2, #24
 80052f8:	4393      	bics	r3, r2
 80052fa:	0019      	movs	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	0899      	lsrs	r1, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4964      	ldr	r1, [pc, #400]	; (80054bc <HAL_ADC_Init+0x278>)
 800532a:	400a      	ands	r2, r1
 800532c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7e1b      	ldrb	r3, [r3, #24]
 8005332:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7e5b      	ldrb	r3, [r3, #25]
 8005338:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800533a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	7e9b      	ldrb	r3, [r3, #26]
 8005340:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005342:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	2b01      	cmp	r3, #1
 800534a:	d002      	beq.n	8005352 <HAL_ADC_Init+0x10e>
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	015b      	lsls	r3, r3, #5
 8005350:	e000      	b.n	8005354 <HAL_ADC_Init+0x110>
 8005352:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005354:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800535a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d101      	bne.n	8005368 <HAL_ADC_Init+0x124>
 8005364:	2304      	movs	r3, #4
 8005366:	e000      	b.n	800536a <HAL_ADC_Init+0x126>
 8005368:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800536a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2124      	movs	r1, #36	; 0x24
 8005370:	5c5b      	ldrb	r3, [r3, r1]
 8005372:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005374:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	4313      	orrs	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	7edb      	ldrb	r3, [r3, #27]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d115      	bne.n	80053b0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7e9b      	ldrb	r3, [r3, #26]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d105      	bne.n	8005398 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2280      	movs	r2, #128	; 0x80
 8005390:	0252      	lsls	r2, r2, #9
 8005392:	4313      	orrs	r3, r2
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	e00b      	b.n	80053b0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	2220      	movs	r2, #32
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	2201      	movs	r2, #1
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	23c2      	movs	r3, #194	; 0xc2
 80053b6:	33ff      	adds	r3, #255	; 0xff
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d007      	beq.n	80053cc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80053c4:	4313      	orrs	r3, r2
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68d9      	ldr	r1, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	430a      	orrs	r2, r1
 80053da:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	055b      	lsls	r3, r3, #21
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d01b      	beq.n	8005420 <HAL_ADC_Init+0x1dc>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d017      	beq.n	8005420 <HAL_ADC_Init+0x1dc>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d013      	beq.n	8005420 <HAL_ADC_Init+0x1dc>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d00f      	beq.n	8005420 <HAL_ADC_Init+0x1dc>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	2b04      	cmp	r3, #4
 8005406:	d00b      	beq.n	8005420 <HAL_ADC_Init+0x1dc>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	2b05      	cmp	r3, #5
 800540e:	d007      	beq.n	8005420 <HAL_ADC_Init+0x1dc>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	2b06      	cmp	r3, #6
 8005416:	d003      	beq.n	8005420 <HAL_ADC_Init+0x1dc>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	2b07      	cmp	r3, #7
 800541e:	d112      	bne.n	8005446 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2107      	movs	r1, #7
 800542c:	438a      	bics	r2, r1
 800542e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6959      	ldr	r1, [r3, #20]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	2207      	movs	r2, #7
 800543c:	401a      	ands	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <HAL_ADC_Init+0x27c>)
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	d10b      	bne.n	800546e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	2203      	movs	r2, #3
 8005462:	4393      	bics	r3, r2
 8005464:	2201      	movs	r2, #1
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800546c:	e01c      	b.n	80054a8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	2212      	movs	r2, #18
 8005474:	4393      	bics	r3, r2
 8005476:	2210      	movs	r2, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	2201      	movs	r2, #1
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800548a:	230f      	movs	r3, #15
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005492:	e009      	b.n	80054a8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	2210      	movs	r2, #16
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80054a0:	230f      	movs	r3, #15
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80054a8:	230f      	movs	r3, #15
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	781b      	ldrb	r3, [r3, #0]
}
 80054ae:	0018      	movs	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b004      	add	sp, #16
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	fffffefd 	.word	0xfffffefd
 80054bc:	fffe0219 	.word	0xfffe0219
 80054c0:	833fffe7 	.word	0x833fffe7

080054c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054cc:	230f      	movs	r3, #15
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2204      	movs	r2, #4
 80054dc:	4013      	ands	r3, r2
 80054de:	d138      	bne.n	8005552 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2234      	movs	r2, #52	; 0x34
 80054e4:	5c9b      	ldrb	r3, [r3, r2]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_ADC_Start+0x2a>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e038      	b.n	8005560 <HAL_ADC_Start+0x9c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2234      	movs	r2, #52	; 0x34
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	7e5b      	ldrb	r3, [r3, #25]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d007      	beq.n	800550e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80054fe:	230f      	movs	r3, #15
 8005500:	18fc      	adds	r4, r7, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	0018      	movs	r0, r3
 8005506:	f000 f9e3 	bl	80058d0 <ADC_Enable>
 800550a:	0003      	movs	r3, r0
 800550c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800550e:	230f      	movs	r3, #15
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d120      	bne.n	800555a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	4a12      	ldr	r2, [pc, #72]	; (8005568 <HAL_ADC_Start+0xa4>)
 800551e:	4013      	ands	r3, r2
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	0052      	lsls	r2, r2, #1
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2234      	movs	r2, #52	; 0x34
 8005534:	2100      	movs	r1, #0
 8005536:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	221c      	movs	r2, #28
 800553e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2104      	movs	r1, #4
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	e003      	b.n	800555a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005552:	230f      	movs	r3, #15
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	2202      	movs	r2, #2
 8005558:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800555a:	230f      	movs	r3, #15
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	781b      	ldrb	r3, [r3, #0]
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b005      	add	sp, #20
 8005566:	bd90      	pop	{r4, r7, pc}
 8005568:	fffff0fe 	.word	0xfffff0fe

0800556c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	2b08      	cmp	r3, #8
 800557c:	d102      	bne.n	8005584 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800557e:	2308      	movs	r3, #8
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e014      	b.n	80055ae <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	4013      	ands	r3, r2
 800558e:	2b01      	cmp	r3, #1
 8005590:	d10b      	bne.n	80055aa <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	2220      	movs	r2, #32
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2234      	movs	r2, #52	; 0x34
 80055a2:	2100      	movs	r1, #0
 80055a4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e071      	b.n	800568e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80055aa:	230c      	movs	r3, #12
 80055ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80055ae:	f7ff fe1b 	bl	80051e8 <HAL_GetTick>
 80055b2:	0003      	movs	r3, r0
 80055b4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80055b6:	e01f      	b.n	80055f8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	d01c      	beq.n	80055f8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <HAL_ADC_PollForConversion+0x68>
 80055c4:	f7ff fe10 	bl	80051e8 <HAL_GetTick>
 80055c8:	0002      	movs	r2, r0
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d211      	bcs.n	80055f8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4013      	ands	r3, r2
 80055de:	d10b      	bne.n	80055f8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	2204      	movs	r2, #4
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2234      	movs	r2, #52	; 0x34
 80055f0:	2100      	movs	r1, #0
 80055f2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e04a      	b.n	800568e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4013      	ands	r3, r2
 8005602:	d0d9      	beq.n	80055b8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	2280      	movs	r2, #128	; 0x80
 800560a:	0092      	lsls	r2, r2, #2
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	23c0      	movs	r3, #192	; 0xc0
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	4013      	ands	r3, r2
 800561e:	d12d      	bne.n	800567c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005624:	2b00      	cmp	r3, #0
 8005626:	d129      	bne.n	800567c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2208      	movs	r2, #8
 8005630:	4013      	ands	r3, r2
 8005632:	2b08      	cmp	r3, #8
 8005634:	d122      	bne.n	800567c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2204      	movs	r2, #4
 800563e:	4013      	ands	r3, r2
 8005640:	d110      	bne.n	8005664 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	210c      	movs	r1, #12
 800564e:	438a      	bics	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <HAL_ADC_PollForConversion+0x12c>)
 8005658:	4013      	ands	r3, r2
 800565a:	2201      	movs	r2, #1
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
 8005662:	e00b      	b.n	800567c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	2220      	movs	r2, #32
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	2201      	movs	r2, #1
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	7e1b      	ldrb	r3, [r3, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d103      	bne.n	800568c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	220c      	movs	r2, #12
 800568a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	b004      	add	sp, #16
 8005694:	bd80      	pop	{r7, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	fffffefe 	.word	0xfffffefe

0800569c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b002      	add	sp, #8
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056be:	230f      	movs	r3, #15
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	055b      	lsls	r3, r3, #21
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d011      	beq.n	80056fa <HAL_ADC_ConfigChannel+0x46>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d00d      	beq.n	80056fa <HAL_ADC_ConfigChannel+0x46>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d009      	beq.n	80056fa <HAL_ADC_ConfigChannel+0x46>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d005      	beq.n	80056fa <HAL_ADC_ConfigChannel+0x46>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d001      	beq.n	80056fa <HAL_ADC_ConfigChannel+0x46>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2234      	movs	r2, #52	; 0x34
 80056fe:	5c9b      	ldrb	r3, [r3, r2]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x54>
 8005704:	2302      	movs	r3, #2
 8005706:	e0d0      	b.n	80058aa <HAL_ADC_ConfigChannel+0x1f6>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2234      	movs	r2, #52	; 0x34
 800570c:	2101      	movs	r1, #1
 800570e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2204      	movs	r2, #4
 8005718:	4013      	ands	r3, r2
 800571a:	d000      	beq.n	800571e <HAL_ADC_ConfigChannel+0x6a>
 800571c:	e0b4      	b.n	8005888 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	4a64      	ldr	r2, [pc, #400]	; (80058b4 <HAL_ADC_ConfigChannel+0x200>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d100      	bne.n	800572a <HAL_ADC_ConfigChannel+0x76>
 8005728:	e082      	b.n	8005830 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	409a      	lsls	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	055b      	lsls	r3, r3, #21
 8005748:	429a      	cmp	r2, r3
 800574a:	d037      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d033      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	2b02      	cmp	r3, #2
 800575a:	d02f      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	2b03      	cmp	r3, #3
 8005762:	d02b      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	2b04      	cmp	r3, #4
 800576a:	d027      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	2b05      	cmp	r3, #5
 8005772:	d023      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	2b06      	cmp	r3, #6
 800577a:	d01f      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	2b07      	cmp	r3, #7
 8005782:	d01b      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2107      	movs	r1, #7
 8005790:	400b      	ands	r3, r1
 8005792:	429a      	cmp	r2, r3
 8005794:	d012      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695a      	ldr	r2, [r3, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2107      	movs	r1, #7
 80057a2:	438a      	bics	r2, r1
 80057a4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6959      	ldr	r1, [r3, #20]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2207      	movs	r2, #7
 80057b2:	401a      	ands	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d007      	beq.n	80057d4 <HAL_ADC_ConfigChannel+0x120>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b11      	cmp	r3, #17
 80057ca:	d003      	beq.n	80057d4 <HAL_ADC_ConfigChannel+0x120>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b12      	cmp	r3, #18
 80057d2:	d163      	bne.n	800589c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80057d4:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <HAL_ADC_ConfigChannel+0x204>)
 80057d6:	6819      	ldr	r1, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d009      	beq.n	80057f4 <HAL_ADC_ConfigChannel+0x140>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b11      	cmp	r3, #17
 80057e6:	d102      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x13a>
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	03db      	lsls	r3, r3, #15
 80057ec:	e004      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x144>
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	045b      	lsls	r3, r3, #17
 80057f2:	e001      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x144>
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	4a2f      	ldr	r2, [pc, #188]	; (80058b8 <HAL_ADC_ConfigChannel+0x204>)
 80057fa:	430b      	orrs	r3, r1
 80057fc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b10      	cmp	r3, #16
 8005804:	d14a      	bne.n	800589c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005806:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <HAL_ADC_ConfigChannel+0x208>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	492d      	ldr	r1, [pc, #180]	; (80058c0 <HAL_ADC_ConfigChannel+0x20c>)
 800580c:	0018      	movs	r0, r3
 800580e:	f7fa fc97 	bl	8000140 <__udivsi3>
 8005812:	0003      	movs	r3, r0
 8005814:	001a      	movs	r2, r3
 8005816:	0013      	movs	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	189b      	adds	r3, r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005820:	e002      	b.n	8005828 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3b01      	subs	r3, #1
 8005826:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f9      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x16e>
 800582e:	e035      	b.n	800589c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2101      	movs	r1, #1
 800583c:	4099      	lsls	r1, r3
 800583e:	000b      	movs	r3, r1
 8005840:	43d9      	mvns	r1, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	400a      	ands	r2, r1
 8005848:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b10      	cmp	r3, #16
 8005850:	d007      	beq.n	8005862 <HAL_ADC_ConfigChannel+0x1ae>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b11      	cmp	r3, #17
 8005858:	d003      	beq.n	8005862 <HAL_ADC_ConfigChannel+0x1ae>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b12      	cmp	r3, #18
 8005860:	d11c      	bne.n	800589c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005862:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <HAL_ADC_ConfigChannel+0x204>)
 8005864:	6819      	ldr	r1, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b10      	cmp	r3, #16
 800586c:	d007      	beq.n	800587e <HAL_ADC_ConfigChannel+0x1ca>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b11      	cmp	r3, #17
 8005874:	d101      	bne.n	800587a <HAL_ADC_ConfigChannel+0x1c6>
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <HAL_ADC_ConfigChannel+0x210>)
 8005878:	e002      	b.n	8005880 <HAL_ADC_ConfigChannel+0x1cc>
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_ADC_ConfigChannel+0x214>)
 800587c:	e000      	b.n	8005880 <HAL_ADC_ConfigChannel+0x1cc>
 800587e:	4b13      	ldr	r3, [pc, #76]	; (80058cc <HAL_ADC_ConfigChannel+0x218>)
 8005880:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <HAL_ADC_ConfigChannel+0x204>)
 8005882:	400b      	ands	r3, r1
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e009      	b.n	800589c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	2220      	movs	r2, #32
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8005894:	230f      	movs	r3, #15
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2234      	movs	r2, #52	; 0x34
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80058a4:	230f      	movs	r3, #15
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	781b      	ldrb	r3, [r3, #0]
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b004      	add	sp, #16
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	00001001 	.word	0x00001001
 80058b8:	40012708 	.word	0x40012708
 80058bc:	20000014 	.word	0x20000014
 80058c0:	000f4240 	.word	0x000f4240
 80058c4:	ffbfffff 	.word	0xffbfffff
 80058c8:	feffffff 	.word	0xfeffffff
 80058cc:	ff7fffff 	.word	0xff7fffff

080058d0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2203      	movs	r2, #3
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d112      	bne.n	8005914 <ADC_Enable+0x44>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2201      	movs	r2, #1
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d009      	beq.n	8005910 <ADC_Enable+0x40>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	401a      	ands	r2, r3
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	429a      	cmp	r2, r3
 800590e:	d101      	bne.n	8005914 <ADC_Enable+0x44>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <ADC_Enable+0x46>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d152      	bne.n	80059c0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a2a      	ldr	r2, [pc, #168]	; (80059cc <ADC_Enable+0xfc>)
 8005922:	4013      	ands	r3, r2
 8005924:	d00d      	beq.n	8005942 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	2210      	movs	r2, #16
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	2201      	movs	r2, #1
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e03f      	b.n	80059c2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2101      	movs	r1, #1
 800594e:	430a      	orrs	r2, r1
 8005950:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005952:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <ADC_Enable+0x100>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	491f      	ldr	r1, [pc, #124]	; (80059d4 <ADC_Enable+0x104>)
 8005958:	0018      	movs	r0, r3
 800595a:	f7fa fbf1 	bl	8000140 <__udivsi3>
 800595e:	0003      	movs	r3, r0
 8005960:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005962:	e002      	b.n	800596a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3b01      	subs	r3, #1
 8005968:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f9      	bne.n	8005964 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005970:	f7ff fc3a 	bl	80051e8 <HAL_GetTick>
 8005974:	0003      	movs	r3, r0
 8005976:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005978:	e01b      	b.n	80059b2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800597a:	f7ff fc35 	bl	80051e8 <HAL_GetTick>
 800597e:	0002      	movs	r2, r0
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d914      	bls.n	80059b2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	4013      	ands	r3, r2
 8005992:	2b01      	cmp	r3, #1
 8005994:	d00d      	beq.n	80059b2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	2210      	movs	r2, #16
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	2201      	movs	r2, #1
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e007      	b.n	80059c2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d1dc      	bne.n	800597a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	0018      	movs	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b004      	add	sp, #16
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	80000017 	.word	0x80000017
 80059d0:	20000014 	.word	0x20000014
 80059d4:	000f4240 	.word	0x000f4240

080059d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	0002      	movs	r2, r0
 80059e0:	1dfb      	adds	r3, r7, #7
 80059e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059e4:	1dfb      	adds	r3, r7, #7
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ea:	d809      	bhi.n	8005a00 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ec:	1dfb      	adds	r3, r7, #7
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	001a      	movs	r2, r3
 80059f2:	231f      	movs	r3, #31
 80059f4:	401a      	ands	r2, r3
 80059f6:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <__NVIC_EnableIRQ+0x30>)
 80059f8:	2101      	movs	r1, #1
 80059fa:	4091      	lsls	r1, r2
 80059fc:	000a      	movs	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
  }
}
 8005a00:	46c0      	nop			; (mov r8, r8)
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b002      	add	sp, #8
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	e000e100 	.word	0xe000e100

08005a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	0002      	movs	r2, r0
 8005a14:	6039      	str	r1, [r7, #0]
 8005a16:	1dfb      	adds	r3, r7, #7
 8005a18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005a1a:	1dfb      	adds	r3, r7, #7
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a20:	d828      	bhi.n	8005a74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a22:	4a2f      	ldr	r2, [pc, #188]	; (8005ae0 <__NVIC_SetPriority+0xd4>)
 8005a24:	1dfb      	adds	r3, r7, #7
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	b25b      	sxtb	r3, r3
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	33c0      	adds	r3, #192	; 0xc0
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	589b      	ldr	r3, [r3, r2]
 8005a32:	1dfa      	adds	r2, r7, #7
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	0011      	movs	r1, r2
 8005a38:	2203      	movs	r2, #3
 8005a3a:	400a      	ands	r2, r1
 8005a3c:	00d2      	lsls	r2, r2, #3
 8005a3e:	21ff      	movs	r1, #255	; 0xff
 8005a40:	4091      	lsls	r1, r2
 8005a42:	000a      	movs	r2, r1
 8005a44:	43d2      	mvns	r2, r2
 8005a46:	401a      	ands	r2, r3
 8005a48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	22ff      	movs	r2, #255	; 0xff
 8005a50:	401a      	ands	r2, r3
 8005a52:	1dfb      	adds	r3, r7, #7
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	0018      	movs	r0, r3
 8005a58:	2303      	movs	r3, #3
 8005a5a:	4003      	ands	r3, r0
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a60:	481f      	ldr	r0, [pc, #124]	; (8005ae0 <__NVIC_SetPriority+0xd4>)
 8005a62:	1dfb      	adds	r3, r7, #7
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	089b      	lsrs	r3, r3, #2
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	33c0      	adds	r3, #192	; 0xc0
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005a72:	e031      	b.n	8005ad8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a74:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <__NVIC_SetPriority+0xd8>)
 8005a76:	1dfb      	adds	r3, r7, #7
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	230f      	movs	r3, #15
 8005a7e:	400b      	ands	r3, r1
 8005a80:	3b08      	subs	r3, #8
 8005a82:	089b      	lsrs	r3, r3, #2
 8005a84:	3306      	adds	r3, #6
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	18d3      	adds	r3, r2, r3
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	1dfa      	adds	r2, r7, #7
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	0011      	movs	r1, r2
 8005a94:	2203      	movs	r2, #3
 8005a96:	400a      	ands	r2, r1
 8005a98:	00d2      	lsls	r2, r2, #3
 8005a9a:	21ff      	movs	r1, #255	; 0xff
 8005a9c:	4091      	lsls	r1, r2
 8005a9e:	000a      	movs	r2, r1
 8005aa0:	43d2      	mvns	r2, r2
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	019b      	lsls	r3, r3, #6
 8005aaa:	22ff      	movs	r2, #255	; 0xff
 8005aac:	401a      	ands	r2, r3
 8005aae:	1dfb      	adds	r3, r7, #7
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	4003      	ands	r3, r0
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005abc:	4809      	ldr	r0, [pc, #36]	; (8005ae4 <__NVIC_SetPriority+0xd8>)
 8005abe:	1dfb      	adds	r3, r7, #7
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	001c      	movs	r4, r3
 8005ac4:	230f      	movs	r3, #15
 8005ac6:	4023      	ands	r3, r4
 8005ac8:	3b08      	subs	r3, #8
 8005aca:	089b      	lsrs	r3, r3, #2
 8005acc:	430a      	orrs	r2, r1
 8005ace:	3306      	adds	r3, #6
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	18c3      	adds	r3, r0, r3
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	601a      	str	r2, [r3, #0]
}
 8005ad8:	46c0      	nop			; (mov r8, r8)
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b003      	add	sp, #12
 8005ade:	bd90      	pop	{r4, r7, pc}
 8005ae0:	e000e100 	.word	0xe000e100
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	210f      	movs	r1, #15
 8005af4:	187b      	adds	r3, r7, r1
 8005af6:	1c02      	adds	r2, r0, #0
 8005af8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	187b      	adds	r3, r7, r1
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	0011      	movs	r1, r2
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7ff ff81 	bl	8005a0c <__NVIC_SetPriority>
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b004      	add	sp, #16
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	0002      	movs	r2, r0
 8005b1a:	1dfb      	adds	r3, r7, #7
 8005b1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b1e:	1dfb      	adds	r3, r7, #7
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7ff ff57 	bl	80059d8 <__NVIC_EnableIRQ>
}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b002      	add	sp, #8
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b42:	e155      	b.n	8005df0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2101      	movs	r1, #1
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4091      	lsls	r1, r2
 8005b4e:	000a      	movs	r2, r1
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d100      	bne.n	8005b5c <HAL_GPIO_Init+0x28>
 8005b5a:	e146      	b.n	8005dea <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2203      	movs	r2, #3
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d005      	beq.n	8005b74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d130      	bne.n	8005bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	2203      	movs	r2, #3
 8005b80:	409a      	lsls	r2, r3
 8005b82:	0013      	movs	r3, r2
 8005b84:	43da      	mvns	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	409a      	lsls	r2, r3
 8005b96:	0013      	movs	r3, r2
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005baa:	2201      	movs	r2, #1
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	0013      	movs	r3, r2
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	401a      	ands	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	0013      	movs	r3, r2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2203      	movs	r2, #3
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d017      	beq.n	8005c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	2203      	movs	r2, #3
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	0013      	movs	r3, r2
 8005bf2:	43da      	mvns	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	409a      	lsls	r2, r3
 8005c04:	0013      	movs	r3, r2
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2203      	movs	r2, #3
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d123      	bne.n	8005c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	08da      	lsrs	r2, r3, #3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3208      	adds	r2, #8
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	58d3      	ldr	r3, [r2, r3]
 8005c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2207      	movs	r2, #7
 8005c30:	4013      	ands	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	220f      	movs	r2, #15
 8005c36:	409a      	lsls	r2, r3
 8005c38:	0013      	movs	r3, r2
 8005c3a:	43da      	mvns	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2107      	movs	r1, #7
 8005c4a:	400b      	ands	r3, r1
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	0013      	movs	r3, r2
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	08da      	lsrs	r2, r3, #3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3208      	adds	r2, #8
 8005c60:	0092      	lsls	r2, r2, #2
 8005c62:	6939      	ldr	r1, [r7, #16]
 8005c64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	2203      	movs	r2, #3
 8005c72:	409a      	lsls	r2, r3
 8005c74:	0013      	movs	r3, r2
 8005c76:	43da      	mvns	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2203      	movs	r2, #3
 8005c84:	401a      	ands	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	0013      	movs	r3, r2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	23c0      	movs	r3, #192	; 0xc0
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d100      	bne.n	8005ca8 <HAL_GPIO_Init+0x174>
 8005ca6:	e0a0      	b.n	8005dea <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ca8:	4b57      	ldr	r3, [pc, #348]	; (8005e08 <HAL_GPIO_Init+0x2d4>)
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	4b56      	ldr	r3, [pc, #344]	; (8005e08 <HAL_GPIO_Init+0x2d4>)
 8005cae:	2101      	movs	r1, #1
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	619a      	str	r2, [r3, #24]
 8005cb4:	4b54      	ldr	r3, [pc, #336]	; (8005e08 <HAL_GPIO_Init+0x2d4>)
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4013      	ands	r3, r2
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005cc0:	4a52      	ldr	r2, [pc, #328]	; (8005e0c <HAL_GPIO_Init+0x2d8>)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	089b      	lsrs	r3, r3, #2
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	589b      	ldr	r3, [r3, r2]
 8005ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	220f      	movs	r2, #15
 8005cd8:	409a      	lsls	r2, r3
 8005cda:	0013      	movs	r3, r2
 8005cdc:	43da      	mvns	r2, r3
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	2390      	movs	r3, #144	; 0x90
 8005ce8:	05db      	lsls	r3, r3, #23
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d019      	beq.n	8005d22 <HAL_GPIO_Init+0x1ee>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a47      	ldr	r2, [pc, #284]	; (8005e10 <HAL_GPIO_Init+0x2dc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <HAL_GPIO_Init+0x1ea>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <HAL_GPIO_Init+0x2e0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00d      	beq.n	8005d1a <HAL_GPIO_Init+0x1e6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a45      	ldr	r2, [pc, #276]	; (8005e18 <HAL_GPIO_Init+0x2e4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d007      	beq.n	8005d16 <HAL_GPIO_Init+0x1e2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a44      	ldr	r2, [pc, #272]	; (8005e1c <HAL_GPIO_Init+0x2e8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <HAL_GPIO_Init+0x1de>
 8005d0e:	2304      	movs	r3, #4
 8005d10:	e008      	b.n	8005d24 <HAL_GPIO_Init+0x1f0>
 8005d12:	2305      	movs	r3, #5
 8005d14:	e006      	b.n	8005d24 <HAL_GPIO_Init+0x1f0>
 8005d16:	2303      	movs	r3, #3
 8005d18:	e004      	b.n	8005d24 <HAL_GPIO_Init+0x1f0>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e002      	b.n	8005d24 <HAL_GPIO_Init+0x1f0>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <HAL_GPIO_Init+0x1f0>
 8005d22:	2300      	movs	r3, #0
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	2103      	movs	r1, #3
 8005d28:	400a      	ands	r2, r1
 8005d2a:	0092      	lsls	r2, r2, #2
 8005d2c:	4093      	lsls	r3, r2
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d34:	4935      	ldr	r1, [pc, #212]	; (8005e0c <HAL_GPIO_Init+0x2d8>)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	089b      	lsrs	r3, r3, #2
 8005d3a:	3302      	adds	r3, #2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d42:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <HAL_GPIO_Init+0x2ec>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	035b      	lsls	r3, r3, #13
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d66:	4b2e      	ldr	r3, [pc, #184]	; (8005e20 <HAL_GPIO_Init+0x2ec>)
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005d6c:	4b2c      	ldr	r3, [pc, #176]	; (8005e20 <HAL_GPIO_Init+0x2ec>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	43da      	mvns	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	039b      	lsls	r3, r3, #14
 8005d84:	4013      	ands	r3, r2
 8005d86:	d003      	beq.n	8005d90 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d90:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <HAL_GPIO_Init+0x2ec>)
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005d96:	4b22      	ldr	r3, [pc, #136]	; (8005e20 <HAL_GPIO_Init+0x2ec>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	43da      	mvns	r2, r3
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4013      	ands	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	029b      	lsls	r3, r3, #10
 8005dae:	4013      	ands	r3, r2
 8005db0:	d003      	beq.n	8005dba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005dba:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <HAL_GPIO_Init+0x2ec>)
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005dc0:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <HAL_GPIO_Init+0x2ec>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	43da      	mvns	r2, r3
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	025b      	lsls	r3, r3, #9
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d003      	beq.n	8005de4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <HAL_GPIO_Init+0x2ec>)
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	3301      	adds	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	40da      	lsrs	r2, r3
 8005df8:	1e13      	subs	r3, r2, #0
 8005dfa:	d000      	beq.n	8005dfe <HAL_GPIO_Init+0x2ca>
 8005dfc:	e6a2      	b.n	8005b44 <HAL_GPIO_Init+0x10>
  } 
}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	46c0      	nop			; (mov r8, r8)
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b006      	add	sp, #24
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	48000400 	.word	0x48000400
 8005e14:	48000800 	.word	0x48000800
 8005e18:	48000c00 	.word	0x48000c00
 8005e1c:	48001000 	.word	0x48001000
 8005e20:	40010400 	.word	0x40010400

08005e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	000a      	movs	r2, r1
 8005e2e:	1cbb      	adds	r3, r7, #2
 8005e30:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	1cba      	adds	r2, r7, #2
 8005e38:	8812      	ldrh	r2, [r2, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005e3e:	230f      	movs	r3, #15
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	e003      	b.n	8005e50 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e48:	230f      	movs	r3, #15
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005e50:	230f      	movs	r3, #15
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	781b      	ldrb	r3, [r3, #0]
  }
 8005e56:	0018      	movs	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	b004      	add	sp, #16
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	0008      	movs	r0, r1
 8005e68:	0011      	movs	r1, r2
 8005e6a:	1cbb      	adds	r3, r7, #2
 8005e6c:	1c02      	adds	r2, r0, #0
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	1c7b      	adds	r3, r7, #1
 8005e72:	1c0a      	adds	r2, r1, #0
 8005e74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e76:	1c7b      	adds	r3, r7, #1
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e7e:	1cbb      	adds	r3, r7, #2
 8005e80:	881a      	ldrh	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e86:	e003      	b.n	8005e90 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e88:	1cbb      	adds	r3, r7, #2
 8005e8a:	881a      	ldrh	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e90:	46c0      	nop			; (mov r8, r8)
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b002      	add	sp, #8
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e082      	b.n	8005fb0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2241      	movs	r2, #65	; 0x41
 8005eae:	5c9b      	ldrb	r3, [r3, r2]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d107      	bne.n	8005ec6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2240      	movs	r2, #64	; 0x40
 8005eba:	2100      	movs	r1, #0
 8005ebc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7fe fc1b 	bl	80046fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2241      	movs	r2, #65	; 0x41
 8005eca:	2124      	movs	r1, #36	; 0x24
 8005ecc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2101      	movs	r1, #1
 8005eda:	438a      	bics	r2, r1
 8005edc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4934      	ldr	r1, [pc, #208]	; (8005fb8 <HAL_I2C_Init+0x120>)
 8005ee8:	400a      	ands	r2, r1
 8005eea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4931      	ldr	r1, [pc, #196]	; (8005fbc <HAL_I2C_Init+0x124>)
 8005ef8:	400a      	ands	r2, r1
 8005efa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d108      	bne.n	8005f16 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2180      	movs	r1, #128	; 0x80
 8005f0e:	0209      	lsls	r1, r1, #8
 8005f10:	430a      	orrs	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	e007      	b.n	8005f26 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2184      	movs	r1, #132	; 0x84
 8005f20:	0209      	lsls	r1, r1, #8
 8005f22:	430a      	orrs	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d104      	bne.n	8005f38 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	0112      	lsls	r2, r2, #4
 8005f36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	491f      	ldr	r1, [pc, #124]	; (8005fc0 <HAL_I2C_Init+0x128>)
 8005f44:	430a      	orrs	r2, r1
 8005f46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	491a      	ldr	r1, [pc, #104]	; (8005fbc <HAL_I2C_Init+0x124>)
 8005f54:	400a      	ands	r2, r1
 8005f56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	431a      	orrs	r2, r3
 8005f62:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69d9      	ldr	r1, [r3, #28]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1a      	ldr	r2, [r3, #32]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2241      	movs	r2, #65	; 0x41
 8005f9c:	2120      	movs	r1, #32
 8005f9e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2242      	movs	r2, #66	; 0x42
 8005faa:	2100      	movs	r1, #0
 8005fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b002      	add	sp, #8
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	f0ffffff 	.word	0xf0ffffff
 8005fbc:	ffff7fff 	.word	0xffff7fff
 8005fc0:	02008000 	.word	0x02008000

08005fc4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b089      	sub	sp, #36	; 0x24
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	0008      	movs	r0, r1
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	0019      	movs	r1, r3
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	1c02      	adds	r2, r0, #0
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	2308      	movs	r3, #8
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	1c0a      	adds	r2, r1, #0
 8005fe0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2241      	movs	r2, #65	; 0x41
 8005fe6:	5c9b      	ldrb	r3, [r3, r2]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d000      	beq.n	8005ff0 <HAL_I2C_Master_Transmit+0x2c>
 8005fee:	e0e7      	b.n	80061c0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2240      	movs	r2, #64	; 0x40
 8005ff4:	5c9b      	ldrb	r3, [r3, r2]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2C_Master_Transmit+0x3a>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e0e1      	b.n	80061c2 <HAL_I2C_Master_Transmit+0x1fe>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2240      	movs	r2, #64	; 0x40
 8006002:	2101      	movs	r1, #1
 8006004:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006006:	f7ff f8ef 	bl	80051e8 <HAL_GetTick>
 800600a:	0003      	movs	r3, r0
 800600c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	0219      	lsls	r1, r3, #8
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	2319      	movs	r3, #25
 800601a:	2201      	movs	r2, #1
 800601c:	f000 fa1a 	bl	8006454 <I2C_WaitOnFlagUntilTimeout>
 8006020:	1e03      	subs	r3, r0, #0
 8006022:	d001      	beq.n	8006028 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0cc      	b.n	80061c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2241      	movs	r2, #65	; 0x41
 800602c:	2121      	movs	r1, #33	; 0x21
 800602e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2242      	movs	r2, #66	; 0x42
 8006034:	2110      	movs	r1, #16
 8006036:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2208      	movs	r2, #8
 8006048:	18ba      	adds	r2, r7, r2
 800604a:	8812      	ldrh	r2, [r2, #0]
 800604c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	2bff      	cmp	r3, #255	; 0xff
 800605c:	d911      	bls.n	8006082 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	22ff      	movs	r2, #255	; 0xff
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006068:	b2da      	uxtb	r2, r3
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	045c      	lsls	r4, r3, #17
 800606e:	230a      	movs	r3, #10
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	8819      	ldrh	r1, [r3, #0]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	4b55      	ldr	r3, [pc, #340]	; (80061cc <HAL_I2C_Master_Transmit+0x208>)
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	0023      	movs	r3, r4
 800607c:	f000 fc44 	bl	8006908 <I2C_TransferConfig>
 8006080:	e075      	b.n	800616e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	b2da      	uxtb	r2, r3
 8006092:	2380      	movs	r3, #128	; 0x80
 8006094:	049c      	lsls	r4, r3, #18
 8006096:	230a      	movs	r3, #10
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	8819      	ldrh	r1, [r3, #0]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	4b4b      	ldr	r3, [pc, #300]	; (80061cc <HAL_I2C_Master_Transmit+0x208>)
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	0023      	movs	r3, r4
 80060a4:	f000 fc30 	bl	8006908 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80060a8:	e061      	b.n	800616e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 fa1d 	bl	80064f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80060b6:	1e03      	subs	r3, r0, #0
 80060b8:	d001      	beq.n	80060be <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e081      	b.n	80061c2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	781a      	ldrb	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d03a      	beq.n	800616e <HAL_I2C_Master_Transmit+0x1aa>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d136      	bne.n	800616e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	0013      	movs	r3, r2
 800610a:	2200      	movs	r2, #0
 800610c:	2180      	movs	r1, #128	; 0x80
 800610e:	f000 f9a1 	bl	8006454 <I2C_WaitOnFlagUntilTimeout>
 8006112:	1e03      	subs	r3, r0, #0
 8006114:	d001      	beq.n	800611a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e053      	b.n	80061c2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	2bff      	cmp	r3, #255	; 0xff
 8006122:	d911      	bls.n	8006148 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612e:	b2da      	uxtb	r2, r3
 8006130:	2380      	movs	r3, #128	; 0x80
 8006132:	045c      	lsls	r4, r3, #17
 8006134:	230a      	movs	r3, #10
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	8819      	ldrh	r1, [r3, #0]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	2300      	movs	r3, #0
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	0023      	movs	r3, r4
 8006142:	f000 fbe1 	bl	8006908 <I2C_TransferConfig>
 8006146:	e012      	b.n	800616e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	b2da      	uxtb	r2, r3
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	049c      	lsls	r4, r3, #18
 800615c:	230a      	movs	r3, #10
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	8819      	ldrh	r1, [r3, #0]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	2300      	movs	r3, #0
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	0023      	movs	r3, r4
 800616a:	f000 fbcd 	bl	8006908 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d198      	bne.n	80060aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	0018      	movs	r0, r3
 8006180:	f000 f9fc 	bl	800657c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006184:	1e03      	subs	r3, r0, #0
 8006186:	d001      	beq.n	800618c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e01a      	b.n	80061c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2220      	movs	r2, #32
 8006192:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	490c      	ldr	r1, [pc, #48]	; (80061d0 <HAL_I2C_Master_Transmit+0x20c>)
 80061a0:	400a      	ands	r2, r1
 80061a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2241      	movs	r2, #65	; 0x41
 80061a8:	2120      	movs	r1, #32
 80061aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2242      	movs	r2, #66	; 0x42
 80061b0:	2100      	movs	r1, #0
 80061b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2240      	movs	r2, #64	; 0x40
 80061b8:	2100      	movs	r1, #0
 80061ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e000      	b.n	80061c2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80061c0:	2302      	movs	r3, #2
  }
}
 80061c2:	0018      	movs	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b007      	add	sp, #28
 80061c8:	bd90      	pop	{r4, r7, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	80002000 	.word	0x80002000
 80061d0:	fe00e800 	.word	0xfe00e800

080061d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b089      	sub	sp, #36	; 0x24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	0008      	movs	r0, r1
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	0019      	movs	r1, r3
 80061e2:	230a      	movs	r3, #10
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	1c02      	adds	r2, r0, #0
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	2308      	movs	r3, #8
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	1c0a      	adds	r2, r1, #0
 80061f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2241      	movs	r2, #65	; 0x41
 80061f6:	5c9b      	ldrb	r3, [r3, r2]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d000      	beq.n	8006200 <HAL_I2C_Master_Receive+0x2c>
 80061fe:	e0e8      	b.n	80063d2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2240      	movs	r2, #64	; 0x40
 8006204:	5c9b      	ldrb	r3, [r3, r2]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_I2C_Master_Receive+0x3a>
 800620a:	2302      	movs	r3, #2
 800620c:	e0e2      	b.n	80063d4 <HAL_I2C_Master_Receive+0x200>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2240      	movs	r2, #64	; 0x40
 8006212:	2101      	movs	r1, #1
 8006214:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006216:	f7fe ffe7 	bl	80051e8 <HAL_GetTick>
 800621a:	0003      	movs	r3, r0
 800621c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	0219      	lsls	r1, r3, #8
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2319      	movs	r3, #25
 800622a:	2201      	movs	r2, #1
 800622c:	f000 f912 	bl	8006454 <I2C_WaitOnFlagUntilTimeout>
 8006230:	1e03      	subs	r3, r0, #0
 8006232:	d001      	beq.n	8006238 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0cd      	b.n	80063d4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2241      	movs	r2, #65	; 0x41
 800623c:	2122      	movs	r1, #34	; 0x22
 800623e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2242      	movs	r2, #66	; 0x42
 8006244:	2110      	movs	r1, #16
 8006246:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2208      	movs	r2, #8
 8006258:	18ba      	adds	r2, r7, r2
 800625a:	8812      	ldrh	r2, [r2, #0]
 800625c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2bff      	cmp	r3, #255	; 0xff
 800626c:	d911      	bls.n	8006292 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006278:	b2da      	uxtb	r2, r3
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	045c      	lsls	r4, r3, #17
 800627e:	230a      	movs	r3, #10
 8006280:	18fb      	adds	r3, r7, r3
 8006282:	8819      	ldrh	r1, [r3, #0]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	4b55      	ldr	r3, [pc, #340]	; (80063dc <HAL_I2C_Master_Receive+0x208>)
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	0023      	movs	r3, r4
 800628c:	f000 fb3c 	bl	8006908 <I2C_TransferConfig>
 8006290:	e076      	b.n	8006380 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	049c      	lsls	r4, r3, #18
 80062a6:	230a      	movs	r3, #10
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	8819      	ldrh	r1, [r3, #0]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	4b4b      	ldr	r3, [pc, #300]	; (80063dc <HAL_I2C_Master_Receive+0x208>)
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	0023      	movs	r3, r4
 80062b4:	f000 fb28 	bl	8006908 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80062b8:	e062      	b.n	8006380 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	0018      	movs	r0, r3
 80062c2:	f000 f99f 	bl	8006604 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062c6:	1e03      	subs	r3, r0, #0
 80062c8:	d001      	beq.n	80062ce <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e082      	b.n	80063d4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03a      	beq.n	8006380 <HAL_I2C_Master_Receive+0x1ac>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630e:	2b00      	cmp	r3, #0
 8006310:	d136      	bne.n	8006380 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	0013      	movs	r3, r2
 800631c:	2200      	movs	r2, #0
 800631e:	2180      	movs	r1, #128	; 0x80
 8006320:	f000 f898 	bl	8006454 <I2C_WaitOnFlagUntilTimeout>
 8006324:	1e03      	subs	r3, r0, #0
 8006326:	d001      	beq.n	800632c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e053      	b.n	80063d4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	2bff      	cmp	r3, #255	; 0xff
 8006334:	d911      	bls.n	800635a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	22ff      	movs	r2, #255	; 0xff
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006340:	b2da      	uxtb	r2, r3
 8006342:	2380      	movs	r3, #128	; 0x80
 8006344:	045c      	lsls	r4, r3, #17
 8006346:	230a      	movs	r3, #10
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	8819      	ldrh	r1, [r3, #0]
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	2300      	movs	r3, #0
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	0023      	movs	r3, r4
 8006354:	f000 fad8 	bl	8006908 <I2C_TransferConfig>
 8006358:	e012      	b.n	8006380 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006368:	b2da      	uxtb	r2, r3
 800636a:	2380      	movs	r3, #128	; 0x80
 800636c:	049c      	lsls	r4, r3, #18
 800636e:	230a      	movs	r3, #10
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	8819      	ldrh	r1, [r3, #0]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	2300      	movs	r3, #0
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	0023      	movs	r3, r4
 800637c:	f000 fac4 	bl	8006908 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d197      	bne.n	80062ba <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	0018      	movs	r0, r3
 8006392:	f000 f8f3 	bl	800657c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006396:	1e03      	subs	r3, r0, #0
 8006398:	d001      	beq.n	800639e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01a      	b.n	80063d4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2220      	movs	r2, #32
 80063a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	490b      	ldr	r1, [pc, #44]	; (80063e0 <HAL_I2C_Master_Receive+0x20c>)
 80063b2:	400a      	ands	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2241      	movs	r2, #65	; 0x41
 80063ba:	2120      	movs	r1, #32
 80063bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2242      	movs	r2, #66	; 0x42
 80063c2:	2100      	movs	r1, #0
 80063c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2240      	movs	r2, #64	; 0x40
 80063ca:	2100      	movs	r1, #0
 80063cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e000      	b.n	80063d4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
  }
}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b007      	add	sp, #28
 80063da:	bd90      	pop	{r4, r7, pc}
 80063dc:	80002400 	.word	0x80002400
 80063e0:	fe00e800 	.word	0xfe00e800

080063e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2241      	movs	r2, #65	; 0x41
 80063f0:	5c9b      	ldrb	r3, [r3, r2]
 80063f2:	b2db      	uxtb	r3, r3
}
 80063f4:	0018      	movs	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b002      	add	sp, #8
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006408:	0018      	movs	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	b002      	add	sp, #8
 800640e:	bd80      	pop	{r7, pc}

08006410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2202      	movs	r2, #2
 8006420:	4013      	ands	r3, r2
 8006422:	2b02      	cmp	r3, #2
 8006424:	d103      	bne.n	800642e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2201      	movs	r2, #1
 8006436:	4013      	ands	r3, r2
 8006438:	2b01      	cmp	r3, #1
 800643a:	d007      	beq.n	800644c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2101      	movs	r1, #1
 8006448:	430a      	orrs	r2, r1
 800644a:	619a      	str	r2, [r3, #24]
  }
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b002      	add	sp, #8
 8006452:	bd80      	pop	{r7, pc}

08006454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	1dfb      	adds	r3, r7, #7
 8006462:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006464:	e030      	b.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	d02d      	beq.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646c:	f7fe febc 	bl	80051e8 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d302      	bcc.n	8006482 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d122      	bne.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	425a      	negs	r2, r3
 8006492:	4153      	adcs	r3, r2
 8006494:	b2db      	uxtb	r3, r3
 8006496:	001a      	movs	r2, r3
 8006498:	1dfb      	adds	r3, r7, #7
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d113      	bne.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a4:	2220      	movs	r2, #32
 80064a6:	431a      	orrs	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2241      	movs	r2, #65	; 0x41
 80064b0:	2120      	movs	r1, #32
 80064b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2242      	movs	r2, #66	; 0x42
 80064b8:	2100      	movs	r1, #0
 80064ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2240      	movs	r2, #64	; 0x40
 80064c0:	2100      	movs	r1, #0
 80064c2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e00f      	b.n	80064e8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4013      	ands	r3, r2
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	425a      	negs	r2, r3
 80064d8:	4153      	adcs	r3, r2
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	001a      	movs	r2, r3
 80064de:	1dfb      	adds	r3, r7, #7
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d0bf      	beq.n	8006466 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	0018      	movs	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b004      	add	sp, #16
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064fc:	e032      	b.n	8006564 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	0018      	movs	r0, r3
 8006506:	f000 f8ff 	bl	8006708 <I2C_IsErrorOccurred>
 800650a:	1e03      	subs	r3, r0, #0
 800650c:	d001      	beq.n	8006512 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e030      	b.n	8006574 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	3301      	adds	r3, #1
 8006516:	d025      	beq.n	8006564 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006518:	f7fe fe66 	bl	80051e8 <HAL_GetTick>
 800651c:	0002      	movs	r2, r0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	429a      	cmp	r2, r3
 8006526:	d302      	bcc.n	800652e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d11a      	bne.n	8006564 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2202      	movs	r2, #2
 8006536:	4013      	ands	r3, r2
 8006538:	2b02      	cmp	r3, #2
 800653a:	d013      	beq.n	8006564 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	2220      	movs	r2, #32
 8006542:	431a      	orrs	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2241      	movs	r2, #65	; 0x41
 800654c:	2120      	movs	r1, #32
 800654e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2242      	movs	r2, #66	; 0x42
 8006554:	2100      	movs	r1, #0
 8006556:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	2100      	movs	r1, #0
 800655e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e007      	b.n	8006574 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2202      	movs	r2, #2
 800656c:	4013      	ands	r3, r2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d1c5      	bne.n	80064fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	0018      	movs	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	b004      	add	sp, #16
 800657a:	bd80      	pop	{r7, pc}

0800657c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006588:	e02f      	b.n	80065ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	0018      	movs	r0, r3
 8006592:	f000 f8b9 	bl	8006708 <I2C_IsErrorOccurred>
 8006596:	1e03      	subs	r3, r0, #0
 8006598:	d001      	beq.n	800659e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e02d      	b.n	80065fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659e:	f7fe fe23 	bl	80051e8 <HAL_GetTick>
 80065a2:	0002      	movs	r2, r0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d302      	bcc.n	80065b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d11a      	bne.n	80065ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2220      	movs	r2, #32
 80065bc:	4013      	ands	r3, r2
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d013      	beq.n	80065ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	2220      	movs	r2, #32
 80065c8:	431a      	orrs	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2241      	movs	r2, #65	; 0x41
 80065d2:	2120      	movs	r1, #32
 80065d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2242      	movs	r2, #66	; 0x42
 80065da:	2100      	movs	r1, #0
 80065dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2240      	movs	r2, #64	; 0x40
 80065e2:	2100      	movs	r1, #0
 80065e4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e007      	b.n	80065fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2220      	movs	r2, #32
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d1c8      	bne.n	800658a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	0018      	movs	r0, r3
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b004      	add	sp, #16
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006610:	e06b      	b.n	80066ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	0018      	movs	r0, r3
 800661a:	f000 f875 	bl	8006708 <I2C_IsErrorOccurred>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d001      	beq.n	8006626 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e069      	b.n	80066fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2220      	movs	r2, #32
 800662e:	4013      	ands	r3, r2
 8006630:	2b20      	cmp	r3, #32
 8006632:	d138      	bne.n	80066a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2204      	movs	r2, #4
 800663c:	4013      	ands	r3, r2
 800663e:	2b04      	cmp	r3, #4
 8006640:	d105      	bne.n	800664e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e055      	b.n	80066fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2210      	movs	r2, #16
 8006656:	4013      	ands	r3, r2
 8006658:	2b10      	cmp	r3, #16
 800665a:	d107      	bne.n	800666c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2210      	movs	r2, #16
 8006662:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2204      	movs	r2, #4
 8006668:	645a      	str	r2, [r3, #68]	; 0x44
 800666a:	e002      	b.n	8006672 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2220      	movs	r2, #32
 8006678:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	491f      	ldr	r1, [pc, #124]	; (8006704 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006686:	400a      	ands	r2, r1
 8006688:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2241      	movs	r2, #65	; 0x41
 800668e:	2120      	movs	r1, #32
 8006690:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2242      	movs	r2, #66	; 0x42
 8006696:	2100      	movs	r1, #0
 8006698:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2240      	movs	r2, #64	; 0x40
 800669e:	2100      	movs	r1, #0
 80066a0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e029      	b.n	80066fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a6:	f7fe fd9f 	bl	80051e8 <HAL_GetTick>
 80066aa:	0002      	movs	r2, r0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d116      	bne.n	80066ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	2204      	movs	r2, #4
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d00f      	beq.n	80066ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	2220      	movs	r2, #32
 80066d0:	431a      	orrs	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2241      	movs	r2, #65	; 0x41
 80066da:	2120      	movs	r1, #32
 80066dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2240      	movs	r2, #64	; 0x40
 80066e2:	2100      	movs	r1, #0
 80066e4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e007      	b.n	80066fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2204      	movs	r2, #4
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d18c      	bne.n	8006612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	0018      	movs	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b004      	add	sp, #16
 8006700:	bd80      	pop	{r7, pc}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	fe00e800 	.word	0xfe00e800

08006708 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b08b      	sub	sp, #44	; 0x2c
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006714:	2327      	movs	r3, #39	; 0x27
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	2200      	movs	r2, #0
 800671a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2210      	movs	r2, #16
 8006730:	4013      	ands	r3, r2
 8006732:	d100      	bne.n	8006736 <I2C_IsErrorOccurred+0x2e>
 8006734:	e082      	b.n	800683c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2210      	movs	r2, #16
 800673c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800673e:	e060      	b.n	8006802 <I2C_IsErrorOccurred+0xfa>
 8006740:	2427      	movs	r4, #39	; 0x27
 8006742:	193b      	adds	r3, r7, r4
 8006744:	193a      	adds	r2, r7, r4
 8006746:	7812      	ldrb	r2, [r2, #0]
 8006748:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	3301      	adds	r3, #1
 800674e:	d058      	beq.n	8006802 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006750:	f7fe fd4a 	bl	80051e8 <HAL_GetTick>
 8006754:	0002      	movs	r2, r0
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	d306      	bcc.n	800676e <I2C_IsErrorOccurred+0x66>
 8006760:	193b      	adds	r3, r7, r4
 8006762:	193a      	adds	r2, r7, r4
 8006764:	7812      	ldrb	r2, [r2, #0]
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d149      	bne.n	8006802 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	2380      	movs	r3, #128	; 0x80
 8006776:	01db      	lsls	r3, r3, #7
 8006778:	4013      	ands	r3, r2
 800677a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800677c:	2013      	movs	r0, #19
 800677e:	183b      	adds	r3, r7, r0
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	2142      	movs	r1, #66	; 0x42
 8006784:	5c52      	ldrb	r2, [r2, r1]
 8006786:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	401a      	ands	r2, r3
 8006794:	2380      	movs	r3, #128	; 0x80
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	429a      	cmp	r2, r3
 800679a:	d126      	bne.n	80067ea <I2C_IsErrorOccurred+0xe2>
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	01db      	lsls	r3, r3, #7
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d021      	beq.n	80067ea <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80067a6:	183b      	adds	r3, r7, r0
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d01d      	beq.n	80067ea <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	01c9      	lsls	r1, r1, #7
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80067c0:	f7fe fd12 	bl	80051e8 <HAL_GetTick>
 80067c4:	0003      	movs	r3, r0
 80067c6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067c8:	e00f      	b.n	80067ea <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80067ca:	f7fe fd0d 	bl	80051e8 <HAL_GetTick>
 80067ce:	0002      	movs	r2, r0
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b19      	cmp	r3, #25
 80067d6:	d908      	bls.n	80067ea <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	2220      	movs	r2, #32
 80067dc:	4313      	orrs	r3, r2
 80067de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80067e0:	2327      	movs	r3, #39	; 0x27
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]

              break;
 80067e8:	e00b      	b.n	8006802 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	2220      	movs	r2, #32
 80067f2:	4013      	ands	r3, r2
 80067f4:	2127      	movs	r1, #39	; 0x27
 80067f6:	187a      	adds	r2, r7, r1
 80067f8:	1879      	adds	r1, r7, r1
 80067fa:	7809      	ldrb	r1, [r1, #0]
 80067fc:	7011      	strb	r1, [r2, #0]
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d1e3      	bne.n	80067ca <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	2220      	movs	r2, #32
 800680a:	4013      	ands	r3, r2
 800680c:	2b20      	cmp	r3, #32
 800680e:	d004      	beq.n	800681a <I2C_IsErrorOccurred+0x112>
 8006810:	2327      	movs	r3, #39	; 0x27
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d092      	beq.n	8006740 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800681a:	2327      	movs	r3, #39	; 0x27
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d103      	bne.n	800682c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2220      	movs	r2, #32
 800682a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	2204      	movs	r2, #4
 8006830:	4313      	orrs	r3, r2
 8006832:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006834:	2327      	movs	r3, #39	; 0x27
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	2380      	movs	r3, #128	; 0x80
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4013      	ands	r3, r2
 800684c:	d00c      	beq.n	8006868 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	2201      	movs	r2, #1
 8006852:	4313      	orrs	r3, r2
 8006854:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2280      	movs	r2, #128	; 0x80
 800685c:	0052      	lsls	r2, r2, #1
 800685e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006860:	2327      	movs	r3, #39	; 0x27
 8006862:	18fb      	adds	r3, r7, r3
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	2380      	movs	r3, #128	; 0x80
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	4013      	ands	r3, r2
 8006870:	d00c      	beq.n	800688c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	2208      	movs	r2, #8
 8006876:	4313      	orrs	r3, r2
 8006878:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2280      	movs	r2, #128	; 0x80
 8006880:	00d2      	lsls	r2, r2, #3
 8006882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006884:	2327      	movs	r3, #39	; 0x27
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	2201      	movs	r2, #1
 800688a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4013      	ands	r3, r2
 8006894:	d00c      	beq.n	80068b0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	2202      	movs	r2, #2
 800689a:	4313      	orrs	r3, r2
 800689c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2280      	movs	r2, #128	; 0x80
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068a8:	2327      	movs	r3, #39	; 0x27
 80068aa:	18fb      	adds	r3, r7, r3
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80068b0:	2327      	movs	r3, #39	; 0x27
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01d      	beq.n	80068f6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	0018      	movs	r0, r3
 80068be:	f7ff fda7 	bl	8006410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	490d      	ldr	r1, [pc, #52]	; (8006904 <I2C_IsErrorOccurred+0x1fc>)
 80068ce:	400a      	ands	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	431a      	orrs	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2241      	movs	r2, #65	; 0x41
 80068e2:	2120      	movs	r1, #32
 80068e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2242      	movs	r2, #66	; 0x42
 80068ea:	2100      	movs	r1, #0
 80068ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2240      	movs	r2, #64	; 0x40
 80068f2:	2100      	movs	r1, #0
 80068f4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80068f6:	2327      	movs	r3, #39	; 0x27
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	781b      	ldrb	r3, [r3, #0]
}
 80068fc:	0018      	movs	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	b00b      	add	sp, #44	; 0x2c
 8006902:	bd90      	pop	{r4, r7, pc}
 8006904:	fe00e800 	.word	0xfe00e800

08006908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	0008      	movs	r0, r1
 8006912:	0011      	movs	r1, r2
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	240a      	movs	r4, #10
 8006918:	193b      	adds	r3, r7, r4
 800691a:	1c02      	adds	r2, r0, #0
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	2009      	movs	r0, #9
 8006920:	183b      	adds	r3, r7, r0
 8006922:	1c0a      	adds	r2, r1, #0
 8006924:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006926:	193b      	adds	r3, r7, r4
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	059b      	lsls	r3, r3, #22
 800692c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800692e:	183b      	adds	r3, r7, r0
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	0419      	lsls	r1, r3, #16
 8006934:	23ff      	movs	r3, #255	; 0xff
 8006936:	041b      	lsls	r3, r3, #16
 8006938:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800693a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	4313      	orrs	r3, r2
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	085b      	lsrs	r3, r3, #1
 8006948:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006952:	0d51      	lsrs	r1, r2, #21
 8006954:	2280      	movs	r2, #128	; 0x80
 8006956:	00d2      	lsls	r2, r2, #3
 8006958:	400a      	ands	r2, r1
 800695a:	4907      	ldr	r1, [pc, #28]	; (8006978 <I2C_TransferConfig+0x70>)
 800695c:	430a      	orrs	r2, r1
 800695e:	43d2      	mvns	r2, r2
 8006960:	401a      	ands	r2, r3
 8006962:	0011      	movs	r1, r2
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b007      	add	sp, #28
 8006974:	bd90      	pop	{r4, r7, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	03ff63ff 	.word	0x03ff63ff

0800697c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2241      	movs	r2, #65	; 0x41
 800698a:	5c9b      	ldrb	r3, [r3, r2]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b20      	cmp	r3, #32
 8006990:	d138      	bne.n	8006a04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2240      	movs	r2, #64	; 0x40
 8006996:	5c9b      	ldrb	r3, [r3, r2]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800699c:	2302      	movs	r3, #2
 800699e:	e032      	b.n	8006a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2240      	movs	r2, #64	; 0x40
 80069a4:	2101      	movs	r1, #1
 80069a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2241      	movs	r2, #65	; 0x41
 80069ac:	2124      	movs	r1, #36	; 0x24
 80069ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2101      	movs	r1, #1
 80069bc:	438a      	bics	r2, r1
 80069be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4911      	ldr	r1, [pc, #68]	; (8006a10 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80069cc:	400a      	ands	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6819      	ldr	r1, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2101      	movs	r1, #1
 80069ec:	430a      	orrs	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2241      	movs	r2, #65	; 0x41
 80069f4:	2120      	movs	r1, #32
 80069f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	2100      	movs	r1, #0
 80069fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e000      	b.n	8006a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a04:	2302      	movs	r3, #2
  }
}
 8006a06:	0018      	movs	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b002      	add	sp, #8
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	ffffefff 	.word	0xffffefff

08006a14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2241      	movs	r2, #65	; 0x41
 8006a22:	5c9b      	ldrb	r3, [r3, r2]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d139      	bne.n	8006a9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2240      	movs	r2, #64	; 0x40
 8006a2e:	5c9b      	ldrb	r3, [r3, r2]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a34:	2302      	movs	r3, #2
 8006a36:	e033      	b.n	8006aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2240      	movs	r2, #64	; 0x40
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2241      	movs	r2, #65	; 0x41
 8006a44:	2124      	movs	r1, #36	; 0x24
 8006a46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2101      	movs	r1, #1
 8006a54:	438a      	bics	r2, r1
 8006a56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a11      	ldr	r2, [pc, #68]	; (8006aa8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2101      	movs	r1, #1
 8006a86:	430a      	orrs	r2, r1
 8006a88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2241      	movs	r2, #65	; 0x41
 8006a8e:	2120      	movs	r1, #32
 8006a90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2240      	movs	r2, #64	; 0x40
 8006a96:	2100      	movs	r1, #0
 8006a98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e000      	b.n	8006aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
  }
}
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b004      	add	sp, #16
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	fffff0ff 	.word	0xfffff0ff

08006aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f000 fb76 	bl	80071ac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d100      	bne.n	8006acc <HAL_RCC_OscConfig+0x20>
 8006aca:	e08e      	b.n	8006bea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006acc:	4bc5      	ldr	r3, [pc, #788]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	220c      	movs	r2, #12
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d00e      	beq.n	8006af6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ad8:	4bc2      	ldr	r3, [pc, #776]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	220c      	movs	r2, #12
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d117      	bne.n	8006b14 <HAL_RCC_OscConfig+0x68>
 8006ae4:	4bbf      	ldr	r3, [pc, #764]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	23c0      	movs	r3, #192	; 0xc0
 8006aea:	025b      	lsls	r3, r3, #9
 8006aec:	401a      	ands	r2, r3
 8006aee:	2380      	movs	r3, #128	; 0x80
 8006af0:	025b      	lsls	r3, r3, #9
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d10e      	bne.n	8006b14 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af6:	4bbb      	ldr	r3, [pc, #748]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	2380      	movs	r3, #128	; 0x80
 8006afc:	029b      	lsls	r3, r3, #10
 8006afe:	4013      	ands	r3, r2
 8006b00:	d100      	bne.n	8006b04 <HAL_RCC_OscConfig+0x58>
 8006b02:	e071      	b.n	8006be8 <HAL_RCC_OscConfig+0x13c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d000      	beq.n	8006b0e <HAL_RCC_OscConfig+0x62>
 8006b0c:	e06c      	b.n	8006be8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f000 fb4c 	bl	80071ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCC_OscConfig+0x80>
 8006b1c:	4bb1      	ldr	r3, [pc, #708]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4bb0      	ldr	r3, [pc, #704]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	0249      	lsls	r1, r1, #9
 8006b26:	430a      	orrs	r2, r1
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e02f      	b.n	8006b8c <HAL_RCC_OscConfig+0xe0>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10c      	bne.n	8006b4e <HAL_RCC_OscConfig+0xa2>
 8006b34:	4bab      	ldr	r3, [pc, #684]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	4baa      	ldr	r3, [pc, #680]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b3a:	49ab      	ldr	r1, [pc, #684]	; (8006de8 <HAL_RCC_OscConfig+0x33c>)
 8006b3c:	400a      	ands	r2, r1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	4ba8      	ldr	r3, [pc, #672]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	4ba7      	ldr	r3, [pc, #668]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b46:	49a9      	ldr	r1, [pc, #676]	; (8006dec <HAL_RCC_OscConfig+0x340>)
 8006b48:	400a      	ands	r2, r1
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e01e      	b.n	8006b8c <HAL_RCC_OscConfig+0xe0>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b05      	cmp	r3, #5
 8006b54:	d10e      	bne.n	8006b74 <HAL_RCC_OscConfig+0xc8>
 8006b56:	4ba3      	ldr	r3, [pc, #652]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4ba2      	ldr	r3, [pc, #648]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b5c:	2180      	movs	r1, #128	; 0x80
 8006b5e:	02c9      	lsls	r1, r1, #11
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	4b9f      	ldr	r3, [pc, #636]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	4b9e      	ldr	r3, [pc, #632]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b6a:	2180      	movs	r1, #128	; 0x80
 8006b6c:	0249      	lsls	r1, r1, #9
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e00b      	b.n	8006b8c <HAL_RCC_OscConfig+0xe0>
 8006b74:	4b9b      	ldr	r3, [pc, #620]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	4b9a      	ldr	r3, [pc, #616]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b7a:	499b      	ldr	r1, [pc, #620]	; (8006de8 <HAL_RCC_OscConfig+0x33c>)
 8006b7c:	400a      	ands	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	4b98      	ldr	r3, [pc, #608]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	4b97      	ldr	r3, [pc, #604]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006b86:	4999      	ldr	r1, [pc, #612]	; (8006dec <HAL_RCC_OscConfig+0x340>)
 8006b88:	400a      	ands	r2, r1
 8006b8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d014      	beq.n	8006bbe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b94:	f7fe fb28 	bl	80051e8 <HAL_GetTick>
 8006b98:	0003      	movs	r3, r0
 8006b9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b9e:	f7fe fb23 	bl	80051e8 <HAL_GetTick>
 8006ba2:	0002      	movs	r2, r0
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b64      	cmp	r3, #100	; 0x64
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e2fd      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb0:	4b8c      	ldr	r3, [pc, #560]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	2380      	movs	r3, #128	; 0x80
 8006bb6:	029b      	lsls	r3, r3, #10
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCC_OscConfig+0xf2>
 8006bbc:	e015      	b.n	8006bea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbe:	f7fe fb13 	bl	80051e8 <HAL_GetTick>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bc8:	f7fe fb0e 	bl	80051e8 <HAL_GetTick>
 8006bcc:	0002      	movs	r2, r0
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b64      	cmp	r3, #100	; 0x64
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e2e8      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bda:	4b82      	ldr	r3, [pc, #520]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	2380      	movs	r3, #128	; 0x80
 8006be0:	029b      	lsls	r3, r3, #10
 8006be2:	4013      	ands	r3, r2
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x11c>
 8006be6:	e000      	b.n	8006bea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d100      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x14a>
 8006bf4:	e06c      	b.n	8006cd0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006bf6:	4b7b      	ldr	r3, [pc, #492]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	220c      	movs	r2, #12
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d00e      	beq.n	8006c1e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006c00:	4b78      	ldr	r3, [pc, #480]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	220c      	movs	r2, #12
 8006c06:	4013      	ands	r3, r2
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d11f      	bne.n	8006c4c <HAL_RCC_OscConfig+0x1a0>
 8006c0c:	4b75      	ldr	r3, [pc, #468]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	23c0      	movs	r3, #192	; 0xc0
 8006c12:	025b      	lsls	r3, r3, #9
 8006c14:	401a      	ands	r2, r3
 8006c16:	2380      	movs	r3, #128	; 0x80
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d116      	bne.n	8006c4c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1e:	4b71      	ldr	r3, [pc, #452]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2202      	movs	r2, #2
 8006c24:	4013      	ands	r3, r2
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_OscConfig+0x188>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e2bb      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c34:	4b6b      	ldr	r3, [pc, #428]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	22f8      	movs	r2, #248	; 0xf8
 8006c3a:	4393      	bics	r3, r2
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	00da      	lsls	r2, r3, #3
 8006c44:	4b67      	ldr	r3, [pc, #412]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c46:	430a      	orrs	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c4a:	e041      	b.n	8006cd0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d024      	beq.n	8006c9e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c54:	4b63      	ldr	r3, [pc, #396]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4b62      	ldr	r3, [pc, #392]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c60:	f7fe fac2 	bl	80051e8 <HAL_GetTick>
 8006c64:	0003      	movs	r3, r0
 8006c66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c6a:	f7fe fabd 	bl	80051e8 <HAL_GetTick>
 8006c6e:	0002      	movs	r2, r0
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e297      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7c:	4b59      	ldr	r3, [pc, #356]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2202      	movs	r2, #2
 8006c82:	4013      	ands	r3, r2
 8006c84:	d0f1      	beq.n	8006c6a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c86:	4b57      	ldr	r3, [pc, #348]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	22f8      	movs	r2, #248	; 0xf8
 8006c8c:	4393      	bics	r3, r2
 8006c8e:	0019      	movs	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	00da      	lsls	r2, r3, #3
 8006c96:	4b53      	ldr	r3, [pc, #332]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e018      	b.n	8006cd0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c9e:	4b51      	ldr	r3, [pc, #324]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	438a      	bics	r2, r1
 8006ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006caa:	f7fe fa9d 	bl	80051e8 <HAL_GetTick>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cb4:	f7fe fa98 	bl	80051e8 <HAL_GetTick>
 8006cb8:	0002      	movs	r2, r0
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e272      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc6:	4b47      	ldr	r3, [pc, #284]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d1f1      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d036      	beq.n	8006d48 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d019      	beq.n	8006d16 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ce2:	4b40      	ldr	r3, [pc, #256]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ce6:	4b3f      	ldr	r3, [pc, #252]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006ce8:	2101      	movs	r1, #1
 8006cea:	430a      	orrs	r2, r1
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cee:	f7fe fa7b 	bl	80051e8 <HAL_GetTick>
 8006cf2:	0003      	movs	r3, r0
 8006cf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cf8:	f7fe fa76 	bl	80051e8 <HAL_GetTick>
 8006cfc:	0002      	movs	r2, r0
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e250      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0a:	4b36      	ldr	r3, [pc, #216]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	2202      	movs	r2, #2
 8006d10:	4013      	ands	r3, r2
 8006d12:	d0f1      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x24c>
 8006d14:	e018      	b.n	8006d48 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d16:	4b33      	ldr	r3, [pc, #204]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d1a:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	438a      	bics	r2, r1
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d22:	f7fe fa61 	bl	80051e8 <HAL_GetTick>
 8006d26:	0003      	movs	r3, r0
 8006d28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d2c:	f7fe fa5c 	bl	80051e8 <HAL_GetTick>
 8006d30:	0002      	movs	r2, r0
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e236      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d3e:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	2202      	movs	r2, #2
 8006d44:	4013      	ands	r3, r2
 8006d46:	d1f1      	bne.n	8006d2c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d100      	bne.n	8006d54 <HAL_RCC_OscConfig+0x2a8>
 8006d52:	e0b5      	b.n	8006ec0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d54:	201f      	movs	r0, #31
 8006d56:	183b      	adds	r3, r7, r0
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d5c:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	2380      	movs	r3, #128	; 0x80
 8006d62:	055b      	lsls	r3, r3, #21
 8006d64:	4013      	ands	r3, r2
 8006d66:	d110      	bne.n	8006d8a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d68:	4b1e      	ldr	r3, [pc, #120]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	0549      	lsls	r1, r1, #21
 8006d72:	430a      	orrs	r2, r1
 8006d74:	61da      	str	r2, [r3, #28]
 8006d76:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	055b      	lsls	r3, r3, #21
 8006d7e:	4013      	ands	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d84:	183b      	adds	r3, r7, r0
 8006d86:	2201      	movs	r2, #1
 8006d88:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8a:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <HAL_RCC_OscConfig+0x344>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	2380      	movs	r3, #128	; 0x80
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4013      	ands	r3, r2
 8006d94:	d11a      	bne.n	8006dcc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <HAL_RCC_OscConfig+0x344>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <HAL_RCC_OscConfig+0x344>)
 8006d9c:	2180      	movs	r1, #128	; 0x80
 8006d9e:	0049      	lsls	r1, r1, #1
 8006da0:	430a      	orrs	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006da4:	f7fe fa20 	bl	80051e8 <HAL_GetTick>
 8006da8:	0003      	movs	r3, r0
 8006daa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dae:	f7fe fa1b 	bl	80051e8 <HAL_GetTick>
 8006db2:	0002      	movs	r2, r0
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b64      	cmp	r3, #100	; 0x64
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e1f5      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <HAL_RCC_OscConfig+0x344>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	2380      	movs	r3, #128	; 0x80
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d0f0      	beq.n	8006dae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d10f      	bne.n	8006df4 <HAL_RCC_OscConfig+0x348>
 8006dd4:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	4b02      	ldr	r3, [pc, #8]	; (8006de4 <HAL_RCC_OscConfig+0x338>)
 8006dda:	2101      	movs	r1, #1
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	621a      	str	r2, [r3, #32]
 8006de0:	e036      	b.n	8006e50 <HAL_RCC_OscConfig+0x3a4>
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	40021000 	.word	0x40021000
 8006de8:	fffeffff 	.word	0xfffeffff
 8006dec:	fffbffff 	.word	0xfffbffff
 8006df0:	40007000 	.word	0x40007000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCC_OscConfig+0x36a>
 8006dfc:	4bca      	ldr	r3, [pc, #808]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	4bc9      	ldr	r3, [pc, #804]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e02:	2101      	movs	r1, #1
 8006e04:	438a      	bics	r2, r1
 8006e06:	621a      	str	r2, [r3, #32]
 8006e08:	4bc7      	ldr	r3, [pc, #796]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	4bc6      	ldr	r3, [pc, #792]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e0e:	2104      	movs	r1, #4
 8006e10:	438a      	bics	r2, r1
 8006e12:	621a      	str	r2, [r3, #32]
 8006e14:	e01c      	b.n	8006e50 <HAL_RCC_OscConfig+0x3a4>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RCC_OscConfig+0x38c>
 8006e1e:	4bc2      	ldr	r3, [pc, #776]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e20:	6a1a      	ldr	r2, [r3, #32]
 8006e22:	4bc1      	ldr	r3, [pc, #772]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e24:	2104      	movs	r1, #4
 8006e26:	430a      	orrs	r2, r1
 8006e28:	621a      	str	r2, [r3, #32]
 8006e2a:	4bbf      	ldr	r3, [pc, #764]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e2c:	6a1a      	ldr	r2, [r3, #32]
 8006e2e:	4bbe      	ldr	r3, [pc, #760]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e30:	2101      	movs	r1, #1
 8006e32:	430a      	orrs	r2, r1
 8006e34:	621a      	str	r2, [r3, #32]
 8006e36:	e00b      	b.n	8006e50 <HAL_RCC_OscConfig+0x3a4>
 8006e38:	4bbb      	ldr	r3, [pc, #748]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e3a:	6a1a      	ldr	r2, [r3, #32]
 8006e3c:	4bba      	ldr	r3, [pc, #744]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e3e:	2101      	movs	r1, #1
 8006e40:	438a      	bics	r2, r1
 8006e42:	621a      	str	r2, [r3, #32]
 8006e44:	4bb8      	ldr	r3, [pc, #736]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e46:	6a1a      	ldr	r2, [r3, #32]
 8006e48:	4bb7      	ldr	r3, [pc, #732]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e4a:	2104      	movs	r1, #4
 8006e4c:	438a      	bics	r2, r1
 8006e4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d014      	beq.n	8006e82 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e58:	f7fe f9c6 	bl	80051e8 <HAL_GetTick>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e60:	e009      	b.n	8006e76 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e62:	f7fe f9c1 	bl	80051e8 <HAL_GetTick>
 8006e66:	0002      	movs	r2, r0
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	4aaf      	ldr	r2, [pc, #700]	; (800712c <HAL_RCC_OscConfig+0x680>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e19a      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e76:	4bac      	ldr	r3, [pc, #688]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d0f0      	beq.n	8006e62 <HAL_RCC_OscConfig+0x3b6>
 8006e80:	e013      	b.n	8006eaa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e82:	f7fe f9b1 	bl	80051e8 <HAL_GetTick>
 8006e86:	0003      	movs	r3, r0
 8006e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e8a:	e009      	b.n	8006ea0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e8c:	f7fe f9ac 	bl	80051e8 <HAL_GetTick>
 8006e90:	0002      	movs	r2, r0
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	4aa5      	ldr	r2, [pc, #660]	; (800712c <HAL_RCC_OscConfig+0x680>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e185      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea0:	4ba1      	ldr	r3, [pc, #644]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	d1f0      	bne.n	8006e8c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006eaa:	231f      	movs	r3, #31
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d105      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb4:	4b9c      	ldr	r3, [pc, #624]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	4b9b      	ldr	r3, [pc, #620]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006eba:	499d      	ldr	r1, [pc, #628]	; (8007130 <HAL_RCC_OscConfig+0x684>)
 8006ebc:	400a      	ands	r2, r1
 8006ebe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	d063      	beq.n	8006f92 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d12a      	bne.n	8006f28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006ed2:	4b95      	ldr	r3, [pc, #596]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ed6:	4b94      	ldr	r3, [pc, #592]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006ed8:	2104      	movs	r1, #4
 8006eda:	430a      	orrs	r2, r1
 8006edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006ede:	4b92      	ldr	r3, [pc, #584]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee2:	4b91      	ldr	r3, [pc, #580]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eea:	f7fe f97d 	bl	80051e8 <HAL_GetTick>
 8006eee:	0003      	movs	r3, r0
 8006ef0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006ef4:	f7fe f978 	bl	80051e8 <HAL_GetTick>
 8006ef8:	0002      	movs	r2, r0
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e152      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006f06:	4b88      	ldr	r3, [pc, #544]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d0f1      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006f10:	4b85      	ldr	r3, [pc, #532]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f14:	22f8      	movs	r2, #248	; 0xf8
 8006f16:	4393      	bics	r3, r2
 8006f18:	0019      	movs	r1, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	00da      	lsls	r2, r3, #3
 8006f20:	4b81      	ldr	r3, [pc, #516]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f22:	430a      	orrs	r2, r1
 8006f24:	635a      	str	r2, [r3, #52]	; 0x34
 8006f26:	e034      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	3305      	adds	r3, #5
 8006f2e:	d111      	bne.n	8006f54 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006f30:	4b7d      	ldr	r3, [pc, #500]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f34:	4b7c      	ldr	r3, [pc, #496]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f36:	2104      	movs	r1, #4
 8006f38:	438a      	bics	r2, r1
 8006f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006f3c:	4b7a      	ldr	r3, [pc, #488]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	22f8      	movs	r2, #248	; 0xf8
 8006f42:	4393      	bics	r3, r2
 8006f44:	0019      	movs	r1, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	00da      	lsls	r2, r3, #3
 8006f4c:	4b76      	ldr	r3, [pc, #472]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	635a      	str	r2, [r3, #52]	; 0x34
 8006f52:	e01e      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006f54:	4b74      	ldr	r3, [pc, #464]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f58:	4b73      	ldr	r3, [pc, #460]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f5a:	2104      	movs	r1, #4
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006f60:	4b71      	ldr	r3, [pc, #452]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f64:	4b70      	ldr	r3, [pc, #448]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f66:	2101      	movs	r1, #1
 8006f68:	438a      	bics	r2, r1
 8006f6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6c:	f7fe f93c 	bl	80051e8 <HAL_GetTick>
 8006f70:	0003      	movs	r3, r0
 8006f72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006f76:	f7fe f937 	bl	80051e8 <HAL_GetTick>
 8006f7a:	0002      	movs	r2, r0
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e111      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006f88:	4b67      	ldr	r3, [pc, #412]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d1f1      	bne.n	8006f76 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2220      	movs	r2, #32
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d05c      	beq.n	8007056 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006f9c:	4b62      	ldr	r3, [pc, #392]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	220c      	movs	r2, #12
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006fa8:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	220c      	movs	r2, #12
 8006fae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d114      	bne.n	8006fde <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006fb4:	4b5c      	ldr	r3, [pc, #368]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	23c0      	movs	r3, #192	; 0xc0
 8006fba:	025b      	lsls	r3, r3, #9
 8006fbc:	401a      	ands	r2, r3
 8006fbe:	23c0      	movs	r3, #192	; 0xc0
 8006fc0:	025b      	lsls	r3, r3, #9
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d10b      	bne.n	8006fde <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006fc6:	4b58      	ldr	r3, [pc, #352]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fca:	2380      	movs	r3, #128	; 0x80
 8006fcc:	029b      	lsls	r3, r3, #10
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d040      	beq.n	8007054 <HAL_RCC_OscConfig+0x5a8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d03c      	beq.n	8007054 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e0e6      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01b      	beq.n	800701e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006fe6:	4b50      	ldr	r3, [pc, #320]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fea:	4b4f      	ldr	r3, [pc, #316]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8006fec:	2180      	movs	r1, #128	; 0x80
 8006fee:	0249      	lsls	r1, r1, #9
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff4:	f7fe f8f8 	bl	80051e8 <HAL_GetTick>
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ffe:	f7fe f8f3 	bl	80051e8 <HAL_GetTick>
 8007002:	0002      	movs	r2, r0
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e0cd      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007010:	4b45      	ldr	r3, [pc, #276]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	029b      	lsls	r3, r3, #10
 8007018:	4013      	ands	r3, r2
 800701a:	d0f0      	beq.n	8006ffe <HAL_RCC_OscConfig+0x552>
 800701c:	e01b      	b.n	8007056 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800701e:	4b42      	ldr	r3, [pc, #264]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007022:	4b41      	ldr	r3, [pc, #260]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007024:	4943      	ldr	r1, [pc, #268]	; (8007134 <HAL_RCC_OscConfig+0x688>)
 8007026:	400a      	ands	r2, r1
 8007028:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800702a:	f7fe f8dd 	bl	80051e8 <HAL_GetTick>
 800702e:	0003      	movs	r3, r0
 8007030:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007034:	f7fe f8d8 	bl	80051e8 <HAL_GetTick>
 8007038:	0002      	movs	r2, r0
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e0b2      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007046:	4b38      	ldr	r3, [pc, #224]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	029b      	lsls	r3, r3, #10
 800704e:	4013      	ands	r3, r2
 8007050:	d1f0      	bne.n	8007034 <HAL_RCC_OscConfig+0x588>
 8007052:	e000      	b.n	8007056 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007054:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d100      	bne.n	8007060 <HAL_RCC_OscConfig+0x5b4>
 800705e:	e0a4      	b.n	80071aa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007060:	4b31      	ldr	r3, [pc, #196]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	220c      	movs	r2, #12
 8007066:	4013      	ands	r3, r2
 8007068:	2b08      	cmp	r3, #8
 800706a:	d100      	bne.n	800706e <HAL_RCC_OscConfig+0x5c2>
 800706c:	e078      	b.n	8007160 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b02      	cmp	r3, #2
 8007074:	d14c      	bne.n	8007110 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007076:	4b2c      	ldr	r3, [pc, #176]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b2b      	ldr	r3, [pc, #172]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 800707c:	492e      	ldr	r1, [pc, #184]	; (8007138 <HAL_RCC_OscConfig+0x68c>)
 800707e:	400a      	ands	r2, r1
 8007080:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007082:	f7fe f8b1 	bl	80051e8 <HAL_GetTick>
 8007086:	0003      	movs	r3, r0
 8007088:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800708c:	f7fe f8ac 	bl	80051e8 <HAL_GetTick>
 8007090:	0002      	movs	r2, r0
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e086      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800709e:	4b22      	ldr	r3, [pc, #136]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	049b      	lsls	r3, r3, #18
 80070a6:	4013      	ands	r3, r2
 80070a8:	d1f0      	bne.n	800708c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070aa:	4b1f      	ldr	r3, [pc, #124]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	220f      	movs	r2, #15
 80070b0:	4393      	bics	r3, r2
 80070b2:	0019      	movs	r1, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b8:	4b1b      	ldr	r3, [pc, #108]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 80070ba:	430a      	orrs	r2, r1
 80070bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80070be:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	4a1e      	ldr	r2, [pc, #120]	; (800713c <HAL_RCC_OscConfig+0x690>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	0019      	movs	r1, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	431a      	orrs	r2, r3
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d8:	4b13      	ldr	r3, [pc, #76]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4b12      	ldr	r3, [pc, #72]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 80070de:	2180      	movs	r1, #128	; 0x80
 80070e0:	0449      	lsls	r1, r1, #17
 80070e2:	430a      	orrs	r2, r1
 80070e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e6:	f7fe f87f 	bl	80051e8 <HAL_GetTick>
 80070ea:	0003      	movs	r3, r0
 80070ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f0:	f7fe f87a 	bl	80051e8 <HAL_GetTick>
 80070f4:	0002      	movs	r2, r0
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e054      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	2380      	movs	r3, #128	; 0x80
 8007108:	049b      	lsls	r3, r3, #18
 800710a:	4013      	ands	r3, r2
 800710c:	d0f0      	beq.n	80070f0 <HAL_RCC_OscConfig+0x644>
 800710e:	e04c      	b.n	80071aa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <HAL_RCC_OscConfig+0x67c>)
 8007116:	4908      	ldr	r1, [pc, #32]	; (8007138 <HAL_RCC_OscConfig+0x68c>)
 8007118:	400a      	ands	r2, r1
 800711a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711c:	f7fe f864 	bl	80051e8 <HAL_GetTick>
 8007120:	0003      	movs	r3, r0
 8007122:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007124:	e015      	b.n	8007152 <HAL_RCC_OscConfig+0x6a6>
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	40021000 	.word	0x40021000
 800712c:	00001388 	.word	0x00001388
 8007130:	efffffff 	.word	0xefffffff
 8007134:	fffeffff 	.word	0xfffeffff
 8007138:	feffffff 	.word	0xfeffffff
 800713c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007140:	f7fe f852 	bl	80051e8 <HAL_GetTick>
 8007144:	0002      	movs	r2, r0
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e02c      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007152:	4b18      	ldr	r3, [pc, #96]	; (80071b4 <HAL_RCC_OscConfig+0x708>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	2380      	movs	r3, #128	; 0x80
 8007158:	049b      	lsls	r3, r3, #18
 800715a:	4013      	ands	r3, r2
 800715c:	d1f0      	bne.n	8007140 <HAL_RCC_OscConfig+0x694>
 800715e:	e024      	b.n	80071aa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e01f      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800716c:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <HAL_RCC_OscConfig+0x708>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007172:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <HAL_RCC_OscConfig+0x708>)
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	23c0      	movs	r3, #192	; 0xc0
 800717c:	025b      	lsls	r3, r3, #9
 800717e:	401a      	ands	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	429a      	cmp	r2, r3
 8007186:	d10e      	bne.n	80071a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	220f      	movs	r2, #15
 800718c:	401a      	ands	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007192:	429a      	cmp	r2, r3
 8007194:	d107      	bne.n	80071a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	23f0      	movs	r3, #240	; 0xf0
 800719a:	039b      	lsls	r3, r3, #14
 800719c:	401a      	ands	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d001      	beq.n	80071aa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	0018      	movs	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b008      	add	sp, #32
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40021000 	.word	0x40021000

080071b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0bf      	b.n	800734c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071cc:	4b61      	ldr	r3, [pc, #388]	; (8007354 <HAL_RCC_ClockConfig+0x19c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2201      	movs	r2, #1
 80071d2:	4013      	ands	r3, r2
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d911      	bls.n	80071fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071da:	4b5e      	ldr	r3, [pc, #376]	; (8007354 <HAL_RCC_ClockConfig+0x19c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2201      	movs	r2, #1
 80071e0:	4393      	bics	r3, r2
 80071e2:	0019      	movs	r1, r3
 80071e4:	4b5b      	ldr	r3, [pc, #364]	; (8007354 <HAL_RCC_ClockConfig+0x19c>)
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ec:	4b59      	ldr	r3, [pc, #356]	; (8007354 <HAL_RCC_ClockConfig+0x19c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2201      	movs	r2, #1
 80071f2:	4013      	ands	r3, r2
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d001      	beq.n	80071fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e0a6      	b.n	800734c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2202      	movs	r2, #2
 8007204:	4013      	ands	r3, r2
 8007206:	d015      	beq.n	8007234 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2204      	movs	r2, #4
 800720e:	4013      	ands	r3, r2
 8007210:	d006      	beq.n	8007220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007212:	4b51      	ldr	r3, [pc, #324]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	4b50      	ldr	r3, [pc, #320]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007218:	21e0      	movs	r1, #224	; 0xe0
 800721a:	00c9      	lsls	r1, r1, #3
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007220:	4b4d      	ldr	r3, [pc, #308]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	22f0      	movs	r2, #240	; 0xf0
 8007226:	4393      	bics	r3, r2
 8007228:	0019      	movs	r1, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	4b4a      	ldr	r3, [pc, #296]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007230:	430a      	orrs	r2, r1
 8007232:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2201      	movs	r2, #1
 800723a:	4013      	ands	r3, r2
 800723c:	d04c      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d107      	bne.n	8007256 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007246:	4b44      	ldr	r3, [pc, #272]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	029b      	lsls	r3, r3, #10
 800724e:	4013      	ands	r3, r2
 8007250:	d120      	bne.n	8007294 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e07a      	b.n	800734c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d107      	bne.n	800726e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800725e:	4b3e      	ldr	r3, [pc, #248]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	2380      	movs	r3, #128	; 0x80
 8007264:	049b      	lsls	r3, r3, #18
 8007266:	4013      	ands	r3, r2
 8007268:	d114      	bne.n	8007294 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e06e      	b.n	800734c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b03      	cmp	r3, #3
 8007274:	d107      	bne.n	8007286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007276:	4b38      	ldr	r3, [pc, #224]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800727a:	2380      	movs	r3, #128	; 0x80
 800727c:	029b      	lsls	r3, r3, #10
 800727e:	4013      	ands	r3, r2
 8007280:	d108      	bne.n	8007294 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e062      	b.n	800734c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007286:	4b34      	ldr	r3, [pc, #208]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2202      	movs	r2, #2
 800728c:	4013      	ands	r3, r2
 800728e:	d101      	bne.n	8007294 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e05b      	b.n	800734c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007294:	4b30      	ldr	r3, [pc, #192]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2203      	movs	r2, #3
 800729a:	4393      	bics	r3, r2
 800729c:	0019      	movs	r1, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	4b2d      	ldr	r3, [pc, #180]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072a8:	f7fd ff9e 	bl	80051e8 <HAL_GetTick>
 80072ac:	0003      	movs	r3, r0
 80072ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b0:	e009      	b.n	80072c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b2:	f7fd ff99 	bl	80051e8 <HAL_GetTick>
 80072b6:	0002      	movs	r2, r0
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	4a27      	ldr	r2, [pc, #156]	; (800735c <HAL_RCC_ClockConfig+0x1a4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e042      	b.n	800734c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c6:	4b24      	ldr	r3, [pc, #144]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	220c      	movs	r2, #12
 80072cc:	401a      	ands	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d1ec      	bne.n	80072b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072d8:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <HAL_RCC_ClockConfig+0x19c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2201      	movs	r2, #1
 80072de:	4013      	ands	r3, r2
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d211      	bcs.n	800730a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072e6:	4b1b      	ldr	r3, [pc, #108]	; (8007354 <HAL_RCC_ClockConfig+0x19c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2201      	movs	r2, #1
 80072ec:	4393      	bics	r3, r2
 80072ee:	0019      	movs	r1, r3
 80072f0:	4b18      	ldr	r3, [pc, #96]	; (8007354 <HAL_RCC_ClockConfig+0x19c>)
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f8:	4b16      	ldr	r3, [pc, #88]	; (8007354 <HAL_RCC_ClockConfig+0x19c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2201      	movs	r2, #1
 80072fe:	4013      	ands	r3, r2
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d001      	beq.n	800730a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e020      	b.n	800734c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2204      	movs	r2, #4
 8007310:	4013      	ands	r3, r2
 8007312:	d009      	beq.n	8007328 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007314:	4b10      	ldr	r3, [pc, #64]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	4a11      	ldr	r2, [pc, #68]	; (8007360 <HAL_RCC_ClockConfig+0x1a8>)
 800731a:	4013      	ands	r3, r2
 800731c:	0019      	movs	r1, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007328:	f000 f820 	bl	800736c <HAL_RCC_GetSysClockFreq>
 800732c:	0001      	movs	r1, r0
 800732e:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <HAL_RCC_ClockConfig+0x1a0>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	091b      	lsrs	r3, r3, #4
 8007334:	220f      	movs	r2, #15
 8007336:	4013      	ands	r3, r2
 8007338:	4a0a      	ldr	r2, [pc, #40]	; (8007364 <HAL_RCC_ClockConfig+0x1ac>)
 800733a:	5cd3      	ldrb	r3, [r2, r3]
 800733c:	000a      	movs	r2, r1
 800733e:	40da      	lsrs	r2, r3
 8007340:	4b09      	ldr	r3, [pc, #36]	; (8007368 <HAL_RCC_ClockConfig+0x1b0>)
 8007342:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007344:	2003      	movs	r0, #3
 8007346:	f7fd fb1d 	bl	8004984 <HAL_InitTick>
  
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	0018      	movs	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	b004      	add	sp, #16
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40022000 	.word	0x40022000
 8007358:	40021000 	.word	0x40021000
 800735c:	00001388 	.word	0x00001388
 8007360:	fffff8ff 	.word	0xfffff8ff
 8007364:	08010d88 	.word	0x08010d88
 8007368:	20000014 	.word	0x20000014

0800736c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	2300      	movs	r3, #0
 8007380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007386:	4b2d      	ldr	r3, [pc, #180]	; (800743c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	220c      	movs	r2, #12
 8007390:	4013      	ands	r3, r2
 8007392:	2b0c      	cmp	r3, #12
 8007394:	d046      	beq.n	8007424 <HAL_RCC_GetSysClockFreq+0xb8>
 8007396:	d848      	bhi.n	800742a <HAL_RCC_GetSysClockFreq+0xbe>
 8007398:	2b04      	cmp	r3, #4
 800739a:	d002      	beq.n	80073a2 <HAL_RCC_GetSysClockFreq+0x36>
 800739c:	2b08      	cmp	r3, #8
 800739e:	d003      	beq.n	80073a8 <HAL_RCC_GetSysClockFreq+0x3c>
 80073a0:	e043      	b.n	800742a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073a2:	4b27      	ldr	r3, [pc, #156]	; (8007440 <HAL_RCC_GetSysClockFreq+0xd4>)
 80073a4:	613b      	str	r3, [r7, #16]
      break;
 80073a6:	e043      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	0c9b      	lsrs	r3, r3, #18
 80073ac:	220f      	movs	r2, #15
 80073ae:	4013      	ands	r3, r2
 80073b0:	4a24      	ldr	r2, [pc, #144]	; (8007444 <HAL_RCC_GetSysClockFreq+0xd8>)
 80073b2:	5cd3      	ldrb	r3, [r2, r3]
 80073b4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80073b6:	4b21      	ldr	r3, [pc, #132]	; (800743c <HAL_RCC_GetSysClockFreq+0xd0>)
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	220f      	movs	r2, #15
 80073bc:	4013      	ands	r3, r2
 80073be:	4a22      	ldr	r2, [pc, #136]	; (8007448 <HAL_RCC_GetSysClockFreq+0xdc>)
 80073c0:	5cd3      	ldrb	r3, [r2, r3]
 80073c2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	23c0      	movs	r3, #192	; 0xc0
 80073c8:	025b      	lsls	r3, r3, #9
 80073ca:	401a      	ands	r2, r3
 80073cc:	2380      	movs	r3, #128	; 0x80
 80073ce:	025b      	lsls	r3, r3, #9
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d109      	bne.n	80073e8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	481a      	ldr	r0, [pc, #104]	; (8007440 <HAL_RCC_GetSysClockFreq+0xd4>)
 80073d8:	f7f8 feb2 	bl	8000140 <__udivsi3>
 80073dc:	0003      	movs	r3, r0
 80073de:	001a      	movs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4353      	muls	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	e01a      	b.n	800741e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	23c0      	movs	r3, #192	; 0xc0
 80073ec:	025b      	lsls	r3, r3, #9
 80073ee:	401a      	ands	r2, r3
 80073f0:	23c0      	movs	r3, #192	; 0xc0
 80073f2:	025b      	lsls	r3, r3, #9
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d109      	bne.n	800740c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	4814      	ldr	r0, [pc, #80]	; (800744c <HAL_RCC_GetSysClockFreq+0xe0>)
 80073fc:	f7f8 fea0 	bl	8000140 <__udivsi3>
 8007400:	0003      	movs	r3, r0
 8007402:	001a      	movs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4353      	muls	r3, r2
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	e008      	b.n	800741e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	480c      	ldr	r0, [pc, #48]	; (8007440 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007410:	f7f8 fe96 	bl	8000140 <__udivsi3>
 8007414:	0003      	movs	r3, r0
 8007416:	001a      	movs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4353      	muls	r3, r2
 800741c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	613b      	str	r3, [r7, #16]
      break;
 8007422:	e005      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8007424:	4b09      	ldr	r3, [pc, #36]	; (800744c <HAL_RCC_GetSysClockFreq+0xe0>)
 8007426:	613b      	str	r3, [r7, #16]
      break;
 8007428:	e002      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800742a:	4b05      	ldr	r3, [pc, #20]	; (8007440 <HAL_RCC_GetSysClockFreq+0xd4>)
 800742c:	613b      	str	r3, [r7, #16]
      break;
 800742e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007430:	693b      	ldr	r3, [r7, #16]
}
 8007432:	0018      	movs	r0, r3
 8007434:	46bd      	mov	sp, r7
 8007436:	b006      	add	sp, #24
 8007438:	bd80      	pop	{r7, pc}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	40021000 	.word	0x40021000
 8007440:	007a1200 	.word	0x007a1200
 8007444:	08010da0 	.word	0x08010da0
 8007448:	08010db0 	.word	0x08010db0
 800744c:	02dc6c00 	.word	0x02dc6c00

08007450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <HAL_RCC_GetHCLKFreq+0x10>)
 8007456:	681b      	ldr	r3, [r3, #0]
}
 8007458:	0018      	movs	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	20000014 	.word	0x20000014

08007464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007468:	f7ff fff2 	bl	8007450 <HAL_RCC_GetHCLKFreq>
 800746c:	0001      	movs	r1, r0
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	2207      	movs	r2, #7
 8007476:	4013      	ands	r3, r2
 8007478:	4a04      	ldr	r2, [pc, #16]	; (800748c <HAL_RCC_GetPCLK1Freq+0x28>)
 800747a:	5cd3      	ldrb	r3, [r2, r3]
 800747c:	40d9      	lsrs	r1, r3
 800747e:	000b      	movs	r3, r1
}    
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	40021000 	.word	0x40021000
 800748c:	08010d98 	.word	0x08010d98

08007490 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2207      	movs	r2, #7
 800749e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074a0:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <HAL_RCC_GetClockConfig+0x4c>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2203      	movs	r2, #3
 80074a6:	401a      	ands	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80074ac:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <HAL_RCC_GetClockConfig+0x4c>)
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	22f0      	movs	r2, #240	; 0xf0
 80074b2:	401a      	ands	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80074b8:	4b08      	ldr	r3, [pc, #32]	; (80074dc <HAL_RCC_GetClockConfig+0x4c>)
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	23e0      	movs	r3, #224	; 0xe0
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	401a      	ands	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80074c6:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <HAL_RCC_GetClockConfig+0x50>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2201      	movs	r2, #1
 80074cc:	401a      	ands	r2, r3
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	601a      	str	r2, [r3, #0]
}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	46bd      	mov	sp, r7
 80074d6:	b002      	add	sp, #8
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	40021000 	.word	0x40021000
 80074e0:	40022000 	.word	0x40022000

080074e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	2380      	movs	r3, #128	; 0x80
 80074fa:	025b      	lsls	r3, r3, #9
 80074fc:	4013      	ands	r3, r2
 80074fe:	d100      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007500:	e08e      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8007502:	2017      	movs	r0, #23
 8007504:	183b      	adds	r3, r7, r0
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800750a:	4b6e      	ldr	r3, [pc, #440]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800750c:	69da      	ldr	r2, [r3, #28]
 800750e:	2380      	movs	r3, #128	; 0x80
 8007510:	055b      	lsls	r3, r3, #21
 8007512:	4013      	ands	r3, r2
 8007514:	d110      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007516:	4b6b      	ldr	r3, [pc, #428]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007518:	69da      	ldr	r2, [r3, #28]
 800751a:	4b6a      	ldr	r3, [pc, #424]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800751c:	2180      	movs	r1, #128	; 0x80
 800751e:	0549      	lsls	r1, r1, #21
 8007520:	430a      	orrs	r2, r1
 8007522:	61da      	str	r2, [r3, #28]
 8007524:	4b67      	ldr	r3, [pc, #412]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	2380      	movs	r3, #128	; 0x80
 800752a:	055b      	lsls	r3, r3, #21
 800752c:	4013      	ands	r3, r2
 800752e:	60bb      	str	r3, [r7, #8]
 8007530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007532:	183b      	adds	r3, r7, r0
 8007534:	2201      	movs	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007538:	4b63      	ldr	r3, [pc, #396]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	2380      	movs	r3, #128	; 0x80
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	4013      	ands	r3, r2
 8007542:	d11a      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007544:	4b60      	ldr	r3, [pc, #384]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	4b5f      	ldr	r3, [pc, #380]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800754a:	2180      	movs	r1, #128	; 0x80
 800754c:	0049      	lsls	r1, r1, #1
 800754e:	430a      	orrs	r2, r1
 8007550:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007552:	f7fd fe49 	bl	80051e8 <HAL_GetTick>
 8007556:	0003      	movs	r3, r0
 8007558:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755a:	e008      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755c:	f7fd fe44 	bl	80051e8 <HAL_GetTick>
 8007560:	0002      	movs	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b64      	cmp	r3, #100	; 0x64
 8007568:	d901      	bls.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e0a6      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756e:	4b56      	ldr	r3, [pc, #344]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	2380      	movs	r3, #128	; 0x80
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	4013      	ands	r3, r2
 8007578:	d0f0      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800757a:	4b52      	ldr	r3, [pc, #328]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800757c:	6a1a      	ldr	r2, [r3, #32]
 800757e:	23c0      	movs	r3, #192	; 0xc0
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4013      	ands	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d034      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	23c0      	movs	r3, #192	; 0xc0
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4013      	ands	r3, r2
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	429a      	cmp	r2, r3
 800759a:	d02c      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800759c:	4b49      	ldr	r3, [pc, #292]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	4a4a      	ldr	r2, [pc, #296]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075a6:	4b47      	ldr	r3, [pc, #284]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075a8:	6a1a      	ldr	r2, [r3, #32]
 80075aa:	4b46      	ldr	r3, [pc, #280]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	0249      	lsls	r1, r1, #9
 80075b0:	430a      	orrs	r2, r1
 80075b2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075b4:	4b43      	ldr	r3, [pc, #268]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075b6:	6a1a      	ldr	r2, [r3, #32]
 80075b8:	4b42      	ldr	r3, [pc, #264]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075ba:	4945      	ldr	r1, [pc, #276]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80075bc:	400a      	ands	r2, r1
 80075be:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80075c0:	4b40      	ldr	r3, [pc, #256]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	4013      	ands	r3, r2
 80075cc:	d013      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ce:	f7fd fe0b 	bl	80051e8 <HAL_GetTick>
 80075d2:	0003      	movs	r3, r0
 80075d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075d6:	e009      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d8:	f7fd fe06 	bl	80051e8 <HAL_GetTick>
 80075dc:	0002      	movs	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a3c      	ldr	r2, [pc, #240]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d901      	bls.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e067      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ec:	4b35      	ldr	r3, [pc, #212]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	2202      	movs	r2, #2
 80075f2:	4013      	ands	r3, r2
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f6:	4b33      	ldr	r3, [pc, #204]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	4a34      	ldr	r2, [pc, #208]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	0019      	movs	r1, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	4b2f      	ldr	r3, [pc, #188]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007606:	430a      	orrs	r2, r1
 8007608:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800760a:	2317      	movs	r3, #23
 800760c:	18fb      	adds	r3, r7, r3
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d105      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007614:	4b2b      	ldr	r3, [pc, #172]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800761a:	492f      	ldr	r1, [pc, #188]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800761c:	400a      	ands	r2, r1
 800761e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2201      	movs	r2, #1
 8007626:	4013      	ands	r3, r2
 8007628:	d009      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800762a:	4b26      	ldr	r3, [pc, #152]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	2203      	movs	r2, #3
 8007630:	4393      	bics	r3, r2
 8007632:	0019      	movs	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800763a:	430a      	orrs	r2, r1
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2202      	movs	r2, #2
 8007644:	4013      	ands	r3, r2
 8007646:	d009      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007648:	4b1e      	ldr	r3, [pc, #120]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	4a23      	ldr	r2, [pc, #140]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800764e:	4013      	ands	r3, r2
 8007650:	0019      	movs	r1, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	4b1b      	ldr	r3, [pc, #108]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007658:	430a      	orrs	r2, r1
 800765a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	2380      	movs	r3, #128	; 0x80
 8007662:	02db      	lsls	r3, r3, #11
 8007664:	4013      	ands	r3, r2
 8007666:	d009      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007668:	4b16      	ldr	r3, [pc, #88]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800766e:	4013      	ands	r3, r2
 8007670:	0019      	movs	r1, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007678:	430a      	orrs	r2, r1
 800767a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2220      	movs	r2, #32
 8007682:	4013      	ands	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007686:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	2210      	movs	r2, #16
 800768c:	4393      	bics	r3, r2
 800768e:	0019      	movs	r1, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007696:	430a      	orrs	r2, r1
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	2380      	movs	r3, #128	; 0x80
 80076a0:	00db      	lsls	r3, r3, #3
 80076a2:	4013      	ands	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076a6:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	2240      	movs	r2, #64	; 0x40
 80076ac:	4393      	bics	r3, r2
 80076ae:	0019      	movs	r1, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699a      	ldr	r2, [r3, #24]
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80076b6:	430a      	orrs	r2, r1
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	0018      	movs	r0, r3
 80076be:	46bd      	mov	sp, r7
 80076c0:	b006      	add	sp, #24
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40021000 	.word	0x40021000
 80076c8:	40007000 	.word	0x40007000
 80076cc:	fffffcff 	.word	0xfffffcff
 80076d0:	fffeffff 	.word	0xfffeffff
 80076d4:	00001388 	.word	0x00001388
 80076d8:	efffffff 	.word	0xefffffff
 80076dc:	fffcffff 	.word	0xfffcffff
 80076e0:	fff3ffff 	.word	0xfff3ffff

080076e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e042      	b.n	800777c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	223d      	movs	r2, #61	; 0x3d
 80076fa:	5c9b      	ldrb	r3, [r3, r2]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d107      	bne.n	8007712 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	223c      	movs	r2, #60	; 0x3c
 8007706:	2100      	movs	r1, #0
 8007708:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	0018      	movs	r0, r3
 800770e:	f7fd fbf7 	bl	8004f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	223d      	movs	r2, #61	; 0x3d
 8007716:	2102      	movs	r1, #2
 8007718:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3304      	adds	r3, #4
 8007722:	0019      	movs	r1, r3
 8007724:	0010      	movs	r0, r2
 8007726:	f000 fcdb 	bl	80080e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2246      	movs	r2, #70	; 0x46
 800772e:	2101      	movs	r1, #1
 8007730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	223e      	movs	r2, #62	; 0x3e
 8007736:	2101      	movs	r1, #1
 8007738:	5499      	strb	r1, [r3, r2]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	223f      	movs	r2, #63	; 0x3f
 800773e:	2101      	movs	r1, #1
 8007740:	5499      	strb	r1, [r3, r2]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2240      	movs	r2, #64	; 0x40
 8007746:	2101      	movs	r1, #1
 8007748:	5499      	strb	r1, [r3, r2]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2241      	movs	r2, #65	; 0x41
 800774e:	2101      	movs	r1, #1
 8007750:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2242      	movs	r2, #66	; 0x42
 8007756:	2101      	movs	r1, #1
 8007758:	5499      	strb	r1, [r3, r2]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2243      	movs	r2, #67	; 0x43
 800775e:	2101      	movs	r1, #1
 8007760:	5499      	strb	r1, [r3, r2]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2244      	movs	r2, #68	; 0x44
 8007766:	2101      	movs	r1, #1
 8007768:	5499      	strb	r1, [r3, r2]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2245      	movs	r2, #69	; 0x45
 800776e:	2101      	movs	r1, #1
 8007770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	223d      	movs	r2, #61	; 0x3d
 8007776:	2101      	movs	r1, #1
 8007778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	0018      	movs	r0, r3
 800777e:	46bd      	mov	sp, r7
 8007780:	b002      	add	sp, #8
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	223d      	movs	r2, #61	; 0x3d
 8007790:	5c9b      	ldrb	r3, [r3, r2]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d001      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e03b      	b.n	8007814 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	223d      	movs	r2, #61	; 0x3d
 80077a0:	2102      	movs	r1, #2
 80077a2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2101      	movs	r1, #1
 80077b0:	430a      	orrs	r2, r1
 80077b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a18      	ldr	r2, [pc, #96]	; (800781c <HAL_TIM_Base_Start_IT+0x98>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00f      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x5a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	2380      	movs	r3, #128	; 0x80
 80077c4:	05db      	lsls	r3, r3, #23
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d009      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x5a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a14      	ldr	r2, [pc, #80]	; (8007820 <HAL_TIM_Base_Start_IT+0x9c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d004      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x5a>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a12      	ldr	r2, [pc, #72]	; (8007824 <HAL_TIM_Base_Start_IT+0xa0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d111      	bne.n	8007802 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2207      	movs	r2, #7
 80077e6:	4013      	ands	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b06      	cmp	r3, #6
 80077ee:	d010      	beq.n	8007812 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2101      	movs	r1, #1
 80077fc:	430a      	orrs	r2, r1
 80077fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007800:	e007      	b.n	8007812 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2101      	movs	r1, #1
 800780e:	430a      	orrs	r2, r1
 8007810:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	0018      	movs	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	b004      	add	sp, #16
 800781a:	bd80      	pop	{r7, pc}
 800781c:	40012c00 	.word	0x40012c00
 8007820:	40000400 	.word	0x40000400
 8007824:	40014000 	.word	0x40014000

08007828 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e042      	b.n	80078c0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	223d      	movs	r2, #61	; 0x3d
 800783e:	5c9b      	ldrb	r3, [r3, r2]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d107      	bne.n	8007856 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	223c      	movs	r2, #60	; 0x3c
 800784a:	2100      	movs	r1, #0
 800784c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	0018      	movs	r0, r3
 8007852:	f000 f839 	bl	80078c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	223d      	movs	r2, #61	; 0x3d
 800785a:	2102      	movs	r1, #2
 800785c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3304      	adds	r3, #4
 8007866:	0019      	movs	r1, r3
 8007868:	0010      	movs	r0, r2
 800786a:	f000 fc39 	bl	80080e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2246      	movs	r2, #70	; 0x46
 8007872:	2101      	movs	r1, #1
 8007874:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	223e      	movs	r2, #62	; 0x3e
 800787a:	2101      	movs	r1, #1
 800787c:	5499      	strb	r1, [r3, r2]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	223f      	movs	r2, #63	; 0x3f
 8007882:	2101      	movs	r1, #1
 8007884:	5499      	strb	r1, [r3, r2]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2240      	movs	r2, #64	; 0x40
 800788a:	2101      	movs	r1, #1
 800788c:	5499      	strb	r1, [r3, r2]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2241      	movs	r2, #65	; 0x41
 8007892:	2101      	movs	r1, #1
 8007894:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2242      	movs	r2, #66	; 0x42
 800789a:	2101      	movs	r1, #1
 800789c:	5499      	strb	r1, [r3, r2]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2243      	movs	r2, #67	; 0x43
 80078a2:	2101      	movs	r1, #1
 80078a4:	5499      	strb	r1, [r3, r2]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2244      	movs	r2, #68	; 0x44
 80078aa:	2101      	movs	r1, #1
 80078ac:	5499      	strb	r1, [r3, r2]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2245      	movs	r2, #69	; 0x45
 80078b2:	2101      	movs	r1, #1
 80078b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	223d      	movs	r2, #61	; 0x3d
 80078ba:	2101      	movs	r1, #1
 80078bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	0018      	movs	r0, r3
 80078c2:	46bd      	mov	sp, r7
 80078c4:	b002      	add	sp, #8
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078d0:	46c0      	nop			; (mov r8, r8)
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b002      	add	sp, #8
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d108      	bne.n	80078fa <HAL_TIM_PWM_Start+0x22>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	223e      	movs	r2, #62	; 0x3e
 80078ec:	5c9b      	ldrb	r3, [r3, r2]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	1e5a      	subs	r2, r3, #1
 80078f4:	4193      	sbcs	r3, r2
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	e01f      	b.n	800793a <HAL_TIM_PWM_Start+0x62>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d108      	bne.n	8007912 <HAL_TIM_PWM_Start+0x3a>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	223f      	movs	r2, #63	; 0x3f
 8007904:	5c9b      	ldrb	r3, [r3, r2]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	1e5a      	subs	r2, r3, #1
 800790c:	4193      	sbcs	r3, r2
 800790e:	b2db      	uxtb	r3, r3
 8007910:	e013      	b.n	800793a <HAL_TIM_PWM_Start+0x62>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b08      	cmp	r3, #8
 8007916:	d108      	bne.n	800792a <HAL_TIM_PWM_Start+0x52>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2240      	movs	r2, #64	; 0x40
 800791c:	5c9b      	ldrb	r3, [r3, r2]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	1e5a      	subs	r2, r3, #1
 8007924:	4193      	sbcs	r3, r2
 8007926:	b2db      	uxtb	r3, r3
 8007928:	e007      	b.n	800793a <HAL_TIM_PWM_Start+0x62>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2241      	movs	r2, #65	; 0x41
 800792e:	5c9b      	ldrb	r3, [r3, r2]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	1e5a      	subs	r2, r3, #1
 8007936:	4193      	sbcs	r3, r2
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e074      	b.n	8007a2c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_TIM_PWM_Start+0x7a>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	223e      	movs	r2, #62	; 0x3e
 800794c:	2102      	movs	r1, #2
 800794e:	5499      	strb	r1, [r3, r2]
 8007950:	e013      	b.n	800797a <HAL_TIM_PWM_Start+0xa2>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b04      	cmp	r3, #4
 8007956:	d104      	bne.n	8007962 <HAL_TIM_PWM_Start+0x8a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	223f      	movs	r2, #63	; 0x3f
 800795c:	2102      	movs	r1, #2
 800795e:	5499      	strb	r1, [r3, r2]
 8007960:	e00b      	b.n	800797a <HAL_TIM_PWM_Start+0xa2>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b08      	cmp	r3, #8
 8007966:	d104      	bne.n	8007972 <HAL_TIM_PWM_Start+0x9a>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2240      	movs	r2, #64	; 0x40
 800796c:	2102      	movs	r1, #2
 800796e:	5499      	strb	r1, [r3, r2]
 8007970:	e003      	b.n	800797a <HAL_TIM_PWM_Start+0xa2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2241      	movs	r2, #65	; 0x41
 8007976:	2102      	movs	r1, #2
 8007978:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	2201      	movs	r2, #1
 8007982:	0018      	movs	r0, r3
 8007984:	f000 fec2 	bl	800870c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a29      	ldr	r2, [pc, #164]	; (8007a34 <HAL_TIM_PWM_Start+0x15c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00e      	beq.n	80079b0 <HAL_TIM_PWM_Start+0xd8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a28      	ldr	r2, [pc, #160]	; (8007a38 <HAL_TIM_PWM_Start+0x160>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d009      	beq.n	80079b0 <HAL_TIM_PWM_Start+0xd8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a26      	ldr	r2, [pc, #152]	; (8007a3c <HAL_TIM_PWM_Start+0x164>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <HAL_TIM_PWM_Start+0xd8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a25      	ldr	r2, [pc, #148]	; (8007a40 <HAL_TIM_PWM_Start+0x168>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d101      	bne.n	80079b4 <HAL_TIM_PWM_Start+0xdc>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <HAL_TIM_PWM_Start+0xde>
 80079b4:	2300      	movs	r3, #0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2180      	movs	r1, #128	; 0x80
 80079c6:	0209      	lsls	r1, r1, #8
 80079c8:	430a      	orrs	r2, r1
 80079ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a18      	ldr	r2, [pc, #96]	; (8007a34 <HAL_TIM_PWM_Start+0x15c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00f      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x11e>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	2380      	movs	r3, #128	; 0x80
 80079dc:	05db      	lsls	r3, r3, #23
 80079de:	429a      	cmp	r2, r3
 80079e0:	d009      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x11e>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <HAL_TIM_PWM_Start+0x16c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d004      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x11e>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a11      	ldr	r2, [pc, #68]	; (8007a38 <HAL_TIM_PWM_Start+0x160>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d111      	bne.n	8007a1a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2207      	movs	r2, #7
 80079fe:	4013      	ands	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b06      	cmp	r3, #6
 8007a06:	d010      	beq.n	8007a2a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2101      	movs	r1, #1
 8007a14:	430a      	orrs	r2, r1
 8007a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a18:	e007      	b.n	8007a2a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2101      	movs	r1, #1
 8007a26:	430a      	orrs	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b004      	add	sp, #16
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40012c00 	.word	0x40012c00
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	40014400 	.word	0x40014400
 8007a40:	40014800 	.word	0x40014800
 8007a44:	40000400 	.word	0x40000400

08007a48 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f000 fe56 	bl	800870c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2f      	ldr	r2, [pc, #188]	; (8007b24 <HAL_TIM_PWM_Stop+0xdc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00e      	beq.n	8007a88 <HAL_TIM_PWM_Stop+0x40>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2e      	ldr	r2, [pc, #184]	; (8007b28 <HAL_TIM_PWM_Stop+0xe0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d009      	beq.n	8007a88 <HAL_TIM_PWM_Stop+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <HAL_TIM_PWM_Stop+0xe4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_TIM_PWM_Stop+0x40>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a2b      	ldr	r2, [pc, #172]	; (8007b30 <HAL_TIM_PWM_Stop+0xe8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d101      	bne.n	8007a8c <HAL_TIM_PWM_Stop+0x44>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e000      	b.n	8007a8e <HAL_TIM_PWM_Stop+0x46>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d013      	beq.n	8007aba <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	4a26      	ldr	r2, [pc, #152]	; (8007b34 <HAL_TIM_PWM_Stop+0xec>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	d10d      	bne.n	8007aba <HAL_TIM_PWM_Stop+0x72>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	4a24      	ldr	r2, [pc, #144]	; (8007b38 <HAL_TIM_PWM_Stop+0xf0>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	d107      	bne.n	8007aba <HAL_TIM_PWM_Stop+0x72>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4921      	ldr	r1, [pc, #132]	; (8007b3c <HAL_TIM_PWM_Stop+0xf4>)
 8007ab6:	400a      	ands	r2, r1
 8007ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	; (8007b34 <HAL_TIM_PWM_Stop+0xec>)
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	d10d      	bne.n	8007ae2 <HAL_TIM_PWM_Stop+0x9a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	4a1a      	ldr	r2, [pc, #104]	; (8007b38 <HAL_TIM_PWM_Stop+0xf0>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d107      	bne.n	8007ae2 <HAL_TIM_PWM_Stop+0x9a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2101      	movs	r1, #1
 8007ade:	438a      	bics	r2, r1
 8007ae0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_TIM_PWM_Stop+0xaa>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	223e      	movs	r2, #62	; 0x3e
 8007aec:	2101      	movs	r1, #1
 8007aee:	5499      	strb	r1, [r3, r2]
 8007af0:	e013      	b.n	8007b1a <HAL_TIM_PWM_Stop+0xd2>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d104      	bne.n	8007b02 <HAL_TIM_PWM_Stop+0xba>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	223f      	movs	r2, #63	; 0x3f
 8007afc:	2101      	movs	r1, #1
 8007afe:	5499      	strb	r1, [r3, r2]
 8007b00:	e00b      	b.n	8007b1a <HAL_TIM_PWM_Stop+0xd2>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d104      	bne.n	8007b12 <HAL_TIM_PWM_Stop+0xca>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2240      	movs	r2, #64	; 0x40
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	5499      	strb	r1, [r3, r2]
 8007b10:	e003      	b.n	8007b1a <HAL_TIM_PWM_Stop+0xd2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2241      	movs	r2, #65	; 0x41
 8007b16:	2101      	movs	r1, #1
 8007b18:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b002      	add	sp, #8
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40014000 	.word	0x40014000
 8007b2c:	40014400 	.word	0x40014400
 8007b30:	40014800 	.word	0x40014800
 8007b34:	00001111 	.word	0x00001111
 8007b38:	00000444 	.word	0x00000444
 8007b3c:	ffff7fff 	.word	0xffff7fff

08007b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	4013      	ands	r3, r2
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d124      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d11d      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2203      	movs	r2, #3
 8007b6a:	4252      	negs	r2, r2
 8007b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	2203      	movs	r2, #3
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	d004      	beq.n	8007b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	0018      	movs	r0, r3
 8007b84:	f000 fa94 	bl	80080b0 <HAL_TIM_IC_CaptureCallback>
 8007b88:	e007      	b.n	8007b9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f000 fa87 	bl	80080a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	0018      	movs	r0, r3
 8007b96:	f000 fa93 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	4013      	ands	r3, r2
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d125      	bne.n	8007bfa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d11e      	bne.n	8007bfa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	4252      	negs	r2, r2
 8007bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	23c0      	movs	r3, #192	; 0xc0
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	d004      	beq.n	8007be4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f000 fa67 	bl	80080b0 <HAL_TIM_IC_CaptureCallback>
 8007be2:	e007      	b.n	8007bf4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	0018      	movs	r0, r3
 8007be8:	f000 fa5a 	bl	80080a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f000 fa66 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2208      	movs	r2, #8
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d124      	bne.n	8007c52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2208      	movs	r2, #8
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d11d      	bne.n	8007c52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2209      	movs	r2, #9
 8007c1c:	4252      	negs	r2, r2
 8007c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2204      	movs	r2, #4
 8007c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	4013      	ands	r3, r2
 8007c30:	d004      	beq.n	8007c3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	0018      	movs	r0, r3
 8007c36:	f000 fa3b 	bl	80080b0 <HAL_TIM_IC_CaptureCallback>
 8007c3a:	e007      	b.n	8007c4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f000 fa2e 	bl	80080a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	0018      	movs	r0, r3
 8007c48:	f000 fa3a 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2210      	movs	r2, #16
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b10      	cmp	r3, #16
 8007c5e:	d125      	bne.n	8007cac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	2210      	movs	r2, #16
 8007c68:	4013      	ands	r3, r2
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d11e      	bne.n	8007cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2211      	movs	r2, #17
 8007c74:	4252      	negs	r2, r2
 8007c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2208      	movs	r2, #8
 8007c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	23c0      	movs	r3, #192	; 0xc0
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4013      	ands	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f000 fa0e 	bl	80080b0 <HAL_TIM_IC_CaptureCallback>
 8007c94:	e007      	b.n	8007ca6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f000 fa01 	bl	80080a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f000 fa0d 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10f      	bne.n	8007cda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d108      	bne.n	8007cda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	4252      	negs	r2, r2
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f7fc fe13 	bl	8004900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2280      	movs	r2, #128	; 0x80
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	2b80      	cmp	r3, #128	; 0x80
 8007ce6:	d10f      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	2280      	movs	r2, #128	; 0x80
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d108      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2281      	movs	r2, #129	; 0x81
 8007cfc:	4252      	negs	r2, r2
 8007cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	0018      	movs	r0, r3
 8007d04:	f000 fdea 	bl	80088dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2240      	movs	r2, #64	; 0x40
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d10f      	bne.n	8007d36 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	2240      	movs	r2, #64	; 0x40
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b40      	cmp	r3, #64	; 0x40
 8007d22:	d108      	bne.n	8007d36 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2241      	movs	r2, #65	; 0x41
 8007d2a:	4252      	negs	r2, r2
 8007d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	0018      	movs	r0, r3
 8007d32:	f000 f9cd 	bl	80080d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	4013      	ands	r3, r2
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	d10f      	bne.n	8007d64 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d108      	bne.n	8007d64 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2221      	movs	r2, #33	; 0x21
 8007d58:	4252      	negs	r2, r2
 8007d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f000 fdb4 	bl	80088cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d64:	46c0      	nop			; (mov r8, r8)
 8007d66:	46bd      	mov	sp, r7
 8007d68:	b002      	add	sp, #8
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d78:	2317      	movs	r3, #23
 8007d7a:	18fb      	adds	r3, r7, r3
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	223c      	movs	r2, #60	; 0x3c
 8007d84:	5c9b      	ldrb	r3, [r3, r2]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e0ad      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	223c      	movs	r2, #60	; 0x3c
 8007d92:	2101      	movs	r1, #1
 8007d94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b0c      	cmp	r3, #12
 8007d9a:	d100      	bne.n	8007d9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8007d9c:	e076      	b.n	8007e8c <HAL_TIM_PWM_ConfigChannel+0x120>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b0c      	cmp	r3, #12
 8007da2:	d900      	bls.n	8007da6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007da4:	e095      	b.n	8007ed2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d04e      	beq.n	8007e4a <HAL_TIM_PWM_ConfigChannel+0xde>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	d900      	bls.n	8007db4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007db2:	e08e      	b.n	8007ed2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d021      	beq.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007dc0:	e087      	b.n	8007ed2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	0011      	movs	r1, r2
 8007dca:	0018      	movs	r0, r3
 8007dcc:	f000 fa08 	bl	80081e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2108      	movs	r1, #8
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2104      	movs	r1, #4
 8007dec:	438a      	bics	r2, r1
 8007dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6999      	ldr	r1, [r3, #24]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	619a      	str	r2, [r3, #24]
      break;
 8007e02:	e06b      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	0011      	movs	r1, r2
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f000 fa6f 	bl	80082f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2180      	movs	r1, #128	; 0x80
 8007e1e:	0109      	lsls	r1, r1, #4
 8007e20:	430a      	orrs	r2, r1
 8007e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	699a      	ldr	r2, [r3, #24]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4931      	ldr	r1, [pc, #196]	; (8007ef4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007e30:	400a      	ands	r2, r1
 8007e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6999      	ldr	r1, [r3, #24]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	021a      	lsls	r2, r3, #8
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	430a      	orrs	r2, r1
 8007e46:	619a      	str	r2, [r3, #24]
      break;
 8007e48:	e048      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	0011      	movs	r1, r2
 8007e52:	0018      	movs	r0, r3
 8007e54:	f000 fad0 	bl	80083f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69da      	ldr	r2, [r3, #28]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2108      	movs	r1, #8
 8007e64:	430a      	orrs	r2, r1
 8007e66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2104      	movs	r1, #4
 8007e74:	438a      	bics	r2, r1
 8007e76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69d9      	ldr	r1, [r3, #28]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	691a      	ldr	r2, [r3, #16]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	61da      	str	r2, [r3, #28]
      break;
 8007e8a:	e027      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	0011      	movs	r1, r2
 8007e94:	0018      	movs	r0, r3
 8007e96:	f000 fb35 	bl	8008504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2180      	movs	r1, #128	; 0x80
 8007ea6:	0109      	lsls	r1, r1, #4
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	490f      	ldr	r1, [pc, #60]	; (8007ef4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007eb8:	400a      	ands	r2, r1
 8007eba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69d9      	ldr	r1, [r3, #28]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	021a      	lsls	r2, r3, #8
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	61da      	str	r2, [r3, #28]
      break;
 8007ed0:	e004      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007ed2:	2317      	movs	r3, #23
 8007ed4:	18fb      	adds	r3, r7, r3
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	701a      	strb	r2, [r3, #0]
      break;
 8007eda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	223c      	movs	r2, #60	; 0x3c
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	5499      	strb	r1, [r3, r2]

  return status;
 8007ee4:	2317      	movs	r3, #23
 8007ee6:	18fb      	adds	r3, r7, r3
 8007ee8:	781b      	ldrb	r3, [r3, #0]
}
 8007eea:	0018      	movs	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b006      	add	sp, #24
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	fffffbff 	.word	0xfffffbff

08007ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f02:	230f      	movs	r3, #15
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	223c      	movs	r2, #60	; 0x3c
 8007f0e:	5c9b      	ldrb	r3, [r3, r2]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <HAL_TIM_ConfigClockSource+0x20>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e0bc      	b.n	8008092 <HAL_TIM_ConfigClockSource+0x19a>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	223c      	movs	r2, #60	; 0x3c
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	223d      	movs	r2, #61	; 0x3d
 8007f24:	2102      	movs	r1, #2
 8007f26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2277      	movs	r2, #119	; 0x77
 8007f34:	4393      	bics	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4a58      	ldr	r2, [pc, #352]	; (800809c <HAL_TIM_ConfigClockSource+0x1a4>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2280      	movs	r2, #128	; 0x80
 8007f4e:	0192      	lsls	r2, r2, #6
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d040      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0xde>
 8007f54:	2280      	movs	r2, #128	; 0x80
 8007f56:	0192      	lsls	r2, r2, #6
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d900      	bls.n	8007f5e <HAL_TIM_ConfigClockSource+0x66>
 8007f5c:	e088      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
 8007f5e:	2280      	movs	r2, #128	; 0x80
 8007f60:	0152      	lsls	r2, r2, #5
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d100      	bne.n	8007f68 <HAL_TIM_ConfigClockSource+0x70>
 8007f66:	e088      	b.n	800807a <HAL_TIM_ConfigClockSource+0x182>
 8007f68:	2280      	movs	r2, #128	; 0x80
 8007f6a:	0152      	lsls	r2, r2, #5
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d900      	bls.n	8007f72 <HAL_TIM_ConfigClockSource+0x7a>
 8007f70:	e07e      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
 8007f72:	2b70      	cmp	r3, #112	; 0x70
 8007f74:	d018      	beq.n	8007fa8 <HAL_TIM_ConfigClockSource+0xb0>
 8007f76:	d900      	bls.n	8007f7a <HAL_TIM_ConfigClockSource+0x82>
 8007f78:	e07a      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
 8007f7a:	2b60      	cmp	r3, #96	; 0x60
 8007f7c:	d04f      	beq.n	800801e <HAL_TIM_ConfigClockSource+0x126>
 8007f7e:	d900      	bls.n	8007f82 <HAL_TIM_ConfigClockSource+0x8a>
 8007f80:	e076      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
 8007f82:	2b50      	cmp	r3, #80	; 0x50
 8007f84:	d03b      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x106>
 8007f86:	d900      	bls.n	8007f8a <HAL_TIM_ConfigClockSource+0x92>
 8007f88:	e072      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d057      	beq.n	800803e <HAL_TIM_ConfigClockSource+0x146>
 8007f8e:	d900      	bls.n	8007f92 <HAL_TIM_ConfigClockSource+0x9a>
 8007f90:	e06e      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
 8007f92:	2b30      	cmp	r3, #48	; 0x30
 8007f94:	d063      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x166>
 8007f96:	d86b      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d060      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x166>
 8007f9c:	d868      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d05d      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x166>
 8007fa2:	2b10      	cmp	r3, #16
 8007fa4:	d05b      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x166>
 8007fa6:	e063      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fb8:	f000 fb88 	bl	80086cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2277      	movs	r2, #119	; 0x77
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	609a      	str	r2, [r3, #8]
      break;
 8007fd4:	e052      	b.n	800807c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fe6:	f000 fb71 	bl	80086cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2180      	movs	r1, #128	; 0x80
 8007ff6:	01c9      	lsls	r1, r1, #7
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	609a      	str	r2, [r3, #8]
      break;
 8007ffc:	e03e      	b.n	800807c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800800a:	001a      	movs	r2, r3
 800800c:	f000 fae4 	bl	80085d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2150      	movs	r1, #80	; 0x50
 8008016:	0018      	movs	r0, r3
 8008018:	f000 fb3e 	bl	8008698 <TIM_ITRx_SetConfig>
      break;
 800801c:	e02e      	b.n	800807c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800802a:	001a      	movs	r2, r3
 800802c:	f000 fb02 	bl	8008634 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2160      	movs	r1, #96	; 0x60
 8008036:	0018      	movs	r0, r3
 8008038:	f000 fb2e 	bl	8008698 <TIM_ITRx_SetConfig>
      break;
 800803c:	e01e      	b.n	800807c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	001a      	movs	r2, r3
 800804c:	f000 fac4 	bl	80085d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2140      	movs	r1, #64	; 0x40
 8008056:	0018      	movs	r0, r3
 8008058:	f000 fb1e 	bl	8008698 <TIM_ITRx_SetConfig>
      break;
 800805c:	e00e      	b.n	800807c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	0019      	movs	r1, r3
 8008068:	0010      	movs	r0, r2
 800806a:	f000 fb15 	bl	8008698 <TIM_ITRx_SetConfig>
      break;
 800806e:	e005      	b.n	800807c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008070:	230f      	movs	r3, #15
 8008072:	18fb      	adds	r3, r7, r3
 8008074:	2201      	movs	r2, #1
 8008076:	701a      	strb	r2, [r3, #0]
      break;
 8008078:	e000      	b.n	800807c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800807a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	223d      	movs	r2, #61	; 0x3d
 8008080:	2101      	movs	r1, #1
 8008082:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	223c      	movs	r2, #60	; 0x3c
 8008088:	2100      	movs	r1, #0
 800808a:	5499      	strb	r1, [r3, r2]

  return status;
 800808c:	230f      	movs	r3, #15
 800808e:	18fb      	adds	r3, r7, r3
 8008090:	781b      	ldrb	r3, [r3, #0]
}
 8008092:	0018      	movs	r0, r3
 8008094:	46bd      	mov	sp, r7
 8008096:	b004      	add	sp, #16
 8008098:	bd80      	pop	{r7, pc}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	ffff00ff 	.word	0xffff00ff

080080a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080a8:	46c0      	nop			; (mov r8, r8)
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b002      	add	sp, #8
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080b8:	46c0      	nop			; (mov r8, r8)
 80080ba:	46bd      	mov	sp, r7
 80080bc:	b002      	add	sp, #8
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080c8:	46c0      	nop			; (mov r8, r8)
 80080ca:	46bd      	mov	sp, r7
 80080cc:	b002      	add	sp, #8
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080d8:	46c0      	nop			; (mov r8, r8)
 80080da:	46bd      	mov	sp, r7
 80080dc:	b002      	add	sp, #8
 80080de:	bd80      	pop	{r7, pc}

080080e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a34      	ldr	r2, [pc, #208]	; (80081c4 <TIM_Base_SetConfig+0xe4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d008      	beq.n	800810a <TIM_Base_SetConfig+0x2a>
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	2380      	movs	r3, #128	; 0x80
 80080fc:	05db      	lsls	r3, r3, #23
 80080fe:	429a      	cmp	r2, r3
 8008100:	d003      	beq.n	800810a <TIM_Base_SetConfig+0x2a>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a30      	ldr	r2, [pc, #192]	; (80081c8 <TIM_Base_SetConfig+0xe8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d108      	bne.n	800811c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2270      	movs	r2, #112	; 0x70
 800810e:	4393      	bics	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a29      	ldr	r2, [pc, #164]	; (80081c4 <TIM_Base_SetConfig+0xe4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d018      	beq.n	8008156 <TIM_Base_SetConfig+0x76>
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	2380      	movs	r3, #128	; 0x80
 8008128:	05db      	lsls	r3, r3, #23
 800812a:	429a      	cmp	r2, r3
 800812c:	d013      	beq.n	8008156 <TIM_Base_SetConfig+0x76>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a25      	ldr	r2, [pc, #148]	; (80081c8 <TIM_Base_SetConfig+0xe8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00f      	beq.n	8008156 <TIM_Base_SetConfig+0x76>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a24      	ldr	r2, [pc, #144]	; (80081cc <TIM_Base_SetConfig+0xec>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d00b      	beq.n	8008156 <TIM_Base_SetConfig+0x76>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a23      	ldr	r2, [pc, #140]	; (80081d0 <TIM_Base_SetConfig+0xf0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d007      	beq.n	8008156 <TIM_Base_SetConfig+0x76>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a22      	ldr	r2, [pc, #136]	; (80081d4 <TIM_Base_SetConfig+0xf4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d003      	beq.n	8008156 <TIM_Base_SetConfig+0x76>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a21      	ldr	r2, [pc, #132]	; (80081d8 <TIM_Base_SetConfig+0xf8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d108      	bne.n	8008168 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a20      	ldr	r2, [pc, #128]	; (80081dc <TIM_Base_SetConfig+0xfc>)
 800815a:	4013      	ands	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2280      	movs	r2, #128	; 0x80
 800816c:	4393      	bics	r3, r2
 800816e:	001a      	movs	r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	689a      	ldr	r2, [r3, #8]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a0c      	ldr	r2, [pc, #48]	; (80081c4 <TIM_Base_SetConfig+0xe4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00b      	beq.n	80081ae <TIM_Base_SetConfig+0xce>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a0d      	ldr	r2, [pc, #52]	; (80081d0 <TIM_Base_SetConfig+0xf0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d007      	beq.n	80081ae <TIM_Base_SetConfig+0xce>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <TIM_Base_SetConfig+0xf4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d003      	beq.n	80081ae <TIM_Base_SetConfig+0xce>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a0b      	ldr	r2, [pc, #44]	; (80081d8 <TIM_Base_SetConfig+0xf8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d103      	bne.n	80081b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	615a      	str	r2, [r3, #20]
}
 80081bc:	46c0      	nop			; (mov r8, r8)
 80081be:	46bd      	mov	sp, r7
 80081c0:	b004      	add	sp, #16
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40012c00 	.word	0x40012c00
 80081c8:	40000400 	.word	0x40000400
 80081cc:	40002000 	.word	0x40002000
 80081d0:	40014000 	.word	0x40014000
 80081d4:	40014400 	.word	0x40014400
 80081d8:	40014800 	.word	0x40014800
 80081dc:	fffffcff 	.word	0xfffffcff

080081e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	2201      	movs	r2, #1
 80081f0:	4393      	bics	r3, r2
 80081f2:	001a      	movs	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2270      	movs	r2, #112	; 0x70
 800820e:	4393      	bics	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2203      	movs	r2, #3
 8008216:	4393      	bics	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2202      	movs	r2, #2
 8008228:	4393      	bics	r3, r2
 800822a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a27      	ldr	r2, [pc, #156]	; (80082d8 <TIM_OC1_SetConfig+0xf8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00b      	beq.n	8008256 <TIM_OC1_SetConfig+0x76>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a26      	ldr	r2, [pc, #152]	; (80082dc <TIM_OC1_SetConfig+0xfc>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d007      	beq.n	8008256 <TIM_OC1_SetConfig+0x76>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a25      	ldr	r2, [pc, #148]	; (80082e0 <TIM_OC1_SetConfig+0x100>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d003      	beq.n	8008256 <TIM_OC1_SetConfig+0x76>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a24      	ldr	r2, [pc, #144]	; (80082e4 <TIM_OC1_SetConfig+0x104>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d10c      	bne.n	8008270 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2208      	movs	r2, #8
 800825a:	4393      	bics	r3, r2
 800825c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2204      	movs	r2, #4
 800826c:	4393      	bics	r3, r2
 800826e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a19      	ldr	r2, [pc, #100]	; (80082d8 <TIM_OC1_SetConfig+0xf8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00b      	beq.n	8008290 <TIM_OC1_SetConfig+0xb0>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a18      	ldr	r2, [pc, #96]	; (80082dc <TIM_OC1_SetConfig+0xfc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <TIM_OC1_SetConfig+0xb0>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a17      	ldr	r2, [pc, #92]	; (80082e0 <TIM_OC1_SetConfig+0x100>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_OC1_SetConfig+0xb0>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a16      	ldr	r2, [pc, #88]	; (80082e4 <TIM_OC1_SetConfig+0x104>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d111      	bne.n	80082b4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	4a15      	ldr	r2, [pc, #84]	; (80082e8 <TIM_OC1_SetConfig+0x108>)
 8008294:	4013      	ands	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	4a14      	ldr	r2, [pc, #80]	; (80082ec <TIM_OC1_SetConfig+0x10c>)
 800829c:	4013      	ands	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	621a      	str	r2, [r3, #32]
}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	46bd      	mov	sp, r7
 80082d2:	b006      	add	sp, #24
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	40012c00 	.word	0x40012c00
 80082dc:	40014000 	.word	0x40014000
 80082e0:	40014400 	.word	0x40014400
 80082e4:	40014800 	.word	0x40014800
 80082e8:	fffffeff 	.word	0xfffffeff
 80082ec:	fffffdff 	.word	0xfffffdff

080082f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	2210      	movs	r2, #16
 8008300:	4393      	bics	r3, r2
 8008302:	001a      	movs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4a2e      	ldr	r2, [pc, #184]	; (80083d8 <TIM_OC2_SetConfig+0xe8>)
 800831e:	4013      	ands	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4a2d      	ldr	r2, [pc, #180]	; (80083dc <TIM_OC2_SetConfig+0xec>)
 8008326:	4013      	ands	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2220      	movs	r2, #32
 800833a:	4393      	bics	r3, r2
 800833c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	011b      	lsls	r3, r3, #4
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a24      	ldr	r2, [pc, #144]	; (80083e0 <TIM_OC2_SetConfig+0xf0>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d10d      	bne.n	800836e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2280      	movs	r2, #128	; 0x80
 8008356:	4393      	bics	r3, r2
 8008358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2240      	movs	r2, #64	; 0x40
 800836a:	4393      	bics	r3, r2
 800836c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a1b      	ldr	r2, [pc, #108]	; (80083e0 <TIM_OC2_SetConfig+0xf0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d00b      	beq.n	800838e <TIM_OC2_SetConfig+0x9e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <TIM_OC2_SetConfig+0xf4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d007      	beq.n	800838e <TIM_OC2_SetConfig+0x9e>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a19      	ldr	r2, [pc, #100]	; (80083e8 <TIM_OC2_SetConfig+0xf8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d003      	beq.n	800838e <TIM_OC2_SetConfig+0x9e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a18      	ldr	r2, [pc, #96]	; (80083ec <TIM_OC2_SetConfig+0xfc>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d113      	bne.n	80083b6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	4a17      	ldr	r2, [pc, #92]	; (80083f0 <TIM_OC2_SetConfig+0x100>)
 8008392:	4013      	ands	r3, r2
 8008394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	4a16      	ldr	r2, [pc, #88]	; (80083f4 <TIM_OC2_SetConfig+0x104>)
 800839a:	4013      	ands	r3, r2
 800839c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	621a      	str	r2, [r3, #32]
}
 80083d0:	46c0      	nop			; (mov r8, r8)
 80083d2:	46bd      	mov	sp, r7
 80083d4:	b006      	add	sp, #24
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	ffff8fff 	.word	0xffff8fff
 80083dc:	fffffcff 	.word	0xfffffcff
 80083e0:	40012c00 	.word	0x40012c00
 80083e4:	40014000 	.word	0x40014000
 80083e8:	40014400 	.word	0x40014400
 80083ec:	40014800 	.word	0x40014800
 80083f0:	fffffbff 	.word	0xfffffbff
 80083f4:	fffff7ff 	.word	0xfffff7ff

080083f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	4a35      	ldr	r2, [pc, #212]	; (80084dc <TIM_OC3_SetConfig+0xe4>)
 8008408:	401a      	ands	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2270      	movs	r2, #112	; 0x70
 8008424:	4393      	bics	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2203      	movs	r2, #3
 800842c:	4393      	bics	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	4a28      	ldr	r2, [pc, #160]	; (80084e0 <TIM_OC3_SetConfig+0xe8>)
 800843e:	4013      	ands	r3, r2
 8008440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a24      	ldr	r2, [pc, #144]	; (80084e4 <TIM_OC3_SetConfig+0xec>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d10d      	bne.n	8008472 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	4a23      	ldr	r2, [pc, #140]	; (80084e8 <TIM_OC3_SetConfig+0xf0>)
 800845a:	4013      	ands	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	4a1f      	ldr	r2, [pc, #124]	; (80084ec <TIM_OC3_SetConfig+0xf4>)
 800846e:	4013      	ands	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <TIM_OC3_SetConfig+0xec>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00b      	beq.n	8008492 <TIM_OC3_SetConfig+0x9a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a1c      	ldr	r2, [pc, #112]	; (80084f0 <TIM_OC3_SetConfig+0xf8>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d007      	beq.n	8008492 <TIM_OC3_SetConfig+0x9a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <TIM_OC3_SetConfig+0xfc>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d003      	beq.n	8008492 <TIM_OC3_SetConfig+0x9a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a1a      	ldr	r2, [pc, #104]	; (80084f8 <TIM_OC3_SetConfig+0x100>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d113      	bne.n	80084ba <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	4a19      	ldr	r2, [pc, #100]	; (80084fc <TIM_OC3_SetConfig+0x104>)
 8008496:	4013      	ands	r3, r2
 8008498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	4a18      	ldr	r2, [pc, #96]	; (8008500 <TIM_OC3_SetConfig+0x108>)
 800849e:	4013      	ands	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	621a      	str	r2, [r3, #32]
}
 80084d4:	46c0      	nop			; (mov r8, r8)
 80084d6:	46bd      	mov	sp, r7
 80084d8:	b006      	add	sp, #24
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	fffffeff 	.word	0xfffffeff
 80084e0:	fffffdff 	.word	0xfffffdff
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	fffff7ff 	.word	0xfffff7ff
 80084ec:	fffffbff 	.word	0xfffffbff
 80084f0:	40014000 	.word	0x40014000
 80084f4:	40014400 	.word	0x40014400
 80084f8:	40014800 	.word	0x40014800
 80084fc:	ffffefff 	.word	0xffffefff
 8008500:	ffffdfff 	.word	0xffffdfff

08008504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	4a28      	ldr	r2, [pc, #160]	; (80085b4 <TIM_OC4_SetConfig+0xb0>)
 8008514:	401a      	ands	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4a22      	ldr	r2, [pc, #136]	; (80085b8 <TIM_OC4_SetConfig+0xb4>)
 8008530:	4013      	ands	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4a21      	ldr	r2, [pc, #132]	; (80085bc <TIM_OC4_SetConfig+0xb8>)
 8008538:	4013      	ands	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	4313      	orrs	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4a1d      	ldr	r2, [pc, #116]	; (80085c0 <TIM_OC4_SetConfig+0xbc>)
 800854c:	4013      	ands	r3, r2
 800854e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	031b      	lsls	r3, r3, #12
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	4313      	orrs	r3, r2
 800855a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a19      	ldr	r2, [pc, #100]	; (80085c4 <TIM_OC4_SetConfig+0xc0>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d00b      	beq.n	800857c <TIM_OC4_SetConfig+0x78>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <TIM_OC4_SetConfig+0xc4>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d007      	beq.n	800857c <TIM_OC4_SetConfig+0x78>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a17      	ldr	r2, [pc, #92]	; (80085cc <TIM_OC4_SetConfig+0xc8>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d003      	beq.n	800857c <TIM_OC4_SetConfig+0x78>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a16      	ldr	r2, [pc, #88]	; (80085d0 <TIM_OC4_SetConfig+0xcc>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d109      	bne.n	8008590 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <TIM_OC4_SetConfig+0xd0>)
 8008580:	4013      	ands	r3, r2
 8008582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	695b      	ldr	r3, [r3, #20]
 8008588:	019b      	lsls	r3, r3, #6
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	621a      	str	r2, [r3, #32]
}
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	46bd      	mov	sp, r7
 80085ae:	b006      	add	sp, #24
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	ffffefff 	.word	0xffffefff
 80085b8:	ffff8fff 	.word	0xffff8fff
 80085bc:	fffffcff 	.word	0xfffffcff
 80085c0:	ffffdfff 	.word	0xffffdfff
 80085c4:	40012c00 	.word	0x40012c00
 80085c8:	40014000 	.word	0x40014000
 80085cc:	40014400 	.word	0x40014400
 80085d0:	40014800 	.word	0x40014800
 80085d4:	ffffbfff 	.word	0xffffbfff

080085d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	2201      	movs	r2, #1
 80085f0:	4393      	bics	r3, r2
 80085f2:	001a      	movs	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	22f0      	movs	r2, #240	; 0xf0
 8008602:	4393      	bics	r3, r2
 8008604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	4313      	orrs	r3, r2
 800860e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	220a      	movs	r2, #10
 8008614:	4393      	bics	r3, r2
 8008616:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	621a      	str	r2, [r3, #32]
}
 800862c:	46c0      	nop			; (mov r8, r8)
 800862e:	46bd      	mov	sp, r7
 8008630:	b006      	add	sp, #24
 8008632:	bd80      	pop	{r7, pc}

08008634 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	2210      	movs	r2, #16
 8008646:	4393      	bics	r3, r2
 8008648:	001a      	movs	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	4a0d      	ldr	r2, [pc, #52]	; (8008694 <TIM_TI2_ConfigInputStage+0x60>)
 800865e:	4013      	ands	r3, r2
 8008660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	031b      	lsls	r3, r3, #12
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4313      	orrs	r3, r2
 800866a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	22a0      	movs	r2, #160	; 0xa0
 8008670:	4393      	bics	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	4313      	orrs	r3, r2
 800867c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	621a      	str	r2, [r3, #32]
}
 800868a:	46c0      	nop			; (mov r8, r8)
 800868c:	46bd      	mov	sp, r7
 800868e:	b006      	add	sp, #24
 8008690:	bd80      	pop	{r7, pc}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	ffff0fff 	.word	0xffff0fff

08008698 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2270      	movs	r2, #112	; 0x70
 80086ac:	4393      	bics	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	2207      	movs	r2, #7
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	609a      	str	r2, [r3, #8]
}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b004      	add	sp, #16
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	4a09      	ldr	r2, [pc, #36]	; (8008708 <TIM_ETR_SetConfig+0x3c>)
 80086e4:	4013      	ands	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	021a      	lsls	r2, r3, #8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	609a      	str	r2, [r3, #8]
}
 8008700:	46c0      	nop			; (mov r8, r8)
 8008702:	46bd      	mov	sp, r7
 8008704:	b006      	add	sp, #24
 8008706:	bd80      	pop	{r7, pc}
 8008708:	ffff00ff 	.word	0xffff00ff

0800870c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	221f      	movs	r2, #31
 800871c:	4013      	ands	r3, r2
 800871e:	2201      	movs	r2, #1
 8008720:	409a      	lsls	r2, r3
 8008722:	0013      	movs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	43d2      	mvns	r2, r2
 800872e:	401a      	ands	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6a1a      	ldr	r2, [r3, #32]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	211f      	movs	r1, #31
 800873c:	400b      	ands	r3, r1
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4099      	lsls	r1, r3
 8008742:	000b      	movs	r3, r1
 8008744:	431a      	orrs	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	621a      	str	r2, [r3, #32]
}
 800874a:	46c0      	nop			; (mov r8, r8)
 800874c:	46bd      	mov	sp, r7
 800874e:	b006      	add	sp, #24
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	223c      	movs	r2, #60	; 0x3c
 8008762:	5c9b      	ldrb	r3, [r3, r2]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d101      	bne.n	800876c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008768:	2302      	movs	r3, #2
 800876a:	e047      	b.n	80087fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	223c      	movs	r2, #60	; 0x3c
 8008770:	2101      	movs	r1, #1
 8008772:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	223d      	movs	r2, #61	; 0x3d
 8008778:	2102      	movs	r1, #2
 800877a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2270      	movs	r2, #112	; 0x70
 8008790:	4393      	bics	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a16      	ldr	r2, [pc, #88]	; (8008804 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00f      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	05db      	lsls	r3, r3, #23
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d009      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a11      	ldr	r2, [pc, #68]	; (8008808 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d004      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a10      	ldr	r2, [pc, #64]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d10c      	bne.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2280      	movs	r2, #128	; 0x80
 80087d4:	4393      	bics	r3, r2
 80087d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	223d      	movs	r2, #61	; 0x3d
 80087ee:	2101      	movs	r1, #1
 80087f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	223c      	movs	r2, #60	; 0x3c
 80087f6:	2100      	movs	r1, #0
 80087f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	0018      	movs	r0, r3
 80087fe:	46bd      	mov	sp, r7
 8008800:	b004      	add	sp, #16
 8008802:	bd80      	pop	{r7, pc}
 8008804:	40012c00 	.word	0x40012c00
 8008808:	40000400 	.word	0x40000400
 800880c:	40014000 	.word	0x40014000

08008810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	223c      	movs	r2, #60	; 0x3c
 8008822:	5c9b      	ldrb	r3, [r3, r2]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008828:	2302      	movs	r3, #2
 800882a:	e03e      	b.n	80088aa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	223c      	movs	r2, #60	; 0x3c
 8008830:	2101      	movs	r1, #1
 8008832:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	22ff      	movs	r2, #255	; 0xff
 8008838:	4393      	bics	r3, r2
 800883a:	001a      	movs	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4a1b      	ldr	r2, [pc, #108]	; (80088b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8008848:	401a      	ands	r2, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a18      	ldr	r2, [pc, #96]	; (80088b8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008856:	401a      	ands	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4a16      	ldr	r2, [pc, #88]	; (80088bc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008864:	401a      	ands	r2, r3
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4a13      	ldr	r2, [pc, #76]	; (80088c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8008872:	401a      	ands	r2, r3
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4a11      	ldr	r2, [pc, #68]	; (80088c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8008880:	401a      	ands	r2, r3
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4a0e      	ldr	r2, [pc, #56]	; (80088c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800888e:	401a      	ands	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	223c      	movs	r2, #60	; 0x3c
 80088a4:	2100      	movs	r1, #0
 80088a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	0018      	movs	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	b004      	add	sp, #16
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	46c0      	nop			; (mov r8, r8)
 80088b4:	fffffcff 	.word	0xfffffcff
 80088b8:	fffffbff 	.word	0xfffffbff
 80088bc:	fffff7ff 	.word	0xfffff7ff
 80088c0:	ffffefff 	.word	0xffffefff
 80088c4:	ffffdfff 	.word	0xffffdfff
 80088c8:	ffffbfff 	.word	0xffffbfff

080088cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088d4:	46c0      	nop			; (mov r8, r8)
 80088d6:	46bd      	mov	sp, r7
 80088d8:	b002      	add	sp, #8
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088e4:	46c0      	nop			; (mov r8, r8)
 80088e6:	46bd      	mov	sp, r7
 80088e8:	b002      	add	sp, #8
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e044      	b.n	8008988 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d107      	bne.n	8008916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2278      	movs	r2, #120	; 0x78
 800890a:	2100      	movs	r1, #0
 800890c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	0018      	movs	r0, r3
 8008912:	f7fc fbc3 	bl	800509c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2224      	movs	r2, #36	; 0x24
 800891a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2101      	movs	r1, #1
 8008928:	438a      	bics	r2, r1
 800892a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	0018      	movs	r0, r3
 8008930:	f000 f93a 	bl	8008ba8 <UART_SetConfig>
 8008934:	0003      	movs	r3, r0
 8008936:	2b01      	cmp	r3, #1
 8008938:	d101      	bne.n	800893e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e024      	b.n	8008988 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	0018      	movs	r0, r3
 800894a:	f000 fb15 	bl	8008f78 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	490d      	ldr	r1, [pc, #52]	; (8008990 <HAL_UART_Init+0xa4>)
 800895a:	400a      	ands	r2, r1
 800895c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	212a      	movs	r1, #42	; 0x2a
 800896a:	438a      	bics	r2, r1
 800896c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2101      	movs	r1, #1
 800897a:	430a      	orrs	r2, r1
 800897c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	0018      	movs	r0, r3
 8008982:	f000 fbad 	bl	80090e0 <UART_CheckIdleState>
 8008986:	0003      	movs	r3, r0
}
 8008988:	0018      	movs	r0, r3
 800898a:	46bd      	mov	sp, r7
 800898c:	b002      	add	sp, #8
 800898e:	bd80      	pop	{r7, pc}
 8008990:	ffffb7ff 	.word	0xffffb7ff

08008994 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af02      	add	r7, sp, #8
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	1dbb      	adds	r3, r7, #6
 80089a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d000      	beq.n	80089ae <HAL_UART_Transmit+0x1a>
 80089ac:	e08d      	b.n	8008aca <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <HAL_UART_Transmit+0x28>
 80089b4:	1dbb      	adds	r3, r7, #6
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e085      	b.n	8008acc <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	2380      	movs	r3, #128	; 0x80
 80089c6:	015b      	lsls	r3, r3, #5
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d109      	bne.n	80089e0 <HAL_UART_Transmit+0x4c>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d105      	bne.n	80089e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2201      	movs	r2, #1
 80089d8:	4013      	ands	r3, r2
 80089da:	d001      	beq.n	80089e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e075      	b.n	8008acc <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2284      	movs	r2, #132	; 0x84
 80089e4:	2100      	movs	r1, #0
 80089e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2221      	movs	r2, #33	; 0x21
 80089ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ee:	f7fc fbfb 	bl	80051e8 <HAL_GetTick>
 80089f2:	0003      	movs	r3, r0
 80089f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	1dba      	adds	r2, r7, #6
 80089fa:	2150      	movs	r1, #80	; 0x50
 80089fc:	8812      	ldrh	r2, [r2, #0]
 80089fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	1dba      	adds	r2, r7, #6
 8008a04:	2152      	movs	r1, #82	; 0x52
 8008a06:	8812      	ldrh	r2, [r2, #0]
 8008a08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	2380      	movs	r3, #128	; 0x80
 8008a10:	015b      	lsls	r3, r3, #5
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d108      	bne.n	8008a28 <HAL_UART_Transmit+0x94>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d104      	bne.n	8008a28 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	61bb      	str	r3, [r7, #24]
 8008a26:	e003      	b.n	8008a30 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a30:	e030      	b.n	8008a94 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	0013      	movs	r3, r2
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2180      	movs	r1, #128	; 0x80
 8008a40:	f000 fbf6 	bl	8009230 <UART_WaitOnFlagUntilTimeout>
 8008a44:	1e03      	subs	r3, r0, #0
 8008a46:	d004      	beq.n	8008a52 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e03c      	b.n	8008acc <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	881a      	ldrh	r2, [r3, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	05d2      	lsls	r2, r2, #23
 8008a62:	0dd2      	lsrs	r2, r2, #23
 8008a64:	b292      	uxth	r2, r2
 8008a66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	3302      	adds	r3, #2
 8008a6c:	61bb      	str	r3, [r7, #24]
 8008a6e:	e008      	b.n	8008a82 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	781a      	ldrb	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	b292      	uxth	r2, r2
 8008a7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2252      	movs	r2, #82	; 0x52
 8008a86:	5a9b      	ldrh	r3, [r3, r2]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b299      	uxth	r1, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2252      	movs	r2, #82	; 0x52
 8008a92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2252      	movs	r2, #82	; 0x52
 8008a98:	5a9b      	ldrh	r3, [r3, r2]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1c8      	bne.n	8008a32 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	0013      	movs	r3, r2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2140      	movs	r1, #64	; 0x40
 8008aae:	f000 fbbf 	bl	8009230 <UART_WaitOnFlagUntilTimeout>
 8008ab2:	1e03      	subs	r3, r0, #0
 8008ab4:	d004      	beq.n	8008ac0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e005      	b.n	8008acc <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e000      	b.n	8008acc <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8008aca:	2302      	movs	r3, #2
  }
}
 8008acc:	0018      	movs	r0, r3
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	b008      	add	sp, #32
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	1dbb      	adds	r3, r7, #6
 8008ae0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2280      	movs	r2, #128	; 0x80
 8008ae6:	589b      	ldr	r3, [r3, r2]
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	d145      	bne.n	8008b78 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_UART_Receive_IT+0x26>
 8008af2:	1dbb      	adds	r3, r7, #6
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e03d      	b.n	8008b7a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	2380      	movs	r3, #128	; 0x80
 8008b04:	015b      	lsls	r3, r3, #5
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d109      	bne.n	8008b1e <HAL_UART_Receive_IT+0x4a>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d105      	bne.n	8008b1e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2201      	movs	r2, #1
 8008b16:	4013      	ands	r3, r2
 8008b18:	d001      	beq.n	8008b1e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e02d      	b.n	8008b7a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	2380      	movs	r3, #128	; 0x80
 8008b2c:	041b      	lsls	r3, r3, #16
 8008b2e:	4013      	ands	r3, r2
 8008b30:	d019      	beq.n	8008b66 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b32:	f3ef 8310 	mrs	r3, PRIMASK
 8008b36:	613b      	str	r3, [r7, #16]
  return(result);
 8008b38:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f383 8810 	msr	PRIMASK, r3
}
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2180      	movs	r1, #128	; 0x80
 8008b54:	04c9      	lsls	r1, r1, #19
 8008b56:	430a      	orrs	r2, r1
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	f383 8810 	msr	PRIMASK, r3
}
 8008b64:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b66:	1dbb      	adds	r3, r7, #6
 8008b68:	881a      	ldrh	r2, [r3, #0]
 8008b6a:	68b9      	ldr	r1, [r7, #8]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f000 fbc8 	bl	8009304 <UART_Start_Receive_IT>
 8008b74:	0003      	movs	r3, r0
 8008b76:	e000      	b.n	8008b7a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008b78:	2302      	movs	r3, #2
  }
}
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	b008      	add	sp, #32
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008b8a:	46c0      	nop			; (mov r8, r8)
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	b002      	add	sp, #8
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	000a      	movs	r2, r1
 8008b9c:	1cbb      	adds	r3, r7, #2
 8008b9e:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba0:	46c0      	nop			; (mov r8, r8)
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	b002      	add	sp, #8
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bb0:	231e      	movs	r3, #30
 8008bb2:	18fb      	adds	r3, r7, r3
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4abe      	ldr	r2, [pc, #760]	; (8008ed0 <UART_SetConfig+0x328>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	0019      	movs	r1, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	697a      	ldr	r2, [r7, #20]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	4ab9      	ldr	r2, [pc, #740]	; (8008ed4 <UART_SetConfig+0x32c>)
 8008bee:	4013      	ands	r3, r2
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	4ab0      	ldr	r2, [pc, #704]	; (8008ed8 <UART_SetConfig+0x330>)
 8008c16:	4013      	ands	r3, r2
 8008c18:	0019      	movs	r1, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4aac      	ldr	r2, [pc, #688]	; (8008edc <UART_SetConfig+0x334>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d127      	bne.n	8008c7e <UART_SetConfig+0xd6>
 8008c2e:	4bac      	ldr	r3, [pc, #688]	; (8008ee0 <UART_SetConfig+0x338>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	2203      	movs	r2, #3
 8008c34:	4013      	ands	r3, r2
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d00d      	beq.n	8008c56 <UART_SetConfig+0xae>
 8008c3a:	d81b      	bhi.n	8008c74 <UART_SetConfig+0xcc>
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d014      	beq.n	8008c6a <UART_SetConfig+0xc2>
 8008c40:	d818      	bhi.n	8008c74 <UART_SetConfig+0xcc>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <UART_SetConfig+0xa4>
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d00a      	beq.n	8008c60 <UART_SetConfig+0xb8>
 8008c4a:	e013      	b.n	8008c74 <UART_SetConfig+0xcc>
 8008c4c:	231f      	movs	r3, #31
 8008c4e:	18fb      	adds	r3, r7, r3
 8008c50:	2200      	movs	r2, #0
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	e0bd      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008c56:	231f      	movs	r3, #31
 8008c58:	18fb      	adds	r3, r7, r3
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	e0b8      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008c60:	231f      	movs	r3, #31
 8008c62:	18fb      	adds	r3, r7, r3
 8008c64:	2204      	movs	r2, #4
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	e0b3      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008c6a:	231f      	movs	r3, #31
 8008c6c:	18fb      	adds	r3, r7, r3
 8008c6e:	2208      	movs	r2, #8
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	e0ae      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008c74:	231f      	movs	r3, #31
 8008c76:	18fb      	adds	r3, r7, r3
 8008c78:	2210      	movs	r2, #16
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e0a9      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a98      	ldr	r2, [pc, #608]	; (8008ee4 <UART_SetConfig+0x33c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d134      	bne.n	8008cf2 <UART_SetConfig+0x14a>
 8008c88:	4b95      	ldr	r3, [pc, #596]	; (8008ee0 <UART_SetConfig+0x338>)
 8008c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c8c:	23c0      	movs	r3, #192	; 0xc0
 8008c8e:	029b      	lsls	r3, r3, #10
 8008c90:	4013      	ands	r3, r2
 8008c92:	22c0      	movs	r2, #192	; 0xc0
 8008c94:	0292      	lsls	r2, r2, #10
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d017      	beq.n	8008cca <UART_SetConfig+0x122>
 8008c9a:	22c0      	movs	r2, #192	; 0xc0
 8008c9c:	0292      	lsls	r2, r2, #10
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d822      	bhi.n	8008ce8 <UART_SetConfig+0x140>
 8008ca2:	2280      	movs	r2, #128	; 0x80
 8008ca4:	0292      	lsls	r2, r2, #10
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d019      	beq.n	8008cde <UART_SetConfig+0x136>
 8008caa:	2280      	movs	r2, #128	; 0x80
 8008cac:	0292      	lsls	r2, r2, #10
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d81a      	bhi.n	8008ce8 <UART_SetConfig+0x140>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <UART_SetConfig+0x118>
 8008cb6:	2280      	movs	r2, #128	; 0x80
 8008cb8:	0252      	lsls	r2, r2, #9
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00a      	beq.n	8008cd4 <UART_SetConfig+0x12c>
 8008cbe:	e013      	b.n	8008ce8 <UART_SetConfig+0x140>
 8008cc0:	231f      	movs	r3, #31
 8008cc2:	18fb      	adds	r3, r7, r3
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e083      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008cca:	231f      	movs	r3, #31
 8008ccc:	18fb      	adds	r3, r7, r3
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
 8008cd2:	e07e      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008cd4:	231f      	movs	r3, #31
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	2204      	movs	r2, #4
 8008cda:	701a      	strb	r2, [r3, #0]
 8008cdc:	e079      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008cde:	231f      	movs	r3, #31
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	2208      	movs	r2, #8
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	e074      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008ce8:	231f      	movs	r3, #31
 8008cea:	18fb      	adds	r3, r7, r3
 8008cec:	2210      	movs	r2, #16
 8008cee:	701a      	strb	r2, [r3, #0]
 8008cf0:	e06f      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a7c      	ldr	r2, [pc, #496]	; (8008ee8 <UART_SetConfig+0x340>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d134      	bne.n	8008d66 <UART_SetConfig+0x1be>
 8008cfc:	4b78      	ldr	r3, [pc, #480]	; (8008ee0 <UART_SetConfig+0x338>)
 8008cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d00:	23c0      	movs	r3, #192	; 0xc0
 8008d02:	031b      	lsls	r3, r3, #12
 8008d04:	4013      	ands	r3, r2
 8008d06:	22c0      	movs	r2, #192	; 0xc0
 8008d08:	0312      	lsls	r2, r2, #12
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d017      	beq.n	8008d3e <UART_SetConfig+0x196>
 8008d0e:	22c0      	movs	r2, #192	; 0xc0
 8008d10:	0312      	lsls	r2, r2, #12
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d822      	bhi.n	8008d5c <UART_SetConfig+0x1b4>
 8008d16:	2280      	movs	r2, #128	; 0x80
 8008d18:	0312      	lsls	r2, r2, #12
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d019      	beq.n	8008d52 <UART_SetConfig+0x1aa>
 8008d1e:	2280      	movs	r2, #128	; 0x80
 8008d20:	0312      	lsls	r2, r2, #12
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d81a      	bhi.n	8008d5c <UART_SetConfig+0x1b4>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d004      	beq.n	8008d34 <UART_SetConfig+0x18c>
 8008d2a:	2280      	movs	r2, #128	; 0x80
 8008d2c:	02d2      	lsls	r2, r2, #11
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00a      	beq.n	8008d48 <UART_SetConfig+0x1a0>
 8008d32:	e013      	b.n	8008d5c <UART_SetConfig+0x1b4>
 8008d34:	231f      	movs	r3, #31
 8008d36:	18fb      	adds	r3, r7, r3
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	e049      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008d3e:	231f      	movs	r3, #31
 8008d40:	18fb      	adds	r3, r7, r3
 8008d42:	2202      	movs	r2, #2
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	e044      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008d48:	231f      	movs	r3, #31
 8008d4a:	18fb      	adds	r3, r7, r3
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	e03f      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008d52:	231f      	movs	r3, #31
 8008d54:	18fb      	adds	r3, r7, r3
 8008d56:	2208      	movs	r2, #8
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	e03a      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008d5c:	231f      	movs	r3, #31
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	2210      	movs	r2, #16
 8008d62:	701a      	strb	r2, [r3, #0]
 8008d64:	e035      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a60      	ldr	r2, [pc, #384]	; (8008eec <UART_SetConfig+0x344>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d104      	bne.n	8008d7a <UART_SetConfig+0x1d2>
 8008d70:	231f      	movs	r3, #31
 8008d72:	18fb      	adds	r3, r7, r3
 8008d74:	2200      	movs	r2, #0
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	e02b      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a5c      	ldr	r2, [pc, #368]	; (8008ef0 <UART_SetConfig+0x348>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d104      	bne.n	8008d8e <UART_SetConfig+0x1e6>
 8008d84:	231f      	movs	r3, #31
 8008d86:	18fb      	adds	r3, r7, r3
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e021      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a58      	ldr	r2, [pc, #352]	; (8008ef4 <UART_SetConfig+0x34c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d104      	bne.n	8008da2 <UART_SetConfig+0x1fa>
 8008d98:	231f      	movs	r3, #31
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	e017      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a54      	ldr	r2, [pc, #336]	; (8008ef8 <UART_SetConfig+0x350>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d104      	bne.n	8008db6 <UART_SetConfig+0x20e>
 8008dac:	231f      	movs	r3, #31
 8008dae:	18fb      	adds	r3, r7, r3
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	e00d      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a50      	ldr	r2, [pc, #320]	; (8008efc <UART_SetConfig+0x354>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d104      	bne.n	8008dca <UART_SetConfig+0x222>
 8008dc0:	231f      	movs	r3, #31
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	e003      	b.n	8008dd2 <UART_SetConfig+0x22a>
 8008dca:	231f      	movs	r3, #31
 8008dcc:	18fb      	adds	r3, r7, r3
 8008dce:	2210      	movs	r2, #16
 8008dd0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	69da      	ldr	r2, [r3, #28]
 8008dd6:	2380      	movs	r3, #128	; 0x80
 8008dd8:	021b      	lsls	r3, r3, #8
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d15c      	bne.n	8008e98 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8008dde:	231f      	movs	r3, #31
 8008de0:	18fb      	adds	r3, r7, r3
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d015      	beq.n	8008e14 <UART_SetConfig+0x26c>
 8008de8:	dc18      	bgt.n	8008e1c <UART_SetConfig+0x274>
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d00d      	beq.n	8008e0a <UART_SetConfig+0x262>
 8008dee:	dc15      	bgt.n	8008e1c <UART_SetConfig+0x274>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <UART_SetConfig+0x252>
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d005      	beq.n	8008e04 <UART_SetConfig+0x25c>
 8008df8:	e010      	b.n	8008e1c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dfa:	f7fe fb33 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8008dfe:	0003      	movs	r3, r0
 8008e00:	61bb      	str	r3, [r7, #24]
        break;
 8008e02:	e012      	b.n	8008e2a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e04:	4b3e      	ldr	r3, [pc, #248]	; (8008f00 <UART_SetConfig+0x358>)
 8008e06:	61bb      	str	r3, [r7, #24]
        break;
 8008e08:	e00f      	b.n	8008e2a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e0a:	f7fe faaf 	bl	800736c <HAL_RCC_GetSysClockFreq>
 8008e0e:	0003      	movs	r3, r0
 8008e10:	61bb      	str	r3, [r7, #24]
        break;
 8008e12:	e00a      	b.n	8008e2a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e14:	2380      	movs	r3, #128	; 0x80
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	61bb      	str	r3, [r7, #24]
        break;
 8008e1a:	e006      	b.n	8008e2a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e20:	231e      	movs	r3, #30
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	2201      	movs	r2, #1
 8008e26:	701a      	strb	r2, [r3, #0]
        break;
 8008e28:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d100      	bne.n	8008e32 <UART_SetConfig+0x28a>
 8008e30:	e095      	b.n	8008f5e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	005a      	lsls	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	085b      	lsrs	r3, r3, #1
 8008e3c:	18d2      	adds	r2, r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	0019      	movs	r1, r3
 8008e44:	0010      	movs	r0, r2
 8008e46:	f7f7 f97b 	bl	8000140 <__udivsi3>
 8008e4a:	0003      	movs	r3, r0
 8008e4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2b0f      	cmp	r3, #15
 8008e52:	d91c      	bls.n	8008e8e <UART_SetConfig+0x2e6>
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	2380      	movs	r3, #128	; 0x80
 8008e58:	025b      	lsls	r3, r3, #9
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d217      	bcs.n	8008e8e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	200e      	movs	r0, #14
 8008e64:	183b      	adds	r3, r7, r0
 8008e66:	210f      	movs	r1, #15
 8008e68:	438a      	bics	r2, r1
 8008e6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2207      	movs	r2, #7
 8008e74:	4013      	ands	r3, r2
 8008e76:	b299      	uxth	r1, r3
 8008e78:	183b      	adds	r3, r7, r0
 8008e7a:	183a      	adds	r2, r7, r0
 8008e7c:	8812      	ldrh	r2, [r2, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	183a      	adds	r2, r7, r0
 8008e88:	8812      	ldrh	r2, [r2, #0]
 8008e8a:	60da      	str	r2, [r3, #12]
 8008e8c:	e067      	b.n	8008f5e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8008e8e:	231e      	movs	r3, #30
 8008e90:	18fb      	adds	r3, r7, r3
 8008e92:	2201      	movs	r2, #1
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	e062      	b.n	8008f5e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e98:	231f      	movs	r3, #31
 8008e9a:	18fb      	adds	r3, r7, r3
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	2b08      	cmp	r3, #8
 8008ea0:	d030      	beq.n	8008f04 <UART_SetConfig+0x35c>
 8008ea2:	dc33      	bgt.n	8008f0c <UART_SetConfig+0x364>
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d00d      	beq.n	8008ec4 <UART_SetConfig+0x31c>
 8008ea8:	dc30      	bgt.n	8008f0c <UART_SetConfig+0x364>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <UART_SetConfig+0x30c>
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d005      	beq.n	8008ebe <UART_SetConfig+0x316>
 8008eb2:	e02b      	b.n	8008f0c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eb4:	f7fe fad6 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8008eb8:	0003      	movs	r3, r0
 8008eba:	61bb      	str	r3, [r7, #24]
        break;
 8008ebc:	e02d      	b.n	8008f1a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ebe:	4b10      	ldr	r3, [pc, #64]	; (8008f00 <UART_SetConfig+0x358>)
 8008ec0:	61bb      	str	r3, [r7, #24]
        break;
 8008ec2:	e02a      	b.n	8008f1a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ec4:	f7fe fa52 	bl	800736c <HAL_RCC_GetSysClockFreq>
 8008ec8:	0003      	movs	r3, r0
 8008eca:	61bb      	str	r3, [r7, #24]
        break;
 8008ecc:	e025      	b.n	8008f1a <UART_SetConfig+0x372>
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	efff69f3 	.word	0xefff69f3
 8008ed4:	ffffcfff 	.word	0xffffcfff
 8008ed8:	fffff4ff 	.word	0xfffff4ff
 8008edc:	40013800 	.word	0x40013800
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	40004400 	.word	0x40004400
 8008ee8:	40004800 	.word	0x40004800
 8008eec:	40004c00 	.word	0x40004c00
 8008ef0:	40005000 	.word	0x40005000
 8008ef4:	40011400 	.word	0x40011400
 8008ef8:	40011800 	.word	0x40011800
 8008efc:	40011c00 	.word	0x40011c00
 8008f00:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	61bb      	str	r3, [r7, #24]
        break;
 8008f0a:	e006      	b.n	8008f1a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f10:	231e      	movs	r3, #30
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
        break;
 8008f18:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01e      	beq.n	8008f5e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	085a      	lsrs	r2, r3, #1
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	18d2      	adds	r2, r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	0019      	movs	r1, r3
 8008f30:	0010      	movs	r0, r2
 8008f32:	f7f7 f905 	bl	8000140 <__udivsi3>
 8008f36:	0003      	movs	r3, r0
 8008f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b0f      	cmp	r3, #15
 8008f3e:	d90a      	bls.n	8008f56 <UART_SetConfig+0x3ae>
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	2380      	movs	r3, #128	; 0x80
 8008f44:	025b      	lsls	r3, r3, #9
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d205      	bcs.n	8008f56 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60da      	str	r2, [r3, #12]
 8008f54:	e003      	b.n	8008f5e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8008f56:	231e      	movs	r3, #30
 8008f58:	18fb      	adds	r3, r7, r3
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008f6a:	231e      	movs	r3, #30
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	781b      	ldrb	r3, [r3, #0]
}
 8008f70:	0018      	movs	r0, r3
 8008f72:	46bd      	mov	sp, r7
 8008f74:	b008      	add	sp, #32
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2201      	movs	r2, #1
 8008f86:	4013      	ands	r3, r2
 8008f88:	d00b      	beq.n	8008fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	4a4a      	ldr	r2, [pc, #296]	; (80090bc <UART_AdvFeatureConfig+0x144>)
 8008f92:	4013      	ands	r3, r2
 8008f94:	0019      	movs	r1, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	4013      	ands	r3, r2
 8008faa:	d00b      	beq.n	8008fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	4a43      	ldr	r2, [pc, #268]	; (80090c0 <UART_AdvFeatureConfig+0x148>)
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	2204      	movs	r2, #4
 8008fca:	4013      	ands	r3, r2
 8008fcc:	d00b      	beq.n	8008fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	4a3b      	ldr	r2, [pc, #236]	; (80090c4 <UART_AdvFeatureConfig+0x14c>)
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	0019      	movs	r1, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	2208      	movs	r2, #8
 8008fec:	4013      	ands	r3, r2
 8008fee:	d00b      	beq.n	8009008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	4a34      	ldr	r2, [pc, #208]	; (80090c8 <UART_AdvFeatureConfig+0x150>)
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	0019      	movs	r1, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	2210      	movs	r2, #16
 800900e:	4013      	ands	r3, r2
 8009010:	d00b      	beq.n	800902a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	4a2c      	ldr	r2, [pc, #176]	; (80090cc <UART_AdvFeatureConfig+0x154>)
 800901a:	4013      	ands	r3, r2
 800901c:	0019      	movs	r1, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	2220      	movs	r2, #32
 8009030:	4013      	ands	r3, r2
 8009032:	d00b      	beq.n	800904c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	4a25      	ldr	r2, [pc, #148]	; (80090d0 <UART_AdvFeatureConfig+0x158>)
 800903c:	4013      	ands	r3, r2
 800903e:	0019      	movs	r1, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	2240      	movs	r2, #64	; 0x40
 8009052:	4013      	ands	r3, r2
 8009054:	d01d      	beq.n	8009092 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	4a1d      	ldr	r2, [pc, #116]	; (80090d4 <UART_AdvFeatureConfig+0x15c>)
 800905e:	4013      	ands	r3, r2
 8009060:	0019      	movs	r1, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009072:	2380      	movs	r3, #128	; 0x80
 8009074:	035b      	lsls	r3, r3, #13
 8009076:	429a      	cmp	r2, r3
 8009078:	d10b      	bne.n	8009092 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	4a15      	ldr	r2, [pc, #84]	; (80090d8 <UART_AdvFeatureConfig+0x160>)
 8009082:	4013      	ands	r3, r2
 8009084:	0019      	movs	r1, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2280      	movs	r2, #128	; 0x80
 8009098:	4013      	ands	r3, r2
 800909a:	d00b      	beq.n	80090b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	4a0e      	ldr	r2, [pc, #56]	; (80090dc <UART_AdvFeatureConfig+0x164>)
 80090a4:	4013      	ands	r3, r2
 80090a6:	0019      	movs	r1, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	605a      	str	r2, [r3, #4]
  }
}
 80090b4:	46c0      	nop			; (mov r8, r8)
 80090b6:	46bd      	mov	sp, r7
 80090b8:	b002      	add	sp, #8
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	fffdffff 	.word	0xfffdffff
 80090c0:	fffeffff 	.word	0xfffeffff
 80090c4:	fffbffff 	.word	0xfffbffff
 80090c8:	ffff7fff 	.word	0xffff7fff
 80090cc:	ffffefff 	.word	0xffffefff
 80090d0:	ffffdfff 	.word	0xffffdfff
 80090d4:	ffefffff 	.word	0xffefffff
 80090d8:	ff9fffff 	.word	0xff9fffff
 80090dc:	fff7ffff 	.word	0xfff7ffff

080090e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b092      	sub	sp, #72	; 0x48
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2284      	movs	r2, #132	; 0x84
 80090ec:	2100      	movs	r1, #0
 80090ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090f0:	f7fc f87a 	bl	80051e8 <HAL_GetTick>
 80090f4:	0003      	movs	r3, r0
 80090f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2208      	movs	r2, #8
 8009100:	4013      	ands	r3, r2
 8009102:	2b08      	cmp	r3, #8
 8009104:	d12c      	bne.n	8009160 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009108:	2280      	movs	r2, #128	; 0x80
 800910a:	0391      	lsls	r1, r2, #14
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4a46      	ldr	r2, [pc, #280]	; (8009228 <UART_CheckIdleState+0x148>)
 8009110:	9200      	str	r2, [sp, #0]
 8009112:	2200      	movs	r2, #0
 8009114:	f000 f88c 	bl	8009230 <UART_WaitOnFlagUntilTimeout>
 8009118:	1e03      	subs	r3, r0, #0
 800911a:	d021      	beq.n	8009160 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800911c:	f3ef 8310 	mrs	r3, PRIMASK
 8009120:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009124:	63bb      	str	r3, [r7, #56]	; 0x38
 8009126:	2301      	movs	r3, #1
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	f383 8810 	msr	PRIMASK, r3
}
 8009130:	46c0      	nop			; (mov r8, r8)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2180      	movs	r1, #128	; 0x80
 800913e:	438a      	bics	r2, r1
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	f383 8810 	msr	PRIMASK, r3
}
 800914c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2220      	movs	r2, #32
 8009152:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2278      	movs	r2, #120	; 0x78
 8009158:	2100      	movs	r1, #0
 800915a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e05f      	b.n	8009220 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2204      	movs	r2, #4
 8009168:	4013      	ands	r3, r2
 800916a:	2b04      	cmp	r3, #4
 800916c:	d146      	bne.n	80091fc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800916e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009170:	2280      	movs	r2, #128	; 0x80
 8009172:	03d1      	lsls	r1, r2, #15
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	4a2c      	ldr	r2, [pc, #176]	; (8009228 <UART_CheckIdleState+0x148>)
 8009178:	9200      	str	r2, [sp, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	f000 f858 	bl	8009230 <UART_WaitOnFlagUntilTimeout>
 8009180:	1e03      	subs	r3, r0, #0
 8009182:	d03b      	beq.n	80091fc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009184:	f3ef 8310 	mrs	r3, PRIMASK
 8009188:	60fb      	str	r3, [r7, #12]
  return(result);
 800918a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800918c:	637b      	str	r3, [r7, #52]	; 0x34
 800918e:	2301      	movs	r3, #1
 8009190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f383 8810 	msr	PRIMASK, r3
}
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4921      	ldr	r1, [pc, #132]	; (800922c <UART_CheckIdleState+0x14c>)
 80091a6:	400a      	ands	r2, r1
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f383 8810 	msr	PRIMASK, r3
}
 80091b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b6:	f3ef 8310 	mrs	r3, PRIMASK
 80091ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80091bc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091be:	633b      	str	r3, [r7, #48]	; 0x30
 80091c0:	2301      	movs	r3, #1
 80091c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	f383 8810 	msr	PRIMASK, r3
}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2101      	movs	r1, #1
 80091d8:	438a      	bics	r2, r1
 80091da:	609a      	str	r2, [r3, #8]
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	f383 8810 	msr	PRIMASK, r3
}
 80091e6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2280      	movs	r2, #128	; 0x80
 80091ec:	2120      	movs	r1, #32
 80091ee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2278      	movs	r2, #120	; 0x78
 80091f4:	2100      	movs	r1, #0
 80091f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e011      	b.n	8009220 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2220      	movs	r2, #32
 8009200:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2280      	movs	r2, #128	; 0x80
 8009206:	2120      	movs	r1, #32
 8009208:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2278      	movs	r2, #120	; 0x78
 800921a:	2100      	movs	r1, #0
 800921c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	0018      	movs	r0, r3
 8009222:	46bd      	mov	sp, r7
 8009224:	b010      	add	sp, #64	; 0x40
 8009226:	bd80      	pop	{r7, pc}
 8009228:	01ffffff 	.word	0x01ffffff
 800922c:	fffffedf 	.word	0xfffffedf

08009230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	1dfb      	adds	r3, r7, #7
 800923e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009240:	e04b      	b.n	80092da <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	3301      	adds	r3, #1
 8009246:	d048      	beq.n	80092da <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009248:	f7fb ffce 	bl	80051e8 <HAL_GetTick>
 800924c:	0002      	movs	r2, r0
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	429a      	cmp	r2, r3
 8009256:	d302      	bcc.n	800925e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e04b      	b.n	80092fa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2204      	movs	r2, #4
 800926a:	4013      	ands	r3, r2
 800926c:	d035      	beq.n	80092da <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	2208      	movs	r2, #8
 8009276:	4013      	ands	r3, r2
 8009278:	2b08      	cmp	r3, #8
 800927a:	d111      	bne.n	80092a0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2208      	movs	r2, #8
 8009282:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	0018      	movs	r0, r3
 8009288:	f000 f906 	bl	8009498 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2284      	movs	r2, #132	; 0x84
 8009290:	2108      	movs	r1, #8
 8009292:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2278      	movs	r2, #120	; 0x78
 8009298:	2100      	movs	r1, #0
 800929a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e02c      	b.n	80092fa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	69da      	ldr	r2, [r3, #28]
 80092a6:	2380      	movs	r3, #128	; 0x80
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	401a      	ands	r2, r3
 80092ac:	2380      	movs	r3, #128	; 0x80
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d112      	bne.n	80092da <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2280      	movs	r2, #128	; 0x80
 80092ba:	0112      	lsls	r2, r2, #4
 80092bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	0018      	movs	r0, r3
 80092c2:	f000 f8e9 	bl	8009498 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2284      	movs	r2, #132	; 0x84
 80092ca:	2120      	movs	r1, #32
 80092cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2278      	movs	r2, #120	; 0x78
 80092d2:	2100      	movs	r1, #0
 80092d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e00f      	b.n	80092fa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	4013      	ands	r3, r2
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	425a      	negs	r2, r3
 80092ea:	4153      	adcs	r3, r2
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	001a      	movs	r2, r3
 80092f0:	1dfb      	adds	r3, r7, #7
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d0a4      	beq.n	8009242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	0018      	movs	r0, r3
 80092fc:	46bd      	mov	sp, r7
 80092fe:	b004      	add	sp, #16
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b090      	sub	sp, #64	; 0x40
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	1dbb      	adds	r3, r7, #6
 8009310:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	1dba      	adds	r2, r7, #6
 800931c:	2158      	movs	r1, #88	; 0x58
 800931e:	8812      	ldrh	r2, [r2, #0]
 8009320:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	1dba      	adds	r2, r7, #6
 8009326:	215a      	movs	r1, #90	; 0x5a
 8009328:	8812      	ldrh	r2, [r2, #0]
 800932a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	2380      	movs	r3, #128	; 0x80
 8009338:	015b      	lsls	r3, r3, #5
 800933a:	429a      	cmp	r2, r3
 800933c:	d10d      	bne.n	800935a <UART_Start_Receive_IT+0x56>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d104      	bne.n	8009350 <UART_Start_Receive_IT+0x4c>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	225c      	movs	r2, #92	; 0x5c
 800934a:	4950      	ldr	r1, [pc, #320]	; (800948c <UART_Start_Receive_IT+0x188>)
 800934c:	5299      	strh	r1, [r3, r2]
 800934e:	e02e      	b.n	80093ae <UART_Start_Receive_IT+0xaa>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	225c      	movs	r2, #92	; 0x5c
 8009354:	21ff      	movs	r1, #255	; 0xff
 8009356:	5299      	strh	r1, [r3, r2]
 8009358:	e029      	b.n	80093ae <UART_Start_Receive_IT+0xaa>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10d      	bne.n	800937e <UART_Start_Receive_IT+0x7a>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d104      	bne.n	8009374 <UART_Start_Receive_IT+0x70>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	225c      	movs	r2, #92	; 0x5c
 800936e:	21ff      	movs	r1, #255	; 0xff
 8009370:	5299      	strh	r1, [r3, r2]
 8009372:	e01c      	b.n	80093ae <UART_Start_Receive_IT+0xaa>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	225c      	movs	r2, #92	; 0x5c
 8009378:	217f      	movs	r1, #127	; 0x7f
 800937a:	5299      	strh	r1, [r3, r2]
 800937c:	e017      	b.n	80093ae <UART_Start_Receive_IT+0xaa>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689a      	ldr	r2, [r3, #8]
 8009382:	2380      	movs	r3, #128	; 0x80
 8009384:	055b      	lsls	r3, r3, #21
 8009386:	429a      	cmp	r2, r3
 8009388:	d10d      	bne.n	80093a6 <UART_Start_Receive_IT+0xa2>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d104      	bne.n	800939c <UART_Start_Receive_IT+0x98>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	225c      	movs	r2, #92	; 0x5c
 8009396:	217f      	movs	r1, #127	; 0x7f
 8009398:	5299      	strh	r1, [r3, r2]
 800939a:	e008      	b.n	80093ae <UART_Start_Receive_IT+0xaa>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	225c      	movs	r2, #92	; 0x5c
 80093a0:	213f      	movs	r1, #63	; 0x3f
 80093a2:	5299      	strh	r1, [r3, r2]
 80093a4:	e003      	b.n	80093ae <UART_Start_Receive_IT+0xaa>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	225c      	movs	r2, #92	; 0x5c
 80093aa:	2100      	movs	r1, #0
 80093ac:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2284      	movs	r2, #132	; 0x84
 80093b2:	2100      	movs	r1, #0
 80093b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2280      	movs	r2, #128	; 0x80
 80093ba:	2122      	movs	r1, #34	; 0x22
 80093bc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093be:	f3ef 8310 	mrs	r3, PRIMASK
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c8:	2301      	movs	r3, #1
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	f383 8810 	msr	PRIMASK, r3
}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2101      	movs	r1, #1
 80093e0:	430a      	orrs	r2, r1
 80093e2:	609a      	str	r2, [r3, #8]
 80093e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	f383 8810 	msr	PRIMASK, r3
}
 80093ee:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	2380      	movs	r3, #128	; 0x80
 80093f6:	015b      	lsls	r3, r3, #5
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d107      	bne.n	800940c <UART_Start_Receive_IT+0x108>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d103      	bne.n	800940c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4a22      	ldr	r2, [pc, #136]	; (8009490 <UART_Start_Receive_IT+0x18c>)
 8009408:	669a      	str	r2, [r3, #104]	; 0x68
 800940a:	e002      	b.n	8009412 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4a21      	ldr	r2, [pc, #132]	; (8009494 <UART_Start_Receive_IT+0x190>)
 8009410:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d019      	beq.n	800944e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800941a:	f3ef 8310 	mrs	r3, PRIMASK
 800941e:	61fb      	str	r3, [r7, #28]
  return(result);
 8009420:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009422:	637b      	str	r3, [r7, #52]	; 0x34
 8009424:	2301      	movs	r3, #1
 8009426:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	f383 8810 	msr	PRIMASK, r3
}
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2190      	movs	r1, #144	; 0x90
 800943c:	0049      	lsls	r1, r1, #1
 800943e:	430a      	orrs	r2, r1
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	f383 8810 	msr	PRIMASK, r3
}
 800944c:	e018      	b.n	8009480 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800944e:	f3ef 8310 	mrs	r3, PRIMASK
 8009452:	613b      	str	r3, [r7, #16]
  return(result);
 8009454:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009456:	63bb      	str	r3, [r7, #56]	; 0x38
 8009458:	2301      	movs	r3, #1
 800945a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f383 8810 	msr	PRIMASK, r3
}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2120      	movs	r1, #32
 8009470:	430a      	orrs	r2, r1
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	f383 8810 	msr	PRIMASK, r3
}
 800947e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	0018      	movs	r0, r3
 8009484:	46bd      	mov	sp, r7
 8009486:	b010      	add	sp, #64	; 0x40
 8009488:	bd80      	pop	{r7, pc}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	000001ff 	.word	0x000001ff
 8009490:	08009719 	.word	0x08009719
 8009494:	08009561 	.word	0x08009561

08009498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08e      	sub	sp, #56	; 0x38
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094a0:	f3ef 8310 	mrs	r3, PRIMASK
 80094a4:	617b      	str	r3, [r7, #20]
  return(result);
 80094a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
 80094aa:	2301      	movs	r3, #1
 80094ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f383 8810 	msr	PRIMASK, r3
}
 80094b4:	46c0      	nop			; (mov r8, r8)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4926      	ldr	r1, [pc, #152]	; (800955c <UART_EndRxTransfer+0xc4>)
 80094c2:	400a      	ands	r2, r1
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	f383 8810 	msr	PRIMASK, r3
}
 80094d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d2:	f3ef 8310 	mrs	r3, PRIMASK
 80094d6:	623b      	str	r3, [r7, #32]
  return(result);
 80094d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094da:	633b      	str	r3, [r7, #48]	; 0x30
 80094dc:	2301      	movs	r3, #1
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	f383 8810 	msr	PRIMASK, r3
}
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689a      	ldr	r2, [r3, #8]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2101      	movs	r1, #1
 80094f4:	438a      	bics	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	f383 8810 	msr	PRIMASK, r3
}
 8009502:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009508:	2b01      	cmp	r3, #1
 800950a:	d118      	bne.n	800953e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800950c:	f3ef 8310 	mrs	r3, PRIMASK
 8009510:	60bb      	str	r3, [r7, #8]
  return(result);
 8009512:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009516:	2301      	movs	r3, #1
 8009518:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f383 8810 	msr	PRIMASK, r3
}
 8009520:	46c0      	nop			; (mov r8, r8)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2110      	movs	r1, #16
 800952e:	438a      	bics	r2, r1
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f383 8810 	msr	PRIMASK, r3
}
 800953c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2280      	movs	r2, #128	; 0x80
 8009542:	2120      	movs	r1, #32
 8009544:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009552:	46c0      	nop			; (mov r8, r8)
 8009554:	46bd      	mov	sp, r7
 8009556:	b00e      	add	sp, #56	; 0x38
 8009558:	bd80      	pop	{r7, pc}
 800955a:	46c0      	nop			; (mov r8, r8)
 800955c:	fffffedf 	.word	0xfffffedf

08009560 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b094      	sub	sp, #80	; 0x50
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009568:	204e      	movs	r0, #78	; 0x4e
 800956a:	183b      	adds	r3, r7, r0
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	215c      	movs	r1, #92	; 0x5c
 8009570:	5a52      	ldrh	r2, [r2, r1]
 8009572:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2280      	movs	r2, #128	; 0x80
 8009578:	589b      	ldr	r3, [r3, r2]
 800957a:	2b22      	cmp	r3, #34	; 0x22
 800957c:	d000      	beq.n	8009580 <UART_RxISR_8BIT+0x20>
 800957e:	e0ba      	b.n	80096f6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	214c      	movs	r1, #76	; 0x4c
 8009586:	187b      	adds	r3, r7, r1
 8009588:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800958a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800958c:	187b      	adds	r3, r7, r1
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	b2da      	uxtb	r2, r3
 8009592:	183b      	adds	r3, r7, r0
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	b2d9      	uxtb	r1, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959c:	400a      	ands	r2, r1
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	225a      	movs	r2, #90	; 0x5a
 80095b0:	5a9b      	ldrh	r3, [r3, r2]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b299      	uxth	r1, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	225a      	movs	r2, #90	; 0x5a
 80095bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	225a      	movs	r2, #90	; 0x5a
 80095c2:	5a9b      	ldrh	r3, [r3, r2]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d000      	beq.n	80095cc <UART_RxISR_8BIT+0x6c>
 80095ca:	e09c      	b.n	8009706 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095cc:	f3ef 8310 	mrs	r3, PRIMASK
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80095d6:	2301      	movs	r3, #1
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	f383 8810 	msr	PRIMASK, r3
}
 80095e0:	46c0      	nop			; (mov r8, r8)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4948      	ldr	r1, [pc, #288]	; (8009710 <UART_RxISR_8BIT+0x1b0>)
 80095ee:	400a      	ands	r2, r1
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f8:	f383 8810 	msr	PRIMASK, r3
}
 80095fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009602:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009606:	647b      	str	r3, [r7, #68]	; 0x44
 8009608:	2301      	movs	r3, #1
 800960a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800960c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960e:	f383 8810 	msr	PRIMASK, r3
}
 8009612:	46c0      	nop			; (mov r8, r8)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2101      	movs	r1, #1
 8009620:	438a      	bics	r2, r1
 8009622:	609a      	str	r2, [r3, #8]
 8009624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009626:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	f383 8810 	msr	PRIMASK, r3
}
 800962e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2280      	movs	r2, #128	; 0x80
 8009634:	2120      	movs	r1, #32
 8009636:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	2380      	movs	r3, #128	; 0x80
 800964c:	041b      	lsls	r3, r3, #16
 800964e:	4013      	ands	r3, r2
 8009650:	d018      	beq.n	8009684 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009652:	f3ef 8310 	mrs	r3, PRIMASK
 8009656:	61bb      	str	r3, [r7, #24]
  return(result);
 8009658:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800965a:	643b      	str	r3, [r7, #64]	; 0x40
 800965c:	2301      	movs	r3, #1
 800965e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	f383 8810 	msr	PRIMASK, r3
}
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4928      	ldr	r1, [pc, #160]	; (8009714 <UART_RxISR_8BIT+0x1b4>)
 8009674:	400a      	ands	r2, r1
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800967a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	f383 8810 	msr	PRIMASK, r3
}
 8009682:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009688:	2b01      	cmp	r3, #1
 800968a:	d12f      	bne.n	80096ec <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009692:	f3ef 8310 	mrs	r3, PRIMASK
 8009696:	60fb      	str	r3, [r7, #12]
  return(result);
 8009698:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800969a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800969c:	2301      	movs	r3, #1
 800969e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f383 8810 	msr	PRIMASK, r3
}
 80096a6:	46c0      	nop			; (mov r8, r8)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2110      	movs	r1, #16
 80096b4:	438a      	bics	r2, r1
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f383 8810 	msr	PRIMASK, r3
}
 80096c2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	69db      	ldr	r3, [r3, #28]
 80096ca:	2210      	movs	r2, #16
 80096cc:	4013      	ands	r3, r2
 80096ce:	2b10      	cmp	r3, #16
 80096d0:	d103      	bne.n	80096da <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2210      	movs	r2, #16
 80096d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2258      	movs	r2, #88	; 0x58
 80096de:	5a9a      	ldrh	r2, [r3, r2]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	0011      	movs	r1, r2
 80096e4:	0018      	movs	r0, r3
 80096e6:	f7ff fa54 	bl	8008b92 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096ea:	e00c      	b.n	8009706 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	0018      	movs	r0, r3
 80096f0:	f7ff fa47 	bl	8008b82 <HAL_UART_RxCpltCallback>
}
 80096f4:	e007      	b.n	8009706 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	699a      	ldr	r2, [r3, #24]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2108      	movs	r1, #8
 8009702:	430a      	orrs	r2, r1
 8009704:	619a      	str	r2, [r3, #24]
}
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	46bd      	mov	sp, r7
 800970a:	b014      	add	sp, #80	; 0x50
 800970c:	bd80      	pop	{r7, pc}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	fffffedf 	.word	0xfffffedf
 8009714:	fbffffff 	.word	0xfbffffff

08009718 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b094      	sub	sp, #80	; 0x50
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009720:	204e      	movs	r0, #78	; 0x4e
 8009722:	183b      	adds	r3, r7, r0
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	215c      	movs	r1, #92	; 0x5c
 8009728:	5a52      	ldrh	r2, [r2, r1]
 800972a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2280      	movs	r2, #128	; 0x80
 8009730:	589b      	ldr	r3, [r3, r2]
 8009732:	2b22      	cmp	r3, #34	; 0x22
 8009734:	d000      	beq.n	8009738 <UART_RxISR_16BIT+0x20>
 8009736:	e0ba      	b.n	80098ae <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	214c      	movs	r1, #76	; 0x4c
 800973e:	187b      	adds	r3, r7, r1
 8009740:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8009742:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009748:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800974a:	187b      	adds	r3, r7, r1
 800974c:	183a      	adds	r2, r7, r0
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	8812      	ldrh	r2, [r2, #0]
 8009752:	4013      	ands	r3, r2
 8009754:	b29a      	uxth	r2, r3
 8009756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009758:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975e:	1c9a      	adds	r2, r3, #2
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	225a      	movs	r2, #90	; 0x5a
 8009768:	5a9b      	ldrh	r3, [r3, r2]
 800976a:	b29b      	uxth	r3, r3
 800976c:	3b01      	subs	r3, #1
 800976e:	b299      	uxth	r1, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	225a      	movs	r2, #90	; 0x5a
 8009774:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	225a      	movs	r2, #90	; 0x5a
 800977a:	5a9b      	ldrh	r3, [r3, r2]
 800977c:	b29b      	uxth	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d000      	beq.n	8009784 <UART_RxISR_16BIT+0x6c>
 8009782:	e09c      	b.n	80098be <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009784:	f3ef 8310 	mrs	r3, PRIMASK
 8009788:	623b      	str	r3, [r7, #32]
  return(result);
 800978a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800978c:	647b      	str	r3, [r7, #68]	; 0x44
 800978e:	2301      	movs	r3, #1
 8009790:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	f383 8810 	msr	PRIMASK, r3
}
 8009798:	46c0      	nop			; (mov r8, r8)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4948      	ldr	r1, [pc, #288]	; (80098c8 <UART_RxISR_16BIT+0x1b0>)
 80097a6:	400a      	ands	r2, r1
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	f383 8810 	msr	PRIMASK, r3
}
 80097b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097b6:	f3ef 8310 	mrs	r3, PRIMASK
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097be:	643b      	str	r3, [r7, #64]	; 0x40
 80097c0:	2301      	movs	r3, #1
 80097c2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	f383 8810 	msr	PRIMASK, r3
}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689a      	ldr	r2, [r3, #8]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2101      	movs	r1, #1
 80097d8:	438a      	bics	r2, r1
 80097da:	609a      	str	r2, [r3, #8]
 80097dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e2:	f383 8810 	msr	PRIMASK, r3
}
 80097e6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2280      	movs	r2, #128	; 0x80
 80097ec:	2120      	movs	r1, #32
 80097ee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	2380      	movs	r3, #128	; 0x80
 8009804:	041b      	lsls	r3, r3, #16
 8009806:	4013      	ands	r3, r2
 8009808:	d018      	beq.n	800983c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800980a:	f3ef 8310 	mrs	r3, PRIMASK
 800980e:	617b      	str	r3, [r7, #20]
  return(result);
 8009810:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009814:	2301      	movs	r3, #1
 8009816:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	f383 8810 	msr	PRIMASK, r3
}
 800981e:	46c0      	nop			; (mov r8, r8)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4928      	ldr	r1, [pc, #160]	; (80098cc <UART_RxISR_16BIT+0x1b4>)
 800982c:	400a      	ands	r2, r1
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009832:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	f383 8810 	msr	PRIMASK, r3
}
 800983a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009840:	2b01      	cmp	r3, #1
 8009842:	d12f      	bne.n	80098a4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800984a:	f3ef 8310 	mrs	r3, PRIMASK
 800984e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009850:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009852:	63bb      	str	r3, [r7, #56]	; 0x38
 8009854:	2301      	movs	r3, #1
 8009856:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f383 8810 	msr	PRIMASK, r3
}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2110      	movs	r1, #16
 800986c:	438a      	bics	r2, r1
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	f383 8810 	msr	PRIMASK, r3
}
 800987a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	2210      	movs	r2, #16
 8009884:	4013      	ands	r3, r2
 8009886:	2b10      	cmp	r3, #16
 8009888:	d103      	bne.n	8009892 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2210      	movs	r2, #16
 8009890:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2258      	movs	r2, #88	; 0x58
 8009896:	5a9a      	ldrh	r2, [r3, r2]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	0011      	movs	r1, r2
 800989c:	0018      	movs	r0, r3
 800989e:	f7ff f978 	bl	8008b92 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098a2:	e00c      	b.n	80098be <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7ff f96b 	bl	8008b82 <HAL_UART_RxCpltCallback>
}
 80098ac:	e007      	b.n	80098be <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699a      	ldr	r2, [r3, #24]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2108      	movs	r1, #8
 80098ba:	430a      	orrs	r2, r1
 80098bc:	619a      	str	r2, [r3, #24]
}
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	46bd      	mov	sp, r7
 80098c2:	b014      	add	sp, #80	; 0x50
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	fffffedf 	.word	0xfffffedf
 80098cc:	fbffffff 	.word	0xfbffffff

080098d0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098d6:	f3ef 8305 	mrs	r3, IPSR
 80098da:	60bb      	str	r3, [r7, #8]
  return(result);
 80098dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098e2:	f3ef 8310 	mrs	r3, PRIMASK
 80098e6:	607b      	str	r3, [r7, #4]
  return(result);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d007      	beq.n	80098fe <osKernelInitialize+0x2e>
 80098ee:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <osKernelInitialize+0x54>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d103      	bne.n	80098fe <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80098f6:	2306      	movs	r3, #6
 80098f8:	425b      	negs	r3, r3
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	e00c      	b.n	8009918 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098fe:	4b09      	ldr	r3, [pc, #36]	; (8009924 <osKernelInitialize+0x54>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d105      	bne.n	8009912 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009906:	4b07      	ldr	r3, [pc, #28]	; (8009924 <osKernelInitialize+0x54>)
 8009908:	2201      	movs	r2, #1
 800990a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800990c:	2300      	movs	r3, #0
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	e002      	b.n	8009918 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8009912:	2301      	movs	r3, #1
 8009914:	425b      	negs	r3, r3
 8009916:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009918:	68fb      	ldr	r3, [r7, #12]
}
 800991a:	0018      	movs	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	b004      	add	sp, #16
 8009920:	bd80      	pop	{r7, pc}
 8009922:	46c0      	nop			; (mov r8, r8)
 8009924:	200004f0 	.word	0x200004f0

08009928 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800992e:	f3ef 8305 	mrs	r3, IPSR
 8009932:	60bb      	str	r3, [r7, #8]
  return(result);
 8009934:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009936:	2b00      	cmp	r3, #0
 8009938:	d109      	bne.n	800994e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800993a:	f3ef 8310 	mrs	r3, PRIMASK
 800993e:	607b      	str	r3, [r7, #4]
  return(result);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <osKernelStart+0x2e>
 8009946:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <osKernelStart+0x58>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d103      	bne.n	8009956 <osKernelStart+0x2e>
    stat = osErrorISR;
 800994e:	2306      	movs	r3, #6
 8009950:	425b      	negs	r3, r3
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	e00e      	b.n	8009974 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009956:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <osKernelStart+0x58>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d107      	bne.n	800996e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800995e:	4b08      	ldr	r3, [pc, #32]	; (8009980 <osKernelStart+0x58>)
 8009960:	2202      	movs	r2, #2
 8009962:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009964:	f000 ff94 	bl	800a890 <vTaskStartScheduler>
      stat = osOK;
 8009968:	2300      	movs	r3, #0
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	e002      	b.n	8009974 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800996e:	2301      	movs	r3, #1
 8009970:	425b      	negs	r3, r3
 8009972:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009974:	68fb      	ldr	r3, [r7, #12]
}
 8009976:	0018      	movs	r0, r3
 8009978:	46bd      	mov	sp, r7
 800997a:	b004      	add	sp, #16
 800997c:	bd80      	pop	{r7, pc}
 800997e:	46c0      	nop			; (mov r8, r8)
 8009980:	200004f0 	.word	0x200004f0

08009984 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009984:	b5b0      	push	{r4, r5, r7, lr}
 8009986:	b090      	sub	sp, #64	; 0x40
 8009988:	af04      	add	r7, sp, #16
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009990:	2300      	movs	r3, #0
 8009992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009994:	f3ef 8305 	mrs	r3, IPSR
 8009998:	61fb      	str	r3, [r7, #28]
  return(result);
 800999a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800999c:	2b00      	cmp	r3, #0
 800999e:	d000      	beq.n	80099a2 <osThreadNew+0x1e>
 80099a0:	e090      	b.n	8009ac4 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099a2:	f3ef 8310 	mrs	r3, PRIMASK
 80099a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d004      	beq.n	80099b8 <osThreadNew+0x34>
 80099ae:	4b48      	ldr	r3, [pc, #288]	; (8009ad0 <osThreadNew+0x14c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d100      	bne.n	80099b8 <osThreadNew+0x34>
 80099b6:	e085      	b.n	8009ac4 <osThreadNew+0x140>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d100      	bne.n	80099c0 <osThreadNew+0x3c>
 80099be:	e081      	b.n	8009ac4 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80099c4:	2318      	movs	r3, #24
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80099c8:	2117      	movs	r1, #23
 80099ca:	187b      	adds	r3, r7, r1
 80099cc:	2200      	movs	r2, #0
 80099ce:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80099d0:	187b      	adds	r3, r7, r1
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80099d4:	2301      	movs	r3, #1
 80099d6:	425b      	negs	r3, r3
 80099d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d044      	beq.n	8009a6a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <osThreadNew+0x6a>
        name = attr->name;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <osThreadNew+0x8e>
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	2b38      	cmp	r3, #56	; 0x38
 8009a06:	d804      	bhi.n	8009a12 <osThreadNew+0x8e>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	4013      	ands	r3, r2
 8009a10:	d001      	beq.n	8009a16 <osThreadNew+0x92>
        return (NULL);
 8009a12:	2300      	movs	r3, #0
 8009a14:	e057      	b.n	8009ac6 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	089b      	lsrs	r3, r3, #2
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00e      	beq.n	8009a4c <osThreadNew+0xc8>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	2ba7      	cmp	r3, #167	; 0xa7
 8009a34:	d90a      	bls.n	8009a4c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <osThreadNew+0xc8>
        mem = 1;
 8009a46:	2301      	movs	r3, #1
 8009a48:	623b      	str	r3, [r7, #32]
 8009a4a:	e010      	b.n	8009a6e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10c      	bne.n	8009a6e <osThreadNew+0xea>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d108      	bne.n	8009a6e <osThreadNew+0xea>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d104      	bne.n	8009a6e <osThreadNew+0xea>
          mem = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	623b      	str	r3, [r7, #32]
 8009a68:	e001      	b.n	8009a6e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d112      	bne.n	8009a9a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a7c:	68bd      	ldr	r5, [r7, #8]
 8009a7e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8009a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	9302      	str	r3, [sp, #8]
 8009a86:	9201      	str	r2, [sp, #4]
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	002b      	movs	r3, r5
 8009a8e:	0022      	movs	r2, r4
 8009a90:	f000 fd49 	bl	800a526 <xTaskCreateStatic>
 8009a94:	0003      	movs	r3, r0
 8009a96:	613b      	str	r3, [r7, #16]
 8009a98:	e014      	b.n	8009ac4 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d111      	bne.n	8009ac4 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68bc      	ldr	r4, [r7, #8]
 8009aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	2310      	movs	r3, #16
 8009aac:	18fb      	adds	r3, r7, r3
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	0023      	movs	r3, r4
 8009ab6:	f000 fd79 	bl	800a5ac <xTaskCreate>
 8009aba:	0003      	movs	r3, r0
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d001      	beq.n	8009ac4 <osThreadNew+0x140>
          hTask = NULL;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ac4:	693b      	ldr	r3, [r7, #16]
}
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	b00c      	add	sp, #48	; 0x30
 8009acc:	bdb0      	pop	{r4, r5, r7, pc}
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	200004f0 	.word	0x200004f0

08009ad4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009adc:	f3ef 8305 	mrs	r3, IPSR
 8009ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8009ae2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d109      	bne.n	8009afc <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8009aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <osDelay+0x30>
 8009af4:	4b0a      	ldr	r3, [pc, #40]	; (8009b20 <osDelay+0x4c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d103      	bne.n	8009b04 <osDelay+0x30>
    stat = osErrorISR;
 8009afc:	2306      	movs	r3, #6
 8009afe:	425b      	negs	r3, r3
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	e008      	b.n	8009b16 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <osDelay+0x42>
      vTaskDelay(ticks);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	0018      	movs	r0, r3
 8009b12:	f000 fe97 	bl	800a844 <vTaskDelay>
    }
  }

  return (stat);
 8009b16:	697b      	ldr	r3, [r7, #20]
}
 8009b18:	0018      	movs	r0, r3
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	b006      	add	sp, #24
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	200004f0 	.word	0x200004f0

08009b24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4a06      	ldr	r2, [pc, #24]	; (8009b4c <vApplicationGetIdleTaskMemory+0x28>)
 8009b34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	4a05      	ldr	r2, [pc, #20]	; (8009b50 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2280      	movs	r2, #128	; 0x80
 8009b40:	601a      	str	r2, [r3, #0]
}
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	46bd      	mov	sp, r7
 8009b46:	b004      	add	sp, #16
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	200004f4 	.word	0x200004f4
 8009b50:	2000059c 	.word	0x2000059c

08009b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4a06      	ldr	r2, [pc, #24]	; (8009b7c <vApplicationGetTimerTaskMemory+0x28>)
 8009b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	4a05      	ldr	r2, [pc, #20]	; (8009b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2280      	movs	r2, #128	; 0x80
 8009b70:	0052      	lsls	r2, r2, #1
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	46c0      	nop			; (mov r8, r8)
 8009b76:	46bd      	mov	sp, r7
 8009b78:	b004      	add	sp, #16
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	2000079c 	.word	0x2000079c
 8009b80:	20000844 	.word	0x20000844

08009b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	001a      	movs	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	4252      	negs	r2, r2
 8009b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	001a      	movs	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3308      	adds	r3, #8
 8009bac:	001a      	movs	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bb8:	46c0      	nop			; (mov r8, r8)
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	b002      	add	sp, #8
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bce:	46c0      	nop			; (mov r8, r8)
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	b002      	add	sp, #8
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	601a      	str	r2, [r3, #0]
}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	46bd      	mov	sp, r7
 8009c16:	b004      	add	sp, #16
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b084      	sub	sp, #16
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	d103      	bne.n	8009c38 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	60fb      	str	r3, [r7, #12]
 8009c36:	e00c      	b.n	8009c52 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	e002      	b.n	8009c46 <vListInsert+0x2c>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d2f6      	bcs.n	8009c40 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
}
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	46bd      	mov	sp, r7
 8009c82:	b004      	add	sp, #16
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	6892      	ldr	r2, [r2, #8]
 8009c9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	6852      	ldr	r2, [r2, #4]
 8009ca6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d103      	bne.n	8009cba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	1e5a      	subs	r2, r3, #1
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
}
 8009cce:	0018      	movs	r0, r3
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	b004      	add	sp, #16
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <xQueueGenericReset+0x18>
 8009cea:	b672      	cpsid	i
 8009cec:	e7fe      	b.n	8009cec <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8009cee:	f001 fe5f 	bl	800b9b0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	434b      	muls	r3, r1
 8009d00:	18d2      	adds	r2, r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1c:	1e59      	subs	r1, r3, #1
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	434b      	muls	r3, r1
 8009d24:	18d2      	adds	r2, r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2244      	movs	r2, #68	; 0x44
 8009d2e:	21ff      	movs	r1, #255	; 0xff
 8009d30:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2245      	movs	r2, #69	; 0x45
 8009d36:	21ff      	movs	r1, #255	; 0xff
 8009d38:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10d      	bne.n	8009d5c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d013      	beq.n	8009d70 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3310      	adds	r3, #16
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f000 fff5 	bl	800ad3c <xTaskRemoveFromEventList>
 8009d52:	1e03      	subs	r3, r0, #0
 8009d54:	d00c      	beq.n	8009d70 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d56:	f001 fe1b 	bl	800b990 <vPortYield>
 8009d5a:	e009      	b.n	8009d70 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	3310      	adds	r3, #16
 8009d60:	0018      	movs	r0, r3
 8009d62:	f7ff ff0f 	bl	8009b84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3324      	adds	r3, #36	; 0x24
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f7ff ff0a 	bl	8009b84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d70:	f001 fe30 	bl	800b9d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d74:	2301      	movs	r3, #1
}
 8009d76:	0018      	movs	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	b004      	add	sp, #16
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d7e:	b590      	push	{r4, r7, lr}
 8009d80:	b089      	sub	sp, #36	; 0x24
 8009d82:	af02      	add	r7, sp, #8
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <xQueueGenericCreateStatic+0x18>
 8009d92:	b672      	cpsid	i
 8009d94:	e7fe      	b.n	8009d94 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <xQueueGenericCreateStatic+0x22>
 8009d9c:	b672      	cpsid	i
 8009d9e:	e7fe      	b.n	8009d9e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <xQueueGenericCreateStatic+0x2e>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <xQueueGenericCreateStatic+0x32>
 8009dac:	2301      	movs	r3, #1
 8009dae:	e000      	b.n	8009db2 <xQueueGenericCreateStatic+0x34>
 8009db0:	2300      	movs	r3, #0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <xQueueGenericCreateStatic+0x3c>
 8009db6:	b672      	cpsid	i
 8009db8:	e7fe      	b.n	8009db8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d102      	bne.n	8009dc6 <xQueueGenericCreateStatic+0x48>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <xQueueGenericCreateStatic+0x4c>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <xQueueGenericCreateStatic+0x4e>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <xQueueGenericCreateStatic+0x56>
 8009dd0:	b672      	cpsid	i
 8009dd2:	e7fe      	b.n	8009dd2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dd4:	2350      	movs	r3, #80	; 0x50
 8009dd6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	2b50      	cmp	r3, #80	; 0x50
 8009ddc:	d001      	beq.n	8009de2 <xQueueGenericCreateStatic+0x64>
 8009dde:	b672      	cpsid	i
 8009de0:	e7fe      	b.n	8009de0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00e      	beq.n	8009e0a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2246      	movs	r2, #70	; 0x46
 8009df0:	2101      	movs	r1, #1
 8009df2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009df4:	2328      	movs	r3, #40	; 0x28
 8009df6:	18fb      	adds	r3, r7, r3
 8009df8:	781c      	ldrb	r4, [r3, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	0023      	movs	r3, r4
 8009e06:	f000 f805 	bl	8009e14 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009e0a:	697b      	ldr	r3, [r7, #20]
	}
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	b007      	add	sp, #28
 8009e12:	bd90      	pop	{r4, r7, pc}

08009e14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	001a      	movs	r2, r3
 8009e22:	1cfb      	adds	r3, r7, #3
 8009e24:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d103      	bne.n	8009e34 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	e002      	b.n	8009e3a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	2101      	movs	r1, #1
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f7ff ff43 	bl	8009cd6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	1cfa      	adds	r2, r7, #3
 8009e54:	214c      	movs	r1, #76	; 0x4c
 8009e56:	7812      	ldrb	r2, [r2, #0]
 8009e58:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e5a:	46c0      	nop			; (mov r8, r8)
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	b004      	add	sp, #16
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b08a      	sub	sp, #40	; 0x28
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
 8009e6e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e70:	2300      	movs	r3, #0
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <xQueueGenericSend+0x20>
 8009e7e:	b672      	cpsid	i
 8009e80:	e7fe      	b.n	8009e80 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <xQueueGenericSend+0x2e>
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <xQueueGenericSend+0x32>
 8009e90:	2301      	movs	r3, #1
 8009e92:	e000      	b.n	8009e96 <xQueueGenericSend+0x34>
 8009e94:	2300      	movs	r3, #0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <xQueueGenericSend+0x3c>
 8009e9a:	b672      	cpsid	i
 8009e9c:	e7fe      	b.n	8009e9c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d103      	bne.n	8009eac <xQueueGenericSend+0x4a>
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <xQueueGenericSend+0x4e>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e000      	b.n	8009eb2 <xQueueGenericSend+0x50>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <xQueueGenericSend+0x58>
 8009eb6:	b672      	cpsid	i
 8009eb8:	e7fe      	b.n	8009eb8 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009eba:	f001 f8dd 	bl	800b078 <xTaskGetSchedulerState>
 8009ebe:	1e03      	subs	r3, r0, #0
 8009ec0:	d102      	bne.n	8009ec8 <xQueueGenericSend+0x66>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <xQueueGenericSend+0x6a>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <xQueueGenericSend+0x6c>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <xQueueGenericSend+0x74>
 8009ed2:	b672      	cpsid	i
 8009ed4:	e7fe      	b.n	8009ed4 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ed6:	f001 fd6b 	bl	800b9b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d302      	bcc.n	8009eec <xQueueGenericSend+0x8a>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d11e      	bne.n	8009f2a <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f000 f99f 	bl	800a236 <prvCopyDataToQueue>
 8009ef8:	0003      	movs	r3, r0
 8009efa:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d009      	beq.n	8009f18 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	3324      	adds	r3, #36	; 0x24
 8009f08:	0018      	movs	r0, r3
 8009f0a:	f000 ff17 	bl	800ad3c <xTaskRemoveFromEventList>
 8009f0e:	1e03      	subs	r3, r0, #0
 8009f10:	d007      	beq.n	8009f22 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f12:	f001 fd3d 	bl	800b990 <vPortYield>
 8009f16:	e004      	b.n	8009f22 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f1e:	f001 fd37 	bl	800b990 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f22:	f001 fd57 	bl	800b9d4 <vPortExitCritical>
				return pdPASS;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e05b      	b.n	8009fe2 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f30:	f001 fd50 	bl	800b9d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f34:	2300      	movs	r3, #0
 8009f36:	e054      	b.n	8009fe2 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d106      	bne.n	8009f4c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f3e:	2314      	movs	r3, #20
 8009f40:	18fb      	adds	r3, r7, r3
 8009f42:	0018      	movs	r0, r3
 8009f44:	f000 ff56 	bl	800adf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f4c:	f001 fd42 	bl	800b9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f50:	f000 fcfc 	bl	800a94c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f54:	f001 fd2c 	bl	800b9b0 <vPortEnterCritical>
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	2244      	movs	r2, #68	; 0x44
 8009f5c:	5c9b      	ldrb	r3, [r3, r2]
 8009f5e:	b25b      	sxtb	r3, r3
 8009f60:	3301      	adds	r3, #1
 8009f62:	d103      	bne.n	8009f6c <xQueueGenericSend+0x10a>
 8009f64:	6a3b      	ldr	r3, [r7, #32]
 8009f66:	2244      	movs	r2, #68	; 0x44
 8009f68:	2100      	movs	r1, #0
 8009f6a:	5499      	strb	r1, [r3, r2]
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	2245      	movs	r2, #69	; 0x45
 8009f70:	5c9b      	ldrb	r3, [r3, r2]
 8009f72:	b25b      	sxtb	r3, r3
 8009f74:	3301      	adds	r3, #1
 8009f76:	d103      	bne.n	8009f80 <xQueueGenericSend+0x11e>
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	2245      	movs	r2, #69	; 0x45
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	5499      	strb	r1, [r3, r2]
 8009f80:	f001 fd28 	bl	800b9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f84:	1d3a      	adds	r2, r7, #4
 8009f86:	2314      	movs	r3, #20
 8009f88:	18fb      	adds	r3, r7, r3
 8009f8a:	0011      	movs	r1, r2
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f000 ff45 	bl	800ae1c <xTaskCheckForTimeOut>
 8009f92:	1e03      	subs	r3, r0, #0
 8009f94:	d11e      	bne.n	8009fd4 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f000 fa51 	bl	800a440 <prvIsQueueFull>
 8009f9e:	1e03      	subs	r3, r0, #0
 8009fa0:	d011      	beq.n	8009fc6 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	3310      	adds	r3, #16
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	0011      	movs	r1, r2
 8009faa:	0018      	movs	r0, r3
 8009fac:	f000 fe82 	bl	800acb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f000 f9d0 	bl	800a358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fb8:	f000 fcd4 	bl	800a964 <xTaskResumeAll>
 8009fbc:	1e03      	subs	r3, r0, #0
 8009fbe:	d18a      	bne.n	8009ed6 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8009fc0:	f001 fce6 	bl	800b990 <vPortYield>
 8009fc4:	e787      	b.n	8009ed6 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f000 f9c5 	bl	800a358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fce:	f000 fcc9 	bl	800a964 <xTaskResumeAll>
 8009fd2:	e780      	b.n	8009ed6 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	f000 f9be 	bl	800a358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fdc:	f000 fcc2 	bl	800a964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fe0:	2300      	movs	r3, #0
		}
	}
}
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	b00a      	add	sp, #40	; 0x28
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fea:	b590      	push	{r4, r7, lr}
 8009fec:	b089      	sub	sp, #36	; 0x24
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <xQueueGenericSendFromISR+0x1c>
 800a002:	b672      	cpsid	i
 800a004:	e7fe      	b.n	800a004 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d103      	bne.n	800a014 <xQueueGenericSendFromISR+0x2a>
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <xQueueGenericSendFromISR+0x2e>
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <xQueueGenericSendFromISR+0x30>
 800a018:	2300      	movs	r3, #0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <xQueueGenericSendFromISR+0x38>
 800a01e:	b672      	cpsid	i
 800a020:	e7fe      	b.n	800a020 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d103      	bne.n	800a030 <xQueueGenericSendFromISR+0x46>
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <xQueueGenericSendFromISR+0x4a>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <xQueueGenericSendFromISR+0x4c>
 800a034:	2300      	movs	r3, #0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <xQueueGenericSendFromISR+0x54>
 800a03a:	b672      	cpsid	i
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a03e:	f001 fce1 	bl	800ba04 <ulSetInterruptMaskFromISR>
 800a042:	0003      	movs	r3, r0
 800a044:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	429a      	cmp	r2, r3
 800a050:	d302      	bcc.n	800a058 <xQueueGenericSendFromISR+0x6e>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d12e      	bne.n	800a0b6 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a058:	2413      	movs	r4, #19
 800a05a:	193b      	adds	r3, r7, r4
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	2145      	movs	r1, #69	; 0x45
 800a060:	5c52      	ldrb	r2, [r2, r1]
 800a062:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	0018      	movs	r0, r3
 800a06c:	f000 f8e3 	bl	800a236 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a070:	193b      	adds	r3, r7, r4
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	b25b      	sxtb	r3, r3
 800a076:	3301      	adds	r3, #1
 800a078:	d111      	bne.n	800a09e <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d016      	beq.n	800a0b0 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	3324      	adds	r3, #36	; 0x24
 800a086:	0018      	movs	r0, r3
 800a088:	f000 fe58 	bl	800ad3c <xTaskRemoveFromEventList>
 800a08c:	1e03      	subs	r3, r0, #0
 800a08e:	d00f      	beq.n	800a0b0 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00c      	beq.n	800a0b0 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	e008      	b.n	800a0b0 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a09e:	2313      	movs	r3, #19
 800a0a0:	18fb      	adds	r3, r7, r3
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	b259      	sxtb	r1, r3
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2245      	movs	r2, #69	; 0x45
 800a0ae:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	61fb      	str	r3, [r7, #28]
		{
 800a0b4:	e001      	b.n	800a0ba <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	0018      	movs	r0, r3
 800a0be:	f001 fca7 	bl	800ba10 <vClearInterruptMaskFromISR>

	return xReturn;
 800a0c2:	69fb      	ldr	r3, [r7, #28]
}
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b009      	add	sp, #36	; 0x24
 800a0ca:	bd90      	pop	{r4, r7, pc}

0800a0cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08a      	sub	sp, #40	; 0x28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <xQueueReceive+0x1e>
 800a0e6:	b672      	cpsid	i
 800a0e8:	e7fe      	b.n	800a0e8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d103      	bne.n	800a0f8 <xQueueReceive+0x2c>
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <xQueueReceive+0x30>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e000      	b.n	800a0fe <xQueueReceive+0x32>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <xQueueReceive+0x3a>
 800a102:	b672      	cpsid	i
 800a104:	e7fe      	b.n	800a104 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a106:	f000 ffb7 	bl	800b078 <xTaskGetSchedulerState>
 800a10a:	1e03      	subs	r3, r0, #0
 800a10c:	d102      	bne.n	800a114 <xQueueReceive+0x48>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <xQueueReceive+0x4c>
 800a114:	2301      	movs	r3, #1
 800a116:	e000      	b.n	800a11a <xQueueReceive+0x4e>
 800a118:	2300      	movs	r3, #0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <xQueueReceive+0x56>
 800a11e:	b672      	cpsid	i
 800a120:	e7fe      	b.n	800a120 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a122:	f001 fc45 	bl	800b9b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01a      	beq.n	800a168 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	0011      	movs	r1, r2
 800a138:	0018      	movs	r0, r3
 800a13a:	f000 f8e7 	bl	800a30c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	1e5a      	subs	r2, r3, #1
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d008      	beq.n	800a160 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	3310      	adds	r3, #16
 800a152:	0018      	movs	r0, r3
 800a154:	f000 fdf2 	bl	800ad3c <xTaskRemoveFromEventList>
 800a158:	1e03      	subs	r3, r0, #0
 800a15a:	d001      	beq.n	800a160 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a15c:	f001 fc18 	bl	800b990 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a160:	f001 fc38 	bl	800b9d4 <vPortExitCritical>
				return pdPASS;
 800a164:	2301      	movs	r3, #1
 800a166:	e062      	b.n	800a22e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d103      	bne.n	800a176 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a16e:	f001 fc31 	bl	800b9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a172:	2300      	movs	r3, #0
 800a174:	e05b      	b.n	800a22e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d106      	bne.n	800a18a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a17c:	2314      	movs	r3, #20
 800a17e:	18fb      	adds	r3, r7, r3
 800a180:	0018      	movs	r0, r3
 800a182:	f000 fe37 	bl	800adf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a186:	2301      	movs	r3, #1
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a18a:	f001 fc23 	bl	800b9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a18e:	f000 fbdd 	bl	800a94c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a192:	f001 fc0d 	bl	800b9b0 <vPortEnterCritical>
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	2244      	movs	r2, #68	; 0x44
 800a19a:	5c9b      	ldrb	r3, [r3, r2]
 800a19c:	b25b      	sxtb	r3, r3
 800a19e:	3301      	adds	r3, #1
 800a1a0:	d103      	bne.n	800a1aa <xQueueReceive+0xde>
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	2244      	movs	r2, #68	; 0x44
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	5499      	strb	r1, [r3, r2]
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	2245      	movs	r2, #69	; 0x45
 800a1ae:	5c9b      	ldrb	r3, [r3, r2]
 800a1b0:	b25b      	sxtb	r3, r3
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	d103      	bne.n	800a1be <xQueueReceive+0xf2>
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	2245      	movs	r2, #69	; 0x45
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	5499      	strb	r1, [r3, r2]
 800a1be:	f001 fc09 	bl	800b9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1c2:	1d3a      	adds	r2, r7, #4
 800a1c4:	2314      	movs	r3, #20
 800a1c6:	18fb      	adds	r3, r7, r3
 800a1c8:	0011      	movs	r1, r2
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f000 fe26 	bl	800ae1c <xTaskCheckForTimeOut>
 800a1d0:	1e03      	subs	r3, r0, #0
 800a1d2:	d11e      	bne.n	800a212 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f000 f91c 	bl	800a414 <prvIsQueueEmpty>
 800a1dc:	1e03      	subs	r3, r0, #0
 800a1de:	d011      	beq.n	800a204 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	3324      	adds	r3, #36	; 0x24
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	0011      	movs	r1, r2
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f000 fd63 	bl	800acb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	f000 f8b1 	bl	800a358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1f6:	f000 fbb5 	bl	800a964 <xTaskResumeAll>
 800a1fa:	1e03      	subs	r3, r0, #0
 800a1fc:	d191      	bne.n	800a122 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800a1fe:	f001 fbc7 	bl	800b990 <vPortYield>
 800a202:	e78e      	b.n	800a122 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	0018      	movs	r0, r3
 800a208:	f000 f8a6 	bl	800a358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a20c:	f000 fbaa 	bl	800a964 <xTaskResumeAll>
 800a210:	e787      	b.n	800a122 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	0018      	movs	r0, r3
 800a216:	f000 f89f 	bl	800a358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a21a:	f000 fba3 	bl	800a964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	0018      	movs	r0, r3
 800a222:	f000 f8f7 	bl	800a414 <prvIsQueueEmpty>
 800a226:	1e03      	subs	r3, r0, #0
 800a228:	d100      	bne.n	800a22c <xQueueReceive+0x160>
 800a22a:	e77a      	b.n	800a122 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a22c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a22e:	0018      	movs	r0, r3
 800a230:	46bd      	mov	sp, r7
 800a232:	b00a      	add	sp, #40	; 0x28
 800a234:	bd80      	pop	{r7, pc}

0800a236 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10e      	bne.n	800a272 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d14e      	bne.n	800a2fa <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	0018      	movs	r0, r3
 800a262:	f000 ff25 	bl	800b0b0 <xTaskPriorityDisinherit>
 800a266:	0003      	movs	r3, r0
 800a268:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	605a      	str	r2, [r3, #4]
 800a270:	e043      	b.n	800a2fa <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d119      	bne.n	800a2ac <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6898      	ldr	r0, [r3, #8]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	0019      	movs	r1, r3
 800a284:	f002 ffa0 	bl	800d1c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a290:	18d2      	adds	r2, r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d32b      	bcc.n	800a2fa <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	609a      	str	r2, [r3, #8]
 800a2aa:	e026      	b.n	800a2fa <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	68d8      	ldr	r0, [r3, #12]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	0019      	movs	r1, r3
 800a2b8:	f002 ff86 	bl	800d1c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	68da      	ldr	r2, [r3, #12]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	425b      	negs	r3, r3
 800a2c6:	18d2      	adds	r2, r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d207      	bcs.n	800a2e8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e0:	425b      	negs	r3, r3
 800a2e2:	18d2      	adds	r2, r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d105      	bne.n	800a2fa <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a302:	697b      	ldr	r3, [r7, #20]
}
 800a304:	0018      	movs	r0, r3
 800a306:	46bd      	mov	sp, r7
 800a308:	b006      	add	sp, #24
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d018      	beq.n	800a350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	18d2      	adds	r2, r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	429a      	cmp	r2, r3
 800a336:	d303      	bcc.n	800a340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68d9      	ldr	r1, [r3, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	0018      	movs	r0, r3
 800a34c:	f002 ff3c 	bl	800d1c8 <memcpy>
	}
}
 800a350:	46c0      	nop			; (mov r8, r8)
 800a352:	46bd      	mov	sp, r7
 800a354:	b002      	add	sp, #8
 800a356:	bd80      	pop	{r7, pc}

0800a358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a360:	f001 fb26 	bl	800b9b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a364:	230f      	movs	r3, #15
 800a366:	18fb      	adds	r3, r7, r3
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	2145      	movs	r1, #69	; 0x45
 800a36c:	5c52      	ldrb	r2, [r2, r1]
 800a36e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a370:	e013      	b.n	800a39a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	2b00      	cmp	r3, #0
 800a378:	d016      	beq.n	800a3a8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3324      	adds	r3, #36	; 0x24
 800a37e:	0018      	movs	r0, r3
 800a380:	f000 fcdc 	bl	800ad3c <xTaskRemoveFromEventList>
 800a384:	1e03      	subs	r3, r0, #0
 800a386:	d001      	beq.n	800a38c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a388:	f000 fd98 	bl	800aebc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a38c:	210f      	movs	r1, #15
 800a38e:	187b      	adds	r3, r7, r1
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	3b01      	subs	r3, #1
 800a394:	b2da      	uxtb	r2, r3
 800a396:	187b      	adds	r3, r7, r1
 800a398:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a39a:	230f      	movs	r3, #15
 800a39c:	18fb      	adds	r3, r7, r3
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	b25b      	sxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	dce5      	bgt.n	800a372 <prvUnlockQueue+0x1a>
 800a3a6:	e000      	b.n	800a3aa <prvUnlockQueue+0x52>
					break;
 800a3a8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2245      	movs	r2, #69	; 0x45
 800a3ae:	21ff      	movs	r1, #255	; 0xff
 800a3b0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a3b2:	f001 fb0f 	bl	800b9d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3b6:	f001 fafb 	bl	800b9b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3ba:	230e      	movs	r3, #14
 800a3bc:	18fb      	adds	r3, r7, r3
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	2144      	movs	r1, #68	; 0x44
 800a3c2:	5c52      	ldrb	r2, [r2, r1]
 800a3c4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3c6:	e013      	b.n	800a3f0 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d016      	beq.n	800a3fe <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3310      	adds	r3, #16
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	f000 fcb1 	bl	800ad3c <xTaskRemoveFromEventList>
 800a3da:	1e03      	subs	r3, r0, #0
 800a3dc:	d001      	beq.n	800a3e2 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800a3de:	f000 fd6d 	bl	800aebc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3e2:	210e      	movs	r1, #14
 800a3e4:	187b      	adds	r3, r7, r1
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	b2da      	uxtb	r2, r3
 800a3ec:	187b      	adds	r3, r7, r1
 800a3ee:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3f0:	230e      	movs	r3, #14
 800a3f2:	18fb      	adds	r3, r7, r3
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	b25b      	sxtb	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dce5      	bgt.n	800a3c8 <prvUnlockQueue+0x70>
 800a3fc:	e000      	b.n	800a400 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800a3fe:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2244      	movs	r2, #68	; 0x44
 800a404:	21ff      	movs	r1, #255	; 0xff
 800a406:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a408:	f001 fae4 	bl	800b9d4 <vPortExitCritical>
}
 800a40c:	46c0      	nop			; (mov r8, r8)
 800a40e:	46bd      	mov	sp, r7
 800a410:	b004      	add	sp, #16
 800a412:	bd80      	pop	{r7, pc}

0800a414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a41c:	f001 fac8 	bl	800b9b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a428:	2301      	movs	r3, #1
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	e001      	b.n	800a432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a432:	f001 facf 	bl	800b9d4 <vPortExitCritical>

	return xReturn;
 800a436:	68fb      	ldr	r3, [r7, #12]
}
 800a438:	0018      	movs	r0, r3
 800a43a:	46bd      	mov	sp, r7
 800a43c:	b004      	add	sp, #16
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a448:	f001 fab2 	bl	800b9b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a454:	429a      	cmp	r2, r3
 800a456:	d102      	bne.n	800a45e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a458:	2301      	movs	r3, #1
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	e001      	b.n	800a462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a462:	f001 fab7 	bl	800b9d4 <vPortExitCritical>

	return xReturn;
 800a466:	68fb      	ldr	r3, [r7, #12]
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	b004      	add	sp, #16
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a47a:	2300      	movs	r3, #0
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	e015      	b.n	800a4ac <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a480:	4b0e      	ldr	r3, [pc, #56]	; (800a4bc <vQueueAddToRegistry+0x4c>)
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	00d2      	lsls	r2, r2, #3
 800a486:	58d3      	ldr	r3, [r2, r3]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10c      	bne.n	800a4a6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a48c:	4b0b      	ldr	r3, [pc, #44]	; (800a4bc <vQueueAddToRegistry+0x4c>)
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	00d2      	lsls	r2, r2, #3
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a496:	4a09      	ldr	r2, [pc, #36]	; (800a4bc <vQueueAddToRegistry+0x4c>)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	18d3      	adds	r3, r2, r3
 800a49e:	3304      	adds	r3, #4
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4a4:	e006      	b.n	800a4b4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b07      	cmp	r3, #7
 800a4b0:	d9e6      	bls.n	800a480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4b2:	46c0      	nop			; (mov r8, r8)
 800a4b4:	46c0      	nop			; (mov r8, r8)
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	b004      	add	sp, #16
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20000c44 	.word	0x20000c44

0800a4c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a4d0:	f001 fa6e 	bl	800b9b0 <vPortEnterCritical>
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2244      	movs	r2, #68	; 0x44
 800a4d8:	5c9b      	ldrb	r3, [r3, r2]
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	3301      	adds	r3, #1
 800a4de:	d103      	bne.n	800a4e8 <vQueueWaitForMessageRestricted+0x28>
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2244      	movs	r2, #68	; 0x44
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	5499      	strb	r1, [r3, r2]
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2245      	movs	r2, #69	; 0x45
 800a4ec:	5c9b      	ldrb	r3, [r3, r2]
 800a4ee:	b25b      	sxtb	r3, r3
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	d103      	bne.n	800a4fc <vQueueWaitForMessageRestricted+0x3c>
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	2245      	movs	r2, #69	; 0x45
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	5499      	strb	r1, [r3, r2]
 800a4fc:	f001 fa6a 	bl	800b9d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a504:	2b00      	cmp	r3, #0
 800a506:	d106      	bne.n	800a516 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	3324      	adds	r3, #36	; 0x24
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	68b9      	ldr	r1, [r7, #8]
 800a510:	0018      	movs	r0, r3
 800a512:	f000 fbed 	bl	800acf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	0018      	movs	r0, r3
 800a51a:	f7ff ff1d 	bl	800a358 <prvUnlockQueue>
	}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	46bd      	mov	sp, r7
 800a522:	b006      	add	sp, #24
 800a524:	bd80      	pop	{r7, pc}

0800a526 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a526:	b590      	push	{r4, r7, lr}
 800a528:	b08d      	sub	sp, #52	; 0x34
 800a52a:	af04      	add	r7, sp, #16
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	607a      	str	r2, [r7, #4]
 800a532:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <xTaskCreateStatic+0x18>
 800a53a:	b672      	cpsid	i
 800a53c:	e7fe      	b.n	800a53c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <xTaskCreateStatic+0x22>
 800a544:	b672      	cpsid	i
 800a546:	e7fe      	b.n	800a546 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a548:	23a8      	movs	r3, #168	; 0xa8
 800a54a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2ba8      	cmp	r3, #168	; 0xa8
 800a550:	d001      	beq.n	800a556 <xTaskCreateStatic+0x30>
 800a552:	b672      	cpsid	i
 800a554:	e7fe      	b.n	800a554 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d020      	beq.n	800a59e <xTaskCreateStatic+0x78>
 800a55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d01d      	beq.n	800a59e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a56a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	22a5      	movs	r2, #165	; 0xa5
 800a570:	2102      	movs	r1, #2
 800a572:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a574:	683c      	ldr	r4, [r7, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	68b9      	ldr	r1, [r7, #8]
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	2300      	movs	r3, #0
 800a57e:	9303      	str	r3, [sp, #12]
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	9302      	str	r3, [sp, #8]
 800a584:	2318      	movs	r3, #24
 800a586:	18fb      	adds	r3, r7, r3
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	0023      	movs	r3, r4
 800a590:	f000 f858 	bl	800a644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	0018      	movs	r0, r3
 800a598:	f000 f8ec 	bl	800a774 <prvAddNewTaskToReadyList>
 800a59c:	e001      	b.n	800a5a2 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5a2:	69bb      	ldr	r3, [r7, #24]
	}
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	b009      	add	sp, #36	; 0x24
 800a5aa:	bd90      	pop	{r4, r7, pc}

0800a5ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5ac:	b590      	push	{r4, r7, lr}
 800a5ae:	b08d      	sub	sp, #52	; 0x34
 800a5b0:	af04      	add	r7, sp, #16
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	603b      	str	r3, [r7, #0]
 800a5b8:	1dbb      	adds	r3, r7, #6
 800a5ba:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5bc:	1dbb      	adds	r3, r7, #6
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f001 fa8c 	bl	800bae0 <pvPortMalloc>
 800a5c8:	0003      	movs	r3, r0
 800a5ca:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d010      	beq.n	800a5f4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a5d2:	20a8      	movs	r0, #168	; 0xa8
 800a5d4:	f001 fa84 	bl	800bae0 <pvPortMalloc>
 800a5d8:	0003      	movs	r3, r0
 800a5da:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d003      	beq.n	800a5ea <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	631a      	str	r2, [r3, #48]	; 0x30
 800a5e8:	e006      	b.n	800a5f8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	f001 fb1d 	bl	800bc2c <vPortFree>
 800a5f2:	e001      	b.n	800a5f8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d01a      	beq.n	800a634 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	22a5      	movs	r2, #165	; 0xa5
 800a602:	2100      	movs	r1, #0
 800a604:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a606:	1dbb      	adds	r3, r7, #6
 800a608:	881a      	ldrh	r2, [r3, #0]
 800a60a:	683c      	ldr	r4, [r7, #0]
 800a60c:	68b9      	ldr	r1, [r7, #8]
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	2300      	movs	r3, #0
 800a612:	9303      	str	r3, [sp, #12]
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	9302      	str	r3, [sp, #8]
 800a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	0023      	movs	r3, r4
 800a622:	f000 f80f 	bl	800a644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	0018      	movs	r0, r3
 800a62a:	f000 f8a3 	bl	800a774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a62e:	2301      	movs	r3, #1
 800a630:	61bb      	str	r3, [r7, #24]
 800a632:	e002      	b.n	800a63a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a634:	2301      	movs	r3, #1
 800a636:	425b      	negs	r3, r3
 800a638:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a63a:	69bb      	ldr	r3, [r7, #24]
	}
 800a63c:	0018      	movs	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	b009      	add	sp, #36	; 0x24
 800a642:	bd90      	pop	{r4, r7, pc}

0800a644 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	001a      	movs	r2, r3
 800a65c:	21a5      	movs	r1, #165	; 0xa5
 800a65e:	f002 fcb1 	bl	800cfc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	493e      	ldr	r1, [pc, #248]	; (800a764 <prvInitialiseNewTask+0x120>)
 800a66a:	468c      	mov	ip, r1
 800a66c:	4463      	add	r3, ip
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	18d3      	adds	r3, r2, r3
 800a672:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	2207      	movs	r2, #7
 800a678:	4393      	bics	r3, r2
 800a67a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2207      	movs	r2, #7
 800a680:	4013      	ands	r3, r2
 800a682:	d001      	beq.n	800a688 <prvInitialiseNewTask+0x44>
 800a684:	b672      	cpsid	i
 800a686:	e7fe      	b.n	800a686 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a688:	2300      	movs	r3, #0
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e013      	b.n	800a6b6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	18d3      	adds	r3, r2, r3
 800a694:	7818      	ldrb	r0, [r3, #0]
 800a696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a698:	2134      	movs	r1, #52	; 0x34
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	18d3      	adds	r3, r2, r3
 800a69e:	185b      	adds	r3, r3, r1
 800a6a0:	1c02      	adds	r2, r0, #0
 800a6a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	18d3      	adds	r3, r2, r3
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d006      	beq.n	800a6be <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b0f      	cmp	r3, #15
 800a6ba:	d9e8      	bls.n	800a68e <prvInitialiseNewTask+0x4a>
 800a6bc:	e000      	b.n	800a6c0 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a6be:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	2243      	movs	r2, #67	; 0x43
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	2b37      	cmp	r3, #55	; 0x37
 800a6cc:	d901      	bls.n	800a6d2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a6ce:	2337      	movs	r3, #55	; 0x37
 800a6d0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	6a3a      	ldr	r2, [r7, #32]
 800a6d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	6a3a      	ldr	r2, [r7, #32]
 800a6dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	0018      	movs	r0, r3
 800a6ea:	f7ff fa69 	bl	8009bc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	3318      	adds	r3, #24
 800a6f2:	0018      	movs	r0, r3
 800a6f4:	f7ff fa64 	bl	8009bc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	2238      	movs	r2, #56	; 0x38
 800a702:	1ad2      	subs	r2, r2, r3
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a70c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	22a0      	movs	r2, #160	; 0xa0
 800a712:	2100      	movs	r1, #0
 800a714:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	22a4      	movs	r2, #164	; 0xa4
 800a71a:	2100      	movs	r1, #0
 800a71c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	3354      	adds	r3, #84	; 0x54
 800a722:	224c      	movs	r2, #76	; 0x4c
 800a724:	2100      	movs	r1, #0
 800a726:	0018      	movs	r0, r3
 800a728:	f002 fc4c 	bl	800cfc4 <memset>
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	4a0e      	ldr	r2, [pc, #56]	; (800a768 <prvInitialiseNewTask+0x124>)
 800a730:	659a      	str	r2, [r3, #88]	; 0x58
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	4a0d      	ldr	r2, [pc, #52]	; (800a76c <prvInitialiseNewTask+0x128>)
 800a736:	65da      	str	r2, [r3, #92]	; 0x5c
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	4a0d      	ldr	r2, [pc, #52]	; (800a770 <prvInitialiseNewTask+0x12c>)
 800a73c:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	68f9      	ldr	r1, [r7, #12]
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	0018      	movs	r0, r3
 800a746:	f001 f899 	bl	800b87c <pxPortInitialiseStack>
 800a74a:	0002      	movs	r2, r0
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a75a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a75c:	46c0      	nop			; (mov r8, r8)
 800a75e:	46bd      	mov	sp, r7
 800a760:	b006      	add	sp, #24
 800a762:	bd80      	pop	{r7, pc}
 800a764:	3fffffff 	.word	0x3fffffff
 800a768:	20001c50 	.word	0x20001c50
 800a76c:	20001cb8 	.word	0x20001cb8
 800a770:	20001d20 	.word	0x20001d20

0800a774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a77c:	f001 f918 	bl	800b9b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a780:	4b2a      	ldr	r3, [pc, #168]	; (800a82c <prvAddNewTaskToReadyList+0xb8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	4b29      	ldr	r3, [pc, #164]	; (800a82c <prvAddNewTaskToReadyList+0xb8>)
 800a788:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a78a:	4b29      	ldr	r3, [pc, #164]	; (800a830 <prvAddNewTaskToReadyList+0xbc>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d109      	bne.n	800a7a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a792:	4b27      	ldr	r3, [pc, #156]	; (800a830 <prvAddNewTaskToReadyList+0xbc>)
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a798:	4b24      	ldr	r3, [pc, #144]	; (800a82c <prvAddNewTaskToReadyList+0xb8>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d110      	bne.n	800a7c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7a0:	f000 fba6 	bl	800aef0 <prvInitialiseTaskLists>
 800a7a4:	e00d      	b.n	800a7c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7a6:	4b23      	ldr	r3, [pc, #140]	; (800a834 <prvAddNewTaskToReadyList+0xc0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d109      	bne.n	800a7c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7ae:	4b20      	ldr	r3, [pc, #128]	; (800a830 <prvAddNewTaskToReadyList+0xbc>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d802      	bhi.n	800a7c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	; (800a830 <prvAddNewTaskToReadyList+0xbc>)
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a7c2:	4b1d      	ldr	r3, [pc, #116]	; (800a838 <prvAddNewTaskToReadyList+0xc4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	4b1b      	ldr	r3, [pc, #108]	; (800a838 <prvAddNewTaskToReadyList+0xc4>)
 800a7ca:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a7cc:	4b1a      	ldr	r3, [pc, #104]	; (800a838 <prvAddNewTaskToReadyList+0xc4>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d8:	4b18      	ldr	r3, [pc, #96]	; (800a83c <prvAddNewTaskToReadyList+0xc8>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d903      	bls.n	800a7e8 <prvAddNewTaskToReadyList+0x74>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e4:	4b15      	ldr	r3, [pc, #84]	; (800a83c <prvAddNewTaskToReadyList+0xc8>)
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	0013      	movs	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	189b      	adds	r3, r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4a12      	ldr	r2, [pc, #72]	; (800a840 <prvAddNewTaskToReadyList+0xcc>)
 800a7f6:	189a      	adds	r2, r3, r2
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	0019      	movs	r1, r3
 800a7fe:	0010      	movs	r0, r2
 800a800:	f7ff f9e9 	bl	8009bd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a804:	f001 f8e6 	bl	800b9d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a808:	4b0a      	ldr	r3, [pc, #40]	; (800a834 <prvAddNewTaskToReadyList+0xc0>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <prvAddNewTaskToReadyList+0xbc>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d201      	bcs.n	800a822 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a81e:	f001 f8b7 	bl	800b990 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a822:	46c0      	nop			; (mov r8, r8)
 800a824:	46bd      	mov	sp, r7
 800a826:	b002      	add	sp, #8
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	46c0      	nop			; (mov r8, r8)
 800a82c:	20001158 	.word	0x20001158
 800a830:	20000c84 	.word	0x20000c84
 800a834:	20001164 	.word	0x20001164
 800a838:	20001174 	.word	0x20001174
 800a83c:	20001160 	.word	0x20001160
 800a840:	20000c88 	.word	0x20000c88

0800a844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d010      	beq.n	800a878 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a856:	4b0d      	ldr	r3, [pc, #52]	; (800a88c <vTaskDelay+0x48>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <vTaskDelay+0x1e>
 800a85e:	b672      	cpsid	i
 800a860:	e7fe      	b.n	800a860 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a862:	f000 f873 	bl	800a94c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2100      	movs	r1, #0
 800a86a:	0018      	movs	r0, r3
 800a86c:	f000 fc7c 	bl	800b168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a870:	f000 f878 	bl	800a964 <xTaskResumeAll>
 800a874:	0003      	movs	r3, r0
 800a876:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800a87e:	f001 f887 	bl	800b990 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a882:	46c0      	nop			; (mov r8, r8)
 800a884:	46bd      	mov	sp, r7
 800a886:	b004      	add	sp, #16
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	46c0      	nop			; (mov r8, r8)
 800a88c:	20001180 	.word	0x20001180

0800a890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a890:	b590      	push	{r4, r7, lr}
 800a892:	b089      	sub	sp, #36	; 0x24
 800a894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a89e:	003a      	movs	r2, r7
 800a8a0:	1d39      	adds	r1, r7, #4
 800a8a2:	2308      	movs	r3, #8
 800a8a4:	18fb      	adds	r3, r7, r3
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	f7ff f93c 	bl	8009b24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8ac:	683c      	ldr	r4, [r7, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	491e      	ldr	r1, [pc, #120]	; (800a92c <vTaskStartScheduler+0x9c>)
 800a8b4:	481e      	ldr	r0, [pc, #120]	; (800a930 <vTaskStartScheduler+0xa0>)
 800a8b6:	9202      	str	r2, [sp, #8]
 800a8b8:	9301      	str	r3, [sp, #4]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	0022      	movs	r2, r4
 800a8c2:	f7ff fe30 	bl	800a526 <xTaskCreateStatic>
 800a8c6:	0002      	movs	r2, r0
 800a8c8:	4b1a      	ldr	r3, [pc, #104]	; (800a934 <vTaskStartScheduler+0xa4>)
 800a8ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8cc:	4b19      	ldr	r3, [pc, #100]	; (800a934 <vTaskStartScheduler+0xa4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	e001      	b.n	800a8de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d103      	bne.n	800a8ec <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800a8e4:	f000 fc94 	bl	800b210 <xTimerCreateTimerTask>
 800a8e8:	0003      	movs	r3, r0
 800a8ea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d113      	bne.n	800a91a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800a8f2:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8f4:	4b10      	ldr	r3, [pc, #64]	; (800a938 <vTaskStartScheduler+0xa8>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3354      	adds	r3, #84	; 0x54
 800a8fa:	001a      	movs	r2, r3
 800a8fc:	4b0f      	ldr	r3, [pc, #60]	; (800a93c <vTaskStartScheduler+0xac>)
 800a8fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a900:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <vTaskStartScheduler+0xb0>)
 800a902:	2201      	movs	r2, #1
 800a904:	4252      	negs	r2, r2
 800a906:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a908:	4b0e      	ldr	r3, [pc, #56]	; (800a944 <vTaskStartScheduler+0xb4>)
 800a90a:	2201      	movs	r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a90e:	4b0e      	ldr	r3, [pc, #56]	; (800a948 <vTaskStartScheduler+0xb8>)
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a914:	f001 f818 	bl	800b948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a918:	e004      	b.n	800a924 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3301      	adds	r3, #1
 800a91e:	d101      	bne.n	800a924 <vTaskStartScheduler+0x94>
 800a920:	b672      	cpsid	i
 800a922:	e7fe      	b.n	800a922 <vTaskStartScheduler+0x92>
}
 800a924:	46c0      	nop			; (mov r8, r8)
 800a926:	46bd      	mov	sp, r7
 800a928:	b005      	add	sp, #20
 800a92a:	bd90      	pop	{r4, r7, pc}
 800a92c:	08010cb8 	.word	0x08010cb8
 800a930:	0800aed1 	.word	0x0800aed1
 800a934:	2000117c 	.word	0x2000117c
 800a938:	20000c84 	.word	0x20000c84
 800a93c:	2000007c 	.word	0x2000007c
 800a940:	20001178 	.word	0x20001178
 800a944:	20001164 	.word	0x20001164
 800a948:	2000115c 	.word	0x2000115c

0800a94c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a950:	4b03      	ldr	r3, [pc, #12]	; (800a960 <vTaskSuspendAll+0x14>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	1c5a      	adds	r2, r3, #1
 800a956:	4b02      	ldr	r3, [pc, #8]	; (800a960 <vTaskSuspendAll+0x14>)
 800a958:	601a      	str	r2, [r3, #0]
}
 800a95a:	46c0      	nop			; (mov r8, r8)
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	20001180 	.word	0x20001180

0800a964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a96e:	2300      	movs	r3, #0
 800a970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a972:	4b3a      	ldr	r3, [pc, #232]	; (800aa5c <xTaskResumeAll+0xf8>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <xTaskResumeAll+0x1a>
 800a97a:	b672      	cpsid	i
 800a97c:	e7fe      	b.n	800a97c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a97e:	f001 f817 	bl	800b9b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a982:	4b36      	ldr	r3, [pc, #216]	; (800aa5c <xTaskResumeAll+0xf8>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	4b34      	ldr	r3, [pc, #208]	; (800aa5c <xTaskResumeAll+0xf8>)
 800a98a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a98c:	4b33      	ldr	r3, [pc, #204]	; (800aa5c <xTaskResumeAll+0xf8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d15b      	bne.n	800aa4c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a994:	4b32      	ldr	r3, [pc, #200]	; (800aa60 <xTaskResumeAll+0xfc>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d057      	beq.n	800aa4c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a99c:	e02f      	b.n	800a9fe <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a99e:	4b31      	ldr	r3, [pc, #196]	; (800aa64 <xTaskResumeAll+0x100>)
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3318      	adds	r3, #24
 800a9aa:	0018      	movs	r0, r3
 800a9ac:	f7ff f96b 	bl	8009c86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	0018      	movs	r0, r3
 800a9b6:	f7ff f966 	bl	8009c86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9be:	4b2a      	ldr	r3, [pc, #168]	; (800aa68 <xTaskResumeAll+0x104>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d903      	bls.n	800a9ce <xTaskResumeAll+0x6a>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ca:	4b27      	ldr	r3, [pc, #156]	; (800aa68 <xTaskResumeAll+0x104>)
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d2:	0013      	movs	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	189b      	adds	r3, r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4a24      	ldr	r2, [pc, #144]	; (800aa6c <xTaskResumeAll+0x108>)
 800a9dc:	189a      	adds	r2, r3, r2
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	0019      	movs	r1, r3
 800a9e4:	0010      	movs	r0, r2
 800a9e6:	f7ff f8f6 	bl	8009bd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ee:	4b20      	ldr	r3, [pc, #128]	; (800aa70 <xTaskResumeAll+0x10c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d302      	bcc.n	800a9fe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800a9f8:	4b1e      	ldr	r3, [pc, #120]	; (800aa74 <xTaskResumeAll+0x110>)
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9fe:	4b19      	ldr	r3, [pc, #100]	; (800aa64 <xTaskResumeAll+0x100>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1cb      	bne.n	800a99e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa0c:	f000 fb10 	bl	800b030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aa10:	4b19      	ldr	r3, [pc, #100]	; (800aa78 <xTaskResumeAll+0x114>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00f      	beq.n	800aa3c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa1c:	f000 f83c 	bl	800aa98 <xTaskIncrementTick>
 800aa20:	1e03      	subs	r3, r0, #0
 800aa22:	d002      	beq.n	800aa2a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800aa24:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <xTaskResumeAll+0x110>)
 800aa26:	2201      	movs	r2, #1
 800aa28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f2      	bne.n	800aa1c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800aa36:	4b10      	ldr	r3, [pc, #64]	; (800aa78 <xTaskResumeAll+0x114>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <xTaskResumeAll+0x110>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d003      	beq.n	800aa4c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa44:	2301      	movs	r3, #1
 800aa46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa48:	f000 ffa2 	bl	800b990 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa4c:	f000 ffc2 	bl	800b9d4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa50:	68bb      	ldr	r3, [r7, #8]
}
 800aa52:	0018      	movs	r0, r3
 800aa54:	46bd      	mov	sp, r7
 800aa56:	b004      	add	sp, #16
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	46c0      	nop			; (mov r8, r8)
 800aa5c:	20001180 	.word	0x20001180
 800aa60:	20001158 	.word	0x20001158
 800aa64:	20001118 	.word	0x20001118
 800aa68:	20001160 	.word	0x20001160
 800aa6c:	20000c88 	.word	0x20000c88
 800aa70:	20000c84 	.word	0x20000c84
 800aa74:	2000116c 	.word	0x2000116c
 800aa78:	20001168 	.word	0x20001168

0800aa7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa82:	4b04      	ldr	r3, [pc, #16]	; (800aa94 <xTaskGetTickCount+0x18>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa88:	687b      	ldr	r3, [r7, #4]
}
 800aa8a:	0018      	movs	r0, r3
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	b002      	add	sp, #8
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	46c0      	nop			; (mov r8, r8)
 800aa94:	2000115c 	.word	0x2000115c

0800aa98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaa2:	4b4c      	ldr	r3, [pc, #304]	; (800abd4 <xTaskIncrementTick+0x13c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d000      	beq.n	800aaac <xTaskIncrementTick+0x14>
 800aaaa:	e083      	b.n	800abb4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aaac:	4b4a      	ldr	r3, [pc, #296]	; (800abd8 <xTaskIncrementTick+0x140>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3301      	adds	r3, #1
 800aab2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aab4:	4b48      	ldr	r3, [pc, #288]	; (800abd8 <xTaskIncrementTick+0x140>)
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d117      	bne.n	800aaf0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800aac0:	4b46      	ldr	r3, [pc, #280]	; (800abdc <xTaskIncrementTick+0x144>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <xTaskIncrementTick+0x36>
 800aaca:	b672      	cpsid	i
 800aacc:	e7fe      	b.n	800aacc <xTaskIncrementTick+0x34>
 800aace:	4b43      	ldr	r3, [pc, #268]	; (800abdc <xTaskIncrementTick+0x144>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	4b42      	ldr	r3, [pc, #264]	; (800abe0 <xTaskIncrementTick+0x148>)
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	4b40      	ldr	r3, [pc, #256]	; (800abdc <xTaskIncrementTick+0x144>)
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	4b40      	ldr	r3, [pc, #256]	; (800abe0 <xTaskIncrementTick+0x148>)
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	4b40      	ldr	r3, [pc, #256]	; (800abe4 <xTaskIncrementTick+0x14c>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	4b3e      	ldr	r3, [pc, #248]	; (800abe4 <xTaskIncrementTick+0x14c>)
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	f000 faa0 	bl	800b030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aaf0:	4b3d      	ldr	r3, [pc, #244]	; (800abe8 <xTaskIncrementTick+0x150>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d34e      	bcc.n	800ab98 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aafa:	4b38      	ldr	r3, [pc, #224]	; (800abdc <xTaskIncrementTick+0x144>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <xTaskIncrementTick+0x70>
 800ab04:	2301      	movs	r3, #1
 800ab06:	e000      	b.n	800ab0a <xTaskIncrementTick+0x72>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab0e:	4b36      	ldr	r3, [pc, #216]	; (800abe8 <xTaskIncrementTick+0x150>)
 800ab10:	2201      	movs	r2, #1
 800ab12:	4252      	negs	r2, r2
 800ab14:	601a      	str	r2, [r3, #0]
					break;
 800ab16:	e03f      	b.n	800ab98 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab18:	4b30      	ldr	r3, [pc, #192]	; (800abdc <xTaskIncrementTick+0x144>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d203      	bcs.n	800ab38 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab30:	4b2d      	ldr	r3, [pc, #180]	; (800abe8 <xTaskIncrementTick+0x150>)
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	601a      	str	r2, [r3, #0]
						break;
 800ab36:	e02f      	b.n	800ab98 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	f7ff f8a2 	bl	8009c86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d004      	beq.n	800ab54 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	3318      	adds	r3, #24
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f7ff f899 	bl	8009c86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab58:	4b24      	ldr	r3, [pc, #144]	; (800abec <xTaskIncrementTick+0x154>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d903      	bls.n	800ab68 <xTaskIncrementTick+0xd0>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab64:	4b21      	ldr	r3, [pc, #132]	; (800abec <xTaskIncrementTick+0x154>)
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	0013      	movs	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	189b      	adds	r3, r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4a1e      	ldr	r2, [pc, #120]	; (800abf0 <xTaskIncrementTick+0x158>)
 800ab76:	189a      	adds	r2, r3, r2
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	0019      	movs	r1, r3
 800ab7e:	0010      	movs	r0, r2
 800ab80:	f7ff f829 	bl	8009bd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab88:	4b1a      	ldr	r3, [pc, #104]	; (800abf4 <xTaskIncrementTick+0x15c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d3b3      	bcc.n	800aafa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800ab92:	2301      	movs	r3, #1
 800ab94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab96:	e7b0      	b.n	800aafa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab98:	4b16      	ldr	r3, [pc, #88]	; (800abf4 <xTaskIncrementTick+0x15c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9e:	4914      	ldr	r1, [pc, #80]	; (800abf0 <xTaskIncrementTick+0x158>)
 800aba0:	0013      	movs	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	189b      	adds	r3, r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	585b      	ldr	r3, [r3, r1]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d907      	bls.n	800abbe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800abae:	2301      	movs	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	e004      	b.n	800abbe <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800abb4:	4b10      	ldr	r3, [pc, #64]	; (800abf8 <xTaskIncrementTick+0x160>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <xTaskIncrementTick+0x160>)
 800abbc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800abbe:	4b0f      	ldr	r3, [pc, #60]	; (800abfc <xTaskIncrementTick+0x164>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800abc6:	2301      	movs	r3, #1
 800abc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800abca:	697b      	ldr	r3, [r7, #20]
}
 800abcc:	0018      	movs	r0, r3
 800abce:	46bd      	mov	sp, r7
 800abd0:	b006      	add	sp, #24
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	20001180 	.word	0x20001180
 800abd8:	2000115c 	.word	0x2000115c
 800abdc:	20001110 	.word	0x20001110
 800abe0:	20001114 	.word	0x20001114
 800abe4:	20001170 	.word	0x20001170
 800abe8:	20001178 	.word	0x20001178
 800abec:	20001160 	.word	0x20001160
 800abf0:	20000c88 	.word	0x20000c88
 800abf4:	20000c84 	.word	0x20000c84
 800abf8:	20001168 	.word	0x20001168
 800abfc:	2000116c 	.word	0x2000116c

0800ac00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac06:	4b25      	ldr	r3, [pc, #148]	; (800ac9c <vTaskSwitchContext+0x9c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac0e:	4b24      	ldr	r3, [pc, #144]	; (800aca0 <vTaskSwitchContext+0xa0>)
 800ac10:	2201      	movs	r2, #1
 800ac12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac14:	e03d      	b.n	800ac92 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800ac16:	4b22      	ldr	r3, [pc, #136]	; (800aca0 <vTaskSwitchContext+0xa0>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ac1c:	4b21      	ldr	r3, [pc, #132]	; (800aca4 <vTaskSwitchContext+0xa4>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	e007      	b.n	800ac34 <vTaskSwitchContext+0x34>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d101      	bne.n	800ac2e <vTaskSwitchContext+0x2e>
 800ac2a:	b672      	cpsid	i
 800ac2c:	e7fe      	b.n	800ac2c <vTaskSwitchContext+0x2c>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	607b      	str	r3, [r7, #4]
 800ac34:	491c      	ldr	r1, [pc, #112]	; (800aca8 <vTaskSwitchContext+0xa8>)
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	0013      	movs	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	189b      	adds	r3, r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	585b      	ldr	r3, [r3, r1]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0ee      	beq.n	800ac24 <vTaskSwitchContext+0x24>
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	0013      	movs	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	189b      	adds	r3, r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4a15      	ldr	r2, [pc, #84]	; (800aca8 <vTaskSwitchContext+0xa8>)
 800ac52:	189b      	adds	r3, r3, r2
 800ac54:	603b      	str	r3, [r7, #0]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	605a      	str	r2, [r3, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	3308      	adds	r3, #8
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d104      	bne.n	800ac76 <vTaskSwitchContext+0x76>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	605a      	str	r2, [r3, #4]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	4b0b      	ldr	r3, [pc, #44]	; (800acac <vTaskSwitchContext+0xac>)
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	4b08      	ldr	r3, [pc, #32]	; (800aca4 <vTaskSwitchContext+0xa4>)
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac86:	4b09      	ldr	r3, [pc, #36]	; (800acac <vTaskSwitchContext+0xac>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3354      	adds	r3, #84	; 0x54
 800ac8c:	001a      	movs	r2, r3
 800ac8e:	4b08      	ldr	r3, [pc, #32]	; (800acb0 <vTaskSwitchContext+0xb0>)
 800ac90:	601a      	str	r2, [r3, #0]
}
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	46bd      	mov	sp, r7
 800ac96:	b002      	add	sp, #8
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	20001180 	.word	0x20001180
 800aca0:	2000116c 	.word	0x2000116c
 800aca4:	20001160 	.word	0x20001160
 800aca8:	20000c88 	.word	0x20000c88
 800acac:	20000c84 	.word	0x20000c84
 800acb0:	2000007c 	.word	0x2000007c

0800acb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <vTaskPlaceOnEventList+0x14>
 800acc4:	b672      	cpsid	i
 800acc6:	e7fe      	b.n	800acc6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acc8:	4b08      	ldr	r3, [pc, #32]	; (800acec <vTaskPlaceOnEventList+0x38>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3318      	adds	r3, #24
 800acce:	001a      	movs	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	0011      	movs	r1, r2
 800acd4:	0018      	movs	r0, r3
 800acd6:	f7fe ffa0 	bl	8009c1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2101      	movs	r1, #1
 800acde:	0018      	movs	r0, r3
 800ace0:	f000 fa42 	bl	800b168 <prvAddCurrentTaskToDelayedList>
}
 800ace4:	46c0      	nop			; (mov r8, r8)
 800ace6:	46bd      	mov	sp, r7
 800ace8:	b002      	add	sp, #8
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20000c84 	.word	0x20000c84

0800acf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <vTaskPlaceOnEventListRestricted+0x16>
 800ad02:	b672      	cpsid	i
 800ad04:	e7fe      	b.n	800ad04 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad06:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <vTaskPlaceOnEventListRestricted+0x48>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3318      	adds	r3, #24
 800ad0c:	001a      	movs	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	0011      	movs	r1, r2
 800ad12:	0018      	movs	r0, r3
 800ad14:	f7fe ff5f 	bl	8009bd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	425b      	negs	r3, r3
 800ad22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	0011      	movs	r1, r2
 800ad2a:	0018      	movs	r0, r3
 800ad2c:	f000 fa1c 	bl	800b168 <prvAddCurrentTaskToDelayedList>
	}
 800ad30:	46c0      	nop			; (mov r8, r8)
 800ad32:	46bd      	mov	sp, r7
 800ad34:	b004      	add	sp, #16
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20000c84 	.word	0x20000c84

0800ad3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <xTaskRemoveFromEventList+0x1a>
 800ad52:	b672      	cpsid	i
 800ad54:	e7fe      	b.n	800ad54 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	3318      	adds	r3, #24
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f7fe ff93 	bl	8009c86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad60:	4b1e      	ldr	r3, [pc, #120]	; (800addc <xTaskRemoveFromEventList+0xa0>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d11d      	bne.n	800ada4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	f7fe ff8a 	bl	8009c86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad76:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <xTaskRemoveFromEventList+0xa4>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d903      	bls.n	800ad86 <xTaskRemoveFromEventList+0x4a>
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad82:	4b17      	ldr	r3, [pc, #92]	; (800ade0 <xTaskRemoveFromEventList+0xa4>)
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8a:	0013      	movs	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	189b      	adds	r3, r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4a14      	ldr	r2, [pc, #80]	; (800ade4 <xTaskRemoveFromEventList+0xa8>)
 800ad94:	189a      	adds	r2, r3, r2
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	3304      	adds	r3, #4
 800ad9a:	0019      	movs	r1, r3
 800ad9c:	0010      	movs	r0, r2
 800ad9e:	f7fe ff1a 	bl	8009bd6 <vListInsertEnd>
 800ada2:	e007      	b.n	800adb4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3318      	adds	r3, #24
 800ada8:	001a      	movs	r2, r3
 800adaa:	4b0f      	ldr	r3, [pc, #60]	; (800ade8 <xTaskRemoveFromEventList+0xac>)
 800adac:	0011      	movs	r1, r2
 800adae:	0018      	movs	r0, r3
 800adb0:	f7fe ff11 	bl	8009bd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	4b0c      	ldr	r3, [pc, #48]	; (800adec <xTaskRemoveFromEventList+0xb0>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d905      	bls.n	800adce <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adc2:	2301      	movs	r3, #1
 800adc4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adc6:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <xTaskRemoveFromEventList+0xb4>)
 800adc8:	2201      	movs	r2, #1
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	e001      	b.n	800add2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800adce:	2300      	movs	r3, #0
 800add0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800add2:	68fb      	ldr	r3, [r7, #12]
}
 800add4:	0018      	movs	r0, r3
 800add6:	46bd      	mov	sp, r7
 800add8:	b004      	add	sp, #16
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20001180 	.word	0x20001180
 800ade0:	20001160 	.word	0x20001160
 800ade4:	20000c88 	.word	0x20000c88
 800ade8:	20001118 	.word	0x20001118
 800adec:	20000c84 	.word	0x20000c84
 800adf0:	2000116c 	.word	0x2000116c

0800adf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adfc:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <vTaskInternalSetTimeOutState+0x20>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae04:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <vTaskInternalSetTimeOutState+0x24>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	605a      	str	r2, [r3, #4]
}
 800ae0c:	46c0      	nop			; (mov r8, r8)
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	b002      	add	sp, #8
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20001170 	.word	0x20001170
 800ae18:	2000115c 	.word	0x2000115c

0800ae1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <xTaskCheckForTimeOut+0x14>
 800ae2c:	b672      	cpsid	i
 800ae2e:	e7fe      	b.n	800ae2e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <xTaskCheckForTimeOut+0x1e>
 800ae36:	b672      	cpsid	i
 800ae38:	e7fe      	b.n	800ae38 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800ae3a:	f000 fdb9 	bl	800b9b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae3e:	4b1d      	ldr	r3, [pc, #116]	; (800aeb4 <xTaskCheckForTimeOut+0x98>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3301      	adds	r3, #1
 800ae54:	d102      	bne.n	800ae5c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae56:	2300      	movs	r3, #0
 800ae58:	617b      	str	r3, [r7, #20]
 800ae5a:	e024      	b.n	800aea6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <xTaskCheckForTimeOut+0x9c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d007      	beq.n	800ae78 <xTaskCheckForTimeOut+0x5c>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d302      	bcc.n	800ae78 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae72:	2301      	movs	r3, #1
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	e016      	b.n	800aea6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d20c      	bcs.n	800ae9c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	1ad2      	subs	r2, r2, r3
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	0018      	movs	r0, r3
 800ae92:	f7ff ffaf 	bl	800adf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae96:	2300      	movs	r3, #0
 800ae98:	617b      	str	r3, [r7, #20]
 800ae9a:	e004      	b.n	800aea6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aea2:	2301      	movs	r3, #1
 800aea4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800aea6:	f000 fd95 	bl	800b9d4 <vPortExitCritical>

	return xReturn;
 800aeaa:	697b      	ldr	r3, [r7, #20]
}
 800aeac:	0018      	movs	r0, r3
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	b006      	add	sp, #24
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	2000115c 	.word	0x2000115c
 800aeb8:	20001170 	.word	0x20001170

0800aebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aec0:	4b02      	ldr	r3, [pc, #8]	; (800aecc <vTaskMissedYield+0x10>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	601a      	str	r2, [r3, #0]
}
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	2000116c 	.word	0x2000116c

0800aed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aed8:	f000 f84e 	bl	800af78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aedc:	4b03      	ldr	r3, [pc, #12]	; (800aeec <prvIdleTask+0x1c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d9f9      	bls.n	800aed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aee4:	f000 fd54 	bl	800b990 <vPortYield>
		prvCheckTasksWaitingTermination();
 800aee8:	e7f6      	b.n	800aed8 <prvIdleTask+0x8>
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	20000c88 	.word	0x20000c88

0800aef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aef6:	2300      	movs	r3, #0
 800aef8:	607b      	str	r3, [r7, #4]
 800aefa:	e00c      	b.n	800af16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	0013      	movs	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	189b      	adds	r3, r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4a14      	ldr	r2, [pc, #80]	; (800af58 <prvInitialiseTaskLists+0x68>)
 800af08:	189b      	adds	r3, r3, r2
 800af0a:	0018      	movs	r0, r3
 800af0c:	f7fe fe3a 	bl	8009b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3301      	adds	r3, #1
 800af14:	607b      	str	r3, [r7, #4]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b37      	cmp	r3, #55	; 0x37
 800af1a:	d9ef      	bls.n	800aefc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af1c:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <prvInitialiseTaskLists+0x6c>)
 800af1e:	0018      	movs	r0, r3
 800af20:	f7fe fe30 	bl	8009b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af24:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <prvInitialiseTaskLists+0x70>)
 800af26:	0018      	movs	r0, r3
 800af28:	f7fe fe2c 	bl	8009b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <prvInitialiseTaskLists+0x74>)
 800af2e:	0018      	movs	r0, r3
 800af30:	f7fe fe28 	bl	8009b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af34:	4b0c      	ldr	r3, [pc, #48]	; (800af68 <prvInitialiseTaskLists+0x78>)
 800af36:	0018      	movs	r0, r3
 800af38:	f7fe fe24 	bl	8009b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af3c:	4b0b      	ldr	r3, [pc, #44]	; (800af6c <prvInitialiseTaskLists+0x7c>)
 800af3e:	0018      	movs	r0, r3
 800af40:	f7fe fe20 	bl	8009b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af44:	4b0a      	ldr	r3, [pc, #40]	; (800af70 <prvInitialiseTaskLists+0x80>)
 800af46:	4a05      	ldr	r2, [pc, #20]	; (800af5c <prvInitialiseTaskLists+0x6c>)
 800af48:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af4a:	4b0a      	ldr	r3, [pc, #40]	; (800af74 <prvInitialiseTaskLists+0x84>)
 800af4c:	4a04      	ldr	r2, [pc, #16]	; (800af60 <prvInitialiseTaskLists+0x70>)
 800af4e:	601a      	str	r2, [r3, #0]
}
 800af50:	46c0      	nop			; (mov r8, r8)
 800af52:	46bd      	mov	sp, r7
 800af54:	b002      	add	sp, #8
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20000c88 	.word	0x20000c88
 800af5c:	200010e8 	.word	0x200010e8
 800af60:	200010fc 	.word	0x200010fc
 800af64:	20001118 	.word	0x20001118
 800af68:	2000112c 	.word	0x2000112c
 800af6c:	20001144 	.word	0x20001144
 800af70:	20001110 	.word	0x20001110
 800af74:	20001114 	.word	0x20001114

0800af78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af7e:	e01a      	b.n	800afb6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800af80:	f000 fd16 	bl	800b9b0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800af84:	4b10      	ldr	r3, [pc, #64]	; (800afc8 <prvCheckTasksWaitingTermination+0x50>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3304      	adds	r3, #4
 800af90:	0018      	movs	r0, r3
 800af92:	f7fe fe78 	bl	8009c86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af96:	4b0d      	ldr	r3, [pc, #52]	; (800afcc <prvCheckTasksWaitingTermination+0x54>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	1e5a      	subs	r2, r3, #1
 800af9c:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <prvCheckTasksWaitingTermination+0x54>)
 800af9e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	1e5a      	subs	r2, r3, #1
 800afa6:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afa8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800afaa:	f000 fd13 	bl	800b9d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	0018      	movs	r0, r3
 800afb2:	f000 f80f 	bl	800afd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afb6:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e0      	bne.n	800af80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afbe:	46c0      	nop			; (mov r8, r8)
 800afc0:	46c0      	nop			; (mov r8, r8)
 800afc2:	46bd      	mov	sp, r7
 800afc4:	b002      	add	sp, #8
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	2000112c 	.word	0x2000112c
 800afcc:	20001158 	.word	0x20001158
 800afd0:	20001140 	.word	0x20001140

0800afd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3354      	adds	r3, #84	; 0x54
 800afe0:	0018      	movs	r0, r3
 800afe2:	f002 f81f 	bl	800d024 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	22a5      	movs	r2, #165	; 0xa5
 800afea:	5c9b      	ldrb	r3, [r3, r2]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d109      	bne.n	800b004 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff4:	0018      	movs	r0, r3
 800aff6:	f000 fe19 	bl	800bc2c <vPortFree>
				vPortFree( pxTCB );
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	0018      	movs	r0, r3
 800affe:	f000 fe15 	bl	800bc2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b002:	e010      	b.n	800b026 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	22a5      	movs	r2, #165	; 0xa5
 800b008:	5c9b      	ldrb	r3, [r3, r2]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d104      	bne.n	800b018 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	0018      	movs	r0, r3
 800b012:	f000 fe0b 	bl	800bc2c <vPortFree>
	}
 800b016:	e006      	b.n	800b026 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	22a5      	movs	r2, #165	; 0xa5
 800b01c:	5c9b      	ldrb	r3, [r3, r2]
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d001      	beq.n	800b026 <prvDeleteTCB+0x52>
 800b022:	b672      	cpsid	i
 800b024:	e7fe      	b.n	800b024 <prvDeleteTCB+0x50>
	}
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	46bd      	mov	sp, r7
 800b02a:	b002      	add	sp, #8
 800b02c:	bd80      	pop	{r7, pc}
	...

0800b030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b036:	4b0e      	ldr	r3, [pc, #56]	; (800b070 <prvResetNextTaskUnblockTime+0x40>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <prvResetNextTaskUnblockTime+0x14>
 800b040:	2301      	movs	r3, #1
 800b042:	e000      	b.n	800b046 <prvResetNextTaskUnblockTime+0x16>
 800b044:	2300      	movs	r3, #0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d004      	beq.n	800b054 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b04a:	4b0a      	ldr	r3, [pc, #40]	; (800b074 <prvResetNextTaskUnblockTime+0x44>)
 800b04c:	2201      	movs	r2, #1
 800b04e:	4252      	negs	r2, r2
 800b050:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b052:	e008      	b.n	800b066 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b054:	4b06      	ldr	r3, [pc, #24]	; (800b070 <prvResetNextTaskUnblockTime+0x40>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	4b04      	ldr	r3, [pc, #16]	; (800b074 <prvResetNextTaskUnblockTime+0x44>)
 800b064:	601a      	str	r2, [r3, #0]
}
 800b066:	46c0      	nop			; (mov r8, r8)
 800b068:	46bd      	mov	sp, r7
 800b06a:	b002      	add	sp, #8
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	46c0      	nop			; (mov r8, r8)
 800b070:	20001110 	.word	0x20001110
 800b074:	20001178 	.word	0x20001178

0800b078 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b07e:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <xTaskGetSchedulerState+0x30>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d102      	bne.n	800b08c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b086:	2301      	movs	r3, #1
 800b088:	607b      	str	r3, [r7, #4]
 800b08a:	e008      	b.n	800b09e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b08c:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <xTaskGetSchedulerState+0x34>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b094:	2302      	movs	r3, #2
 800b096:	607b      	str	r3, [r7, #4]
 800b098:	e001      	b.n	800b09e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b09a:	2300      	movs	r3, #0
 800b09c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b09e:	687b      	ldr	r3, [r7, #4]
	}
 800b0a0:	0018      	movs	r0, r3
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20001164 	.word	0x20001164
 800b0ac:	20001180 	.word	0x20001180

0800b0b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d044      	beq.n	800b150 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0c6:	4b25      	ldr	r3, [pc, #148]	; (800b15c <xTaskPriorityDisinherit+0xac>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d001      	beq.n	800b0d4 <xTaskPriorityDisinherit+0x24>
 800b0d0:	b672      	cpsid	i
 800b0d2:	e7fe      	b.n	800b0d2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d101      	bne.n	800b0e0 <xTaskPriorityDisinherit+0x30>
 800b0dc:	b672      	cpsid	i
 800b0de:	e7fe      	b.n	800b0de <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e4:	1e5a      	subs	r2, r3, #1
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d02c      	beq.n	800b150 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d128      	bne.n	800b150 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	3304      	adds	r3, #4
 800b102:	0018      	movs	r0, r3
 800b104:	f7fe fdbf 	bl	8009c86 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b114:	2238      	movs	r2, #56	; 0x38
 800b116:	1ad2      	subs	r2, r2, r3
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b120:	4b0f      	ldr	r3, [pc, #60]	; (800b160 <xTaskPriorityDisinherit+0xb0>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d903      	bls.n	800b130 <xTaskPriorityDisinherit+0x80>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12c:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <xTaskPriorityDisinherit+0xb0>)
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b134:	0013      	movs	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	189b      	adds	r3, r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4a09      	ldr	r2, [pc, #36]	; (800b164 <xTaskPriorityDisinherit+0xb4>)
 800b13e:	189a      	adds	r2, r3, r2
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	3304      	adds	r3, #4
 800b144:	0019      	movs	r1, r3
 800b146:	0010      	movs	r0, r2
 800b148:	f7fe fd45 	bl	8009bd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b14c:	2301      	movs	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b150:	68fb      	ldr	r3, [r7, #12]
	}
 800b152:	0018      	movs	r0, r3
 800b154:	46bd      	mov	sp, r7
 800b156:	b004      	add	sp, #16
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	20000c84 	.word	0x20000c84
 800b160:	20001160 	.word	0x20001160
 800b164:	20000c88 	.word	0x20000c88

0800b168 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b172:	4b21      	ldr	r3, [pc, #132]	; (800b1f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b178:	4b20      	ldr	r3, [pc, #128]	; (800b1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3304      	adds	r3, #4
 800b17e:	0018      	movs	r0, r3
 800b180:	f7fe fd81 	bl	8009c86 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3301      	adds	r3, #1
 800b188:	d10b      	bne.n	800b1a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d008      	beq.n	800b1a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b190:	4b1a      	ldr	r3, [pc, #104]	; (800b1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	1d1a      	adds	r2, r3, #4
 800b196:	4b1a      	ldr	r3, [pc, #104]	; (800b200 <prvAddCurrentTaskToDelayedList+0x98>)
 800b198:	0011      	movs	r1, r2
 800b19a:	0018      	movs	r0, r3
 800b19c:	f7fe fd1b 	bl	8009bd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1a0:	e026      	b.n	800b1f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	18d3      	adds	r3, r2, r3
 800b1a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1aa:	4b14      	ldr	r3, [pc, #80]	; (800b1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d209      	bcs.n	800b1ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1ba:	4b12      	ldr	r3, [pc, #72]	; (800b204 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	0019      	movs	r1, r3
 800b1c6:	0010      	movs	r0, r2
 800b1c8:	f7fe fd27 	bl	8009c1a <vListInsert>
}
 800b1cc:	e010      	b.n	800b1f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1ce:	4b0e      	ldr	r3, [pc, #56]	; (800b208 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	0019      	movs	r1, r3
 800b1da:	0010      	movs	r0, r2
 800b1dc:	f7fe fd1d 	bl	8009c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1e0:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d202      	bcs.n	800b1f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b1ea:	4b08      	ldr	r3, [pc, #32]	; (800b20c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	601a      	str	r2, [r3, #0]
}
 800b1f0:	46c0      	nop			; (mov r8, r8)
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	b004      	add	sp, #16
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	2000115c 	.word	0x2000115c
 800b1fc:	20000c84 	.word	0x20000c84
 800b200:	20001144 	.word	0x20001144
 800b204:	20001114 	.word	0x20001114
 800b208:	20001110 	.word	0x20001110
 800b20c:	20001178 	.word	0x20001178

0800b210 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b210:	b590      	push	{r4, r7, lr}
 800b212:	b089      	sub	sp, #36	; 0x24
 800b214:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b21a:	f000 fad3 	bl	800b7c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b21e:	4b17      	ldr	r3, [pc, #92]	; (800b27c <xTimerCreateTimerTask+0x6c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d020      	beq.n	800b268 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b226:	2300      	movs	r3, #0
 800b228:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b22e:	003a      	movs	r2, r7
 800b230:	1d39      	adds	r1, r7, #4
 800b232:	2308      	movs	r3, #8
 800b234:	18fb      	adds	r3, r7, r3
 800b236:	0018      	movs	r0, r3
 800b238:	f7fe fc8c 	bl	8009b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b23c:	683c      	ldr	r4, [r7, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	490f      	ldr	r1, [pc, #60]	; (800b280 <xTimerCreateTimerTask+0x70>)
 800b244:	480f      	ldr	r0, [pc, #60]	; (800b284 <xTimerCreateTimerTask+0x74>)
 800b246:	9202      	str	r2, [sp, #8]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	2302      	movs	r3, #2
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	2300      	movs	r3, #0
 800b250:	0022      	movs	r2, r4
 800b252:	f7ff f968 	bl	800a526 <xTaskCreateStatic>
 800b256:	0002      	movs	r2, r0
 800b258:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <xTimerCreateTimerTask+0x78>)
 800b25a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b25c:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <xTimerCreateTimerTask+0x78>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800b264:	2301      	movs	r3, #1
 800b266:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <xTimerCreateTimerTask+0x62>
 800b26e:	b672      	cpsid	i
 800b270:	e7fe      	b.n	800b270 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800b272:	68fb      	ldr	r3, [r7, #12]
}
 800b274:	0018      	movs	r0, r3
 800b276:	46bd      	mov	sp, r7
 800b278:	b005      	add	sp, #20
 800b27a:	bd90      	pop	{r4, r7, pc}
 800b27c:	200011b4 	.word	0x200011b4
 800b280:	08010cc0 	.word	0x08010cc0
 800b284:	0800b429 	.word	0x0800b429
 800b288:	200011b8 	.word	0x200011b8

0800b28c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b28c:	b590      	push	{r4, r7, lr}
 800b28e:	b089      	sub	sp, #36	; 0x24
 800b290:	af02      	add	r7, sp, #8
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800b29a:	2030      	movs	r0, #48	; 0x30
 800b29c:	f000 fc20 	bl	800bae0 <pvPortMalloc>
 800b2a0:	0003      	movs	r3, r0
 800b2a2:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00e      	beq.n	800b2c8 <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b2aa:	683c      	ldr	r4, [r7, #0]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	0023      	movs	r3, r4
 800b2bc:	f000 f809 	bl	800b2d2 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	222c      	movs	r2, #44	; 0x2c
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800b2c8:	697b      	ldr	r3, [r7, #20]
	}
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	b007      	add	sp, #28
 800b2d0:	bd90      	pop	{r4, r7, pc}

0800b2d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	60b9      	str	r1, [r7, #8]
 800b2dc:	607a      	str	r2, [r7, #4]
 800b2de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <prvInitialiseNewTimer+0x18>
 800b2e6:	b672      	cpsid	i
 800b2e8:	e7fe      	b.n	800b2e8 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d015      	beq.n	800b31c <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b2f0:	f000 fa68 	bl	800b7c4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	3304      	adds	r3, #4
 800b316:	0018      	movs	r0, r3
 800b318:	f7fe fc52 	bl	8009bc0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b31c:	46c0      	nop			; (mov r8, r8)
 800b31e:	46bd      	mov	sp, r7
 800b320:	b004      	add	sp, #16
 800b322:	bd80      	pop	{r7, pc}

0800b324 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b08b      	sub	sp, #44	; 0x2c
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b332:	2300      	movs	r3, #0
 800b334:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <xTimerGenericCommand+0x1c>
 800b33c:	b672      	cpsid	i
 800b33e:	e7fe      	b.n	800b33e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b340:	4b1c      	ldr	r3, [pc, #112]	; (800b3b4 <xTimerGenericCommand+0x90>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d030      	beq.n	800b3aa <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b348:	2414      	movs	r4, #20
 800b34a:	193b      	adds	r3, r7, r4
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b350:	193b      	adds	r3, r7, r4
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b356:	193b      	adds	r3, r7, r4
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2b05      	cmp	r3, #5
 800b360:	dc19      	bgt.n	800b396 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b362:	f7ff fe89 	bl	800b078 <xTaskGetSchedulerState>
 800b366:	0003      	movs	r3, r0
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d109      	bne.n	800b380 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b36c:	4b11      	ldr	r3, [pc, #68]	; (800b3b4 <xTimerGenericCommand+0x90>)
 800b36e:	6818      	ldr	r0, [r3, #0]
 800b370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b372:	1939      	adds	r1, r7, r4
 800b374:	2300      	movs	r3, #0
 800b376:	f7fe fd74 	bl	8009e62 <xQueueGenericSend>
 800b37a:	0003      	movs	r3, r0
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
 800b37e:	e014      	b.n	800b3aa <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b380:	4b0c      	ldr	r3, [pc, #48]	; (800b3b4 <xTimerGenericCommand+0x90>)
 800b382:	6818      	ldr	r0, [r3, #0]
 800b384:	2314      	movs	r3, #20
 800b386:	18f9      	adds	r1, r7, r3
 800b388:	2300      	movs	r3, #0
 800b38a:	2200      	movs	r2, #0
 800b38c:	f7fe fd69 	bl	8009e62 <xQueueGenericSend>
 800b390:	0003      	movs	r3, r0
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
 800b394:	e009      	b.n	800b3aa <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b396:	4b07      	ldr	r3, [pc, #28]	; (800b3b4 <xTimerGenericCommand+0x90>)
 800b398:	6818      	ldr	r0, [r3, #0]
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	2314      	movs	r3, #20
 800b39e:	18f9      	adds	r1, r7, r3
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f7fe fe22 	bl	8009fea <xQueueGenericSendFromISR>
 800b3a6:	0003      	movs	r3, r0
 800b3a8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	b00b      	add	sp, #44	; 0x2c
 800b3b2:	bd90      	pop	{r4, r7, pc}
 800b3b4:	200011b4 	.word	0x200011b4

0800b3b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af02      	add	r7, sp, #8
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3c2:	4b18      	ldr	r3, [pc, #96]	; (800b424 <prvProcessExpiredTimer+0x6c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	f7fe fc58 	bl	8009c86 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d119      	bne.n	800b412 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	699a      	ldr	r2, [r3, #24]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	18d1      	adds	r1, r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 f8b6 	bl	800b55c <prvInsertTimerInActiveList>
 800b3f0:	1e03      	subs	r3, r0, #0
 800b3f2:	d00e      	beq.n	800b412 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	2100      	movs	r1, #0
 800b400:	f7ff ff90 	bl	800b324 <xTimerGenericCommand>
 800b404:	0003      	movs	r3, r0
 800b406:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <prvProcessExpiredTimer+0x5a>
 800b40e:	b672      	cpsid	i
 800b410:	e7fe      	b.n	800b410 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	0010      	movs	r0, r2
 800b41a:	4798      	blx	r3
}
 800b41c:	46c0      	nop			; (mov r8, r8)
 800b41e:	46bd      	mov	sp, r7
 800b420:	b004      	add	sp, #16
 800b422:	bd80      	pop	{r7, pc}
 800b424:	200011ac 	.word	0x200011ac

0800b428 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b430:	2308      	movs	r3, #8
 800b432:	18fb      	adds	r3, r7, r3
 800b434:	0018      	movs	r0, r3
 800b436:	f000 f851 	bl	800b4dc <prvGetNextExpireTime>
 800b43a:	0003      	movs	r3, r0
 800b43c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	0011      	movs	r1, r2
 800b444:	0018      	movs	r0, r3
 800b446:	f000 f803 	bl	800b450 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b44a:	f000 f8c9 	bl	800b5e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b44e:	e7ef      	b.n	800b430 <prvTimerTask+0x8>

0800b450 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b45a:	f7ff fa77 	bl	800a94c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b45e:	2308      	movs	r3, #8
 800b460:	18fb      	adds	r3, r7, r3
 800b462:	0018      	movs	r0, r3
 800b464:	f000 f85a 	bl	800b51c <prvSampleTimeNow>
 800b468:	0003      	movs	r3, r0
 800b46a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d129      	bne.n	800b4c6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10c      	bne.n	800b492 <prvProcessTimerOrBlockTask+0x42>
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d808      	bhi.n	800b492 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800b480:	f7ff fa70 	bl	800a964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	0011      	movs	r1, r2
 800b48a:	0018      	movs	r0, r3
 800b48c:	f7ff ff94 	bl	800b3b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b490:	e01b      	b.n	800b4ca <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d006      	beq.n	800b4a6 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b498:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <prvProcessTimerOrBlockTask+0x84>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	425a      	negs	r2, r3
 800b4a0:	4153      	adcs	r3, r2
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <prvProcessTimerOrBlockTask+0x88>)
 800b4a8:	6818      	ldr	r0, [r3, #0]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	0019      	movs	r1, r3
 800b4b4:	f7ff f804 	bl	800a4c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4b8:	f7ff fa54 	bl	800a964 <xTaskResumeAll>
 800b4bc:	1e03      	subs	r3, r0, #0
 800b4be:	d104      	bne.n	800b4ca <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800b4c0:	f000 fa66 	bl	800b990 <vPortYield>
}
 800b4c4:	e001      	b.n	800b4ca <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800b4c6:	f7ff fa4d 	bl	800a964 <xTaskResumeAll>
}
 800b4ca:	46c0      	nop			; (mov r8, r8)
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	b004      	add	sp, #16
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	46c0      	nop			; (mov r8, r8)
 800b4d4:	200011b0 	.word	0x200011b0
 800b4d8:	200011b4 	.word	0x200011b4

0800b4dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4e4:	4b0c      	ldr	r3, [pc, #48]	; (800b518 <prvGetNextExpireTime+0x3c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	425a      	negs	r2, r3
 800b4ec:	4153      	adcs	r3, r2
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	001a      	movs	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d105      	bne.n	800b50a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4fe:	4b06      	ldr	r3, [pc, #24]	; (800b518 <prvGetNextExpireTime+0x3c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	e001      	b.n	800b50e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b50e:	68fb      	ldr	r3, [r7, #12]
}
 800b510:	0018      	movs	r0, r3
 800b512:	46bd      	mov	sp, r7
 800b514:	b004      	add	sp, #16
 800b516:	bd80      	pop	{r7, pc}
 800b518:	200011ac 	.word	0x200011ac

0800b51c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b524:	f7ff faaa 	bl	800aa7c <xTaskGetTickCount>
 800b528:	0003      	movs	r3, r0
 800b52a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <prvSampleTimeNow+0x3c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	429a      	cmp	r2, r3
 800b534:	d205      	bcs.n	800b542 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800b536:	f000 f8eb 	bl	800b710 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	e002      	b.n	800b548 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b548:	4b03      	ldr	r3, [pc, #12]	; (800b558 <prvSampleTimeNow+0x3c>)
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800b54e:	68fb      	ldr	r3, [r7, #12]
}
 800b550:	0018      	movs	r0, r3
 800b552:	46bd      	mov	sp, r7
 800b554:	b004      	add	sp, #16
 800b556:	bd80      	pop	{r7, pc}
 800b558:	200011bc 	.word	0x200011bc

0800b55c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b56a:	2300      	movs	r3, #0
 800b56c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d812      	bhi.n	800b5a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	1ad2      	subs	r2, r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d302      	bcc.n	800b596 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b590:	2301      	movs	r3, #1
 800b592:	617b      	str	r3, [r7, #20]
 800b594:	e01b      	b.n	800b5ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b596:	4b10      	ldr	r3, [pc, #64]	; (800b5d8 <prvInsertTimerInActiveList+0x7c>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3304      	adds	r3, #4
 800b59e:	0019      	movs	r1, r3
 800b5a0:	0010      	movs	r0, r2
 800b5a2:	f7fe fb3a 	bl	8009c1a <vListInsert>
 800b5a6:	e012      	b.n	800b5ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d206      	bcs.n	800b5be <prvInsertTimerInActiveList+0x62>
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d302      	bcc.n	800b5be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	617b      	str	r3, [r7, #20]
 800b5bc:	e007      	b.n	800b5ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5be:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <prvInsertTimerInActiveList+0x80>)
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	0019      	movs	r1, r3
 800b5c8:	0010      	movs	r0, r2
 800b5ca:	f7fe fb26 	bl	8009c1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5ce:	697b      	ldr	r3, [r7, #20]
}
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	b006      	add	sp, #24
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	200011b0 	.word	0x200011b0
 800b5dc:	200011ac 	.word	0x200011ac

0800b5e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5e0:	b590      	push	{r4, r7, lr}
 800b5e2:	b08d      	sub	sp, #52	; 0x34
 800b5e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5e6:	e07f      	b.n	800b6e8 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b5e8:	2208      	movs	r2, #8
 800b5ea:	18bb      	adds	r3, r7, r2
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	da0f      	bge.n	800b612 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b5f2:	18bb      	adds	r3, r7, r2
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <prvProcessReceivedCommands+0x22>
 800b5fe:	b672      	cpsid	i
 800b600:	e7fe      	b.n	800b600 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b608:	6858      	ldr	r0, [r3, #4]
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	0019      	movs	r1, r3
 800b610:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b612:	2208      	movs	r2, #8
 800b614:	18bb      	adds	r3, r7, r2
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	db65      	blt.n	800b6e8 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b61c:	18bb      	adds	r3, r7, r2
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d004      	beq.n	800b634 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	3304      	adds	r3, #4
 800b62e:	0018      	movs	r0, r3
 800b630:	f7fe fb29 	bl	8009c86 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b634:	1d3b      	adds	r3, r7, #4
 800b636:	0018      	movs	r0, r3
 800b638:	f7ff ff70 	bl	800b51c <prvSampleTimeNow>
 800b63c:	0003      	movs	r3, r0
 800b63e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800b640:	2308      	movs	r3, #8
 800b642:	18fb      	adds	r3, r7, r3
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b09      	cmp	r3, #9
 800b648:	d84d      	bhi.n	800b6e6 <prvProcessReceivedCommands+0x106>
 800b64a:	009a      	lsls	r2, r3, #2
 800b64c:	4b2e      	ldr	r3, [pc, #184]	; (800b708 <prvProcessReceivedCommands+0x128>)
 800b64e:	18d3      	adds	r3, r2, r3
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b654:	2408      	movs	r4, #8
 800b656:	193b      	adds	r3, r7, r4
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	18d1      	adds	r1, r2, r3
 800b660:	193b      	adds	r3, r7, r4
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	69fa      	ldr	r2, [r7, #28]
 800b666:	6a38      	ldr	r0, [r7, #32]
 800b668:	f7ff ff78 	bl	800b55c <prvInsertTimerInActiveList>
 800b66c:	1e03      	subs	r3, r0, #0
 800b66e:	d03b      	beq.n	800b6e8 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	6a3a      	ldr	r2, [r7, #32]
 800b676:	0010      	movs	r0, r2
 800b678:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b67a:	6a3b      	ldr	r3, [r7, #32]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d132      	bne.n	800b6e8 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b682:	193b      	adds	r3, r7, r4
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	18d2      	adds	r2, r2, r3
 800b68c:	6a38      	ldr	r0, [r7, #32]
 800b68e:	2300      	movs	r3, #0
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	2300      	movs	r3, #0
 800b694:	2100      	movs	r1, #0
 800b696:	f7ff fe45 	bl	800b324 <xTimerGenericCommand>
 800b69a:	0003      	movs	r3, r0
 800b69c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d121      	bne.n	800b6e8 <prvProcessReceivedCommands+0x108>
 800b6a4:	b672      	cpsid	i
 800b6a6:	e7fe      	b.n	800b6a6 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b6a8:	2308      	movs	r3, #8
 800b6aa:	18fb      	adds	r3, r7, r3
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <prvProcessReceivedCommands+0xde>
 800b6ba:	b672      	cpsid	i
 800b6bc:	e7fe      	b.n	800b6bc <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	699a      	ldr	r2, [r3, #24]
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	18d1      	adds	r1, r2, r3
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	69fa      	ldr	r2, [r7, #28]
 800b6ca:	6a38      	ldr	r0, [r7, #32]
 800b6cc:	f7ff ff46 	bl	800b55c <prvInsertTimerInActiveList>
					break;
 800b6d0:	e00a      	b.n	800b6e8 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b6d2:	6a3b      	ldr	r3, [r7, #32]
 800b6d4:	222c      	movs	r2, #44	; 0x2c
 800b6d6:	5c9b      	ldrb	r3, [r3, r2]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d105      	bne.n	800b6e8 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	0018      	movs	r0, r3
 800b6e0:	f000 faa4 	bl	800bc2c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b6e4:	e000      	b.n	800b6e8 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800b6e6:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6e8:	4b08      	ldr	r3, [pc, #32]	; (800b70c <prvProcessReceivedCommands+0x12c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	18b9      	adds	r1, r7, r2
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f7fe fcea 	bl	800a0cc <xQueueReceive>
 800b6f8:	1e03      	subs	r3, r0, #0
 800b6fa:	d000      	beq.n	800b6fe <prvProcessReceivedCommands+0x11e>
 800b6fc:	e774      	b.n	800b5e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b6fe:	46c0      	nop			; (mov r8, r8)
 800b700:	46c0      	nop			; (mov r8, r8)
 800b702:	46bd      	mov	sp, r7
 800b704:	b00b      	add	sp, #44	; 0x2c
 800b706:	bd90      	pop	{r4, r7, pc}
 800b708:	08010dc0 	.word	0x08010dc0
 800b70c:	200011b4 	.word	0x200011b4

0800b710 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b716:	e03e      	b.n	800b796 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b718:	4b28      	ldr	r3, [pc, #160]	; (800b7bc <prvSwitchTimerLists+0xac>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b722:	4b26      	ldr	r3, [pc, #152]	; (800b7bc <prvSwitchTimerLists+0xac>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	3304      	adds	r3, #4
 800b730:	0018      	movs	r0, r3
 800b732:	f7fe faa8 	bl	8009c86 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	0010      	movs	r0, r2
 800b73e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d126      	bne.n	800b796 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	18d3      	adds	r3, r2, r3
 800b750:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	429a      	cmp	r2, r3
 800b758:	d90e      	bls.n	800b778 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b766:	4b15      	ldr	r3, [pc, #84]	; (800b7bc <prvSwitchTimerLists+0xac>)
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3304      	adds	r3, #4
 800b76e:	0019      	movs	r1, r3
 800b770:	0010      	movs	r0, r2
 800b772:	f7fe fa52 	bl	8009c1a <vListInsert>
 800b776:	e00e      	b.n	800b796 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	2300      	movs	r3, #0
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	2300      	movs	r3, #0
 800b782:	2100      	movs	r1, #0
 800b784:	f7ff fdce 	bl	800b324 <xTimerGenericCommand>
 800b788:	0003      	movs	r3, r0
 800b78a:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <prvSwitchTimerLists+0x86>
 800b792:	b672      	cpsid	i
 800b794:	e7fe      	b.n	800b794 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b796:	4b09      	ldr	r3, [pc, #36]	; (800b7bc <prvSwitchTimerLists+0xac>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1bb      	bne.n	800b718 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b7a0:	4b06      	ldr	r3, [pc, #24]	; (800b7bc <prvSwitchTimerLists+0xac>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b7a6:	4b06      	ldr	r3, [pc, #24]	; (800b7c0 <prvSwitchTimerLists+0xb0>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	4b04      	ldr	r3, [pc, #16]	; (800b7bc <prvSwitchTimerLists+0xac>)
 800b7ac:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800b7ae:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <prvSwitchTimerLists+0xb0>)
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	601a      	str	r2, [r3, #0]
}
 800b7b4:	46c0      	nop			; (mov r8, r8)
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	b006      	add	sp, #24
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	200011ac 	.word	0x200011ac
 800b7c0:	200011b0 	.word	0x200011b0

0800b7c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b7ca:	f000 f8f1 	bl	800b9b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b7ce:	4b16      	ldr	r3, [pc, #88]	; (800b828 <prvCheckForValidListAndQueue+0x64>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d123      	bne.n	800b81e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800b7d6:	4b15      	ldr	r3, [pc, #84]	; (800b82c <prvCheckForValidListAndQueue+0x68>)
 800b7d8:	0018      	movs	r0, r3
 800b7da:	f7fe f9d3 	bl	8009b84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b7de:	4b14      	ldr	r3, [pc, #80]	; (800b830 <prvCheckForValidListAndQueue+0x6c>)
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f7fe f9cf 	bl	8009b84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b7e6:	4b13      	ldr	r3, [pc, #76]	; (800b834 <prvCheckForValidListAndQueue+0x70>)
 800b7e8:	4a10      	ldr	r2, [pc, #64]	; (800b82c <prvCheckForValidListAndQueue+0x68>)
 800b7ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b7ec:	4b12      	ldr	r3, [pc, #72]	; (800b838 <prvCheckForValidListAndQueue+0x74>)
 800b7ee:	4a10      	ldr	r2, [pc, #64]	; (800b830 <prvCheckForValidListAndQueue+0x6c>)
 800b7f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7f2:	4b12      	ldr	r3, [pc, #72]	; (800b83c <prvCheckForValidListAndQueue+0x78>)
 800b7f4:	4a12      	ldr	r2, [pc, #72]	; (800b840 <prvCheckForValidListAndQueue+0x7c>)
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	9100      	str	r1, [sp, #0]
 800b7fa:	2110      	movs	r1, #16
 800b7fc:	200a      	movs	r0, #10
 800b7fe:	f7fe fabe 	bl	8009d7e <xQueueGenericCreateStatic>
 800b802:	0002      	movs	r2, r0
 800b804:	4b08      	ldr	r3, [pc, #32]	; (800b828 <prvCheckForValidListAndQueue+0x64>)
 800b806:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b808:	4b07      	ldr	r3, [pc, #28]	; (800b828 <prvCheckForValidListAndQueue+0x64>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d006      	beq.n	800b81e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <prvCheckForValidListAndQueue+0x64>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a0b      	ldr	r2, [pc, #44]	; (800b844 <prvCheckForValidListAndQueue+0x80>)
 800b816:	0011      	movs	r1, r2
 800b818:	0018      	movs	r0, r3
 800b81a:	f7fe fe29 	bl	800a470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b81e:	f000 f8d9 	bl	800b9d4 <vPortExitCritical>
}
 800b822:	46c0      	nop			; (mov r8, r8)
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	200011b4 	.word	0x200011b4
 800b82c:	20001184 	.word	0x20001184
 800b830:	20001198 	.word	0x20001198
 800b834:	200011ac 	.word	0x200011ac
 800b838:	200011b0 	.word	0x200011b0
 800b83c:	20001260 	.word	0x20001260
 800b840:	200011c0 	.word	0x200011c0
 800b844:	08010cc8 	.word	0x08010cc8

0800b848 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <xTimerIsTimerActive+0x16>
 800b85a:	b672      	cpsid	i
 800b85c:	e7fe      	b.n	800b85c <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800b85e:	f000 f8a7 	bl	800b9b0 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	1e5a      	subs	r2, r3, #1
 800b868:	4193      	sbcs	r3, r2
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 800b86e:	f000 f8b1 	bl	800b9d4 <vPortExitCritical>

	return xTimerIsInActiveList;
 800b872:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800b874:	0018      	movs	r0, r3
 800b876:	46bd      	mov	sp, r7
 800b878:	b004      	add	sp, #16
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3b04      	subs	r3, #4
 800b88c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2280      	movs	r2, #128	; 0x80
 800b892:	0452      	lsls	r2, r2, #17
 800b894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3b04      	subs	r3, #4
 800b89a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3b04      	subs	r3, #4
 800b8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8a8:	4a08      	ldr	r2, [pc, #32]	; (800b8cc <pxPortInitialiseStack+0x50>)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3b14      	subs	r3, #20
 800b8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3b20      	subs	r3, #32
 800b8be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
}
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	b004      	add	sp, #16
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	46c0      	nop			; (mov r8, r8)
 800b8cc:	0800b8d1 	.word	0x0800b8d1

0800b8d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8da:	4b08      	ldr	r3, [pc, #32]	; (800b8fc <prvTaskExitError+0x2c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	d001      	beq.n	800b8e6 <prvTaskExitError+0x16>
 800b8e2:	b672      	cpsid	i
 800b8e4:	e7fe      	b.n	800b8e4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800b8e6:	b672      	cpsid	i
	while( ulDummy == 0 )
 800b8e8:	46c0      	nop			; (mov r8, r8)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d0fc      	beq.n	800b8ea <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b8f0:	46c0      	nop			; (mov r8, r8)
 800b8f2:	46c0      	nop			; (mov r8, r8)
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	b002      	add	sp, #8
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	46c0      	nop			; (mov r8, r8)
 800b8fc:	20000020 	.word	0x20000020

0800b900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800b904:	46c0      	nop			; (mov r8, r8)
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	0000      	movs	r0, r0
 800b90c:	0000      	movs	r0, r0
	...

0800b910 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800b910:	4a0b      	ldr	r2, [pc, #44]	; (800b940 <pxCurrentTCBConst2>)
 800b912:	6813      	ldr	r3, [r2, #0]
 800b914:	6818      	ldr	r0, [r3, #0]
 800b916:	3020      	adds	r0, #32
 800b918:	f380 8809 	msr	PSP, r0
 800b91c:	2002      	movs	r0, #2
 800b91e:	f380 8814 	msr	CONTROL, r0
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800b928:	46ae      	mov	lr, r5
 800b92a:	bc08      	pop	{r3}
 800b92c:	bc04      	pop	{r2}
 800b92e:	b662      	cpsie	i
 800b930:	4718      	bx	r3
 800b932:	46c0      	nop			; (mov r8, r8)
 800b934:	46c0      	nop			; (mov r8, r8)
 800b936:	46c0      	nop			; (mov r8, r8)
 800b938:	46c0      	nop			; (mov r8, r8)
 800b93a:	46c0      	nop			; (mov r8, r8)
 800b93c:	46c0      	nop			; (mov r8, r8)
 800b93e:	46c0      	nop			; (mov r8, r8)

0800b940 <pxCurrentTCBConst2>:
 800b940:	20000c84 	.word	0x20000c84
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800b944:	46c0      	nop			; (mov r8, r8)
 800b946:	46c0      	nop			; (mov r8, r8)

0800b948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800b94c:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <xPortStartScheduler+0x40>)
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	4b0d      	ldr	r3, [pc, #52]	; (800b988 <xPortStartScheduler+0x40>)
 800b952:	21ff      	movs	r1, #255	; 0xff
 800b954:	0409      	lsls	r1, r1, #16
 800b956:	430a      	orrs	r2, r1
 800b958:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800b95a:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <xPortStartScheduler+0x40>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <xPortStartScheduler+0x40>)
 800b960:	21ff      	movs	r1, #255	; 0xff
 800b962:	0609      	lsls	r1, r1, #24
 800b964:	430a      	orrs	r2, r1
 800b966:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800b968:	f000 f898 	bl	800ba9c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b96c:	4b07      	ldr	r3, [pc, #28]	; (800b98c <xPortStartScheduler+0x44>)
 800b96e:	2200      	movs	r2, #0
 800b970:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800b972:	f7ff ffcd 	bl	800b910 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b976:	f7ff f943 	bl	800ac00 <vTaskSwitchContext>
	prvTaskExitError();
 800b97a:	f7ff ffa9 	bl	800b8d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	0018      	movs	r0, r3
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	46c0      	nop			; (mov r8, r8)
 800b988:	e000ed20 	.word	0xe000ed20
 800b98c:	20000020 	.word	0x20000020

0800b990 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800b994:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <vPortYield+0x1c>)
 800b996:	2280      	movs	r2, #128	; 0x80
 800b998:	0552      	lsls	r2, r2, #21
 800b99a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800b99c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800b9a0:	f3bf 8f6f 	isb	sy
}
 800b9a4:	46c0      	nop			; (mov r8, r8)
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	46c0      	nop			; (mov r8, r8)
 800b9ac:	e000ed04 	.word	0xe000ed04

0800b9b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800b9b4:	b672      	cpsid	i
    uxCriticalNesting++;
 800b9b6:	4b06      	ldr	r3, [pc, #24]	; (800b9d0 <vPortEnterCritical+0x20>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	1c5a      	adds	r2, r3, #1
 800b9bc:	4b04      	ldr	r3, [pc, #16]	; (800b9d0 <vPortEnterCritical+0x20>)
 800b9be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800b9c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800b9c4:	f3bf 8f6f 	isb	sy
}
 800b9c8:	46c0      	nop			; (mov r8, r8)
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	46c0      	nop			; (mov r8, r8)
 800b9d0:	20000020 	.word	0x20000020

0800b9d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9d8:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <vPortExitCritical+0x2c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d101      	bne.n	800b9e4 <vPortExitCritical+0x10>
 800b9e0:	b672      	cpsid	i
 800b9e2:	e7fe      	b.n	800b9e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800b9e4:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <vPortExitCritical+0x2c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	1e5a      	subs	r2, r3, #1
 800b9ea:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <vPortExitCritical+0x2c>)
 800b9ec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800b9ee:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <vPortExitCritical+0x2c>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d100      	bne.n	800b9f8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800b9f6:	b662      	cpsie	i
    }
}
 800b9f8:	46c0      	nop			; (mov r8, r8)
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	46c0      	nop			; (mov r8, r8)
 800ba00:	20000020 	.word	0x20000020

0800ba04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800ba04:	f3ef 8010 	mrs	r0, PRIMASK
 800ba08:	b672      	cpsid	i
 800ba0a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800ba0c:	46c0      	nop			; (mov r8, r8)
 800ba0e:	0018      	movs	r0, r3

0800ba10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800ba10:	f380 8810 	msr	PRIMASK, r0
 800ba14:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800ba16:	46c0      	nop			; (mov r8, r8)
	...

0800ba20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba20:	f3ef 8009 	mrs	r0, PSP
 800ba24:	4b0e      	ldr	r3, [pc, #56]	; (800ba60 <pxCurrentTCBConst>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	3820      	subs	r0, #32
 800ba2a:	6010      	str	r0, [r2, #0]
 800ba2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ba2e:	4644      	mov	r4, r8
 800ba30:	464d      	mov	r5, r9
 800ba32:	4656      	mov	r6, sl
 800ba34:	465f      	mov	r7, fp
 800ba36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ba38:	b508      	push	{r3, lr}
 800ba3a:	b672      	cpsid	i
 800ba3c:	f7ff f8e0 	bl	800ac00 <vTaskSwitchContext>
 800ba40:	b662      	cpsie	i
 800ba42:	bc0c      	pop	{r2, r3}
 800ba44:	6811      	ldr	r1, [r2, #0]
 800ba46:	6808      	ldr	r0, [r1, #0]
 800ba48:	3010      	adds	r0, #16
 800ba4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ba4c:	46a0      	mov	r8, r4
 800ba4e:	46a9      	mov	r9, r5
 800ba50:	46b2      	mov	sl, r6
 800ba52:	46bb      	mov	fp, r7
 800ba54:	f380 8809 	msr	PSP, r0
 800ba58:	3820      	subs	r0, #32
 800ba5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ba5c:	4718      	bx	r3
 800ba5e:	46c0      	nop			; (mov r8, r8)

0800ba60 <pxCurrentTCBConst>:
 800ba60:	20000c84 	.word	0x20000c84
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800ba64:	46c0      	nop			; (mov r8, r8)
 800ba66:	46c0      	nop			; (mov r8, r8)

0800ba68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba6e:	f7ff ffc9 	bl	800ba04 <ulSetInterruptMaskFromISR>
 800ba72:	0003      	movs	r3, r0
 800ba74:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba76:	f7ff f80f 	bl	800aa98 <xTaskIncrementTick>
 800ba7a:	1e03      	subs	r3, r0, #0
 800ba7c:	d003      	beq.n	800ba86 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800ba7e:	4b06      	ldr	r3, [pc, #24]	; (800ba98 <SysTick_Handler+0x30>)
 800ba80:	2280      	movs	r2, #128	; 0x80
 800ba82:	0552      	lsls	r2, r2, #21
 800ba84:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	0018      	movs	r0, r3
 800ba8a:	f7ff ffc1 	bl	800ba10 <vClearInterruptMaskFromISR>
}
 800ba8e:	46c0      	nop			; (mov r8, r8)
 800ba90:	46bd      	mov	sp, r7
 800ba92:	b002      	add	sp, #8
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	46c0      	nop			; (mov r8, r8)
 800ba98:	e000ed04 	.word	0xe000ed04

0800ba9c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800baa0:	4b0b      	ldr	r3, [pc, #44]	; (800bad0 <prvSetupTimerInterrupt+0x34>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800baa6:	4b0b      	ldr	r3, [pc, #44]	; (800bad4 <prvSetupTimerInterrupt+0x38>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800baac:	4b0a      	ldr	r3, [pc, #40]	; (800bad8 <prvSetupTimerInterrupt+0x3c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	22fa      	movs	r2, #250	; 0xfa
 800bab2:	0091      	lsls	r1, r2, #2
 800bab4:	0018      	movs	r0, r3
 800bab6:	f7f4 fb43 	bl	8000140 <__udivsi3>
 800baba:	0003      	movs	r3, r0
 800babc:	001a      	movs	r2, r3
 800babe:	4b07      	ldr	r3, [pc, #28]	; (800badc <prvSetupTimerInterrupt+0x40>)
 800bac0:	3a01      	subs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800bac4:	4b02      	ldr	r3, [pc, #8]	; (800bad0 <prvSetupTimerInterrupt+0x34>)
 800bac6:	2207      	movs	r2, #7
 800bac8:	601a      	str	r2, [r3, #0]
}
 800baca:	46c0      	nop			; (mov r8, r8)
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	e000e010 	.word	0xe000e010
 800bad4:	e000e018 	.word	0xe000e018
 800bad8:	20000014 	.word	0x20000014
 800badc:	e000e014 	.word	0xe000e014

0800bae0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800baec:	f7fe ff2e 	bl	800a94c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800baf0:	4b49      	ldr	r3, [pc, #292]	; (800bc18 <pvPortMalloc+0x138>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d101      	bne.n	800bafc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800baf8:	f000 f8e0 	bl	800bcbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bafc:	4b47      	ldr	r3, [pc, #284]	; (800bc1c <pvPortMalloc+0x13c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	4013      	ands	r3, r2
 800bb04:	d000      	beq.n	800bb08 <pvPortMalloc+0x28>
 800bb06:	e079      	b.n	800bbfc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d012      	beq.n	800bb34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800bb0e:	2208      	movs	r2, #8
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	189b      	adds	r3, r3, r2
 800bb14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2207      	movs	r2, #7
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	d00a      	beq.n	800bb34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2207      	movs	r2, #7
 800bb22:	4393      	bics	r3, r2
 800bb24:	3308      	adds	r3, #8
 800bb26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2207      	movs	r2, #7
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	d001      	beq.n	800bb34 <pvPortMalloc+0x54>
 800bb30:	b672      	cpsid	i
 800bb32:	e7fe      	b.n	800bb32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d060      	beq.n	800bbfc <pvPortMalloc+0x11c>
 800bb3a:	4b39      	ldr	r3, [pc, #228]	; (800bc20 <pvPortMalloc+0x140>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d85b      	bhi.n	800bbfc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb44:	4b37      	ldr	r3, [pc, #220]	; (800bc24 <pvPortMalloc+0x144>)
 800bb46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800bb48:	4b36      	ldr	r3, [pc, #216]	; (800bc24 <pvPortMalloc+0x144>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb4e:	e004      	b.n	800bb5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d903      	bls.n	800bb6c <pvPortMalloc+0x8c>
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1f1      	bne.n	800bb50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb6c:	4b2a      	ldr	r3, [pc, #168]	; (800bc18 <pvPortMalloc+0x138>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d042      	beq.n	800bbfc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2208      	movs	r2, #8
 800bb7c:	189b      	adds	r3, r3, r2
 800bb7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	2308      	movs	r3, #8
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d916      	bls.n	800bbc6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	18d3      	adds	r3, r2, r3
 800bb9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2207      	movs	r2, #7
 800bba4:	4013      	ands	r3, r2
 800bba6:	d001      	beq.n	800bbac <pvPortMalloc+0xcc>
 800bba8:	b672      	cpsid	i
 800bbaa:	e7fe      	b.n	800bbaa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	1ad2      	subs	r2, r2, r3
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f000 f8db 	bl	800bd7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bbc6:	4b16      	ldr	r3, [pc, #88]	; (800bc20 <pvPortMalloc+0x140>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	4b13      	ldr	r3, [pc, #76]	; (800bc20 <pvPortMalloc+0x140>)
 800bbd2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbd4:	4b12      	ldr	r3, [pc, #72]	; (800bc20 <pvPortMalloc+0x140>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	4b13      	ldr	r3, [pc, #76]	; (800bc28 <pvPortMalloc+0x148>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d203      	bcs.n	800bbe8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbe0:	4b0f      	ldr	r3, [pc, #60]	; (800bc20 <pvPortMalloc+0x140>)
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	4b10      	ldr	r3, [pc, #64]	; (800bc28 <pvPortMalloc+0x148>)
 800bbe6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	4b0b      	ldr	r3, [pc, #44]	; (800bc1c <pvPortMalloc+0x13c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	431a      	orrs	r2, r3
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bbfc:	f7fe feb2 	bl	800a964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2207      	movs	r2, #7
 800bc04:	4013      	ands	r3, r2
 800bc06:	d001      	beq.n	800bc0c <pvPortMalloc+0x12c>
 800bc08:	b672      	cpsid	i
 800bc0a:	e7fe      	b.n	800bc0a <pvPortMalloc+0x12a>
	return pvReturn;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
}
 800bc0e:	0018      	movs	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	b006      	add	sp, #24
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	46c0      	nop			; (mov r8, r8)
 800bc18:	20001c40 	.word	0x20001c40
 800bc1c:	20001c4c 	.word	0x20001c4c
 800bc20:	20001c44 	.word	0x20001c44
 800bc24:	20001c38 	.word	0x20001c38
 800bc28:	20001c48 	.word	0x20001c48

0800bc2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d035      	beq.n	800bcaa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc3e:	2308      	movs	r3, #8
 800bc40:	425b      	negs	r3, r3
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	18d3      	adds	r3, r2, r3
 800bc46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	4b18      	ldr	r3, [pc, #96]	; (800bcb4 <vPortFree+0x88>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4013      	ands	r3, r2
 800bc56:	d101      	bne.n	800bc5c <vPortFree+0x30>
 800bc58:	b672      	cpsid	i
 800bc5a:	e7fe      	b.n	800bc5a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <vPortFree+0x3c>
 800bc64:	b672      	cpsid	i
 800bc66:	e7fe      	b.n	800bc66 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	4b11      	ldr	r3, [pc, #68]	; (800bcb4 <vPortFree+0x88>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4013      	ands	r3, r2
 800bc72:	d01a      	beq.n	800bcaa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d116      	bne.n	800bcaa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	4b0c      	ldr	r3, [pc, #48]	; (800bcb4 <vPortFree+0x88>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	43db      	mvns	r3, r3
 800bc86:	401a      	ands	r2, r3
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc8c:	f7fe fe5e 	bl	800a94c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	4b08      	ldr	r3, [pc, #32]	; (800bcb8 <vPortFree+0x8c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	18d2      	adds	r2, r2, r3
 800bc9a:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <vPortFree+0x8c>)
 800bc9c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	0018      	movs	r0, r3
 800bca2:	f000 f86b 	bl	800bd7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bca6:	f7fe fe5d 	bl	800a964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcaa:	46c0      	nop			; (mov r8, r8)
 800bcac:	46bd      	mov	sp, r7
 800bcae:	b004      	add	sp, #16
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	46c0      	nop			; (mov r8, r8)
 800bcb4:	20001c4c 	.word	0x20001c4c
 800bcb8:	20001c44 	.word	0x20001c44

0800bcbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcc2:	4b27      	ldr	r3, [pc, #156]	; (800bd60 <prvHeapInit+0xa4>)
 800bcc4:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcc6:	4b27      	ldr	r3, [pc, #156]	; (800bd64 <prvHeapInit+0xa8>)
 800bcc8:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2207      	movs	r2, #7
 800bcce:	4013      	ands	r3, r2
 800bcd0:	d00c      	beq.n	800bcec <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	3307      	adds	r3, #7
 800bcd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2207      	movs	r2, #7
 800bcdc:	4393      	bics	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	1ad2      	subs	r2, r2, r3
 800bce6:	4b1f      	ldr	r3, [pc, #124]	; (800bd64 <prvHeapInit+0xa8>)
 800bce8:	18d3      	adds	r3, r2, r3
 800bcea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcf0:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <prvHeapInit+0xac>)
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcf6:	4b1c      	ldr	r3, [pc, #112]	; (800bd68 <prvHeapInit+0xac>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	18d3      	adds	r3, r2, r3
 800bd02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd04:	2208      	movs	r2, #8
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	1a9b      	subs	r3, r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2207      	movs	r2, #7
 800bd10:	4393      	bics	r3, r2
 800bd12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	4b15      	ldr	r3, [pc, #84]	; (800bd6c <prvHeapInit+0xb0>)
 800bd18:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800bd1a:	4b14      	ldr	r3, [pc, #80]	; (800bd6c <prvHeapInit+0xb0>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd22:	4b12      	ldr	r3, [pc, #72]	; (800bd6c <prvHeapInit+0xb0>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2200      	movs	r2, #0
 800bd28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	1ad2      	subs	r2, r2, r3
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd38:	4b0c      	ldr	r3, [pc, #48]	; (800bd6c <prvHeapInit+0xb0>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	685a      	ldr	r2, [r3, #4]
 800bd44:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <prvHeapInit+0xb4>)
 800bd46:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <prvHeapInit+0xb8>)
 800bd4e:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd50:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <prvHeapInit+0xbc>)
 800bd52:	2280      	movs	r2, #128	; 0x80
 800bd54:	0612      	lsls	r2, r2, #24
 800bd56:	601a      	str	r2, [r3, #0]
}
 800bd58:	46c0      	nop			; (mov r8, r8)
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	b004      	add	sp, #16
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	00000988 	.word	0x00000988
 800bd64:	200012b0 	.word	0x200012b0
 800bd68:	20001c38 	.word	0x20001c38
 800bd6c:	20001c40 	.word	0x20001c40
 800bd70:	20001c48 	.word	0x20001c48
 800bd74:	20001c44 	.word	0x20001c44
 800bd78:	20001c4c 	.word	0x20001c4c

0800bd7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd84:	4b27      	ldr	r3, [pc, #156]	; (800be24 <prvInsertBlockIntoFreeList+0xa8>)
 800bd86:	60fb      	str	r3, [r7, #12]
 800bd88:	e002      	b.n	800bd90 <prvInsertBlockIntoFreeList+0x14>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60fb      	str	r3, [r7, #12]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d8f7      	bhi.n	800bd8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	18d3      	adds	r3, r2, r3
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d108      	bne.n	800bdbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	18d2      	adds	r2, r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	18d2      	adds	r2, r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d118      	bne.n	800be04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	4b14      	ldr	r3, [pc, #80]	; (800be28 <prvInsertBlockIntoFreeList+0xac>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d00d      	beq.n	800bdfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	18d2      	adds	r2, r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	e008      	b.n	800be0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdfa:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <prvInsertBlockIntoFreeList+0xac>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	e003      	b.n	800be0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	429a      	cmp	r2, r3
 800be12:	d002      	beq.n	800be1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be1a:	46c0      	nop			; (mov r8, r8)
 800be1c:	46bd      	mov	sp, r7
 800be1e:	b004      	add	sp, #16
 800be20:	bd80      	pop	{r7, pc}
 800be22:	46c0      	nop			; (mov r8, r8)
 800be24:	20001c38 	.word	0x20001c38
 800be28:	20001c40 	.word	0x20001c40

0800be2c <__cvt>:
 800be2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be2e:	001e      	movs	r6, r3
 800be30:	2300      	movs	r3, #0
 800be32:	0014      	movs	r4, r2
 800be34:	b08b      	sub	sp, #44	; 0x2c
 800be36:	429e      	cmp	r6, r3
 800be38:	da04      	bge.n	800be44 <__cvt+0x18>
 800be3a:	2180      	movs	r1, #128	; 0x80
 800be3c:	0609      	lsls	r1, r1, #24
 800be3e:	1873      	adds	r3, r6, r1
 800be40:	001e      	movs	r6, r3
 800be42:	232d      	movs	r3, #45	; 0x2d
 800be44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be46:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800be48:	7013      	strb	r3, [r2, #0]
 800be4a:	2320      	movs	r3, #32
 800be4c:	2203      	movs	r2, #3
 800be4e:	439f      	bics	r7, r3
 800be50:	2f46      	cmp	r7, #70	; 0x46
 800be52:	d007      	beq.n	800be64 <__cvt+0x38>
 800be54:	003b      	movs	r3, r7
 800be56:	3b45      	subs	r3, #69	; 0x45
 800be58:	4259      	negs	r1, r3
 800be5a:	414b      	adcs	r3, r1
 800be5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800be5e:	3a01      	subs	r2, #1
 800be60:	18cb      	adds	r3, r1, r3
 800be62:	9310      	str	r3, [sp, #64]	; 0x40
 800be64:	ab09      	add	r3, sp, #36	; 0x24
 800be66:	9304      	str	r3, [sp, #16]
 800be68:	ab08      	add	r3, sp, #32
 800be6a:	9303      	str	r3, [sp, #12]
 800be6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be6e:	9200      	str	r2, [sp, #0]
 800be70:	9302      	str	r3, [sp, #8]
 800be72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be74:	0022      	movs	r2, r4
 800be76:	9301      	str	r3, [sp, #4]
 800be78:	0033      	movs	r3, r6
 800be7a:	f001 fa43 	bl	800d304 <_dtoa_r>
 800be7e:	0005      	movs	r5, r0
 800be80:	2f47      	cmp	r7, #71	; 0x47
 800be82:	d102      	bne.n	800be8a <__cvt+0x5e>
 800be84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be86:	07db      	lsls	r3, r3, #31
 800be88:	d528      	bpl.n	800bedc <__cvt+0xb0>
 800be8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be8c:	18eb      	adds	r3, r5, r3
 800be8e:	9307      	str	r3, [sp, #28]
 800be90:	2f46      	cmp	r7, #70	; 0x46
 800be92:	d114      	bne.n	800bebe <__cvt+0x92>
 800be94:	782b      	ldrb	r3, [r5, #0]
 800be96:	2b30      	cmp	r3, #48	; 0x30
 800be98:	d10c      	bne.n	800beb4 <__cvt+0x88>
 800be9a:	2200      	movs	r2, #0
 800be9c:	2300      	movs	r3, #0
 800be9e:	0020      	movs	r0, r4
 800bea0:	0031      	movs	r1, r6
 800bea2:	f7f4 fad3 	bl	800044c <__aeabi_dcmpeq>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d104      	bne.n	800beb4 <__cvt+0x88>
 800beaa:	2301      	movs	r3, #1
 800beac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800beae:	1a9b      	subs	r3, r3, r2
 800beb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800beb6:	9a07      	ldr	r2, [sp, #28]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	18d3      	adds	r3, r2, r3
 800bebc:	9307      	str	r3, [sp, #28]
 800bebe:	2200      	movs	r2, #0
 800bec0:	2300      	movs	r3, #0
 800bec2:	0020      	movs	r0, r4
 800bec4:	0031      	movs	r1, r6
 800bec6:	f7f4 fac1 	bl	800044c <__aeabi_dcmpeq>
 800beca:	2800      	cmp	r0, #0
 800becc:	d001      	beq.n	800bed2 <__cvt+0xa6>
 800bece:	9b07      	ldr	r3, [sp, #28]
 800bed0:	9309      	str	r3, [sp, #36]	; 0x24
 800bed2:	2230      	movs	r2, #48	; 0x30
 800bed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed6:	9907      	ldr	r1, [sp, #28]
 800bed8:	428b      	cmp	r3, r1
 800beda:	d306      	bcc.n	800beea <__cvt+0xbe>
 800bedc:	0028      	movs	r0, r5
 800bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bee2:	1b5b      	subs	r3, r3, r5
 800bee4:	6013      	str	r3, [r2, #0]
 800bee6:	b00b      	add	sp, #44	; 0x2c
 800bee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beea:	1c59      	adds	r1, r3, #1
 800beec:	9109      	str	r1, [sp, #36]	; 0x24
 800beee:	701a      	strb	r2, [r3, #0]
 800bef0:	e7f0      	b.n	800bed4 <__cvt+0xa8>

0800bef2 <__exponent>:
 800bef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bef4:	1c83      	adds	r3, r0, #2
 800bef6:	b087      	sub	sp, #28
 800bef8:	9303      	str	r3, [sp, #12]
 800befa:	0005      	movs	r5, r0
 800befc:	000c      	movs	r4, r1
 800befe:	232b      	movs	r3, #43	; 0x2b
 800bf00:	7002      	strb	r2, [r0, #0]
 800bf02:	2900      	cmp	r1, #0
 800bf04:	da01      	bge.n	800bf0a <__exponent+0x18>
 800bf06:	424c      	negs	r4, r1
 800bf08:	3302      	adds	r3, #2
 800bf0a:	706b      	strb	r3, [r5, #1]
 800bf0c:	2c09      	cmp	r4, #9
 800bf0e:	dd2f      	ble.n	800bf70 <__exponent+0x7e>
 800bf10:	270a      	movs	r7, #10
 800bf12:	ab04      	add	r3, sp, #16
 800bf14:	1dde      	adds	r6, r3, #7
 800bf16:	0020      	movs	r0, r4
 800bf18:	0039      	movs	r1, r7
 800bf1a:	9601      	str	r6, [sp, #4]
 800bf1c:	f7f4 fa80 	bl	8000420 <__aeabi_idivmod>
 800bf20:	3e01      	subs	r6, #1
 800bf22:	3130      	adds	r1, #48	; 0x30
 800bf24:	0020      	movs	r0, r4
 800bf26:	7031      	strb	r1, [r6, #0]
 800bf28:	0039      	movs	r1, r7
 800bf2a:	9402      	str	r4, [sp, #8]
 800bf2c:	f7f4 f992 	bl	8000254 <__divsi3>
 800bf30:	9b02      	ldr	r3, [sp, #8]
 800bf32:	0004      	movs	r4, r0
 800bf34:	2b63      	cmp	r3, #99	; 0x63
 800bf36:	dcee      	bgt.n	800bf16 <__exponent+0x24>
 800bf38:	9b01      	ldr	r3, [sp, #4]
 800bf3a:	3430      	adds	r4, #48	; 0x30
 800bf3c:	1e9a      	subs	r2, r3, #2
 800bf3e:	0013      	movs	r3, r2
 800bf40:	9903      	ldr	r1, [sp, #12]
 800bf42:	7014      	strb	r4, [r2, #0]
 800bf44:	a804      	add	r0, sp, #16
 800bf46:	3007      	adds	r0, #7
 800bf48:	4298      	cmp	r0, r3
 800bf4a:	d80c      	bhi.n	800bf66 <__exponent+0x74>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	4282      	cmp	r2, r0
 800bf50:	d804      	bhi.n	800bf5c <__exponent+0x6a>
 800bf52:	aa04      	add	r2, sp, #16
 800bf54:	3309      	adds	r3, #9
 800bf56:	189b      	adds	r3, r3, r2
 800bf58:	9a01      	ldr	r2, [sp, #4]
 800bf5a:	1a9b      	subs	r3, r3, r2
 800bf5c:	9a03      	ldr	r2, [sp, #12]
 800bf5e:	18d3      	adds	r3, r2, r3
 800bf60:	1b58      	subs	r0, r3, r5
 800bf62:	b007      	add	sp, #28
 800bf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf66:	7818      	ldrb	r0, [r3, #0]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	7008      	strb	r0, [r1, #0]
 800bf6c:	3101      	adds	r1, #1
 800bf6e:	e7e9      	b.n	800bf44 <__exponent+0x52>
 800bf70:	2330      	movs	r3, #48	; 0x30
 800bf72:	3430      	adds	r4, #48	; 0x30
 800bf74:	70ab      	strb	r3, [r5, #2]
 800bf76:	70ec      	strb	r4, [r5, #3]
 800bf78:	1d2b      	adds	r3, r5, #4
 800bf7a:	e7f1      	b.n	800bf60 <__exponent+0x6e>

0800bf7c <_printf_float>:
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7e:	b095      	sub	sp, #84	; 0x54
 800bf80:	000c      	movs	r4, r1
 800bf82:	9208      	str	r2, [sp, #32]
 800bf84:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800bf86:	9309      	str	r3, [sp, #36]	; 0x24
 800bf88:	0007      	movs	r7, r0
 800bf8a:	f001 f835 	bl	800cff8 <_localeconv_r>
 800bf8e:	6803      	ldr	r3, [r0, #0]
 800bf90:	0018      	movs	r0, r3
 800bf92:	930c      	str	r3, [sp, #48]	; 0x30
 800bf94:	f7f4 f8b8 	bl	8000108 <strlen>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9312      	str	r3, [sp, #72]	; 0x48
 800bf9c:	7e23      	ldrb	r3, [r4, #24]
 800bf9e:	2207      	movs	r2, #7
 800bfa0:	930a      	str	r3, [sp, #40]	; 0x28
 800bfa2:	6823      	ldr	r3, [r4, #0]
 800bfa4:	900d      	str	r0, [sp, #52]	; 0x34
 800bfa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bfaa:	682b      	ldr	r3, [r5, #0]
 800bfac:	05c9      	lsls	r1, r1, #23
 800bfae:	d547      	bpl.n	800c040 <_printf_float+0xc4>
 800bfb0:	189b      	adds	r3, r3, r2
 800bfb2:	4393      	bics	r3, r2
 800bfb4:	001a      	movs	r2, r3
 800bfb6:	3208      	adds	r2, #8
 800bfb8:	602a      	str	r2, [r5, #0]
 800bfba:	681e      	ldr	r6, [r3, #0]
 800bfbc:	685d      	ldr	r5, [r3, #4]
 800bfbe:	0032      	movs	r2, r6
 800bfc0:	002b      	movs	r3, r5
 800bfc2:	64a2      	str	r2, [r4, #72]	; 0x48
 800bfc4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	006b      	lsls	r3, r5, #1
 800bfca:	085b      	lsrs	r3, r3, #1
 800bfcc:	930e      	str	r3, [sp, #56]	; 0x38
 800bfce:	0030      	movs	r0, r6
 800bfd0:	4bab      	ldr	r3, [pc, #684]	; (800c280 <_printf_float+0x304>)
 800bfd2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bfd4:	4252      	negs	r2, r2
 800bfd6:	f7f6 f875 	bl	80020c4 <__aeabi_dcmpun>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d132      	bne.n	800c044 <_printf_float+0xc8>
 800bfde:	2201      	movs	r2, #1
 800bfe0:	0030      	movs	r0, r6
 800bfe2:	4ba7      	ldr	r3, [pc, #668]	; (800c280 <_printf_float+0x304>)
 800bfe4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bfe6:	4252      	negs	r2, r2
 800bfe8:	f7f4 fa40 	bl	800046c <__aeabi_dcmple>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d129      	bne.n	800c044 <_printf_float+0xc8>
 800bff0:	2200      	movs	r2, #0
 800bff2:	2300      	movs	r3, #0
 800bff4:	0030      	movs	r0, r6
 800bff6:	0029      	movs	r1, r5
 800bff8:	f7f4 fa2e 	bl	8000458 <__aeabi_dcmplt>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d003      	beq.n	800c008 <_printf_float+0x8c>
 800c000:	0023      	movs	r3, r4
 800c002:	222d      	movs	r2, #45	; 0x2d
 800c004:	3343      	adds	r3, #67	; 0x43
 800c006:	701a      	strb	r2, [r3, #0]
 800c008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c00a:	4d9e      	ldr	r5, [pc, #632]	; (800c284 <_printf_float+0x308>)
 800c00c:	2b47      	cmp	r3, #71	; 0x47
 800c00e:	d900      	bls.n	800c012 <_printf_float+0x96>
 800c010:	4d9d      	ldr	r5, [pc, #628]	; (800c288 <_printf_float+0x30c>)
 800c012:	2303      	movs	r3, #3
 800c014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c016:	6123      	str	r3, [r4, #16]
 800c018:	3301      	adds	r3, #1
 800c01a:	439a      	bics	r2, r3
 800c01c:	2300      	movs	r3, #0
 800c01e:	6022      	str	r2, [r4, #0]
 800c020:	930b      	str	r3, [sp, #44]	; 0x2c
 800c022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c024:	0021      	movs	r1, r4
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	0038      	movs	r0, r7
 800c02a:	9b08      	ldr	r3, [sp, #32]
 800c02c:	aa13      	add	r2, sp, #76	; 0x4c
 800c02e:	f000 f9fb 	bl	800c428 <_printf_common>
 800c032:	3001      	adds	r0, #1
 800c034:	d000      	beq.n	800c038 <_printf_float+0xbc>
 800c036:	e0a3      	b.n	800c180 <_printf_float+0x204>
 800c038:	2001      	movs	r0, #1
 800c03a:	4240      	negs	r0, r0
 800c03c:	b015      	add	sp, #84	; 0x54
 800c03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c040:	3307      	adds	r3, #7
 800c042:	e7b6      	b.n	800bfb2 <_printf_float+0x36>
 800c044:	0032      	movs	r2, r6
 800c046:	002b      	movs	r3, r5
 800c048:	0030      	movs	r0, r6
 800c04a:	0029      	movs	r1, r5
 800c04c:	f7f6 f83a 	bl	80020c4 <__aeabi_dcmpun>
 800c050:	2800      	cmp	r0, #0
 800c052:	d00b      	beq.n	800c06c <_printf_float+0xf0>
 800c054:	2d00      	cmp	r5, #0
 800c056:	da03      	bge.n	800c060 <_printf_float+0xe4>
 800c058:	0023      	movs	r3, r4
 800c05a:	222d      	movs	r2, #45	; 0x2d
 800c05c:	3343      	adds	r3, #67	; 0x43
 800c05e:	701a      	strb	r2, [r3, #0]
 800c060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c062:	4d8a      	ldr	r5, [pc, #552]	; (800c28c <_printf_float+0x310>)
 800c064:	2b47      	cmp	r3, #71	; 0x47
 800c066:	d9d4      	bls.n	800c012 <_printf_float+0x96>
 800c068:	4d89      	ldr	r5, [pc, #548]	; (800c290 <_printf_float+0x314>)
 800c06a:	e7d2      	b.n	800c012 <_printf_float+0x96>
 800c06c:	2220      	movs	r2, #32
 800c06e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c070:	6863      	ldr	r3, [r4, #4]
 800c072:	4391      	bics	r1, r2
 800c074:	910e      	str	r1, [sp, #56]	; 0x38
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	d14a      	bne.n	800c110 <_printf_float+0x194>
 800c07a:	3307      	adds	r3, #7
 800c07c:	6063      	str	r3, [r4, #4]
 800c07e:	2380      	movs	r3, #128	; 0x80
 800c080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	4313      	orrs	r3, r2
 800c086:	2200      	movs	r2, #0
 800c088:	9206      	str	r2, [sp, #24]
 800c08a:	aa12      	add	r2, sp, #72	; 0x48
 800c08c:	9205      	str	r2, [sp, #20]
 800c08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	9204      	str	r2, [sp, #16]
 800c094:	aa11      	add	r2, sp, #68	; 0x44
 800c096:	9203      	str	r2, [sp, #12]
 800c098:	2223      	movs	r2, #35	; 0x23
 800c09a:	a908      	add	r1, sp, #32
 800c09c:	9301      	str	r3, [sp, #4]
 800c09e:	6863      	ldr	r3, [r4, #4]
 800c0a0:	1852      	adds	r2, r2, r1
 800c0a2:	9202      	str	r2, [sp, #8]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	0032      	movs	r2, r6
 800c0a8:	002b      	movs	r3, r5
 800c0aa:	0038      	movs	r0, r7
 800c0ac:	f7ff febe 	bl	800be2c <__cvt>
 800c0b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0b2:	0005      	movs	r5, r0
 800c0b4:	2b47      	cmp	r3, #71	; 0x47
 800c0b6:	d109      	bne.n	800c0cc <_printf_float+0x150>
 800c0b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0ba:	1cda      	adds	r2, r3, #3
 800c0bc:	db02      	blt.n	800c0c4 <_printf_float+0x148>
 800c0be:	6862      	ldr	r2, [r4, #4]
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	dd49      	ble.n	800c158 <_printf_float+0x1dc>
 800c0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0c6:	3b02      	subs	r3, #2
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c0d0:	2b65      	cmp	r3, #101	; 0x65
 800c0d2:	d824      	bhi.n	800c11e <_printf_float+0x1a2>
 800c0d4:	0020      	movs	r0, r4
 800c0d6:	001a      	movs	r2, r3
 800c0d8:	3901      	subs	r1, #1
 800c0da:	3050      	adds	r0, #80	; 0x50
 800c0dc:	9111      	str	r1, [sp, #68]	; 0x44
 800c0de:	f7ff ff08 	bl	800bef2 <__exponent>
 800c0e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c0e6:	1813      	adds	r3, r2, r0
 800c0e8:	6123      	str	r3, [r4, #16]
 800c0ea:	2a01      	cmp	r2, #1
 800c0ec:	dc02      	bgt.n	800c0f4 <_printf_float+0x178>
 800c0ee:	6822      	ldr	r2, [r4, #0]
 800c0f0:	07d2      	lsls	r2, r2, #31
 800c0f2:	d501      	bpl.n	800c0f8 <_printf_float+0x17c>
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	6123      	str	r3, [r4, #16]
 800c0f8:	2323      	movs	r3, #35	; 0x23
 800c0fa:	aa08      	add	r2, sp, #32
 800c0fc:	189b      	adds	r3, r3, r2
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d100      	bne.n	800c106 <_printf_float+0x18a>
 800c104:	e78d      	b.n	800c022 <_printf_float+0xa6>
 800c106:	0023      	movs	r3, r4
 800c108:	222d      	movs	r2, #45	; 0x2d
 800c10a:	3343      	adds	r3, #67	; 0x43
 800c10c:	701a      	strb	r2, [r3, #0]
 800c10e:	e788      	b.n	800c022 <_printf_float+0xa6>
 800c110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c112:	2a47      	cmp	r2, #71	; 0x47
 800c114:	d1b3      	bne.n	800c07e <_printf_float+0x102>
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1b1      	bne.n	800c07e <_printf_float+0x102>
 800c11a:	3301      	adds	r3, #1
 800c11c:	e7ae      	b.n	800c07c <_printf_float+0x100>
 800c11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c120:	2b66      	cmp	r3, #102	; 0x66
 800c122:	d11b      	bne.n	800c15c <_printf_float+0x1e0>
 800c124:	6863      	ldr	r3, [r4, #4]
 800c126:	2900      	cmp	r1, #0
 800c128:	dd09      	ble.n	800c13e <_printf_float+0x1c2>
 800c12a:	6121      	str	r1, [r4, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <_printf_float+0x1ba>
 800c130:	6822      	ldr	r2, [r4, #0]
 800c132:	07d2      	lsls	r2, r2, #31
 800c134:	d50b      	bpl.n	800c14e <_printf_float+0x1d2>
 800c136:	3301      	adds	r3, #1
 800c138:	185b      	adds	r3, r3, r1
 800c13a:	6123      	str	r3, [r4, #16]
 800c13c:	e007      	b.n	800c14e <_printf_float+0x1d2>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d103      	bne.n	800c14a <_printf_float+0x1ce>
 800c142:	2201      	movs	r2, #1
 800c144:	6821      	ldr	r1, [r4, #0]
 800c146:	4211      	tst	r1, r2
 800c148:	d000      	beq.n	800c14c <_printf_float+0x1d0>
 800c14a:	1c9a      	adds	r2, r3, #2
 800c14c:	6122      	str	r2, [r4, #16]
 800c14e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c150:	65a3      	str	r3, [r4, #88]	; 0x58
 800c152:	2300      	movs	r3, #0
 800c154:	930b      	str	r3, [sp, #44]	; 0x2c
 800c156:	e7cf      	b.n	800c0f8 <_printf_float+0x17c>
 800c158:	2367      	movs	r3, #103	; 0x67
 800c15a:	930a      	str	r3, [sp, #40]	; 0x28
 800c15c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c15e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c160:	4299      	cmp	r1, r3
 800c162:	db06      	blt.n	800c172 <_printf_float+0x1f6>
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	6121      	str	r1, [r4, #16]
 800c168:	07db      	lsls	r3, r3, #31
 800c16a:	d5f0      	bpl.n	800c14e <_printf_float+0x1d2>
 800c16c:	3101      	adds	r1, #1
 800c16e:	6121      	str	r1, [r4, #16]
 800c170:	e7ed      	b.n	800c14e <_printf_float+0x1d2>
 800c172:	2201      	movs	r2, #1
 800c174:	2900      	cmp	r1, #0
 800c176:	dc01      	bgt.n	800c17c <_printf_float+0x200>
 800c178:	1892      	adds	r2, r2, r2
 800c17a:	1a52      	subs	r2, r2, r1
 800c17c:	189b      	adds	r3, r3, r2
 800c17e:	e7dc      	b.n	800c13a <_printf_float+0x1be>
 800c180:	6822      	ldr	r2, [r4, #0]
 800c182:	0553      	lsls	r3, r2, #21
 800c184:	d408      	bmi.n	800c198 <_printf_float+0x21c>
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	002a      	movs	r2, r5
 800c18a:	0038      	movs	r0, r7
 800c18c:	9908      	ldr	r1, [sp, #32]
 800c18e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c190:	47a8      	blx	r5
 800c192:	3001      	adds	r0, #1
 800c194:	d12a      	bne.n	800c1ec <_printf_float+0x270>
 800c196:	e74f      	b.n	800c038 <_printf_float+0xbc>
 800c198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c19a:	2b65      	cmp	r3, #101	; 0x65
 800c19c:	d800      	bhi.n	800c1a0 <_printf_float+0x224>
 800c19e:	e0ec      	b.n	800c37a <_printf_float+0x3fe>
 800c1a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c1a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f7f4 f950 	bl	800044c <__aeabi_dcmpeq>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d034      	beq.n	800c21a <_printf_float+0x29e>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	0038      	movs	r0, r7
 800c1b4:	4a37      	ldr	r2, [pc, #220]	; (800c294 <_printf_float+0x318>)
 800c1b6:	9908      	ldr	r1, [sp, #32]
 800c1b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c1ba:	47a8      	blx	r5
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d100      	bne.n	800c1c2 <_printf_float+0x246>
 800c1c0:	e73a      	b.n	800c038 <_printf_float+0xbc>
 800c1c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c1c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	db02      	blt.n	800c1d0 <_printf_float+0x254>
 800c1ca:	6823      	ldr	r3, [r4, #0]
 800c1cc:	07db      	lsls	r3, r3, #31
 800c1ce:	d50d      	bpl.n	800c1ec <_printf_float+0x270>
 800c1d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c1d2:	0038      	movs	r0, r7
 800c1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1d8:	9908      	ldr	r1, [sp, #32]
 800c1da:	47a8      	blx	r5
 800c1dc:	2500      	movs	r5, #0
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d100      	bne.n	800c1e4 <_printf_float+0x268>
 800c1e2:	e729      	b.n	800c038 <_printf_float+0xbc>
 800c1e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	42ab      	cmp	r3, r5
 800c1ea:	dc0a      	bgt.n	800c202 <_printf_float+0x286>
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	079b      	lsls	r3, r3, #30
 800c1f0:	d500      	bpl.n	800c1f4 <_printf_float+0x278>
 800c1f2:	e116      	b.n	800c422 <_printf_float+0x4a6>
 800c1f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1f6:	68e0      	ldr	r0, [r4, #12]
 800c1f8:	4298      	cmp	r0, r3
 800c1fa:	db00      	blt.n	800c1fe <_printf_float+0x282>
 800c1fc:	e71e      	b.n	800c03c <_printf_float+0xc0>
 800c1fe:	0018      	movs	r0, r3
 800c200:	e71c      	b.n	800c03c <_printf_float+0xc0>
 800c202:	0022      	movs	r2, r4
 800c204:	2301      	movs	r3, #1
 800c206:	0038      	movs	r0, r7
 800c208:	9908      	ldr	r1, [sp, #32]
 800c20a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c20c:	321a      	adds	r2, #26
 800c20e:	47b0      	blx	r6
 800c210:	3001      	adds	r0, #1
 800c212:	d100      	bne.n	800c216 <_printf_float+0x29a>
 800c214:	e710      	b.n	800c038 <_printf_float+0xbc>
 800c216:	3501      	adds	r5, #1
 800c218:	e7e4      	b.n	800c1e4 <_printf_float+0x268>
 800c21a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dc3b      	bgt.n	800c298 <_printf_float+0x31c>
 800c220:	2301      	movs	r3, #1
 800c222:	0038      	movs	r0, r7
 800c224:	4a1b      	ldr	r2, [pc, #108]	; (800c294 <_printf_float+0x318>)
 800c226:	9908      	ldr	r1, [sp, #32]
 800c228:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c22a:	47b0      	blx	r6
 800c22c:	3001      	adds	r0, #1
 800c22e:	d100      	bne.n	800c232 <_printf_float+0x2b6>
 800c230:	e702      	b.n	800c038 <_printf_float+0xbc>
 800c232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c236:	4313      	orrs	r3, r2
 800c238:	d102      	bne.n	800c240 <_printf_float+0x2c4>
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	07db      	lsls	r3, r3, #31
 800c23e:	d5d5      	bpl.n	800c1ec <_printf_float+0x270>
 800c240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c242:	0038      	movs	r0, r7
 800c244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c246:	9908      	ldr	r1, [sp, #32]
 800c248:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c24a:	47b0      	blx	r6
 800c24c:	2300      	movs	r3, #0
 800c24e:	3001      	adds	r0, #1
 800c250:	d100      	bne.n	800c254 <_printf_float+0x2d8>
 800c252:	e6f1      	b.n	800c038 <_printf_float+0xbc>
 800c254:	930a      	str	r3, [sp, #40]	; 0x28
 800c256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c25a:	425b      	negs	r3, r3
 800c25c:	4293      	cmp	r3, r2
 800c25e:	dc01      	bgt.n	800c264 <_printf_float+0x2e8>
 800c260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c262:	e791      	b.n	800c188 <_printf_float+0x20c>
 800c264:	0022      	movs	r2, r4
 800c266:	2301      	movs	r3, #1
 800c268:	0038      	movs	r0, r7
 800c26a:	9908      	ldr	r1, [sp, #32]
 800c26c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c26e:	321a      	adds	r2, #26
 800c270:	47b0      	blx	r6
 800c272:	3001      	adds	r0, #1
 800c274:	d100      	bne.n	800c278 <_printf_float+0x2fc>
 800c276:	e6df      	b.n	800c038 <_printf_float+0xbc>
 800c278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c27a:	3301      	adds	r3, #1
 800c27c:	e7ea      	b.n	800c254 <_printf_float+0x2d8>
 800c27e:	46c0      	nop			; (mov r8, r8)
 800c280:	7fefffff 	.word	0x7fefffff
 800c284:	08010de8 	.word	0x08010de8
 800c288:	08010dec 	.word	0x08010dec
 800c28c:	08010df0 	.word	0x08010df0
 800c290:	08010df4 	.word	0x08010df4
 800c294:	08010df8 	.word	0x08010df8
 800c298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c29a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c29c:	920a      	str	r2, [sp, #40]	; 0x28
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	dd00      	ble.n	800c2a4 <_printf_float+0x328>
 800c2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	dc3d      	bgt.n	800c326 <_printf_float+0x3aa>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b0:	43db      	mvns	r3, r3
 800c2b2:	17db      	asrs	r3, r3, #31
 800c2b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2be:	4013      	ands	r3, r2
 800c2c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	dc36      	bgt.n	800c338 <_printf_float+0x3bc>
 800c2ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	db40      	blt.n	800c354 <_printf_float+0x3d8>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	07db      	lsls	r3, r3, #31
 800c2d6:	d43d      	bmi.n	800c354 <_printf_float+0x3d8>
 800c2d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c2da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2de:	1af3      	subs	r3, r6, r3
 800c2e0:	1ab6      	subs	r6, r6, r2
 800c2e2:	429e      	cmp	r6, r3
 800c2e4:	dd00      	ble.n	800c2e8 <_printf_float+0x36c>
 800c2e6:	001e      	movs	r6, r3
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	dc3c      	bgt.n	800c366 <_printf_float+0x3ea>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c2f0:	43f3      	mvns	r3, r6
 800c2f2:	17db      	asrs	r3, r3, #31
 800c2f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2fa:	1a9b      	subs	r3, r3, r2
 800c2fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2fe:	4032      	ands	r2, r6
 800c300:	1a9b      	subs	r3, r3, r2
 800c302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c304:	4293      	cmp	r3, r2
 800c306:	dc00      	bgt.n	800c30a <_printf_float+0x38e>
 800c308:	e770      	b.n	800c1ec <_printf_float+0x270>
 800c30a:	0022      	movs	r2, r4
 800c30c:	2301      	movs	r3, #1
 800c30e:	0038      	movs	r0, r7
 800c310:	9908      	ldr	r1, [sp, #32]
 800c312:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c314:	321a      	adds	r2, #26
 800c316:	47a8      	blx	r5
 800c318:	3001      	adds	r0, #1
 800c31a:	d100      	bne.n	800c31e <_printf_float+0x3a2>
 800c31c:	e68c      	b.n	800c038 <_printf_float+0xbc>
 800c31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c320:	3301      	adds	r3, #1
 800c322:	930a      	str	r3, [sp, #40]	; 0x28
 800c324:	e7e7      	b.n	800c2f6 <_printf_float+0x37a>
 800c326:	002a      	movs	r2, r5
 800c328:	0038      	movs	r0, r7
 800c32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c32c:	9908      	ldr	r1, [sp, #32]
 800c32e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c330:	47b0      	blx	r6
 800c332:	3001      	adds	r0, #1
 800c334:	d1b9      	bne.n	800c2aa <_printf_float+0x32e>
 800c336:	e67f      	b.n	800c038 <_printf_float+0xbc>
 800c338:	0022      	movs	r2, r4
 800c33a:	2301      	movs	r3, #1
 800c33c:	0038      	movs	r0, r7
 800c33e:	9908      	ldr	r1, [sp, #32]
 800c340:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c342:	321a      	adds	r2, #26
 800c344:	47b0      	blx	r6
 800c346:	3001      	adds	r0, #1
 800c348:	d100      	bne.n	800c34c <_printf_float+0x3d0>
 800c34a:	e675      	b.n	800c038 <_printf_float+0xbc>
 800c34c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c34e:	3301      	adds	r3, #1
 800c350:	930e      	str	r3, [sp, #56]	; 0x38
 800c352:	e7b0      	b.n	800c2b6 <_printf_float+0x33a>
 800c354:	0038      	movs	r0, r7
 800c356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c35a:	9908      	ldr	r1, [sp, #32]
 800c35c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c35e:	47b0      	blx	r6
 800c360:	3001      	adds	r0, #1
 800c362:	d1b9      	bne.n	800c2d8 <_printf_float+0x35c>
 800c364:	e668      	b.n	800c038 <_printf_float+0xbc>
 800c366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c368:	0038      	movs	r0, r7
 800c36a:	18ea      	adds	r2, r5, r3
 800c36c:	9908      	ldr	r1, [sp, #32]
 800c36e:	0033      	movs	r3, r6
 800c370:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c372:	47a8      	blx	r5
 800c374:	3001      	adds	r0, #1
 800c376:	d1b9      	bne.n	800c2ec <_printf_float+0x370>
 800c378:	e65e      	b.n	800c038 <_printf_float+0xbc>
 800c37a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	dc02      	bgt.n	800c386 <_printf_float+0x40a>
 800c380:	2301      	movs	r3, #1
 800c382:	421a      	tst	r2, r3
 800c384:	d03a      	beq.n	800c3fc <_printf_float+0x480>
 800c386:	2301      	movs	r3, #1
 800c388:	002a      	movs	r2, r5
 800c38a:	0038      	movs	r0, r7
 800c38c:	9908      	ldr	r1, [sp, #32]
 800c38e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c390:	47b0      	blx	r6
 800c392:	3001      	adds	r0, #1
 800c394:	d100      	bne.n	800c398 <_printf_float+0x41c>
 800c396:	e64f      	b.n	800c038 <_printf_float+0xbc>
 800c398:	0038      	movs	r0, r7
 800c39a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c39c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c39e:	9908      	ldr	r1, [sp, #32]
 800c3a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c3a2:	47b0      	blx	r6
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	d100      	bne.n	800c3aa <_printf_float+0x42e>
 800c3a8:	e646      	b.n	800c038 <_printf_float+0xbc>
 800c3aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c3ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c3ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	001e      	movs	r6, r3
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f7f4 f849 	bl	800044c <__aeabi_dcmpeq>
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d11c      	bne.n	800c3f8 <_printf_float+0x47c>
 800c3be:	0033      	movs	r3, r6
 800c3c0:	1c6a      	adds	r2, r5, #1
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	0038      	movs	r0, r7
 800c3c6:	9908      	ldr	r1, [sp, #32]
 800c3c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c3ca:	47a8      	blx	r5
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d10f      	bne.n	800c3f0 <_printf_float+0x474>
 800c3d0:	e632      	b.n	800c038 <_printf_float+0xbc>
 800c3d2:	0022      	movs	r2, r4
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	0038      	movs	r0, r7
 800c3d8:	9908      	ldr	r1, [sp, #32]
 800c3da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c3dc:	321a      	adds	r2, #26
 800c3de:	47b0      	blx	r6
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	d100      	bne.n	800c3e6 <_printf_float+0x46a>
 800c3e4:	e628      	b.n	800c038 <_printf_float+0xbc>
 800c3e6:	3501      	adds	r5, #1
 800c3e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	42ab      	cmp	r3, r5
 800c3ee:	dcf0      	bgt.n	800c3d2 <_printf_float+0x456>
 800c3f0:	0022      	movs	r2, r4
 800c3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3f4:	3250      	adds	r2, #80	; 0x50
 800c3f6:	e6c8      	b.n	800c18a <_printf_float+0x20e>
 800c3f8:	2500      	movs	r5, #0
 800c3fa:	e7f5      	b.n	800c3e8 <_printf_float+0x46c>
 800c3fc:	002a      	movs	r2, r5
 800c3fe:	e7e1      	b.n	800c3c4 <_printf_float+0x448>
 800c400:	0022      	movs	r2, r4
 800c402:	2301      	movs	r3, #1
 800c404:	0038      	movs	r0, r7
 800c406:	9908      	ldr	r1, [sp, #32]
 800c408:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c40a:	3219      	adds	r2, #25
 800c40c:	47b0      	blx	r6
 800c40e:	3001      	adds	r0, #1
 800c410:	d100      	bne.n	800c414 <_printf_float+0x498>
 800c412:	e611      	b.n	800c038 <_printf_float+0xbc>
 800c414:	3501      	adds	r5, #1
 800c416:	68e3      	ldr	r3, [r4, #12]
 800c418:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c41a:	1a9b      	subs	r3, r3, r2
 800c41c:	42ab      	cmp	r3, r5
 800c41e:	dcef      	bgt.n	800c400 <_printf_float+0x484>
 800c420:	e6e8      	b.n	800c1f4 <_printf_float+0x278>
 800c422:	2500      	movs	r5, #0
 800c424:	e7f7      	b.n	800c416 <_printf_float+0x49a>
 800c426:	46c0      	nop			; (mov r8, r8)

0800c428 <_printf_common>:
 800c428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c42a:	0016      	movs	r6, r2
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	688a      	ldr	r2, [r1, #8]
 800c430:	690b      	ldr	r3, [r1, #16]
 800c432:	000c      	movs	r4, r1
 800c434:	9000      	str	r0, [sp, #0]
 800c436:	4293      	cmp	r3, r2
 800c438:	da00      	bge.n	800c43c <_printf_common+0x14>
 800c43a:	0013      	movs	r3, r2
 800c43c:	0022      	movs	r2, r4
 800c43e:	6033      	str	r3, [r6, #0]
 800c440:	3243      	adds	r2, #67	; 0x43
 800c442:	7812      	ldrb	r2, [r2, #0]
 800c444:	2a00      	cmp	r2, #0
 800c446:	d001      	beq.n	800c44c <_printf_common+0x24>
 800c448:	3301      	adds	r3, #1
 800c44a:	6033      	str	r3, [r6, #0]
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	069b      	lsls	r3, r3, #26
 800c450:	d502      	bpl.n	800c458 <_printf_common+0x30>
 800c452:	6833      	ldr	r3, [r6, #0]
 800c454:	3302      	adds	r3, #2
 800c456:	6033      	str	r3, [r6, #0]
 800c458:	6822      	ldr	r2, [r4, #0]
 800c45a:	2306      	movs	r3, #6
 800c45c:	0015      	movs	r5, r2
 800c45e:	401d      	ands	r5, r3
 800c460:	421a      	tst	r2, r3
 800c462:	d027      	beq.n	800c4b4 <_printf_common+0x8c>
 800c464:	0023      	movs	r3, r4
 800c466:	3343      	adds	r3, #67	; 0x43
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	1e5a      	subs	r2, r3, #1
 800c46c:	4193      	sbcs	r3, r2
 800c46e:	6822      	ldr	r2, [r4, #0]
 800c470:	0692      	lsls	r2, r2, #26
 800c472:	d430      	bmi.n	800c4d6 <_printf_common+0xae>
 800c474:	0022      	movs	r2, r4
 800c476:	9901      	ldr	r1, [sp, #4]
 800c478:	9800      	ldr	r0, [sp, #0]
 800c47a:	9d08      	ldr	r5, [sp, #32]
 800c47c:	3243      	adds	r2, #67	; 0x43
 800c47e:	47a8      	blx	r5
 800c480:	3001      	adds	r0, #1
 800c482:	d025      	beq.n	800c4d0 <_printf_common+0xa8>
 800c484:	2206      	movs	r2, #6
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	2500      	movs	r5, #0
 800c48a:	4013      	ands	r3, r2
 800c48c:	2b04      	cmp	r3, #4
 800c48e:	d105      	bne.n	800c49c <_printf_common+0x74>
 800c490:	6833      	ldr	r3, [r6, #0]
 800c492:	68e5      	ldr	r5, [r4, #12]
 800c494:	1aed      	subs	r5, r5, r3
 800c496:	43eb      	mvns	r3, r5
 800c498:	17db      	asrs	r3, r3, #31
 800c49a:	401d      	ands	r5, r3
 800c49c:	68a3      	ldr	r3, [r4, #8]
 800c49e:	6922      	ldr	r2, [r4, #16]
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	dd01      	ble.n	800c4a8 <_printf_common+0x80>
 800c4a4:	1a9b      	subs	r3, r3, r2
 800c4a6:	18ed      	adds	r5, r5, r3
 800c4a8:	2600      	movs	r6, #0
 800c4aa:	42b5      	cmp	r5, r6
 800c4ac:	d120      	bne.n	800c4f0 <_printf_common+0xc8>
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	e010      	b.n	800c4d4 <_printf_common+0xac>
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	68e3      	ldr	r3, [r4, #12]
 800c4b6:	6832      	ldr	r2, [r6, #0]
 800c4b8:	1a9b      	subs	r3, r3, r2
 800c4ba:	42ab      	cmp	r3, r5
 800c4bc:	ddd2      	ble.n	800c464 <_printf_common+0x3c>
 800c4be:	0022      	movs	r2, r4
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	9901      	ldr	r1, [sp, #4]
 800c4c4:	9800      	ldr	r0, [sp, #0]
 800c4c6:	9f08      	ldr	r7, [sp, #32]
 800c4c8:	3219      	adds	r2, #25
 800c4ca:	47b8      	blx	r7
 800c4cc:	3001      	adds	r0, #1
 800c4ce:	d1f0      	bne.n	800c4b2 <_printf_common+0x8a>
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	4240      	negs	r0, r0
 800c4d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4d6:	2030      	movs	r0, #48	; 0x30
 800c4d8:	18e1      	adds	r1, r4, r3
 800c4da:	3143      	adds	r1, #67	; 0x43
 800c4dc:	7008      	strb	r0, [r1, #0]
 800c4de:	0021      	movs	r1, r4
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	3145      	adds	r1, #69	; 0x45
 800c4e4:	7809      	ldrb	r1, [r1, #0]
 800c4e6:	18a2      	adds	r2, r4, r2
 800c4e8:	3243      	adds	r2, #67	; 0x43
 800c4ea:	3302      	adds	r3, #2
 800c4ec:	7011      	strb	r1, [r2, #0]
 800c4ee:	e7c1      	b.n	800c474 <_printf_common+0x4c>
 800c4f0:	0022      	movs	r2, r4
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	9901      	ldr	r1, [sp, #4]
 800c4f6:	9800      	ldr	r0, [sp, #0]
 800c4f8:	9f08      	ldr	r7, [sp, #32]
 800c4fa:	321a      	adds	r2, #26
 800c4fc:	47b8      	blx	r7
 800c4fe:	3001      	adds	r0, #1
 800c500:	d0e6      	beq.n	800c4d0 <_printf_common+0xa8>
 800c502:	3601      	adds	r6, #1
 800c504:	e7d1      	b.n	800c4aa <_printf_common+0x82>
	...

0800c508 <_printf_i>:
 800c508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50a:	b08b      	sub	sp, #44	; 0x2c
 800c50c:	9206      	str	r2, [sp, #24]
 800c50e:	000a      	movs	r2, r1
 800c510:	3243      	adds	r2, #67	; 0x43
 800c512:	9307      	str	r3, [sp, #28]
 800c514:	9005      	str	r0, [sp, #20]
 800c516:	9204      	str	r2, [sp, #16]
 800c518:	7e0a      	ldrb	r2, [r1, #24]
 800c51a:	000c      	movs	r4, r1
 800c51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c51e:	2a78      	cmp	r2, #120	; 0x78
 800c520:	d809      	bhi.n	800c536 <_printf_i+0x2e>
 800c522:	2a62      	cmp	r2, #98	; 0x62
 800c524:	d80b      	bhi.n	800c53e <_printf_i+0x36>
 800c526:	2a00      	cmp	r2, #0
 800c528:	d100      	bne.n	800c52c <_printf_i+0x24>
 800c52a:	e0be      	b.n	800c6aa <_printf_i+0x1a2>
 800c52c:	497c      	ldr	r1, [pc, #496]	; (800c720 <_printf_i+0x218>)
 800c52e:	9103      	str	r1, [sp, #12]
 800c530:	2a58      	cmp	r2, #88	; 0x58
 800c532:	d100      	bne.n	800c536 <_printf_i+0x2e>
 800c534:	e093      	b.n	800c65e <_printf_i+0x156>
 800c536:	0026      	movs	r6, r4
 800c538:	3642      	adds	r6, #66	; 0x42
 800c53a:	7032      	strb	r2, [r6, #0]
 800c53c:	e022      	b.n	800c584 <_printf_i+0x7c>
 800c53e:	0010      	movs	r0, r2
 800c540:	3863      	subs	r0, #99	; 0x63
 800c542:	2815      	cmp	r0, #21
 800c544:	d8f7      	bhi.n	800c536 <_printf_i+0x2e>
 800c546:	f7f3 fdf1 	bl	800012c <__gnu_thumb1_case_shi>
 800c54a:	0016      	.short	0x0016
 800c54c:	fff6001f 	.word	0xfff6001f
 800c550:	fff6fff6 	.word	0xfff6fff6
 800c554:	001ffff6 	.word	0x001ffff6
 800c558:	fff6fff6 	.word	0xfff6fff6
 800c55c:	fff6fff6 	.word	0xfff6fff6
 800c560:	003600a3 	.word	0x003600a3
 800c564:	fff60083 	.word	0xfff60083
 800c568:	00b4fff6 	.word	0x00b4fff6
 800c56c:	0036fff6 	.word	0x0036fff6
 800c570:	fff6fff6 	.word	0xfff6fff6
 800c574:	0087      	.short	0x0087
 800c576:	0026      	movs	r6, r4
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	3642      	adds	r6, #66	; 0x42
 800c57c:	1d11      	adds	r1, r2, #4
 800c57e:	6019      	str	r1, [r3, #0]
 800c580:	6813      	ldr	r3, [r2, #0]
 800c582:	7033      	strb	r3, [r6, #0]
 800c584:	2301      	movs	r3, #1
 800c586:	e0a2      	b.n	800c6ce <_printf_i+0x1c6>
 800c588:	6818      	ldr	r0, [r3, #0]
 800c58a:	6809      	ldr	r1, [r1, #0]
 800c58c:	1d02      	adds	r2, r0, #4
 800c58e:	060d      	lsls	r5, r1, #24
 800c590:	d50b      	bpl.n	800c5aa <_printf_i+0xa2>
 800c592:	6805      	ldr	r5, [r0, #0]
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	2d00      	cmp	r5, #0
 800c598:	da03      	bge.n	800c5a2 <_printf_i+0x9a>
 800c59a:	232d      	movs	r3, #45	; 0x2d
 800c59c:	9a04      	ldr	r2, [sp, #16]
 800c59e:	426d      	negs	r5, r5
 800c5a0:	7013      	strb	r3, [r2, #0]
 800c5a2:	4b5f      	ldr	r3, [pc, #380]	; (800c720 <_printf_i+0x218>)
 800c5a4:	270a      	movs	r7, #10
 800c5a6:	9303      	str	r3, [sp, #12]
 800c5a8:	e01b      	b.n	800c5e2 <_printf_i+0xda>
 800c5aa:	6805      	ldr	r5, [r0, #0]
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	0649      	lsls	r1, r1, #25
 800c5b0:	d5f1      	bpl.n	800c596 <_printf_i+0x8e>
 800c5b2:	b22d      	sxth	r5, r5
 800c5b4:	e7ef      	b.n	800c596 <_printf_i+0x8e>
 800c5b6:	680d      	ldr	r5, [r1, #0]
 800c5b8:	6819      	ldr	r1, [r3, #0]
 800c5ba:	1d08      	adds	r0, r1, #4
 800c5bc:	6018      	str	r0, [r3, #0]
 800c5be:	062e      	lsls	r6, r5, #24
 800c5c0:	d501      	bpl.n	800c5c6 <_printf_i+0xbe>
 800c5c2:	680d      	ldr	r5, [r1, #0]
 800c5c4:	e003      	b.n	800c5ce <_printf_i+0xc6>
 800c5c6:	066d      	lsls	r5, r5, #25
 800c5c8:	d5fb      	bpl.n	800c5c2 <_printf_i+0xba>
 800c5ca:	680d      	ldr	r5, [r1, #0]
 800c5cc:	b2ad      	uxth	r5, r5
 800c5ce:	4b54      	ldr	r3, [pc, #336]	; (800c720 <_printf_i+0x218>)
 800c5d0:	2708      	movs	r7, #8
 800c5d2:	9303      	str	r3, [sp, #12]
 800c5d4:	2a6f      	cmp	r2, #111	; 0x6f
 800c5d6:	d000      	beq.n	800c5da <_printf_i+0xd2>
 800c5d8:	3702      	adds	r7, #2
 800c5da:	0023      	movs	r3, r4
 800c5dc:	2200      	movs	r2, #0
 800c5de:	3343      	adds	r3, #67	; 0x43
 800c5e0:	701a      	strb	r2, [r3, #0]
 800c5e2:	6863      	ldr	r3, [r4, #4]
 800c5e4:	60a3      	str	r3, [r4, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	db03      	blt.n	800c5f2 <_printf_i+0xea>
 800c5ea:	2104      	movs	r1, #4
 800c5ec:	6822      	ldr	r2, [r4, #0]
 800c5ee:	438a      	bics	r2, r1
 800c5f0:	6022      	str	r2, [r4, #0]
 800c5f2:	2d00      	cmp	r5, #0
 800c5f4:	d102      	bne.n	800c5fc <_printf_i+0xf4>
 800c5f6:	9e04      	ldr	r6, [sp, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00c      	beq.n	800c616 <_printf_i+0x10e>
 800c5fc:	9e04      	ldr	r6, [sp, #16]
 800c5fe:	0028      	movs	r0, r5
 800c600:	0039      	movs	r1, r7
 800c602:	f7f3 fe23 	bl	800024c <__aeabi_uidivmod>
 800c606:	9b03      	ldr	r3, [sp, #12]
 800c608:	3e01      	subs	r6, #1
 800c60a:	5c5b      	ldrb	r3, [r3, r1]
 800c60c:	7033      	strb	r3, [r6, #0]
 800c60e:	002b      	movs	r3, r5
 800c610:	0005      	movs	r5, r0
 800c612:	429f      	cmp	r7, r3
 800c614:	d9f3      	bls.n	800c5fe <_printf_i+0xf6>
 800c616:	2f08      	cmp	r7, #8
 800c618:	d109      	bne.n	800c62e <_printf_i+0x126>
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	07db      	lsls	r3, r3, #31
 800c61e:	d506      	bpl.n	800c62e <_printf_i+0x126>
 800c620:	6862      	ldr	r2, [r4, #4]
 800c622:	6923      	ldr	r3, [r4, #16]
 800c624:	429a      	cmp	r2, r3
 800c626:	dc02      	bgt.n	800c62e <_printf_i+0x126>
 800c628:	2330      	movs	r3, #48	; 0x30
 800c62a:	3e01      	subs	r6, #1
 800c62c:	7033      	strb	r3, [r6, #0]
 800c62e:	9b04      	ldr	r3, [sp, #16]
 800c630:	1b9b      	subs	r3, r3, r6
 800c632:	6123      	str	r3, [r4, #16]
 800c634:	9b07      	ldr	r3, [sp, #28]
 800c636:	0021      	movs	r1, r4
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	9805      	ldr	r0, [sp, #20]
 800c63c:	9b06      	ldr	r3, [sp, #24]
 800c63e:	aa09      	add	r2, sp, #36	; 0x24
 800c640:	f7ff fef2 	bl	800c428 <_printf_common>
 800c644:	3001      	adds	r0, #1
 800c646:	d147      	bne.n	800c6d8 <_printf_i+0x1d0>
 800c648:	2001      	movs	r0, #1
 800c64a:	4240      	negs	r0, r0
 800c64c:	b00b      	add	sp, #44	; 0x2c
 800c64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c650:	2220      	movs	r2, #32
 800c652:	6809      	ldr	r1, [r1, #0]
 800c654:	430a      	orrs	r2, r1
 800c656:	6022      	str	r2, [r4, #0]
 800c658:	2278      	movs	r2, #120	; 0x78
 800c65a:	4932      	ldr	r1, [pc, #200]	; (800c724 <_printf_i+0x21c>)
 800c65c:	9103      	str	r1, [sp, #12]
 800c65e:	0021      	movs	r1, r4
 800c660:	3145      	adds	r1, #69	; 0x45
 800c662:	700a      	strb	r2, [r1, #0]
 800c664:	6819      	ldr	r1, [r3, #0]
 800c666:	6822      	ldr	r2, [r4, #0]
 800c668:	c920      	ldmia	r1!, {r5}
 800c66a:	0610      	lsls	r0, r2, #24
 800c66c:	d402      	bmi.n	800c674 <_printf_i+0x16c>
 800c66e:	0650      	lsls	r0, r2, #25
 800c670:	d500      	bpl.n	800c674 <_printf_i+0x16c>
 800c672:	b2ad      	uxth	r5, r5
 800c674:	6019      	str	r1, [r3, #0]
 800c676:	07d3      	lsls	r3, r2, #31
 800c678:	d502      	bpl.n	800c680 <_printf_i+0x178>
 800c67a:	2320      	movs	r3, #32
 800c67c:	4313      	orrs	r3, r2
 800c67e:	6023      	str	r3, [r4, #0]
 800c680:	2710      	movs	r7, #16
 800c682:	2d00      	cmp	r5, #0
 800c684:	d1a9      	bne.n	800c5da <_printf_i+0xd2>
 800c686:	2220      	movs	r2, #32
 800c688:	6823      	ldr	r3, [r4, #0]
 800c68a:	4393      	bics	r3, r2
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	e7a4      	b.n	800c5da <_printf_i+0xd2>
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	680d      	ldr	r5, [r1, #0]
 800c694:	1d10      	adds	r0, r2, #4
 800c696:	6949      	ldr	r1, [r1, #20]
 800c698:	6018      	str	r0, [r3, #0]
 800c69a:	6813      	ldr	r3, [r2, #0]
 800c69c:	062e      	lsls	r6, r5, #24
 800c69e:	d501      	bpl.n	800c6a4 <_printf_i+0x19c>
 800c6a0:	6019      	str	r1, [r3, #0]
 800c6a2:	e002      	b.n	800c6aa <_printf_i+0x1a2>
 800c6a4:	066d      	lsls	r5, r5, #25
 800c6a6:	d5fb      	bpl.n	800c6a0 <_printf_i+0x198>
 800c6a8:	8019      	strh	r1, [r3, #0]
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	9e04      	ldr	r6, [sp, #16]
 800c6ae:	6123      	str	r3, [r4, #16]
 800c6b0:	e7c0      	b.n	800c634 <_printf_i+0x12c>
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	1d11      	adds	r1, r2, #4
 800c6b6:	6019      	str	r1, [r3, #0]
 800c6b8:	6816      	ldr	r6, [r2, #0]
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	0030      	movs	r0, r6
 800c6be:	6862      	ldr	r2, [r4, #4]
 800c6c0:	f000 fd77 	bl	800d1b2 <memchr>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d001      	beq.n	800c6cc <_printf_i+0x1c4>
 800c6c8:	1b80      	subs	r0, r0, r6
 800c6ca:	6060      	str	r0, [r4, #4]
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	6123      	str	r3, [r4, #16]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9a04      	ldr	r2, [sp, #16]
 800c6d4:	7013      	strb	r3, [r2, #0]
 800c6d6:	e7ad      	b.n	800c634 <_printf_i+0x12c>
 800c6d8:	0032      	movs	r2, r6
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	9906      	ldr	r1, [sp, #24]
 800c6de:	9805      	ldr	r0, [sp, #20]
 800c6e0:	9d07      	ldr	r5, [sp, #28]
 800c6e2:	47a8      	blx	r5
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d0af      	beq.n	800c648 <_printf_i+0x140>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	079b      	lsls	r3, r3, #30
 800c6ec:	d415      	bmi.n	800c71a <_printf_i+0x212>
 800c6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f0:	68e0      	ldr	r0, [r4, #12]
 800c6f2:	4298      	cmp	r0, r3
 800c6f4:	daaa      	bge.n	800c64c <_printf_i+0x144>
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	e7a8      	b.n	800c64c <_printf_i+0x144>
 800c6fa:	0022      	movs	r2, r4
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	9906      	ldr	r1, [sp, #24]
 800c700:	9805      	ldr	r0, [sp, #20]
 800c702:	9e07      	ldr	r6, [sp, #28]
 800c704:	3219      	adds	r2, #25
 800c706:	47b0      	blx	r6
 800c708:	3001      	adds	r0, #1
 800c70a:	d09d      	beq.n	800c648 <_printf_i+0x140>
 800c70c:	3501      	adds	r5, #1
 800c70e:	68e3      	ldr	r3, [r4, #12]
 800c710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c712:	1a9b      	subs	r3, r3, r2
 800c714:	42ab      	cmp	r3, r5
 800c716:	dcf0      	bgt.n	800c6fa <_printf_i+0x1f2>
 800c718:	e7e9      	b.n	800c6ee <_printf_i+0x1e6>
 800c71a:	2500      	movs	r5, #0
 800c71c:	e7f7      	b.n	800c70e <_printf_i+0x206>
 800c71e:	46c0      	nop			; (mov r8, r8)
 800c720:	08010dfa 	.word	0x08010dfa
 800c724:	08010e0b 	.word	0x08010e0b

0800c728 <_scanf_float>:
 800c728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c72a:	b08b      	sub	sp, #44	; 0x2c
 800c72c:	0016      	movs	r6, r2
 800c72e:	9002      	str	r0, [sp, #8]
 800c730:	22ae      	movs	r2, #174	; 0xae
 800c732:	2000      	movs	r0, #0
 800c734:	9307      	str	r3, [sp, #28]
 800c736:	688b      	ldr	r3, [r1, #8]
 800c738:	000f      	movs	r7, r1
 800c73a:	1e59      	subs	r1, r3, #1
 800c73c:	0052      	lsls	r2, r2, #1
 800c73e:	9006      	str	r0, [sp, #24]
 800c740:	4291      	cmp	r1, r2
 800c742:	d905      	bls.n	800c750 <_scanf_float+0x28>
 800c744:	3b5e      	subs	r3, #94	; 0x5e
 800c746:	3bff      	subs	r3, #255	; 0xff
 800c748:	9306      	str	r3, [sp, #24]
 800c74a:	235e      	movs	r3, #94	; 0x5e
 800c74c:	33ff      	adds	r3, #255	; 0xff
 800c74e:	60bb      	str	r3, [r7, #8]
 800c750:	23f0      	movs	r3, #240	; 0xf0
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	4313      	orrs	r3, r2
 800c758:	603b      	str	r3, [r7, #0]
 800c75a:	003b      	movs	r3, r7
 800c75c:	2400      	movs	r4, #0
 800c75e:	331c      	adds	r3, #28
 800c760:	001d      	movs	r5, r3
 800c762:	9304      	str	r3, [sp, #16]
 800c764:	9403      	str	r4, [sp, #12]
 800c766:	9409      	str	r4, [sp, #36]	; 0x24
 800c768:	9408      	str	r4, [sp, #32]
 800c76a:	9401      	str	r4, [sp, #4]
 800c76c:	9405      	str	r4, [sp, #20]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	2a00      	cmp	r2, #0
 800c772:	d00a      	beq.n	800c78a <_scanf_float+0x62>
 800c774:	6833      	ldr	r3, [r6, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	2b4e      	cmp	r3, #78	; 0x4e
 800c77a:	d844      	bhi.n	800c806 <_scanf_float+0xde>
 800c77c:	0018      	movs	r0, r3
 800c77e:	2b40      	cmp	r3, #64	; 0x40
 800c780:	d82c      	bhi.n	800c7dc <_scanf_float+0xb4>
 800c782:	382b      	subs	r0, #43	; 0x2b
 800c784:	b2c1      	uxtb	r1, r0
 800c786:	290e      	cmp	r1, #14
 800c788:	d92a      	bls.n	800c7e0 <_scanf_float+0xb8>
 800c78a:	9b01      	ldr	r3, [sp, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d003      	beq.n	800c798 <_scanf_float+0x70>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	4aa3      	ldr	r2, [pc, #652]	; (800ca20 <_scanf_float+0x2f8>)
 800c794:	4013      	ands	r3, r2
 800c796:	603b      	str	r3, [r7, #0]
 800c798:	9b03      	ldr	r3, [sp, #12]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d900      	bls.n	800c7a2 <_scanf_float+0x7a>
 800c7a0:	e0f9      	b.n	800c996 <_scanf_float+0x26e>
 800c7a2:	24be      	movs	r4, #190	; 0xbe
 800c7a4:	0064      	lsls	r4, r4, #1
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	429d      	cmp	r5, r3
 800c7aa:	d900      	bls.n	800c7ae <_scanf_float+0x86>
 800c7ac:	e0e9      	b.n	800c982 <_scanf_float+0x25a>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	9303      	str	r3, [sp, #12]
 800c7b2:	e183      	b.n	800cabc <_scanf_float+0x394>
 800c7b4:	0018      	movs	r0, r3
 800c7b6:	3861      	subs	r0, #97	; 0x61
 800c7b8:	280d      	cmp	r0, #13
 800c7ba:	d8e6      	bhi.n	800c78a <_scanf_float+0x62>
 800c7bc:	f7f3 fcb6 	bl	800012c <__gnu_thumb1_case_shi>
 800c7c0:	ffe50083 	.word	0xffe50083
 800c7c4:	ffe5ffe5 	.word	0xffe5ffe5
 800c7c8:	00a200b6 	.word	0x00a200b6
 800c7cc:	ffe5ffe5 	.word	0xffe5ffe5
 800c7d0:	ffe50089 	.word	0xffe50089
 800c7d4:	ffe5ffe5 	.word	0xffe5ffe5
 800c7d8:	0065ffe5 	.word	0x0065ffe5
 800c7dc:	3841      	subs	r0, #65	; 0x41
 800c7de:	e7eb      	b.n	800c7b8 <_scanf_float+0x90>
 800c7e0:	280e      	cmp	r0, #14
 800c7e2:	d8d2      	bhi.n	800c78a <_scanf_float+0x62>
 800c7e4:	f7f3 fca2 	bl	800012c <__gnu_thumb1_case_shi>
 800c7e8:	ffd1004b 	.word	0xffd1004b
 800c7ec:	0098004b 	.word	0x0098004b
 800c7f0:	0020ffd1 	.word	0x0020ffd1
 800c7f4:	00400040 	.word	0x00400040
 800c7f8:	00400040 	.word	0x00400040
 800c7fc:	00400040 	.word	0x00400040
 800c800:	00400040 	.word	0x00400040
 800c804:	0040      	.short	0x0040
 800c806:	2b6e      	cmp	r3, #110	; 0x6e
 800c808:	d809      	bhi.n	800c81e <_scanf_float+0xf6>
 800c80a:	2b60      	cmp	r3, #96	; 0x60
 800c80c:	d8d2      	bhi.n	800c7b4 <_scanf_float+0x8c>
 800c80e:	2b54      	cmp	r3, #84	; 0x54
 800c810:	d07d      	beq.n	800c90e <_scanf_float+0x1e6>
 800c812:	2b59      	cmp	r3, #89	; 0x59
 800c814:	d1b9      	bne.n	800c78a <_scanf_float+0x62>
 800c816:	2c07      	cmp	r4, #7
 800c818:	d1b7      	bne.n	800c78a <_scanf_float+0x62>
 800c81a:	2408      	movs	r4, #8
 800c81c:	e02c      	b.n	800c878 <_scanf_float+0x150>
 800c81e:	2b74      	cmp	r3, #116	; 0x74
 800c820:	d075      	beq.n	800c90e <_scanf_float+0x1e6>
 800c822:	2b79      	cmp	r3, #121	; 0x79
 800c824:	d0f7      	beq.n	800c816 <_scanf_float+0xee>
 800c826:	e7b0      	b.n	800c78a <_scanf_float+0x62>
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	05c8      	lsls	r0, r1, #23
 800c82c:	d51c      	bpl.n	800c868 <_scanf_float+0x140>
 800c82e:	2380      	movs	r3, #128	; 0x80
 800c830:	4399      	bics	r1, r3
 800c832:	9b01      	ldr	r3, [sp, #4]
 800c834:	6039      	str	r1, [r7, #0]
 800c836:	3301      	adds	r3, #1
 800c838:	9301      	str	r3, [sp, #4]
 800c83a:	9b06      	ldr	r3, [sp, #24]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d003      	beq.n	800c848 <_scanf_float+0x120>
 800c840:	3b01      	subs	r3, #1
 800c842:	3201      	adds	r2, #1
 800c844:	9306      	str	r3, [sp, #24]
 800c846:	60ba      	str	r2, [r7, #8]
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	60bb      	str	r3, [r7, #8]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	3301      	adds	r3, #1
 800c852:	613b      	str	r3, [r7, #16]
 800c854:	6873      	ldr	r3, [r6, #4]
 800c856:	3b01      	subs	r3, #1
 800c858:	6073      	str	r3, [r6, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	dc00      	bgt.n	800c860 <_scanf_float+0x138>
 800c85e:	e086      	b.n	800c96e <_scanf_float+0x246>
 800c860:	6833      	ldr	r3, [r6, #0]
 800c862:	3301      	adds	r3, #1
 800c864:	6033      	str	r3, [r6, #0]
 800c866:	e782      	b.n	800c76e <_scanf_float+0x46>
 800c868:	9a03      	ldr	r2, [sp, #12]
 800c86a:	1912      	adds	r2, r2, r4
 800c86c:	2a00      	cmp	r2, #0
 800c86e:	d18c      	bne.n	800c78a <_scanf_float+0x62>
 800c870:	683a      	ldr	r2, [r7, #0]
 800c872:	496c      	ldr	r1, [pc, #432]	; (800ca24 <_scanf_float+0x2fc>)
 800c874:	400a      	ands	r2, r1
 800c876:	603a      	str	r2, [r7, #0]
 800c878:	702b      	strb	r3, [r5, #0]
 800c87a:	3501      	adds	r5, #1
 800c87c:	e7e4      	b.n	800c848 <_scanf_float+0x120>
 800c87e:	2180      	movs	r1, #128	; 0x80
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	420a      	tst	r2, r1
 800c884:	d081      	beq.n	800c78a <_scanf_float+0x62>
 800c886:	438a      	bics	r2, r1
 800c888:	e7f5      	b.n	800c876 <_scanf_float+0x14e>
 800c88a:	9a03      	ldr	r2, [sp, #12]
 800c88c:	2a00      	cmp	r2, #0
 800c88e:	d10f      	bne.n	800c8b0 <_scanf_float+0x188>
 800c890:	9a01      	ldr	r2, [sp, #4]
 800c892:	2a00      	cmp	r2, #0
 800c894:	d10f      	bne.n	800c8b6 <_scanf_float+0x18e>
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	21e0      	movs	r1, #224	; 0xe0
 800c89a:	0010      	movs	r0, r2
 800c89c:	00c9      	lsls	r1, r1, #3
 800c89e:	4008      	ands	r0, r1
 800c8a0:	4288      	cmp	r0, r1
 800c8a2:	d108      	bne.n	800c8b6 <_scanf_float+0x18e>
 800c8a4:	4960      	ldr	r1, [pc, #384]	; (800ca28 <_scanf_float+0x300>)
 800c8a6:	400a      	ands	r2, r1
 800c8a8:	603a      	str	r2, [r7, #0]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	9203      	str	r2, [sp, #12]
 800c8ae:	e7e3      	b.n	800c878 <_scanf_float+0x150>
 800c8b0:	9a03      	ldr	r2, [sp, #12]
 800c8b2:	2a02      	cmp	r2, #2
 800c8b4:	d059      	beq.n	800c96a <_scanf_float+0x242>
 800c8b6:	2c01      	cmp	r4, #1
 800c8b8:	d002      	beq.n	800c8c0 <_scanf_float+0x198>
 800c8ba:	2c04      	cmp	r4, #4
 800c8bc:	d000      	beq.n	800c8c0 <_scanf_float+0x198>
 800c8be:	e764      	b.n	800c78a <_scanf_float+0x62>
 800c8c0:	3401      	adds	r4, #1
 800c8c2:	b2e4      	uxtb	r4, r4
 800c8c4:	e7d8      	b.n	800c878 <_scanf_float+0x150>
 800c8c6:	9a03      	ldr	r2, [sp, #12]
 800c8c8:	2a01      	cmp	r2, #1
 800c8ca:	d000      	beq.n	800c8ce <_scanf_float+0x1a6>
 800c8cc:	e75d      	b.n	800c78a <_scanf_float+0x62>
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	e7ec      	b.n	800c8ac <_scanf_float+0x184>
 800c8d2:	2c00      	cmp	r4, #0
 800c8d4:	d110      	bne.n	800c8f8 <_scanf_float+0x1d0>
 800c8d6:	9a01      	ldr	r2, [sp, #4]
 800c8d8:	2a00      	cmp	r2, #0
 800c8da:	d000      	beq.n	800c8de <_scanf_float+0x1b6>
 800c8dc:	e758      	b.n	800c790 <_scanf_float+0x68>
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	21e0      	movs	r1, #224	; 0xe0
 800c8e2:	0010      	movs	r0, r2
 800c8e4:	00c9      	lsls	r1, r1, #3
 800c8e6:	4008      	ands	r0, r1
 800c8e8:	4288      	cmp	r0, r1
 800c8ea:	d000      	beq.n	800c8ee <_scanf_float+0x1c6>
 800c8ec:	e754      	b.n	800c798 <_scanf_float+0x70>
 800c8ee:	494e      	ldr	r1, [pc, #312]	; (800ca28 <_scanf_float+0x300>)
 800c8f0:	3401      	adds	r4, #1
 800c8f2:	400a      	ands	r2, r1
 800c8f4:	603a      	str	r2, [r7, #0]
 800c8f6:	e7bf      	b.n	800c878 <_scanf_float+0x150>
 800c8f8:	21fd      	movs	r1, #253	; 0xfd
 800c8fa:	1ee2      	subs	r2, r4, #3
 800c8fc:	420a      	tst	r2, r1
 800c8fe:	d000      	beq.n	800c902 <_scanf_float+0x1da>
 800c900:	e743      	b.n	800c78a <_scanf_float+0x62>
 800c902:	e7dd      	b.n	800c8c0 <_scanf_float+0x198>
 800c904:	2c02      	cmp	r4, #2
 800c906:	d000      	beq.n	800c90a <_scanf_float+0x1e2>
 800c908:	e73f      	b.n	800c78a <_scanf_float+0x62>
 800c90a:	2403      	movs	r4, #3
 800c90c:	e7b4      	b.n	800c878 <_scanf_float+0x150>
 800c90e:	2c06      	cmp	r4, #6
 800c910:	d000      	beq.n	800c914 <_scanf_float+0x1ec>
 800c912:	e73a      	b.n	800c78a <_scanf_float+0x62>
 800c914:	2407      	movs	r4, #7
 800c916:	e7af      	b.n	800c878 <_scanf_float+0x150>
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	0591      	lsls	r1, r2, #22
 800c91c:	d400      	bmi.n	800c920 <_scanf_float+0x1f8>
 800c91e:	e734      	b.n	800c78a <_scanf_float+0x62>
 800c920:	4942      	ldr	r1, [pc, #264]	; (800ca2c <_scanf_float+0x304>)
 800c922:	400a      	ands	r2, r1
 800c924:	603a      	str	r2, [r7, #0]
 800c926:	9a01      	ldr	r2, [sp, #4]
 800c928:	9205      	str	r2, [sp, #20]
 800c92a:	e7a5      	b.n	800c878 <_scanf_float+0x150>
 800c92c:	21a0      	movs	r1, #160	; 0xa0
 800c92e:	2080      	movs	r0, #128	; 0x80
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	00c9      	lsls	r1, r1, #3
 800c934:	4011      	ands	r1, r2
 800c936:	00c0      	lsls	r0, r0, #3
 800c938:	4281      	cmp	r1, r0
 800c93a:	d006      	beq.n	800c94a <_scanf_float+0x222>
 800c93c:	4202      	tst	r2, r0
 800c93e:	d100      	bne.n	800c942 <_scanf_float+0x21a>
 800c940:	e723      	b.n	800c78a <_scanf_float+0x62>
 800c942:	9901      	ldr	r1, [sp, #4]
 800c944:	2900      	cmp	r1, #0
 800c946:	d100      	bne.n	800c94a <_scanf_float+0x222>
 800c948:	e726      	b.n	800c798 <_scanf_float+0x70>
 800c94a:	0591      	lsls	r1, r2, #22
 800c94c:	d404      	bmi.n	800c958 <_scanf_float+0x230>
 800c94e:	9901      	ldr	r1, [sp, #4]
 800c950:	9805      	ldr	r0, [sp, #20]
 800c952:	9509      	str	r5, [sp, #36]	; 0x24
 800c954:	1a09      	subs	r1, r1, r0
 800c956:	9108      	str	r1, [sp, #32]
 800c958:	4933      	ldr	r1, [pc, #204]	; (800ca28 <_scanf_float+0x300>)
 800c95a:	400a      	ands	r2, r1
 800c95c:	21c0      	movs	r1, #192	; 0xc0
 800c95e:	0049      	lsls	r1, r1, #1
 800c960:	430a      	orrs	r2, r1
 800c962:	603a      	str	r2, [r7, #0]
 800c964:	2200      	movs	r2, #0
 800c966:	9201      	str	r2, [sp, #4]
 800c968:	e786      	b.n	800c878 <_scanf_float+0x150>
 800c96a:	2203      	movs	r2, #3
 800c96c:	e79e      	b.n	800c8ac <_scanf_float+0x184>
 800c96e:	23c0      	movs	r3, #192	; 0xc0
 800c970:	005b      	lsls	r3, r3, #1
 800c972:	0031      	movs	r1, r6
 800c974:	58fb      	ldr	r3, [r7, r3]
 800c976:	9802      	ldr	r0, [sp, #8]
 800c978:	4798      	blx	r3
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d100      	bne.n	800c980 <_scanf_float+0x258>
 800c97e:	e6f6      	b.n	800c76e <_scanf_float+0x46>
 800c980:	e703      	b.n	800c78a <_scanf_float+0x62>
 800c982:	3d01      	subs	r5, #1
 800c984:	593b      	ldr	r3, [r7, r4]
 800c986:	0032      	movs	r2, r6
 800c988:	7829      	ldrb	r1, [r5, #0]
 800c98a:	9802      	ldr	r0, [sp, #8]
 800c98c:	4798      	blx	r3
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	3b01      	subs	r3, #1
 800c992:	613b      	str	r3, [r7, #16]
 800c994:	e707      	b.n	800c7a6 <_scanf_float+0x7e>
 800c996:	1e63      	subs	r3, r4, #1
 800c998:	2b06      	cmp	r3, #6
 800c99a:	d80e      	bhi.n	800c9ba <_scanf_float+0x292>
 800c99c:	9503      	str	r5, [sp, #12]
 800c99e:	2c02      	cmp	r4, #2
 800c9a0:	d920      	bls.n	800c9e4 <_scanf_float+0x2bc>
 800c9a2:	1b63      	subs	r3, r4, r5
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	9306      	str	r3, [sp, #24]
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	9a06      	ldr	r2, [sp, #24]
 800c9ac:	189b      	adds	r3, r3, r2
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	2b03      	cmp	r3, #3
 800c9b2:	d827      	bhi.n	800ca04 <_scanf_float+0x2dc>
 800c9b4:	3c03      	subs	r4, #3
 800c9b6:	b2e4      	uxtb	r4, r4
 800c9b8:	1b2d      	subs	r5, r5, r4
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	05da      	lsls	r2, r3, #23
 800c9be:	d552      	bpl.n	800ca66 <_scanf_float+0x33e>
 800c9c0:	055b      	lsls	r3, r3, #21
 800c9c2:	d535      	bpl.n	800ca30 <_scanf_float+0x308>
 800c9c4:	24be      	movs	r4, #190	; 0xbe
 800c9c6:	0064      	lsls	r4, r4, #1
 800c9c8:	9b04      	ldr	r3, [sp, #16]
 800c9ca:	429d      	cmp	r5, r3
 800c9cc:	d800      	bhi.n	800c9d0 <_scanf_float+0x2a8>
 800c9ce:	e6ee      	b.n	800c7ae <_scanf_float+0x86>
 800c9d0:	3d01      	subs	r5, #1
 800c9d2:	593b      	ldr	r3, [r7, r4]
 800c9d4:	0032      	movs	r2, r6
 800c9d6:	7829      	ldrb	r1, [r5, #0]
 800c9d8:	9802      	ldr	r0, [sp, #8]
 800c9da:	4798      	blx	r3
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	613b      	str	r3, [r7, #16]
 800c9e2:	e7f1      	b.n	800c9c8 <_scanf_float+0x2a0>
 800c9e4:	24be      	movs	r4, #190	; 0xbe
 800c9e6:	0064      	lsls	r4, r4, #1
 800c9e8:	9b04      	ldr	r3, [sp, #16]
 800c9ea:	429d      	cmp	r5, r3
 800c9ec:	d800      	bhi.n	800c9f0 <_scanf_float+0x2c8>
 800c9ee:	e6de      	b.n	800c7ae <_scanf_float+0x86>
 800c9f0:	3d01      	subs	r5, #1
 800c9f2:	593b      	ldr	r3, [r7, r4]
 800c9f4:	0032      	movs	r2, r6
 800c9f6:	7829      	ldrb	r1, [r5, #0]
 800c9f8:	9802      	ldr	r0, [sp, #8]
 800c9fa:	4798      	blx	r3
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	613b      	str	r3, [r7, #16]
 800ca02:	e7f1      	b.n	800c9e8 <_scanf_float+0x2c0>
 800ca04:	9b03      	ldr	r3, [sp, #12]
 800ca06:	0032      	movs	r2, r6
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	7819      	ldrb	r1, [r3, #0]
 800ca0c:	9303      	str	r3, [sp, #12]
 800ca0e:	23be      	movs	r3, #190	; 0xbe
 800ca10:	005b      	lsls	r3, r3, #1
 800ca12:	58fb      	ldr	r3, [r7, r3]
 800ca14:	9802      	ldr	r0, [sp, #8]
 800ca16:	4798      	blx	r3
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	613b      	str	r3, [r7, #16]
 800ca1e:	e7c3      	b.n	800c9a8 <_scanf_float+0x280>
 800ca20:	fffffeff 	.word	0xfffffeff
 800ca24:	fffffe7f 	.word	0xfffffe7f
 800ca28:	fffff87f 	.word	0xfffff87f
 800ca2c:	fffffd7f 	.word	0xfffffd7f
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	1e6c      	subs	r4, r5, #1
 800ca34:	7821      	ldrb	r1, [r4, #0]
 800ca36:	3b01      	subs	r3, #1
 800ca38:	613b      	str	r3, [r7, #16]
 800ca3a:	2965      	cmp	r1, #101	; 0x65
 800ca3c:	d00c      	beq.n	800ca58 <_scanf_float+0x330>
 800ca3e:	2945      	cmp	r1, #69	; 0x45
 800ca40:	d00a      	beq.n	800ca58 <_scanf_float+0x330>
 800ca42:	23be      	movs	r3, #190	; 0xbe
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	58fb      	ldr	r3, [r7, r3]
 800ca48:	0032      	movs	r2, r6
 800ca4a:	9802      	ldr	r0, [sp, #8]
 800ca4c:	4798      	blx	r3
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	1eac      	subs	r4, r5, #2
 800ca52:	3b01      	subs	r3, #1
 800ca54:	7821      	ldrb	r1, [r4, #0]
 800ca56:	613b      	str	r3, [r7, #16]
 800ca58:	23be      	movs	r3, #190	; 0xbe
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	0032      	movs	r2, r6
 800ca5e:	58fb      	ldr	r3, [r7, r3]
 800ca60:	9802      	ldr	r0, [sp, #8]
 800ca62:	4798      	blx	r3
 800ca64:	0025      	movs	r5, r4
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	2310      	movs	r3, #16
 800ca6a:	0011      	movs	r1, r2
 800ca6c:	4019      	ands	r1, r3
 800ca6e:	9103      	str	r1, [sp, #12]
 800ca70:	421a      	tst	r2, r3
 800ca72:	d15b      	bne.n	800cb2c <_scanf_float+0x404>
 800ca74:	22c0      	movs	r2, #192	; 0xc0
 800ca76:	7029      	strb	r1, [r5, #0]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	00d2      	lsls	r2, r2, #3
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	2280      	movs	r2, #128	; 0x80
 800ca80:	00d2      	lsls	r2, r2, #3
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d11d      	bne.n	800cac2 <_scanf_float+0x39a>
 800ca86:	9b05      	ldr	r3, [sp, #20]
 800ca88:	9a01      	ldr	r2, [sp, #4]
 800ca8a:	9901      	ldr	r1, [sp, #4]
 800ca8c:	1a9a      	subs	r2, r3, r2
 800ca8e:	428b      	cmp	r3, r1
 800ca90:	d124      	bne.n	800cadc <_scanf_float+0x3b4>
 800ca92:	2200      	movs	r2, #0
 800ca94:	9904      	ldr	r1, [sp, #16]
 800ca96:	9802      	ldr	r0, [sp, #8]
 800ca98:	f002 fe28 	bl	800f6ec <_strtod_r>
 800ca9c:	9b07      	ldr	r3, [sp, #28]
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	0004      	movs	r4, r0
 800caa2:	000d      	movs	r5, r1
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	0791      	lsls	r1, r2, #30
 800caa8:	d525      	bpl.n	800caf6 <_scanf_float+0x3ce>
 800caaa:	9907      	ldr	r1, [sp, #28]
 800caac:	1d1a      	adds	r2, r3, #4
 800caae:	600a      	str	r2, [r1, #0]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	601c      	str	r4, [r3, #0]
 800cab4:	605d      	str	r5, [r3, #4]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3301      	adds	r3, #1
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	9803      	ldr	r0, [sp, #12]
 800cabe:	b00b      	add	sp, #44	; 0x2c
 800cac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac2:	9b08      	ldr	r3, [sp, #32]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0e4      	beq.n	800ca92 <_scanf_float+0x36a>
 800cac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caca:	9a03      	ldr	r2, [sp, #12]
 800cacc:	1c59      	adds	r1, r3, #1
 800cace:	9802      	ldr	r0, [sp, #8]
 800cad0:	230a      	movs	r3, #10
 800cad2:	f002 fe99 	bl	800f808 <_strtol_r>
 800cad6:	9b08      	ldr	r3, [sp, #32]
 800cad8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cada:	1ac2      	subs	r2, r0, r3
 800cadc:	003b      	movs	r3, r7
 800cade:	3370      	adds	r3, #112	; 0x70
 800cae0:	33ff      	adds	r3, #255	; 0xff
 800cae2:	429d      	cmp	r5, r3
 800cae4:	d302      	bcc.n	800caec <_scanf_float+0x3c4>
 800cae6:	003d      	movs	r5, r7
 800cae8:	356f      	adds	r5, #111	; 0x6f
 800caea:	35ff      	adds	r5, #255	; 0xff
 800caec:	0028      	movs	r0, r5
 800caee:	4910      	ldr	r1, [pc, #64]	; (800cb30 <_scanf_float+0x408>)
 800caf0:	f000 f956 	bl	800cda0 <siprintf>
 800caf4:	e7cd      	b.n	800ca92 <_scanf_float+0x36a>
 800caf6:	1d19      	adds	r1, r3, #4
 800caf8:	0752      	lsls	r2, r2, #29
 800cafa:	d502      	bpl.n	800cb02 <_scanf_float+0x3da>
 800cafc:	9a07      	ldr	r2, [sp, #28]
 800cafe:	6011      	str	r1, [r2, #0]
 800cb00:	e7d6      	b.n	800cab0 <_scanf_float+0x388>
 800cb02:	9a07      	ldr	r2, [sp, #28]
 800cb04:	0020      	movs	r0, r4
 800cb06:	6011      	str	r1, [r2, #0]
 800cb08:	681e      	ldr	r6, [r3, #0]
 800cb0a:	0022      	movs	r2, r4
 800cb0c:	002b      	movs	r3, r5
 800cb0e:	0029      	movs	r1, r5
 800cb10:	f7f5 fad8 	bl	80020c4 <__aeabi_dcmpun>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d004      	beq.n	800cb22 <_scanf_float+0x3fa>
 800cb18:	4806      	ldr	r0, [pc, #24]	; (800cb34 <_scanf_float+0x40c>)
 800cb1a:	f000 fb5f 	bl	800d1dc <nanf>
 800cb1e:	6030      	str	r0, [r6, #0]
 800cb20:	e7c9      	b.n	800cab6 <_scanf_float+0x38e>
 800cb22:	0020      	movs	r0, r4
 800cb24:	0029      	movs	r1, r5
 800cb26:	f7f5 fb77 	bl	8002218 <__aeabi_d2f>
 800cb2a:	e7f8      	b.n	800cb1e <_scanf_float+0x3f6>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	e63f      	b.n	800c7b0 <_scanf_float+0x88>
 800cb30:	08010e1c 	.word	0x08010e1c
 800cb34:	080111ad 	.word	0x080111ad

0800cb38 <std>:
 800cb38:	2300      	movs	r3, #0
 800cb3a:	b510      	push	{r4, lr}
 800cb3c:	0004      	movs	r4, r0
 800cb3e:	6003      	str	r3, [r0, #0]
 800cb40:	6043      	str	r3, [r0, #4]
 800cb42:	6083      	str	r3, [r0, #8]
 800cb44:	8181      	strh	r1, [r0, #12]
 800cb46:	6643      	str	r3, [r0, #100]	; 0x64
 800cb48:	81c2      	strh	r2, [r0, #14]
 800cb4a:	6103      	str	r3, [r0, #16]
 800cb4c:	6143      	str	r3, [r0, #20]
 800cb4e:	6183      	str	r3, [r0, #24]
 800cb50:	0019      	movs	r1, r3
 800cb52:	2208      	movs	r2, #8
 800cb54:	305c      	adds	r0, #92	; 0x5c
 800cb56:	f000 fa35 	bl	800cfc4 <memset>
 800cb5a:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <std+0x50>)
 800cb5c:	6224      	str	r4, [r4, #32]
 800cb5e:	6263      	str	r3, [r4, #36]	; 0x24
 800cb60:	4b0a      	ldr	r3, [pc, #40]	; (800cb8c <std+0x54>)
 800cb62:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb64:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <std+0x58>)
 800cb66:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <std+0x5c>)
 800cb6a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <std+0x60>)
 800cb6e:	429c      	cmp	r4, r3
 800cb70:	d005      	beq.n	800cb7e <std+0x46>
 800cb72:	4b0a      	ldr	r3, [pc, #40]	; (800cb9c <std+0x64>)
 800cb74:	429c      	cmp	r4, r3
 800cb76:	d002      	beq.n	800cb7e <std+0x46>
 800cb78:	4b09      	ldr	r3, [pc, #36]	; (800cba0 <std+0x68>)
 800cb7a:	429c      	cmp	r4, r3
 800cb7c:	d103      	bne.n	800cb86 <std+0x4e>
 800cb7e:	0020      	movs	r0, r4
 800cb80:	3058      	adds	r0, #88	; 0x58
 800cb82:	f000 fb13 	bl	800d1ac <__retarget_lock_init_recursive>
 800cb86:	bd10      	pop	{r4, pc}
 800cb88:	0800cde1 	.word	0x0800cde1
 800cb8c:	0800ce09 	.word	0x0800ce09
 800cb90:	0800ce41 	.word	0x0800ce41
 800cb94:	0800ce6d 	.word	0x0800ce6d
 800cb98:	20001c50 	.word	0x20001c50
 800cb9c:	20001cb8 	.word	0x20001cb8
 800cba0:	20001d20 	.word	0x20001d20

0800cba4 <stdio_exit_handler>:
 800cba4:	b510      	push	{r4, lr}
 800cba6:	4a03      	ldr	r2, [pc, #12]	; (800cbb4 <stdio_exit_handler+0x10>)
 800cba8:	4903      	ldr	r1, [pc, #12]	; (800cbb8 <stdio_exit_handler+0x14>)
 800cbaa:	4804      	ldr	r0, [pc, #16]	; (800cbbc <stdio_exit_handler+0x18>)
 800cbac:	f000 f86c 	bl	800cc88 <_fwalk_sglue>
 800cbb0:	bd10      	pop	{r4, pc}
 800cbb2:	46c0      	nop			; (mov r8, r8)
 800cbb4:	20000024 	.word	0x20000024
 800cbb8:	0800fe71 	.word	0x0800fe71
 800cbbc:	20000030 	.word	0x20000030

0800cbc0 <cleanup_stdio>:
 800cbc0:	6841      	ldr	r1, [r0, #4]
 800cbc2:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <cleanup_stdio+0x30>)
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	0004      	movs	r4, r0
 800cbc8:	4299      	cmp	r1, r3
 800cbca:	d001      	beq.n	800cbd0 <cleanup_stdio+0x10>
 800cbcc:	f003 f950 	bl	800fe70 <_fflush_r>
 800cbd0:	68a1      	ldr	r1, [r4, #8]
 800cbd2:	4b08      	ldr	r3, [pc, #32]	; (800cbf4 <cleanup_stdio+0x34>)
 800cbd4:	4299      	cmp	r1, r3
 800cbd6:	d002      	beq.n	800cbde <cleanup_stdio+0x1e>
 800cbd8:	0020      	movs	r0, r4
 800cbda:	f003 f949 	bl	800fe70 <_fflush_r>
 800cbde:	68e1      	ldr	r1, [r4, #12]
 800cbe0:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <cleanup_stdio+0x38>)
 800cbe2:	4299      	cmp	r1, r3
 800cbe4:	d002      	beq.n	800cbec <cleanup_stdio+0x2c>
 800cbe6:	0020      	movs	r0, r4
 800cbe8:	f003 f942 	bl	800fe70 <_fflush_r>
 800cbec:	bd10      	pop	{r4, pc}
 800cbee:	46c0      	nop			; (mov r8, r8)
 800cbf0:	20001c50 	.word	0x20001c50
 800cbf4:	20001cb8 	.word	0x20001cb8
 800cbf8:	20001d20 	.word	0x20001d20

0800cbfc <global_stdio_init.part.0>:
 800cbfc:	b510      	push	{r4, lr}
 800cbfe:	4b09      	ldr	r3, [pc, #36]	; (800cc24 <global_stdio_init.part.0+0x28>)
 800cc00:	4a09      	ldr	r2, [pc, #36]	; (800cc28 <global_stdio_init.part.0+0x2c>)
 800cc02:	2104      	movs	r1, #4
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	4809      	ldr	r0, [pc, #36]	; (800cc2c <global_stdio_init.part.0+0x30>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f7ff ff95 	bl	800cb38 <std>
 800cc0e:	2201      	movs	r2, #1
 800cc10:	2109      	movs	r1, #9
 800cc12:	4807      	ldr	r0, [pc, #28]	; (800cc30 <global_stdio_init.part.0+0x34>)
 800cc14:	f7ff ff90 	bl	800cb38 <std>
 800cc18:	2202      	movs	r2, #2
 800cc1a:	2112      	movs	r1, #18
 800cc1c:	4805      	ldr	r0, [pc, #20]	; (800cc34 <global_stdio_init.part.0+0x38>)
 800cc1e:	f7ff ff8b 	bl	800cb38 <std>
 800cc22:	bd10      	pop	{r4, pc}
 800cc24:	20001d88 	.word	0x20001d88
 800cc28:	0800cba5 	.word	0x0800cba5
 800cc2c:	20001c50 	.word	0x20001c50
 800cc30:	20001cb8 	.word	0x20001cb8
 800cc34:	20001d20 	.word	0x20001d20

0800cc38 <__sfp_lock_acquire>:
 800cc38:	b510      	push	{r4, lr}
 800cc3a:	4802      	ldr	r0, [pc, #8]	; (800cc44 <__sfp_lock_acquire+0xc>)
 800cc3c:	f000 fab7 	bl	800d1ae <__retarget_lock_acquire_recursive>
 800cc40:	bd10      	pop	{r4, pc}
 800cc42:	46c0      	nop			; (mov r8, r8)
 800cc44:	20001d91 	.word	0x20001d91

0800cc48 <__sfp_lock_release>:
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	4802      	ldr	r0, [pc, #8]	; (800cc54 <__sfp_lock_release+0xc>)
 800cc4c:	f000 fab0 	bl	800d1b0 <__retarget_lock_release_recursive>
 800cc50:	bd10      	pop	{r4, pc}
 800cc52:	46c0      	nop			; (mov r8, r8)
 800cc54:	20001d91 	.word	0x20001d91

0800cc58 <__sinit>:
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	0004      	movs	r4, r0
 800cc5c:	f7ff ffec 	bl	800cc38 <__sfp_lock_acquire>
 800cc60:	6a23      	ldr	r3, [r4, #32]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d002      	beq.n	800cc6c <__sinit+0x14>
 800cc66:	f7ff ffef 	bl	800cc48 <__sfp_lock_release>
 800cc6a:	bd10      	pop	{r4, pc}
 800cc6c:	4b04      	ldr	r3, [pc, #16]	; (800cc80 <__sinit+0x28>)
 800cc6e:	6223      	str	r3, [r4, #32]
 800cc70:	4b04      	ldr	r3, [pc, #16]	; (800cc84 <__sinit+0x2c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1f6      	bne.n	800cc66 <__sinit+0xe>
 800cc78:	f7ff ffc0 	bl	800cbfc <global_stdio_init.part.0>
 800cc7c:	e7f3      	b.n	800cc66 <__sinit+0xe>
 800cc7e:	46c0      	nop			; (mov r8, r8)
 800cc80:	0800cbc1 	.word	0x0800cbc1
 800cc84:	20001d88 	.word	0x20001d88

0800cc88 <_fwalk_sglue>:
 800cc88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc8a:	0014      	movs	r4, r2
 800cc8c:	2600      	movs	r6, #0
 800cc8e:	9000      	str	r0, [sp, #0]
 800cc90:	9101      	str	r1, [sp, #4]
 800cc92:	68a5      	ldr	r5, [r4, #8]
 800cc94:	6867      	ldr	r7, [r4, #4]
 800cc96:	3f01      	subs	r7, #1
 800cc98:	d504      	bpl.n	800cca4 <_fwalk_sglue+0x1c>
 800cc9a:	6824      	ldr	r4, [r4, #0]
 800cc9c:	2c00      	cmp	r4, #0
 800cc9e:	d1f8      	bne.n	800cc92 <_fwalk_sglue+0xa>
 800cca0:	0030      	movs	r0, r6
 800cca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cca4:	89ab      	ldrh	r3, [r5, #12]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d908      	bls.n	800ccbc <_fwalk_sglue+0x34>
 800ccaa:	220e      	movs	r2, #14
 800ccac:	5eab      	ldrsh	r3, [r5, r2]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	d004      	beq.n	800ccbc <_fwalk_sglue+0x34>
 800ccb2:	0029      	movs	r1, r5
 800ccb4:	9800      	ldr	r0, [sp, #0]
 800ccb6:	9b01      	ldr	r3, [sp, #4]
 800ccb8:	4798      	blx	r3
 800ccba:	4306      	orrs	r6, r0
 800ccbc:	3568      	adds	r5, #104	; 0x68
 800ccbe:	e7ea      	b.n	800cc96 <_fwalk_sglue+0xe>

0800ccc0 <iprintf>:
 800ccc0:	b40f      	push	{r0, r1, r2, r3}
 800ccc2:	b507      	push	{r0, r1, r2, lr}
 800ccc4:	4905      	ldr	r1, [pc, #20]	; (800ccdc <iprintf+0x1c>)
 800ccc6:	ab04      	add	r3, sp, #16
 800ccc8:	6808      	ldr	r0, [r1, #0]
 800ccca:	cb04      	ldmia	r3!, {r2}
 800cccc:	6881      	ldr	r1, [r0, #8]
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	f002 ff28 	bl	800fb24 <_vfiprintf_r>
 800ccd4:	b003      	add	sp, #12
 800ccd6:	bc08      	pop	{r3}
 800ccd8:	b004      	add	sp, #16
 800ccda:	4718      	bx	r3
 800ccdc:	2000007c 	.word	0x2000007c

0800cce0 <_puts_r>:
 800cce0:	6a03      	ldr	r3, [r0, #32]
 800cce2:	b570      	push	{r4, r5, r6, lr}
 800cce4:	0005      	movs	r5, r0
 800cce6:	000e      	movs	r6, r1
 800cce8:	6884      	ldr	r4, [r0, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <_puts_r+0x12>
 800ccee:	f7ff ffb3 	bl	800cc58 <__sinit>
 800ccf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccf4:	07db      	lsls	r3, r3, #31
 800ccf6:	d405      	bmi.n	800cd04 <_puts_r+0x24>
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	059b      	lsls	r3, r3, #22
 800ccfc:	d402      	bmi.n	800cd04 <_puts_r+0x24>
 800ccfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd00:	f000 fa55 	bl	800d1ae <__retarget_lock_acquire_recursive>
 800cd04:	89a3      	ldrh	r3, [r4, #12]
 800cd06:	071b      	lsls	r3, r3, #28
 800cd08:	d502      	bpl.n	800cd10 <_puts_r+0x30>
 800cd0a:	6923      	ldr	r3, [r4, #16]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d11f      	bne.n	800cd50 <_puts_r+0x70>
 800cd10:	0021      	movs	r1, r4
 800cd12:	0028      	movs	r0, r5
 800cd14:	f000 f8f2 	bl	800cefc <__swsetup_r>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d019      	beq.n	800cd50 <_puts_r+0x70>
 800cd1c:	2501      	movs	r5, #1
 800cd1e:	426d      	negs	r5, r5
 800cd20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd22:	07db      	lsls	r3, r3, #31
 800cd24:	d405      	bmi.n	800cd32 <_puts_r+0x52>
 800cd26:	89a3      	ldrh	r3, [r4, #12]
 800cd28:	059b      	lsls	r3, r3, #22
 800cd2a:	d402      	bmi.n	800cd32 <_puts_r+0x52>
 800cd2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd2e:	f000 fa3f 	bl	800d1b0 <__retarget_lock_release_recursive>
 800cd32:	0028      	movs	r0, r5
 800cd34:	bd70      	pop	{r4, r5, r6, pc}
 800cd36:	3601      	adds	r6, #1
 800cd38:	60a3      	str	r3, [r4, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	da04      	bge.n	800cd48 <_puts_r+0x68>
 800cd3e:	69a2      	ldr	r2, [r4, #24]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	dc16      	bgt.n	800cd72 <_puts_r+0x92>
 800cd44:	290a      	cmp	r1, #10
 800cd46:	d014      	beq.n	800cd72 <_puts_r+0x92>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	6022      	str	r2, [r4, #0]
 800cd4e:	7019      	strb	r1, [r3, #0]
 800cd50:	68a3      	ldr	r3, [r4, #8]
 800cd52:	7831      	ldrb	r1, [r6, #0]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	2900      	cmp	r1, #0
 800cd58:	d1ed      	bne.n	800cd36 <_puts_r+0x56>
 800cd5a:	60a3      	str	r3, [r4, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	da0f      	bge.n	800cd80 <_puts_r+0xa0>
 800cd60:	0028      	movs	r0, r5
 800cd62:	0022      	movs	r2, r4
 800cd64:	310a      	adds	r1, #10
 800cd66:	f000 f887 	bl	800ce78 <__swbuf_r>
 800cd6a:	250a      	movs	r5, #10
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d1d7      	bne.n	800cd20 <_puts_r+0x40>
 800cd70:	e7d4      	b.n	800cd1c <_puts_r+0x3c>
 800cd72:	0022      	movs	r2, r4
 800cd74:	0028      	movs	r0, r5
 800cd76:	f000 f87f 	bl	800ce78 <__swbuf_r>
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	d1e8      	bne.n	800cd50 <_puts_r+0x70>
 800cd7e:	e7cd      	b.n	800cd1c <_puts_r+0x3c>
 800cd80:	250a      	movs	r5, #10
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	6022      	str	r2, [r4, #0]
 800cd88:	701d      	strb	r5, [r3, #0]
 800cd8a:	e7c9      	b.n	800cd20 <_puts_r+0x40>

0800cd8c <puts>:
 800cd8c:	b510      	push	{r4, lr}
 800cd8e:	4b03      	ldr	r3, [pc, #12]	; (800cd9c <puts+0x10>)
 800cd90:	0001      	movs	r1, r0
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	f7ff ffa4 	bl	800cce0 <_puts_r>
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	46c0      	nop			; (mov r8, r8)
 800cd9c:	2000007c 	.word	0x2000007c

0800cda0 <siprintf>:
 800cda0:	b40e      	push	{r1, r2, r3}
 800cda2:	b500      	push	{lr}
 800cda4:	490b      	ldr	r1, [pc, #44]	; (800cdd4 <siprintf+0x34>)
 800cda6:	b09c      	sub	sp, #112	; 0x70
 800cda8:	ab1d      	add	r3, sp, #116	; 0x74
 800cdaa:	9002      	str	r0, [sp, #8]
 800cdac:	9006      	str	r0, [sp, #24]
 800cdae:	9107      	str	r1, [sp, #28]
 800cdb0:	9104      	str	r1, [sp, #16]
 800cdb2:	4809      	ldr	r0, [pc, #36]	; (800cdd8 <siprintf+0x38>)
 800cdb4:	4909      	ldr	r1, [pc, #36]	; (800cddc <siprintf+0x3c>)
 800cdb6:	cb04      	ldmia	r3!, {r2}
 800cdb8:	9105      	str	r1, [sp, #20]
 800cdba:	6800      	ldr	r0, [r0, #0]
 800cdbc:	a902      	add	r1, sp, #8
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	f002 fd88 	bl	800f8d4 <_svfiprintf_r>
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	9b02      	ldr	r3, [sp, #8]
 800cdc8:	701a      	strb	r2, [r3, #0]
 800cdca:	b01c      	add	sp, #112	; 0x70
 800cdcc:	bc08      	pop	{r3}
 800cdce:	b003      	add	sp, #12
 800cdd0:	4718      	bx	r3
 800cdd2:	46c0      	nop			; (mov r8, r8)
 800cdd4:	7fffffff 	.word	0x7fffffff
 800cdd8:	2000007c 	.word	0x2000007c
 800cddc:	ffff0208 	.word	0xffff0208

0800cde0 <__sread>:
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	000c      	movs	r4, r1
 800cde4:	250e      	movs	r5, #14
 800cde6:	5f49      	ldrsh	r1, [r1, r5]
 800cde8:	f000 f98e 	bl	800d108 <_read_r>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	db03      	blt.n	800cdf8 <__sread+0x18>
 800cdf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cdf2:	181b      	adds	r3, r3, r0
 800cdf4:	6563      	str	r3, [r4, #84]	; 0x54
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}
 800cdf8:	89a3      	ldrh	r3, [r4, #12]
 800cdfa:	4a02      	ldr	r2, [pc, #8]	; (800ce04 <__sread+0x24>)
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	81a3      	strh	r3, [r4, #12]
 800ce00:	e7f9      	b.n	800cdf6 <__sread+0x16>
 800ce02:	46c0      	nop			; (mov r8, r8)
 800ce04:	ffffefff 	.word	0xffffefff

0800ce08 <__swrite>:
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	001f      	movs	r7, r3
 800ce0c:	898b      	ldrh	r3, [r1, #12]
 800ce0e:	0005      	movs	r5, r0
 800ce10:	000c      	movs	r4, r1
 800ce12:	0016      	movs	r6, r2
 800ce14:	05db      	lsls	r3, r3, #23
 800ce16:	d505      	bpl.n	800ce24 <__swrite+0x1c>
 800ce18:	230e      	movs	r3, #14
 800ce1a:	5ec9      	ldrsh	r1, [r1, r3]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2302      	movs	r3, #2
 800ce20:	f000 f95e 	bl	800d0e0 <_lseek_r>
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	4a05      	ldr	r2, [pc, #20]	; (800ce3c <__swrite+0x34>)
 800ce28:	0028      	movs	r0, r5
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	81a3      	strh	r3, [r4, #12]
 800ce2e:	0032      	movs	r2, r6
 800ce30:	230e      	movs	r3, #14
 800ce32:	5ee1      	ldrsh	r1, [r4, r3]
 800ce34:	003b      	movs	r3, r7
 800ce36:	f000 f97b 	bl	800d130 <_write_r>
 800ce3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce3c:	ffffefff 	.word	0xffffefff

0800ce40 <__sseek>:
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	000c      	movs	r4, r1
 800ce44:	250e      	movs	r5, #14
 800ce46:	5f49      	ldrsh	r1, [r1, r5]
 800ce48:	f000 f94a 	bl	800d0e0 <_lseek_r>
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	1c42      	adds	r2, r0, #1
 800ce50:	d103      	bne.n	800ce5a <__sseek+0x1a>
 800ce52:	4a05      	ldr	r2, [pc, #20]	; (800ce68 <__sseek+0x28>)
 800ce54:	4013      	ands	r3, r2
 800ce56:	81a3      	strh	r3, [r4, #12]
 800ce58:	bd70      	pop	{r4, r5, r6, pc}
 800ce5a:	2280      	movs	r2, #128	; 0x80
 800ce5c:	0152      	lsls	r2, r2, #5
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	81a3      	strh	r3, [r4, #12]
 800ce62:	6560      	str	r0, [r4, #84]	; 0x54
 800ce64:	e7f8      	b.n	800ce58 <__sseek+0x18>
 800ce66:	46c0      	nop			; (mov r8, r8)
 800ce68:	ffffefff 	.word	0xffffefff

0800ce6c <__sclose>:
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	230e      	movs	r3, #14
 800ce70:	5ec9      	ldrsh	r1, [r1, r3]
 800ce72:	f000 f8c5 	bl	800d000 <_close_r>
 800ce76:	bd10      	pop	{r4, pc}

0800ce78 <__swbuf_r>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	0006      	movs	r6, r0
 800ce7c:	000d      	movs	r5, r1
 800ce7e:	0014      	movs	r4, r2
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d004      	beq.n	800ce8e <__swbuf_r+0x16>
 800ce84:	6a03      	ldr	r3, [r0, #32]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <__swbuf_r+0x16>
 800ce8a:	f7ff fee5 	bl	800cc58 <__sinit>
 800ce8e:	69a3      	ldr	r3, [r4, #24]
 800ce90:	60a3      	str	r3, [r4, #8]
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	071b      	lsls	r3, r3, #28
 800ce96:	d528      	bpl.n	800ceea <__swbuf_r+0x72>
 800ce98:	6923      	ldr	r3, [r4, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d025      	beq.n	800ceea <__swbuf_r+0x72>
 800ce9e:	6923      	ldr	r3, [r4, #16]
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	b2ef      	uxtb	r7, r5
 800cea4:	1ac0      	subs	r0, r0, r3
 800cea6:	6963      	ldr	r3, [r4, #20]
 800cea8:	b2ed      	uxtb	r5, r5
 800ceaa:	4283      	cmp	r3, r0
 800ceac:	dc05      	bgt.n	800ceba <__swbuf_r+0x42>
 800ceae:	0021      	movs	r1, r4
 800ceb0:	0030      	movs	r0, r6
 800ceb2:	f002 ffdd 	bl	800fe70 <_fflush_r>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d11d      	bne.n	800cef6 <__swbuf_r+0x7e>
 800ceba:	68a3      	ldr	r3, [r4, #8]
 800cebc:	3001      	adds	r0, #1
 800cebe:	3b01      	subs	r3, #1
 800cec0:	60a3      	str	r3, [r4, #8]
 800cec2:	6823      	ldr	r3, [r4, #0]
 800cec4:	1c5a      	adds	r2, r3, #1
 800cec6:	6022      	str	r2, [r4, #0]
 800cec8:	701f      	strb	r7, [r3, #0]
 800ceca:	6963      	ldr	r3, [r4, #20]
 800cecc:	4283      	cmp	r3, r0
 800cece:	d004      	beq.n	800ceda <__swbuf_r+0x62>
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	07db      	lsls	r3, r3, #31
 800ced4:	d507      	bpl.n	800cee6 <__swbuf_r+0x6e>
 800ced6:	2d0a      	cmp	r5, #10
 800ced8:	d105      	bne.n	800cee6 <__swbuf_r+0x6e>
 800ceda:	0021      	movs	r1, r4
 800cedc:	0030      	movs	r0, r6
 800cede:	f002 ffc7 	bl	800fe70 <_fflush_r>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d107      	bne.n	800cef6 <__swbuf_r+0x7e>
 800cee6:	0028      	movs	r0, r5
 800cee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceea:	0021      	movs	r1, r4
 800ceec:	0030      	movs	r0, r6
 800ceee:	f000 f805 	bl	800cefc <__swsetup_r>
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d0d3      	beq.n	800ce9e <__swbuf_r+0x26>
 800cef6:	2501      	movs	r5, #1
 800cef8:	426d      	negs	r5, r5
 800cefa:	e7f4      	b.n	800cee6 <__swbuf_r+0x6e>

0800cefc <__swsetup_r>:
 800cefc:	4b30      	ldr	r3, [pc, #192]	; (800cfc0 <__swsetup_r+0xc4>)
 800cefe:	b570      	push	{r4, r5, r6, lr}
 800cf00:	0005      	movs	r5, r0
 800cf02:	6818      	ldr	r0, [r3, #0]
 800cf04:	000c      	movs	r4, r1
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d004      	beq.n	800cf14 <__swsetup_r+0x18>
 800cf0a:	6a03      	ldr	r3, [r0, #32]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d101      	bne.n	800cf14 <__swsetup_r+0x18>
 800cf10:	f7ff fea2 	bl	800cc58 <__sinit>
 800cf14:	230c      	movs	r3, #12
 800cf16:	5ee2      	ldrsh	r2, [r4, r3]
 800cf18:	b293      	uxth	r3, r2
 800cf1a:	0711      	lsls	r1, r2, #28
 800cf1c:	d423      	bmi.n	800cf66 <__swsetup_r+0x6a>
 800cf1e:	06d9      	lsls	r1, r3, #27
 800cf20:	d407      	bmi.n	800cf32 <__swsetup_r+0x36>
 800cf22:	2309      	movs	r3, #9
 800cf24:	2001      	movs	r0, #1
 800cf26:	602b      	str	r3, [r5, #0]
 800cf28:	3337      	adds	r3, #55	; 0x37
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	81a3      	strh	r3, [r4, #12]
 800cf2e:	4240      	negs	r0, r0
 800cf30:	bd70      	pop	{r4, r5, r6, pc}
 800cf32:	075b      	lsls	r3, r3, #29
 800cf34:	d513      	bpl.n	800cf5e <__swsetup_r+0x62>
 800cf36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf38:	2900      	cmp	r1, #0
 800cf3a:	d008      	beq.n	800cf4e <__swsetup_r+0x52>
 800cf3c:	0023      	movs	r3, r4
 800cf3e:	3344      	adds	r3, #68	; 0x44
 800cf40:	4299      	cmp	r1, r3
 800cf42:	d002      	beq.n	800cf4a <__swsetup_r+0x4e>
 800cf44:	0028      	movs	r0, r5
 800cf46:	f000 ffeb 	bl	800df20 <_free_r>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	6363      	str	r3, [r4, #52]	; 0x34
 800cf4e:	2224      	movs	r2, #36	; 0x24
 800cf50:	89a3      	ldrh	r3, [r4, #12]
 800cf52:	4393      	bics	r3, r2
 800cf54:	81a3      	strh	r3, [r4, #12]
 800cf56:	2300      	movs	r3, #0
 800cf58:	6063      	str	r3, [r4, #4]
 800cf5a:	6923      	ldr	r3, [r4, #16]
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	2308      	movs	r3, #8
 800cf60:	89a2      	ldrh	r2, [r4, #12]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	6923      	ldr	r3, [r4, #16]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10b      	bne.n	800cf84 <__swsetup_r+0x88>
 800cf6c:	21a0      	movs	r1, #160	; 0xa0
 800cf6e:	2280      	movs	r2, #128	; 0x80
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	0089      	lsls	r1, r1, #2
 800cf74:	0092      	lsls	r2, r2, #2
 800cf76:	400b      	ands	r3, r1
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d003      	beq.n	800cf84 <__swsetup_r+0x88>
 800cf7c:	0021      	movs	r1, r4
 800cf7e:	0028      	movs	r0, r5
 800cf80:	f002 ffca 	bl	800ff18 <__smakebuf_r>
 800cf84:	220c      	movs	r2, #12
 800cf86:	5ea3      	ldrsh	r3, [r4, r2]
 800cf88:	2001      	movs	r0, #1
 800cf8a:	001a      	movs	r2, r3
 800cf8c:	b299      	uxth	r1, r3
 800cf8e:	4002      	ands	r2, r0
 800cf90:	4203      	tst	r3, r0
 800cf92:	d00f      	beq.n	800cfb4 <__swsetup_r+0xb8>
 800cf94:	2200      	movs	r2, #0
 800cf96:	60a2      	str	r2, [r4, #8]
 800cf98:	6962      	ldr	r2, [r4, #20]
 800cf9a:	4252      	negs	r2, r2
 800cf9c:	61a2      	str	r2, [r4, #24]
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	6922      	ldr	r2, [r4, #16]
 800cfa2:	4282      	cmp	r2, r0
 800cfa4:	d1c4      	bne.n	800cf30 <__swsetup_r+0x34>
 800cfa6:	0609      	lsls	r1, r1, #24
 800cfa8:	d5c2      	bpl.n	800cf30 <__swsetup_r+0x34>
 800cfaa:	2240      	movs	r2, #64	; 0x40
 800cfac:	4313      	orrs	r3, r2
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	3801      	subs	r0, #1
 800cfb2:	e7bd      	b.n	800cf30 <__swsetup_r+0x34>
 800cfb4:	0788      	lsls	r0, r1, #30
 800cfb6:	d400      	bmi.n	800cfba <__swsetup_r+0xbe>
 800cfb8:	6962      	ldr	r2, [r4, #20]
 800cfba:	60a2      	str	r2, [r4, #8]
 800cfbc:	e7ef      	b.n	800cf9e <__swsetup_r+0xa2>
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	2000007c 	.word	0x2000007c

0800cfc4 <memset>:
 800cfc4:	0003      	movs	r3, r0
 800cfc6:	1882      	adds	r2, r0, r2
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d100      	bne.n	800cfce <memset+0xa>
 800cfcc:	4770      	bx	lr
 800cfce:	7019      	strb	r1, [r3, #0]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	e7f9      	b.n	800cfc8 <memset+0x4>

0800cfd4 <strncmp>:
 800cfd4:	b530      	push	{r4, r5, lr}
 800cfd6:	0005      	movs	r5, r0
 800cfd8:	1e10      	subs	r0, r2, #0
 800cfda:	d00b      	beq.n	800cff4 <strncmp+0x20>
 800cfdc:	2400      	movs	r4, #0
 800cfde:	3a01      	subs	r2, #1
 800cfe0:	5d2b      	ldrb	r3, [r5, r4]
 800cfe2:	5d08      	ldrb	r0, [r1, r4]
 800cfe4:	4283      	cmp	r3, r0
 800cfe6:	d104      	bne.n	800cff2 <strncmp+0x1e>
 800cfe8:	42a2      	cmp	r2, r4
 800cfea:	d002      	beq.n	800cff2 <strncmp+0x1e>
 800cfec:	3401      	adds	r4, #1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1f6      	bne.n	800cfe0 <strncmp+0xc>
 800cff2:	1a18      	subs	r0, r3, r0
 800cff4:	bd30      	pop	{r4, r5, pc}
	...

0800cff8 <_localeconv_r>:
 800cff8:	4800      	ldr	r0, [pc, #0]	; (800cffc <_localeconv_r+0x4>)
 800cffa:	4770      	bx	lr
 800cffc:	20000170 	.word	0x20000170

0800d000 <_close_r>:
 800d000:	2300      	movs	r3, #0
 800d002:	b570      	push	{r4, r5, r6, lr}
 800d004:	4d06      	ldr	r5, [pc, #24]	; (800d020 <_close_r+0x20>)
 800d006:	0004      	movs	r4, r0
 800d008:	0008      	movs	r0, r1
 800d00a:	602b      	str	r3, [r5, #0]
 800d00c:	f7f7 fdb4 	bl	8004b78 <_close>
 800d010:	1c43      	adds	r3, r0, #1
 800d012:	d103      	bne.n	800d01c <_close_r+0x1c>
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d000      	beq.n	800d01c <_close_r+0x1c>
 800d01a:	6023      	str	r3, [r4, #0]
 800d01c:	bd70      	pop	{r4, r5, r6, pc}
 800d01e:	46c0      	nop			; (mov r8, r8)
 800d020:	20001d8c 	.word	0x20001d8c

0800d024 <_reclaim_reent>:
 800d024:	4b2d      	ldr	r3, [pc, #180]	; (800d0dc <_reclaim_reent+0xb8>)
 800d026:	b570      	push	{r4, r5, r6, lr}
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	0004      	movs	r4, r0
 800d02c:	4283      	cmp	r3, r0
 800d02e:	d042      	beq.n	800d0b6 <_reclaim_reent+0x92>
 800d030:	69c3      	ldr	r3, [r0, #28]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00a      	beq.n	800d04c <_reclaim_reent+0x28>
 800d036:	2500      	movs	r5, #0
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	42ab      	cmp	r3, r5
 800d03c:	d140      	bne.n	800d0c0 <_reclaim_reent+0x9c>
 800d03e:	69e3      	ldr	r3, [r4, #28]
 800d040:	6819      	ldr	r1, [r3, #0]
 800d042:	2900      	cmp	r1, #0
 800d044:	d002      	beq.n	800d04c <_reclaim_reent+0x28>
 800d046:	0020      	movs	r0, r4
 800d048:	f000 ff6a 	bl	800df20 <_free_r>
 800d04c:	6961      	ldr	r1, [r4, #20]
 800d04e:	2900      	cmp	r1, #0
 800d050:	d002      	beq.n	800d058 <_reclaim_reent+0x34>
 800d052:	0020      	movs	r0, r4
 800d054:	f000 ff64 	bl	800df20 <_free_r>
 800d058:	69e1      	ldr	r1, [r4, #28]
 800d05a:	2900      	cmp	r1, #0
 800d05c:	d002      	beq.n	800d064 <_reclaim_reent+0x40>
 800d05e:	0020      	movs	r0, r4
 800d060:	f000 ff5e 	bl	800df20 <_free_r>
 800d064:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d066:	2900      	cmp	r1, #0
 800d068:	d002      	beq.n	800d070 <_reclaim_reent+0x4c>
 800d06a:	0020      	movs	r0, r4
 800d06c:	f000 ff58 	bl	800df20 <_free_r>
 800d070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d072:	2900      	cmp	r1, #0
 800d074:	d002      	beq.n	800d07c <_reclaim_reent+0x58>
 800d076:	0020      	movs	r0, r4
 800d078:	f000 ff52 	bl	800df20 <_free_r>
 800d07c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d07e:	2900      	cmp	r1, #0
 800d080:	d002      	beq.n	800d088 <_reclaim_reent+0x64>
 800d082:	0020      	movs	r0, r4
 800d084:	f000 ff4c 	bl	800df20 <_free_r>
 800d088:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d08a:	2900      	cmp	r1, #0
 800d08c:	d002      	beq.n	800d094 <_reclaim_reent+0x70>
 800d08e:	0020      	movs	r0, r4
 800d090:	f000 ff46 	bl	800df20 <_free_r>
 800d094:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d096:	2900      	cmp	r1, #0
 800d098:	d002      	beq.n	800d0a0 <_reclaim_reent+0x7c>
 800d09a:	0020      	movs	r0, r4
 800d09c:	f000 ff40 	bl	800df20 <_free_r>
 800d0a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d0a2:	2900      	cmp	r1, #0
 800d0a4:	d002      	beq.n	800d0ac <_reclaim_reent+0x88>
 800d0a6:	0020      	movs	r0, r4
 800d0a8:	f000 ff3a 	bl	800df20 <_free_r>
 800d0ac:	6a23      	ldr	r3, [r4, #32]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <_reclaim_reent+0x92>
 800d0b2:	0020      	movs	r0, r4
 800d0b4:	4798      	blx	r3
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}
 800d0b8:	5949      	ldr	r1, [r1, r5]
 800d0ba:	2900      	cmp	r1, #0
 800d0bc:	d108      	bne.n	800d0d0 <_reclaim_reent+0xac>
 800d0be:	3504      	adds	r5, #4
 800d0c0:	69e3      	ldr	r3, [r4, #28]
 800d0c2:	68d9      	ldr	r1, [r3, #12]
 800d0c4:	2d80      	cmp	r5, #128	; 0x80
 800d0c6:	d1f7      	bne.n	800d0b8 <_reclaim_reent+0x94>
 800d0c8:	0020      	movs	r0, r4
 800d0ca:	f000 ff29 	bl	800df20 <_free_r>
 800d0ce:	e7b6      	b.n	800d03e <_reclaim_reent+0x1a>
 800d0d0:	680e      	ldr	r6, [r1, #0]
 800d0d2:	0020      	movs	r0, r4
 800d0d4:	f000 ff24 	bl	800df20 <_free_r>
 800d0d8:	0031      	movs	r1, r6
 800d0da:	e7ee      	b.n	800d0ba <_reclaim_reent+0x96>
 800d0dc:	2000007c 	.word	0x2000007c

0800d0e0 <_lseek_r>:
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	0004      	movs	r4, r0
 800d0e4:	0008      	movs	r0, r1
 800d0e6:	0011      	movs	r1, r2
 800d0e8:	001a      	movs	r2, r3
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	4d05      	ldr	r5, [pc, #20]	; (800d104 <_lseek_r+0x24>)
 800d0ee:	602b      	str	r3, [r5, #0]
 800d0f0:	f7f7 fd63 	bl	8004bba <_lseek>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d103      	bne.n	800d100 <_lseek_r+0x20>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d000      	beq.n	800d100 <_lseek_r+0x20>
 800d0fe:	6023      	str	r3, [r4, #0]
 800d100:	bd70      	pop	{r4, r5, r6, pc}
 800d102:	46c0      	nop			; (mov r8, r8)
 800d104:	20001d8c 	.word	0x20001d8c

0800d108 <_read_r>:
 800d108:	b570      	push	{r4, r5, r6, lr}
 800d10a:	0004      	movs	r4, r0
 800d10c:	0008      	movs	r0, r1
 800d10e:	0011      	movs	r1, r2
 800d110:	001a      	movs	r2, r3
 800d112:	2300      	movs	r3, #0
 800d114:	4d05      	ldr	r5, [pc, #20]	; (800d12c <_read_r+0x24>)
 800d116:	602b      	str	r3, [r5, #0]
 800d118:	f7f7 fcf5 	bl	8004b06 <_read>
 800d11c:	1c43      	adds	r3, r0, #1
 800d11e:	d103      	bne.n	800d128 <_read_r+0x20>
 800d120:	682b      	ldr	r3, [r5, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d000      	beq.n	800d128 <_read_r+0x20>
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	bd70      	pop	{r4, r5, r6, pc}
 800d12a:	46c0      	nop			; (mov r8, r8)
 800d12c:	20001d8c 	.word	0x20001d8c

0800d130 <_write_r>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	0004      	movs	r4, r0
 800d134:	0008      	movs	r0, r1
 800d136:	0011      	movs	r1, r2
 800d138:	001a      	movs	r2, r3
 800d13a:	2300      	movs	r3, #0
 800d13c:	4d05      	ldr	r5, [pc, #20]	; (800d154 <_write_r+0x24>)
 800d13e:	602b      	str	r3, [r5, #0]
 800d140:	f7f7 fcfe 	bl	8004b40 <_write>
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	d103      	bne.n	800d150 <_write_r+0x20>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d000      	beq.n	800d150 <_write_r+0x20>
 800d14e:	6023      	str	r3, [r4, #0]
 800d150:	bd70      	pop	{r4, r5, r6, pc}
 800d152:	46c0      	nop			; (mov r8, r8)
 800d154:	20001d8c 	.word	0x20001d8c

0800d158 <__errno>:
 800d158:	4b01      	ldr	r3, [pc, #4]	; (800d160 <__errno+0x8>)
 800d15a:	6818      	ldr	r0, [r3, #0]
 800d15c:	4770      	bx	lr
 800d15e:	46c0      	nop			; (mov r8, r8)
 800d160:	2000007c 	.word	0x2000007c

0800d164 <__libc_init_array>:
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	2600      	movs	r6, #0
 800d168:	4c0c      	ldr	r4, [pc, #48]	; (800d19c <__libc_init_array+0x38>)
 800d16a:	4d0d      	ldr	r5, [pc, #52]	; (800d1a0 <__libc_init_array+0x3c>)
 800d16c:	1b64      	subs	r4, r4, r5
 800d16e:	10a4      	asrs	r4, r4, #2
 800d170:	42a6      	cmp	r6, r4
 800d172:	d109      	bne.n	800d188 <__libc_init_array+0x24>
 800d174:	2600      	movs	r6, #0
 800d176:	f003 fbbd 	bl	80108f4 <_init>
 800d17a:	4c0a      	ldr	r4, [pc, #40]	; (800d1a4 <__libc_init_array+0x40>)
 800d17c:	4d0a      	ldr	r5, [pc, #40]	; (800d1a8 <__libc_init_array+0x44>)
 800d17e:	1b64      	subs	r4, r4, r5
 800d180:	10a4      	asrs	r4, r4, #2
 800d182:	42a6      	cmp	r6, r4
 800d184:	d105      	bne.n	800d192 <__libc_init_array+0x2e>
 800d186:	bd70      	pop	{r4, r5, r6, pc}
 800d188:	00b3      	lsls	r3, r6, #2
 800d18a:	58eb      	ldr	r3, [r5, r3]
 800d18c:	4798      	blx	r3
 800d18e:	3601      	adds	r6, #1
 800d190:	e7ee      	b.n	800d170 <__libc_init_array+0xc>
 800d192:	00b3      	lsls	r3, r6, #2
 800d194:	58eb      	ldr	r3, [r5, r3]
 800d196:	4798      	blx	r3
 800d198:	3601      	adds	r6, #1
 800d19a:	e7f2      	b.n	800d182 <__libc_init_array+0x1e>
 800d19c:	08011210 	.word	0x08011210
 800d1a0:	08011210 	.word	0x08011210
 800d1a4:	08011214 	.word	0x08011214
 800d1a8:	08011210 	.word	0x08011210

0800d1ac <__retarget_lock_init_recursive>:
 800d1ac:	4770      	bx	lr

0800d1ae <__retarget_lock_acquire_recursive>:
 800d1ae:	4770      	bx	lr

0800d1b0 <__retarget_lock_release_recursive>:
 800d1b0:	4770      	bx	lr

0800d1b2 <memchr>:
 800d1b2:	b2c9      	uxtb	r1, r1
 800d1b4:	1882      	adds	r2, r0, r2
 800d1b6:	4290      	cmp	r0, r2
 800d1b8:	d101      	bne.n	800d1be <memchr+0xc>
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	4770      	bx	lr
 800d1be:	7803      	ldrb	r3, [r0, #0]
 800d1c0:	428b      	cmp	r3, r1
 800d1c2:	d0fb      	beq.n	800d1bc <memchr+0xa>
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	e7f6      	b.n	800d1b6 <memchr+0x4>

0800d1c8 <memcpy>:
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	b510      	push	{r4, lr}
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d100      	bne.n	800d1d2 <memcpy+0xa>
 800d1d0:	bd10      	pop	{r4, pc}
 800d1d2:	5ccc      	ldrb	r4, [r1, r3]
 800d1d4:	54c4      	strb	r4, [r0, r3]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	e7f8      	b.n	800d1cc <memcpy+0x4>
	...

0800d1dc <nanf>:
 800d1dc:	4800      	ldr	r0, [pc, #0]	; (800d1e0 <nanf+0x4>)
 800d1de:	4770      	bx	lr
 800d1e0:	7fc00000 	.word	0x7fc00000

0800d1e4 <quorem>:
 800d1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e6:	6902      	ldr	r2, [r0, #16]
 800d1e8:	690b      	ldr	r3, [r1, #16]
 800d1ea:	b089      	sub	sp, #36	; 0x24
 800d1ec:	0007      	movs	r7, r0
 800d1ee:	9104      	str	r1, [sp, #16]
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	db69      	blt.n	800d2ca <quorem+0xe6>
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	009c      	lsls	r4, r3, #2
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	000b      	movs	r3, r1
 800d1fe:	3314      	adds	r3, #20
 800d200:	9306      	str	r3, [sp, #24]
 800d202:	191b      	adds	r3, r3, r4
 800d204:	9305      	str	r3, [sp, #20]
 800d206:	003b      	movs	r3, r7
 800d208:	3314      	adds	r3, #20
 800d20a:	9303      	str	r3, [sp, #12]
 800d20c:	191c      	adds	r4, r3, r4
 800d20e:	9b05      	ldr	r3, [sp, #20]
 800d210:	6826      	ldr	r6, [r4, #0]
 800d212:	681d      	ldr	r5, [r3, #0]
 800d214:	0030      	movs	r0, r6
 800d216:	3501      	adds	r5, #1
 800d218:	0029      	movs	r1, r5
 800d21a:	f7f2 ff91 	bl	8000140 <__udivsi3>
 800d21e:	9002      	str	r0, [sp, #8]
 800d220:	42ae      	cmp	r6, r5
 800d222:	d329      	bcc.n	800d278 <quorem+0x94>
 800d224:	9b06      	ldr	r3, [sp, #24]
 800d226:	2600      	movs	r6, #0
 800d228:	469c      	mov	ip, r3
 800d22a:	9d03      	ldr	r5, [sp, #12]
 800d22c:	9606      	str	r6, [sp, #24]
 800d22e:	4662      	mov	r2, ip
 800d230:	ca08      	ldmia	r2!, {r3}
 800d232:	6828      	ldr	r0, [r5, #0]
 800d234:	4694      	mov	ip, r2
 800d236:	9a02      	ldr	r2, [sp, #8]
 800d238:	b299      	uxth	r1, r3
 800d23a:	4351      	muls	r1, r2
 800d23c:	0c1b      	lsrs	r3, r3, #16
 800d23e:	4353      	muls	r3, r2
 800d240:	1989      	adds	r1, r1, r6
 800d242:	0c0a      	lsrs	r2, r1, #16
 800d244:	189b      	adds	r3, r3, r2
 800d246:	9307      	str	r3, [sp, #28]
 800d248:	0c1e      	lsrs	r6, r3, #16
 800d24a:	9b06      	ldr	r3, [sp, #24]
 800d24c:	b282      	uxth	r2, r0
 800d24e:	18d2      	adds	r2, r2, r3
 800d250:	466b      	mov	r3, sp
 800d252:	b289      	uxth	r1, r1
 800d254:	8b9b      	ldrh	r3, [r3, #28]
 800d256:	1a52      	subs	r2, r2, r1
 800d258:	0c01      	lsrs	r1, r0, #16
 800d25a:	1ac9      	subs	r1, r1, r3
 800d25c:	1413      	asrs	r3, r2, #16
 800d25e:	18cb      	adds	r3, r1, r3
 800d260:	1419      	asrs	r1, r3, #16
 800d262:	b292      	uxth	r2, r2
 800d264:	041b      	lsls	r3, r3, #16
 800d266:	4313      	orrs	r3, r2
 800d268:	c508      	stmia	r5!, {r3}
 800d26a:	9b05      	ldr	r3, [sp, #20]
 800d26c:	9106      	str	r1, [sp, #24]
 800d26e:	4563      	cmp	r3, ip
 800d270:	d2dd      	bcs.n	800d22e <quorem+0x4a>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d030      	beq.n	800d2da <quorem+0xf6>
 800d278:	0038      	movs	r0, r7
 800d27a:	9904      	ldr	r1, [sp, #16]
 800d27c:	f001 fa2a 	bl	800e6d4 <__mcmp>
 800d280:	2800      	cmp	r0, #0
 800d282:	db21      	blt.n	800d2c8 <quorem+0xe4>
 800d284:	0038      	movs	r0, r7
 800d286:	2600      	movs	r6, #0
 800d288:	9b02      	ldr	r3, [sp, #8]
 800d28a:	9c04      	ldr	r4, [sp, #16]
 800d28c:	3301      	adds	r3, #1
 800d28e:	9302      	str	r3, [sp, #8]
 800d290:	3014      	adds	r0, #20
 800d292:	3414      	adds	r4, #20
 800d294:	6803      	ldr	r3, [r0, #0]
 800d296:	cc02      	ldmia	r4!, {r1}
 800d298:	b29d      	uxth	r5, r3
 800d29a:	19ad      	adds	r5, r5, r6
 800d29c:	b28a      	uxth	r2, r1
 800d29e:	1aaa      	subs	r2, r5, r2
 800d2a0:	0c09      	lsrs	r1, r1, #16
 800d2a2:	0c1b      	lsrs	r3, r3, #16
 800d2a4:	1a5b      	subs	r3, r3, r1
 800d2a6:	1411      	asrs	r1, r2, #16
 800d2a8:	185b      	adds	r3, r3, r1
 800d2aa:	141e      	asrs	r6, r3, #16
 800d2ac:	b292      	uxth	r2, r2
 800d2ae:	041b      	lsls	r3, r3, #16
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	c008      	stmia	r0!, {r3}
 800d2b4:	9b05      	ldr	r3, [sp, #20]
 800d2b6:	42a3      	cmp	r3, r4
 800d2b8:	d2ec      	bcs.n	800d294 <quorem+0xb0>
 800d2ba:	9b01      	ldr	r3, [sp, #4]
 800d2bc:	9a03      	ldr	r2, [sp, #12]
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	18d3      	adds	r3, r2, r3
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	2a00      	cmp	r2, #0
 800d2c6:	d015      	beq.n	800d2f4 <quorem+0x110>
 800d2c8:	9802      	ldr	r0, [sp, #8]
 800d2ca:	b009      	add	sp, #36	; 0x24
 800d2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d106      	bne.n	800d2e2 <quorem+0xfe>
 800d2d4:	9b01      	ldr	r3, [sp, #4]
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	9301      	str	r3, [sp, #4]
 800d2da:	9b03      	ldr	r3, [sp, #12]
 800d2dc:	3c04      	subs	r4, #4
 800d2de:	42a3      	cmp	r3, r4
 800d2e0:	d3f5      	bcc.n	800d2ce <quorem+0xea>
 800d2e2:	9b01      	ldr	r3, [sp, #4]
 800d2e4:	613b      	str	r3, [r7, #16]
 800d2e6:	e7c7      	b.n	800d278 <quorem+0x94>
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	2a00      	cmp	r2, #0
 800d2ec:	d106      	bne.n	800d2fc <quorem+0x118>
 800d2ee:	9a01      	ldr	r2, [sp, #4]
 800d2f0:	3a01      	subs	r2, #1
 800d2f2:	9201      	str	r2, [sp, #4]
 800d2f4:	9a03      	ldr	r2, [sp, #12]
 800d2f6:	3b04      	subs	r3, #4
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d3f5      	bcc.n	800d2e8 <quorem+0x104>
 800d2fc:	9b01      	ldr	r3, [sp, #4]
 800d2fe:	613b      	str	r3, [r7, #16]
 800d300:	e7e2      	b.n	800d2c8 <quorem+0xe4>
	...

0800d304 <_dtoa_r>:
 800d304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d306:	0014      	movs	r4, r2
 800d308:	001d      	movs	r5, r3
 800d30a:	69c6      	ldr	r6, [r0, #28]
 800d30c:	b09d      	sub	sp, #116	; 0x74
 800d30e:	9408      	str	r4, [sp, #32]
 800d310:	9509      	str	r5, [sp, #36]	; 0x24
 800d312:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800d314:	9004      	str	r0, [sp, #16]
 800d316:	2e00      	cmp	r6, #0
 800d318:	d10f      	bne.n	800d33a <_dtoa_r+0x36>
 800d31a:	2010      	movs	r0, #16
 800d31c:	f000 fe4a 	bl	800dfb4 <malloc>
 800d320:	9b04      	ldr	r3, [sp, #16]
 800d322:	1e02      	subs	r2, r0, #0
 800d324:	61d8      	str	r0, [r3, #28]
 800d326:	d104      	bne.n	800d332 <_dtoa_r+0x2e>
 800d328:	21ef      	movs	r1, #239	; 0xef
 800d32a:	4bc6      	ldr	r3, [pc, #792]	; (800d644 <_dtoa_r+0x340>)
 800d32c:	48c6      	ldr	r0, [pc, #792]	; (800d648 <_dtoa_r+0x344>)
 800d32e:	f002 fe81 	bl	8010034 <__assert_func>
 800d332:	6046      	str	r6, [r0, #4]
 800d334:	6086      	str	r6, [r0, #8]
 800d336:	6006      	str	r6, [r0, #0]
 800d338:	60c6      	str	r6, [r0, #12]
 800d33a:	9b04      	ldr	r3, [sp, #16]
 800d33c:	69db      	ldr	r3, [r3, #28]
 800d33e:	6819      	ldr	r1, [r3, #0]
 800d340:	2900      	cmp	r1, #0
 800d342:	d00b      	beq.n	800d35c <_dtoa_r+0x58>
 800d344:	685a      	ldr	r2, [r3, #4]
 800d346:	2301      	movs	r3, #1
 800d348:	4093      	lsls	r3, r2
 800d34a:	604a      	str	r2, [r1, #4]
 800d34c:	608b      	str	r3, [r1, #8]
 800d34e:	9804      	ldr	r0, [sp, #16]
 800d350:	f000 ff32 	bl	800e1b8 <_Bfree>
 800d354:	2200      	movs	r2, #0
 800d356:	9b04      	ldr	r3, [sp, #16]
 800d358:	69db      	ldr	r3, [r3, #28]
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	2d00      	cmp	r5, #0
 800d35e:	da1e      	bge.n	800d39e <_dtoa_r+0x9a>
 800d360:	2301      	movs	r3, #1
 800d362:	603b      	str	r3, [r7, #0]
 800d364:	006b      	lsls	r3, r5, #1
 800d366:	085b      	lsrs	r3, r3, #1
 800d368:	9309      	str	r3, [sp, #36]	; 0x24
 800d36a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d36c:	4bb7      	ldr	r3, [pc, #732]	; (800d64c <_dtoa_r+0x348>)
 800d36e:	4ab7      	ldr	r2, [pc, #732]	; (800d64c <_dtoa_r+0x348>)
 800d370:	403b      	ands	r3, r7
 800d372:	4293      	cmp	r3, r2
 800d374:	d116      	bne.n	800d3a4 <_dtoa_r+0xa0>
 800d376:	4bb6      	ldr	r3, [pc, #728]	; (800d650 <_dtoa_r+0x34c>)
 800d378:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	033b      	lsls	r3, r7, #12
 800d37e:	0b1b      	lsrs	r3, r3, #12
 800d380:	4323      	orrs	r3, r4
 800d382:	d101      	bne.n	800d388 <_dtoa_r+0x84>
 800d384:	f000 fdb5 	bl	800def2 <_dtoa_r+0xbee>
 800d388:	4bb2      	ldr	r3, [pc, #712]	; (800d654 <_dtoa_r+0x350>)
 800d38a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d38c:	9306      	str	r3, [sp, #24]
 800d38e:	2a00      	cmp	r2, #0
 800d390:	d002      	beq.n	800d398 <_dtoa_r+0x94>
 800d392:	4bb1      	ldr	r3, [pc, #708]	; (800d658 <_dtoa_r+0x354>)
 800d394:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	9806      	ldr	r0, [sp, #24]
 800d39a:	b01d      	add	sp, #116	; 0x74
 800d39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d39e:	2300      	movs	r3, #0
 800d3a0:	603b      	str	r3, [r7, #0]
 800d3a2:	e7e2      	b.n	800d36a <_dtoa_r+0x66>
 800d3a4:	9a08      	ldr	r2, [sp, #32]
 800d3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a8:	9210      	str	r2, [sp, #64]	; 0x40
 800d3aa:	9311      	str	r3, [sp, #68]	; 0x44
 800d3ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d3ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	f7f3 f84a 	bl	800044c <__aeabi_dcmpeq>
 800d3b8:	1e06      	subs	r6, r0, #0
 800d3ba:	d009      	beq.n	800d3d0 <_dtoa_r+0xcc>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	4ba6      	ldr	r3, [pc, #664]	; (800d65c <_dtoa_r+0x358>)
 800d3c4:	9306      	str	r3, [sp, #24]
 800d3c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d0e5      	beq.n	800d398 <_dtoa_r+0x94>
 800d3cc:	4ba4      	ldr	r3, [pc, #656]	; (800d660 <_dtoa_r+0x35c>)
 800d3ce:	e7e1      	b.n	800d394 <_dtoa_r+0x90>
 800d3d0:	ab1a      	add	r3, sp, #104	; 0x68
 800d3d2:	9301      	str	r3, [sp, #4]
 800d3d4:	ab1b      	add	r3, sp, #108	; 0x6c
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	9804      	ldr	r0, [sp, #16]
 800d3da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3de:	f001 fa95 	bl	800e90c <__d2b>
 800d3e2:	007a      	lsls	r2, r7, #1
 800d3e4:	9005      	str	r0, [sp, #20]
 800d3e6:	0d52      	lsrs	r2, r2, #21
 800d3e8:	d100      	bne.n	800d3ec <_dtoa_r+0xe8>
 800d3ea:	e07b      	b.n	800d4e4 <_dtoa_r+0x1e0>
 800d3ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3ee:	9617      	str	r6, [sp, #92]	; 0x5c
 800d3f0:	0319      	lsls	r1, r3, #12
 800d3f2:	4b9c      	ldr	r3, [pc, #624]	; (800d664 <_dtoa_r+0x360>)
 800d3f4:	0b09      	lsrs	r1, r1, #12
 800d3f6:	430b      	orrs	r3, r1
 800d3f8:	499b      	ldr	r1, [pc, #620]	; (800d668 <_dtoa_r+0x364>)
 800d3fa:	1857      	adds	r7, r2, r1
 800d3fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d3fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d400:	0019      	movs	r1, r3
 800d402:	2200      	movs	r2, #0
 800d404:	4b99      	ldr	r3, [pc, #612]	; (800d66c <_dtoa_r+0x368>)
 800d406:	f7f4 fadb 	bl	80019c0 <__aeabi_dsub>
 800d40a:	4a99      	ldr	r2, [pc, #612]	; (800d670 <_dtoa_r+0x36c>)
 800d40c:	4b99      	ldr	r3, [pc, #612]	; (800d674 <_dtoa_r+0x370>)
 800d40e:	f7f4 f815 	bl	800143c <__aeabi_dmul>
 800d412:	4a99      	ldr	r2, [pc, #612]	; (800d678 <_dtoa_r+0x374>)
 800d414:	4b99      	ldr	r3, [pc, #612]	; (800d67c <_dtoa_r+0x378>)
 800d416:	f7f3 f8b7 	bl	8000588 <__aeabi_dadd>
 800d41a:	0004      	movs	r4, r0
 800d41c:	0038      	movs	r0, r7
 800d41e:	000d      	movs	r5, r1
 800d420:	f7f4 fea4 	bl	800216c <__aeabi_i2d>
 800d424:	4a96      	ldr	r2, [pc, #600]	; (800d680 <_dtoa_r+0x37c>)
 800d426:	4b97      	ldr	r3, [pc, #604]	; (800d684 <_dtoa_r+0x380>)
 800d428:	f7f4 f808 	bl	800143c <__aeabi_dmul>
 800d42c:	0002      	movs	r2, r0
 800d42e:	000b      	movs	r3, r1
 800d430:	0020      	movs	r0, r4
 800d432:	0029      	movs	r1, r5
 800d434:	f7f3 f8a8 	bl	8000588 <__aeabi_dadd>
 800d438:	0004      	movs	r4, r0
 800d43a:	000d      	movs	r5, r1
 800d43c:	f7f4 fe60 	bl	8002100 <__aeabi_d2iz>
 800d440:	2200      	movs	r2, #0
 800d442:	9003      	str	r0, [sp, #12]
 800d444:	2300      	movs	r3, #0
 800d446:	0020      	movs	r0, r4
 800d448:	0029      	movs	r1, r5
 800d44a:	f7f3 f805 	bl	8000458 <__aeabi_dcmplt>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d00b      	beq.n	800d46a <_dtoa_r+0x166>
 800d452:	9803      	ldr	r0, [sp, #12]
 800d454:	f7f4 fe8a 	bl	800216c <__aeabi_i2d>
 800d458:	002b      	movs	r3, r5
 800d45a:	0022      	movs	r2, r4
 800d45c:	f7f2 fff6 	bl	800044c <__aeabi_dcmpeq>
 800d460:	4243      	negs	r3, r0
 800d462:	4158      	adcs	r0, r3
 800d464:	9b03      	ldr	r3, [sp, #12]
 800d466:	1a1b      	subs	r3, r3, r0
 800d468:	9303      	str	r3, [sp, #12]
 800d46a:	2301      	movs	r3, #1
 800d46c:	9316      	str	r3, [sp, #88]	; 0x58
 800d46e:	9b03      	ldr	r3, [sp, #12]
 800d470:	2b16      	cmp	r3, #22
 800d472:	d810      	bhi.n	800d496 <_dtoa_r+0x192>
 800d474:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d476:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d478:	9a03      	ldr	r2, [sp, #12]
 800d47a:	4b83      	ldr	r3, [pc, #524]	; (800d688 <_dtoa_r+0x384>)
 800d47c:	00d2      	lsls	r2, r2, #3
 800d47e:	189b      	adds	r3, r3, r2
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f7f2 ffe8 	bl	8000458 <__aeabi_dcmplt>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d047      	beq.n	800d51c <_dtoa_r+0x218>
 800d48c:	9b03      	ldr	r3, [sp, #12]
 800d48e:	3b01      	subs	r3, #1
 800d490:	9303      	str	r3, [sp, #12]
 800d492:	2300      	movs	r3, #0
 800d494:	9316      	str	r3, [sp, #88]	; 0x58
 800d496:	2200      	movs	r2, #0
 800d498:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d49a:	920a      	str	r2, [sp, #40]	; 0x28
 800d49c:	1bdb      	subs	r3, r3, r7
 800d49e:	1e5a      	subs	r2, r3, #1
 800d4a0:	d53e      	bpl.n	800d520 <_dtoa_r+0x21c>
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	1ad3      	subs	r3, r2, r3
 800d4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	930c      	str	r3, [sp, #48]	; 0x30
 800d4ac:	9b03      	ldr	r3, [sp, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	db38      	blt.n	800d524 <_dtoa_r+0x220>
 800d4b2:	9a03      	ldr	r2, [sp, #12]
 800d4b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4b6:	4694      	mov	ip, r2
 800d4b8:	4463      	add	r3, ip
 800d4ba:	930c      	str	r3, [sp, #48]	; 0x30
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9213      	str	r2, [sp, #76]	; 0x4c
 800d4c0:	930d      	str	r3, [sp, #52]	; 0x34
 800d4c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4c4:	2401      	movs	r4, #1
 800d4c6:	2b09      	cmp	r3, #9
 800d4c8:	d867      	bhi.n	800d59a <_dtoa_r+0x296>
 800d4ca:	2b05      	cmp	r3, #5
 800d4cc:	dd02      	ble.n	800d4d4 <_dtoa_r+0x1d0>
 800d4ce:	2400      	movs	r4, #0
 800d4d0:	3b04      	subs	r3, #4
 800d4d2:	9322      	str	r3, [sp, #136]	; 0x88
 800d4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4d6:	1e98      	subs	r0, r3, #2
 800d4d8:	2803      	cmp	r0, #3
 800d4da:	d867      	bhi.n	800d5ac <_dtoa_r+0x2a8>
 800d4dc:	f7f2 fe1c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800d4e0:	5b383a2b 	.word	0x5b383a2b
 800d4e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4e6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d4e8:	18f6      	adds	r6, r6, r3
 800d4ea:	4b68      	ldr	r3, [pc, #416]	; (800d68c <_dtoa_r+0x388>)
 800d4ec:	18f2      	adds	r2, r6, r3
 800d4ee:	2a20      	cmp	r2, #32
 800d4f0:	dd0f      	ble.n	800d512 <_dtoa_r+0x20e>
 800d4f2:	2340      	movs	r3, #64	; 0x40
 800d4f4:	1a9b      	subs	r3, r3, r2
 800d4f6:	409f      	lsls	r7, r3
 800d4f8:	4b65      	ldr	r3, [pc, #404]	; (800d690 <_dtoa_r+0x38c>)
 800d4fa:	0038      	movs	r0, r7
 800d4fc:	18f3      	adds	r3, r6, r3
 800d4fe:	40dc      	lsrs	r4, r3
 800d500:	4320      	orrs	r0, r4
 800d502:	f7f4 fe63 	bl	80021cc <__aeabi_ui2d>
 800d506:	2201      	movs	r2, #1
 800d508:	4b62      	ldr	r3, [pc, #392]	; (800d694 <_dtoa_r+0x390>)
 800d50a:	1e77      	subs	r7, r6, #1
 800d50c:	18cb      	adds	r3, r1, r3
 800d50e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d510:	e776      	b.n	800d400 <_dtoa_r+0xfc>
 800d512:	2320      	movs	r3, #32
 800d514:	0020      	movs	r0, r4
 800d516:	1a9b      	subs	r3, r3, r2
 800d518:	4098      	lsls	r0, r3
 800d51a:	e7f2      	b.n	800d502 <_dtoa_r+0x1fe>
 800d51c:	9016      	str	r0, [sp, #88]	; 0x58
 800d51e:	e7ba      	b.n	800d496 <_dtoa_r+0x192>
 800d520:	920c      	str	r2, [sp, #48]	; 0x30
 800d522:	e7c3      	b.n	800d4ac <_dtoa_r+0x1a8>
 800d524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d526:	9a03      	ldr	r2, [sp, #12]
 800d528:	1a9b      	subs	r3, r3, r2
 800d52a:	930a      	str	r3, [sp, #40]	; 0x28
 800d52c:	4253      	negs	r3, r2
 800d52e:	930d      	str	r3, [sp, #52]	; 0x34
 800d530:	2300      	movs	r3, #0
 800d532:	9313      	str	r3, [sp, #76]	; 0x4c
 800d534:	e7c5      	b.n	800d4c2 <_dtoa_r+0x1be>
 800d536:	2300      	movs	r3, #0
 800d538:	930f      	str	r3, [sp, #60]	; 0x3c
 800d53a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d53e:	9307      	str	r3, [sp, #28]
 800d540:	2b00      	cmp	r3, #0
 800d542:	dc13      	bgt.n	800d56c <_dtoa_r+0x268>
 800d544:	2301      	movs	r3, #1
 800d546:	001a      	movs	r2, r3
 800d548:	930b      	str	r3, [sp, #44]	; 0x2c
 800d54a:	9307      	str	r3, [sp, #28]
 800d54c:	9223      	str	r2, [sp, #140]	; 0x8c
 800d54e:	e00d      	b.n	800d56c <_dtoa_r+0x268>
 800d550:	2301      	movs	r3, #1
 800d552:	e7f1      	b.n	800d538 <_dtoa_r+0x234>
 800d554:	2300      	movs	r3, #0
 800d556:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d558:	930f      	str	r3, [sp, #60]	; 0x3c
 800d55a:	4694      	mov	ip, r2
 800d55c:	9b03      	ldr	r3, [sp, #12]
 800d55e:	4463      	add	r3, ip
 800d560:	930b      	str	r3, [sp, #44]	; 0x2c
 800d562:	3301      	adds	r3, #1
 800d564:	9307      	str	r3, [sp, #28]
 800d566:	2b00      	cmp	r3, #0
 800d568:	dc00      	bgt.n	800d56c <_dtoa_r+0x268>
 800d56a:	2301      	movs	r3, #1
 800d56c:	9a04      	ldr	r2, [sp, #16]
 800d56e:	2100      	movs	r1, #0
 800d570:	69d0      	ldr	r0, [r2, #28]
 800d572:	2204      	movs	r2, #4
 800d574:	0015      	movs	r5, r2
 800d576:	3514      	adds	r5, #20
 800d578:	429d      	cmp	r5, r3
 800d57a:	d91b      	bls.n	800d5b4 <_dtoa_r+0x2b0>
 800d57c:	6041      	str	r1, [r0, #4]
 800d57e:	9804      	ldr	r0, [sp, #16]
 800d580:	f000 fdd6 	bl	800e130 <_Balloc>
 800d584:	9006      	str	r0, [sp, #24]
 800d586:	2800      	cmp	r0, #0
 800d588:	d117      	bne.n	800d5ba <_dtoa_r+0x2b6>
 800d58a:	21b0      	movs	r1, #176	; 0xb0
 800d58c:	4b42      	ldr	r3, [pc, #264]	; (800d698 <_dtoa_r+0x394>)
 800d58e:	482e      	ldr	r0, [pc, #184]	; (800d648 <_dtoa_r+0x344>)
 800d590:	9a06      	ldr	r2, [sp, #24]
 800d592:	31ff      	adds	r1, #255	; 0xff
 800d594:	e6cb      	b.n	800d32e <_dtoa_r+0x2a>
 800d596:	2301      	movs	r3, #1
 800d598:	e7dd      	b.n	800d556 <_dtoa_r+0x252>
 800d59a:	2300      	movs	r3, #0
 800d59c:	940f      	str	r4, [sp, #60]	; 0x3c
 800d59e:	9322      	str	r3, [sp, #136]	; 0x88
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5a4:	9307      	str	r3, [sp, #28]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	3313      	adds	r3, #19
 800d5aa:	e7cf      	b.n	800d54c <_dtoa_r+0x248>
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5b0:	3b02      	subs	r3, #2
 800d5b2:	e7f6      	b.n	800d5a2 <_dtoa_r+0x29e>
 800d5b4:	3101      	adds	r1, #1
 800d5b6:	0052      	lsls	r2, r2, #1
 800d5b8:	e7dc      	b.n	800d574 <_dtoa_r+0x270>
 800d5ba:	9b04      	ldr	r3, [sp, #16]
 800d5bc:	9a06      	ldr	r2, [sp, #24]
 800d5be:	69db      	ldr	r3, [r3, #28]
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	9b07      	ldr	r3, [sp, #28]
 800d5c4:	2b0e      	cmp	r3, #14
 800d5c6:	d900      	bls.n	800d5ca <_dtoa_r+0x2c6>
 800d5c8:	e0e5      	b.n	800d796 <_dtoa_r+0x492>
 800d5ca:	2c00      	cmp	r4, #0
 800d5cc:	d100      	bne.n	800d5d0 <_dtoa_r+0x2cc>
 800d5ce:	e0e2      	b.n	800d796 <_dtoa_r+0x492>
 800d5d0:	9b03      	ldr	r3, [sp, #12]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	dd64      	ble.n	800d6a0 <_dtoa_r+0x39c>
 800d5d6:	210f      	movs	r1, #15
 800d5d8:	9a03      	ldr	r2, [sp, #12]
 800d5da:	4b2b      	ldr	r3, [pc, #172]	; (800d688 <_dtoa_r+0x384>)
 800d5dc:	400a      	ands	r2, r1
 800d5de:	00d2      	lsls	r2, r2, #3
 800d5e0:	189b      	adds	r3, r3, r2
 800d5e2:	681e      	ldr	r6, [r3, #0]
 800d5e4:	685f      	ldr	r7, [r3, #4]
 800d5e6:	9b03      	ldr	r3, [sp, #12]
 800d5e8:	2402      	movs	r4, #2
 800d5ea:	111d      	asrs	r5, r3, #4
 800d5ec:	05db      	lsls	r3, r3, #23
 800d5ee:	d50a      	bpl.n	800d606 <_dtoa_r+0x302>
 800d5f0:	4b2a      	ldr	r3, [pc, #168]	; (800d69c <_dtoa_r+0x398>)
 800d5f2:	400d      	ands	r5, r1
 800d5f4:	6a1a      	ldr	r2, [r3, #32]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d5fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d5fc:	f7f3 fb24 	bl	8000c48 <__aeabi_ddiv>
 800d600:	9008      	str	r0, [sp, #32]
 800d602:	9109      	str	r1, [sp, #36]	; 0x24
 800d604:	3401      	adds	r4, #1
 800d606:	4b25      	ldr	r3, [pc, #148]	; (800d69c <_dtoa_r+0x398>)
 800d608:	930e      	str	r3, [sp, #56]	; 0x38
 800d60a:	2d00      	cmp	r5, #0
 800d60c:	d108      	bne.n	800d620 <_dtoa_r+0x31c>
 800d60e:	9808      	ldr	r0, [sp, #32]
 800d610:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d612:	0032      	movs	r2, r6
 800d614:	003b      	movs	r3, r7
 800d616:	f7f3 fb17 	bl	8000c48 <__aeabi_ddiv>
 800d61a:	9008      	str	r0, [sp, #32]
 800d61c:	9109      	str	r1, [sp, #36]	; 0x24
 800d61e:	e05a      	b.n	800d6d6 <_dtoa_r+0x3d2>
 800d620:	2301      	movs	r3, #1
 800d622:	421d      	tst	r5, r3
 800d624:	d009      	beq.n	800d63a <_dtoa_r+0x336>
 800d626:	18e4      	adds	r4, r4, r3
 800d628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d62a:	0030      	movs	r0, r6
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	0039      	movs	r1, r7
 800d632:	f7f3 ff03 	bl	800143c <__aeabi_dmul>
 800d636:	0006      	movs	r6, r0
 800d638:	000f      	movs	r7, r1
 800d63a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d63c:	106d      	asrs	r5, r5, #1
 800d63e:	3308      	adds	r3, #8
 800d640:	e7e2      	b.n	800d608 <_dtoa_r+0x304>
 800d642:	46c0      	nop			; (mov r8, r8)
 800d644:	08010e2e 	.word	0x08010e2e
 800d648:	08010e45 	.word	0x08010e45
 800d64c:	7ff00000 	.word	0x7ff00000
 800d650:	0000270f 	.word	0x0000270f
 800d654:	08010e2a 	.word	0x08010e2a
 800d658:	08010e2d 	.word	0x08010e2d
 800d65c:	08010df8 	.word	0x08010df8
 800d660:	08010df9 	.word	0x08010df9
 800d664:	3ff00000 	.word	0x3ff00000
 800d668:	fffffc01 	.word	0xfffffc01
 800d66c:	3ff80000 	.word	0x3ff80000
 800d670:	636f4361 	.word	0x636f4361
 800d674:	3fd287a7 	.word	0x3fd287a7
 800d678:	8b60c8b3 	.word	0x8b60c8b3
 800d67c:	3fc68a28 	.word	0x3fc68a28
 800d680:	509f79fb 	.word	0x509f79fb
 800d684:	3fd34413 	.word	0x3fd34413
 800d688:	08010f30 	.word	0x08010f30
 800d68c:	00000432 	.word	0x00000432
 800d690:	00000412 	.word	0x00000412
 800d694:	fe100000 	.word	0xfe100000
 800d698:	08010e9d 	.word	0x08010e9d
 800d69c:	08010f08 	.word	0x08010f08
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	2402      	movs	r4, #2
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d016      	beq.n	800d6d6 <_dtoa_r+0x3d2>
 800d6a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d6aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d6ac:	220f      	movs	r2, #15
 800d6ae:	425d      	negs	r5, r3
 800d6b0:	402a      	ands	r2, r5
 800d6b2:	4bdd      	ldr	r3, [pc, #884]	; (800da28 <_dtoa_r+0x724>)
 800d6b4:	00d2      	lsls	r2, r2, #3
 800d6b6:	189b      	adds	r3, r3, r2
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	f7f3 febe 	bl	800143c <__aeabi_dmul>
 800d6c0:	2701      	movs	r7, #1
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	9008      	str	r0, [sp, #32]
 800d6c6:	9109      	str	r1, [sp, #36]	; 0x24
 800d6c8:	4ed8      	ldr	r6, [pc, #864]	; (800da2c <_dtoa_r+0x728>)
 800d6ca:	112d      	asrs	r5, r5, #4
 800d6cc:	2d00      	cmp	r5, #0
 800d6ce:	d000      	beq.n	800d6d2 <_dtoa_r+0x3ce>
 800d6d0:	e091      	b.n	800d7f6 <_dtoa_r+0x4f2>
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1a1      	bne.n	800d61a <_dtoa_r+0x316>
 800d6d6:	9e08      	ldr	r6, [sp, #32]
 800d6d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d6da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d100      	bne.n	800d6e2 <_dtoa_r+0x3de>
 800d6e0:	e094      	b.n	800d80c <_dtoa_r+0x508>
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	0030      	movs	r0, r6
 800d6e6:	0039      	movs	r1, r7
 800d6e8:	4bd1      	ldr	r3, [pc, #836]	; (800da30 <_dtoa_r+0x72c>)
 800d6ea:	f7f2 feb5 	bl	8000458 <__aeabi_dcmplt>
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d100      	bne.n	800d6f4 <_dtoa_r+0x3f0>
 800d6f2:	e08b      	b.n	800d80c <_dtoa_r+0x508>
 800d6f4:	9b07      	ldr	r3, [sp, #28]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d100      	bne.n	800d6fc <_dtoa_r+0x3f8>
 800d6fa:	e087      	b.n	800d80c <_dtoa_r+0x508>
 800d6fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	dd45      	ble.n	800d78e <_dtoa_r+0x48a>
 800d702:	9b03      	ldr	r3, [sp, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	3b01      	subs	r3, #1
 800d708:	930e      	str	r3, [sp, #56]	; 0x38
 800d70a:	0030      	movs	r0, r6
 800d70c:	4bc9      	ldr	r3, [pc, #804]	; (800da34 <_dtoa_r+0x730>)
 800d70e:	0039      	movs	r1, r7
 800d710:	f7f3 fe94 	bl	800143c <__aeabi_dmul>
 800d714:	9008      	str	r0, [sp, #32]
 800d716:	9109      	str	r1, [sp, #36]	; 0x24
 800d718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d71a:	3401      	adds	r4, #1
 800d71c:	0020      	movs	r0, r4
 800d71e:	9e08      	ldr	r6, [sp, #32]
 800d720:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d722:	9312      	str	r3, [sp, #72]	; 0x48
 800d724:	f7f4 fd22 	bl	800216c <__aeabi_i2d>
 800d728:	0032      	movs	r2, r6
 800d72a:	003b      	movs	r3, r7
 800d72c:	f7f3 fe86 	bl	800143c <__aeabi_dmul>
 800d730:	2200      	movs	r2, #0
 800d732:	4bc1      	ldr	r3, [pc, #772]	; (800da38 <_dtoa_r+0x734>)
 800d734:	f7f2 ff28 	bl	8000588 <__aeabi_dadd>
 800d738:	4ac0      	ldr	r2, [pc, #768]	; (800da3c <_dtoa_r+0x738>)
 800d73a:	9014      	str	r0, [sp, #80]	; 0x50
 800d73c:	9115      	str	r1, [sp, #84]	; 0x54
 800d73e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d740:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800d742:	4694      	mov	ip, r2
 800d744:	9308      	str	r3, [sp, #32]
 800d746:	9409      	str	r4, [sp, #36]	; 0x24
 800d748:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d74a:	4463      	add	r3, ip
 800d74c:	9318      	str	r3, [sp, #96]	; 0x60
 800d74e:	9309      	str	r3, [sp, #36]	; 0x24
 800d750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d752:	2b00      	cmp	r3, #0
 800d754:	d15e      	bne.n	800d814 <_dtoa_r+0x510>
 800d756:	2200      	movs	r2, #0
 800d758:	4bb9      	ldr	r3, [pc, #740]	; (800da40 <_dtoa_r+0x73c>)
 800d75a:	0030      	movs	r0, r6
 800d75c:	0039      	movs	r1, r7
 800d75e:	f7f4 f92f 	bl	80019c0 <__aeabi_dsub>
 800d762:	9a08      	ldr	r2, [sp, #32]
 800d764:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d766:	0004      	movs	r4, r0
 800d768:	000d      	movs	r5, r1
 800d76a:	f7f2 fe89 	bl	8000480 <__aeabi_dcmpgt>
 800d76e:	2800      	cmp	r0, #0
 800d770:	d000      	beq.n	800d774 <_dtoa_r+0x470>
 800d772:	e2b3      	b.n	800dcdc <_dtoa_r+0x9d8>
 800d774:	48b3      	ldr	r0, [pc, #716]	; (800da44 <_dtoa_r+0x740>)
 800d776:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d778:	4684      	mov	ip, r0
 800d77a:	4461      	add	r1, ip
 800d77c:	000b      	movs	r3, r1
 800d77e:	0020      	movs	r0, r4
 800d780:	0029      	movs	r1, r5
 800d782:	9a08      	ldr	r2, [sp, #32]
 800d784:	f7f2 fe68 	bl	8000458 <__aeabi_dcmplt>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d000      	beq.n	800d78e <_dtoa_r+0x48a>
 800d78c:	e2a3      	b.n	800dcd6 <_dtoa_r+0x9d2>
 800d78e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d790:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d792:	9308      	str	r3, [sp, #32]
 800d794:	9409      	str	r4, [sp, #36]	; 0x24
 800d796:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d798:	2b00      	cmp	r3, #0
 800d79a:	da00      	bge.n	800d79e <_dtoa_r+0x49a>
 800d79c:	e179      	b.n	800da92 <_dtoa_r+0x78e>
 800d79e:	9a03      	ldr	r2, [sp, #12]
 800d7a0:	2a0e      	cmp	r2, #14
 800d7a2:	dd00      	ble.n	800d7a6 <_dtoa_r+0x4a2>
 800d7a4:	e175      	b.n	800da92 <_dtoa_r+0x78e>
 800d7a6:	4ba0      	ldr	r3, [pc, #640]	; (800da28 <_dtoa_r+0x724>)
 800d7a8:	00d2      	lsls	r2, r2, #3
 800d7aa:	189b      	adds	r3, r3, r2
 800d7ac:	681e      	ldr	r6, [r3, #0]
 800d7ae:	685f      	ldr	r7, [r3, #4]
 800d7b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	db00      	blt.n	800d7b8 <_dtoa_r+0x4b4>
 800d7b6:	e0e5      	b.n	800d984 <_dtoa_r+0x680>
 800d7b8:	9b07      	ldr	r3, [sp, #28]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dd00      	ble.n	800d7c0 <_dtoa_r+0x4bc>
 800d7be:	e0e1      	b.n	800d984 <_dtoa_r+0x680>
 800d7c0:	d000      	beq.n	800d7c4 <_dtoa_r+0x4c0>
 800d7c2:	e288      	b.n	800dcd6 <_dtoa_r+0x9d2>
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	0030      	movs	r0, r6
 800d7c8:	0039      	movs	r1, r7
 800d7ca:	4b9d      	ldr	r3, [pc, #628]	; (800da40 <_dtoa_r+0x73c>)
 800d7cc:	f7f3 fe36 	bl	800143c <__aeabi_dmul>
 800d7d0:	9a08      	ldr	r2, [sp, #32]
 800d7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d4:	f7f2 fe5e 	bl	8000494 <__aeabi_dcmpge>
 800d7d8:	9e07      	ldr	r6, [sp, #28]
 800d7da:	0037      	movs	r7, r6
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d000      	beq.n	800d7e2 <_dtoa_r+0x4de>
 800d7e0:	e25f      	b.n	800dca2 <_dtoa_r+0x99e>
 800d7e2:	9b06      	ldr	r3, [sp, #24]
 800d7e4:	9a06      	ldr	r2, [sp, #24]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	9308      	str	r3, [sp, #32]
 800d7ea:	2331      	movs	r3, #49	; 0x31
 800d7ec:	7013      	strb	r3, [r2, #0]
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	9303      	str	r3, [sp, #12]
 800d7f4:	e25a      	b.n	800dcac <_dtoa_r+0x9a8>
 800d7f6:	423d      	tst	r5, r7
 800d7f8:	d005      	beq.n	800d806 <_dtoa_r+0x502>
 800d7fa:	6832      	ldr	r2, [r6, #0]
 800d7fc:	6873      	ldr	r3, [r6, #4]
 800d7fe:	f7f3 fe1d 	bl	800143c <__aeabi_dmul>
 800d802:	003b      	movs	r3, r7
 800d804:	3401      	adds	r4, #1
 800d806:	106d      	asrs	r5, r5, #1
 800d808:	3608      	adds	r6, #8
 800d80a:	e75f      	b.n	800d6cc <_dtoa_r+0x3c8>
 800d80c:	9b03      	ldr	r3, [sp, #12]
 800d80e:	930e      	str	r3, [sp, #56]	; 0x38
 800d810:	9b07      	ldr	r3, [sp, #28]
 800d812:	e783      	b.n	800d71c <_dtoa_r+0x418>
 800d814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d816:	4b84      	ldr	r3, [pc, #528]	; (800da28 <_dtoa_r+0x724>)
 800d818:	3a01      	subs	r2, #1
 800d81a:	00d2      	lsls	r2, r2, #3
 800d81c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d81e:	189b      	adds	r3, r3, r2
 800d820:	9c08      	ldr	r4, [sp, #32]
 800d822:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	2900      	cmp	r1, #0
 800d82a:	d051      	beq.n	800d8d0 <_dtoa_r+0x5cc>
 800d82c:	2000      	movs	r0, #0
 800d82e:	4986      	ldr	r1, [pc, #536]	; (800da48 <_dtoa_r+0x744>)
 800d830:	f7f3 fa0a 	bl	8000c48 <__aeabi_ddiv>
 800d834:	0022      	movs	r2, r4
 800d836:	002b      	movs	r3, r5
 800d838:	f7f4 f8c2 	bl	80019c0 <__aeabi_dsub>
 800d83c:	9a06      	ldr	r2, [sp, #24]
 800d83e:	0004      	movs	r4, r0
 800d840:	4694      	mov	ip, r2
 800d842:	000d      	movs	r5, r1
 800d844:	9b06      	ldr	r3, [sp, #24]
 800d846:	9314      	str	r3, [sp, #80]	; 0x50
 800d848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d84a:	4463      	add	r3, ip
 800d84c:	9318      	str	r3, [sp, #96]	; 0x60
 800d84e:	0039      	movs	r1, r7
 800d850:	0030      	movs	r0, r6
 800d852:	f7f4 fc55 	bl	8002100 <__aeabi_d2iz>
 800d856:	9012      	str	r0, [sp, #72]	; 0x48
 800d858:	f7f4 fc88 	bl	800216c <__aeabi_i2d>
 800d85c:	0002      	movs	r2, r0
 800d85e:	000b      	movs	r3, r1
 800d860:	0030      	movs	r0, r6
 800d862:	0039      	movs	r1, r7
 800d864:	f7f4 f8ac 	bl	80019c0 <__aeabi_dsub>
 800d868:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d86a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d86c:	3301      	adds	r3, #1
 800d86e:	9308      	str	r3, [sp, #32]
 800d870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d872:	0006      	movs	r6, r0
 800d874:	3330      	adds	r3, #48	; 0x30
 800d876:	7013      	strb	r3, [r2, #0]
 800d878:	0022      	movs	r2, r4
 800d87a:	002b      	movs	r3, r5
 800d87c:	000f      	movs	r7, r1
 800d87e:	f7f2 fdeb 	bl	8000458 <__aeabi_dcmplt>
 800d882:	2800      	cmp	r0, #0
 800d884:	d174      	bne.n	800d970 <_dtoa_r+0x66c>
 800d886:	0032      	movs	r2, r6
 800d888:	003b      	movs	r3, r7
 800d88a:	2000      	movs	r0, #0
 800d88c:	4968      	ldr	r1, [pc, #416]	; (800da30 <_dtoa_r+0x72c>)
 800d88e:	f7f4 f897 	bl	80019c0 <__aeabi_dsub>
 800d892:	0022      	movs	r2, r4
 800d894:	002b      	movs	r3, r5
 800d896:	f7f2 fddf 	bl	8000458 <__aeabi_dcmplt>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d000      	beq.n	800d8a0 <_dtoa_r+0x59c>
 800d89e:	e0d7      	b.n	800da50 <_dtoa_r+0x74c>
 800d8a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d8a2:	9a08      	ldr	r2, [sp, #32]
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d100      	bne.n	800d8aa <_dtoa_r+0x5a6>
 800d8a8:	e771      	b.n	800d78e <_dtoa_r+0x48a>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	0020      	movs	r0, r4
 800d8ae:	0029      	movs	r1, r5
 800d8b0:	4b60      	ldr	r3, [pc, #384]	; (800da34 <_dtoa_r+0x730>)
 800d8b2:	f7f3 fdc3 	bl	800143c <__aeabi_dmul>
 800d8b6:	4b5f      	ldr	r3, [pc, #380]	; (800da34 <_dtoa_r+0x730>)
 800d8b8:	0004      	movs	r4, r0
 800d8ba:	000d      	movs	r5, r1
 800d8bc:	0030      	movs	r0, r6
 800d8be:	0039      	movs	r1, r7
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f7f3 fdbb 	bl	800143c <__aeabi_dmul>
 800d8c6:	9b08      	ldr	r3, [sp, #32]
 800d8c8:	0006      	movs	r6, r0
 800d8ca:	000f      	movs	r7, r1
 800d8cc:	9314      	str	r3, [sp, #80]	; 0x50
 800d8ce:	e7be      	b.n	800d84e <_dtoa_r+0x54a>
 800d8d0:	0020      	movs	r0, r4
 800d8d2:	0029      	movs	r1, r5
 800d8d4:	f7f3 fdb2 	bl	800143c <__aeabi_dmul>
 800d8d8:	9a06      	ldr	r2, [sp, #24]
 800d8da:	9b06      	ldr	r3, [sp, #24]
 800d8dc:	4694      	mov	ip, r2
 800d8de:	9308      	str	r3, [sp, #32]
 800d8e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d8e2:	9014      	str	r0, [sp, #80]	; 0x50
 800d8e4:	9115      	str	r1, [sp, #84]	; 0x54
 800d8e6:	4463      	add	r3, ip
 800d8e8:	9319      	str	r3, [sp, #100]	; 0x64
 800d8ea:	0030      	movs	r0, r6
 800d8ec:	0039      	movs	r1, r7
 800d8ee:	f7f4 fc07 	bl	8002100 <__aeabi_d2iz>
 800d8f2:	9018      	str	r0, [sp, #96]	; 0x60
 800d8f4:	f7f4 fc3a 	bl	800216c <__aeabi_i2d>
 800d8f8:	0002      	movs	r2, r0
 800d8fa:	000b      	movs	r3, r1
 800d8fc:	0030      	movs	r0, r6
 800d8fe:	0039      	movs	r1, r7
 800d900:	f7f4 f85e 	bl	80019c0 <__aeabi_dsub>
 800d904:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d906:	9b08      	ldr	r3, [sp, #32]
 800d908:	3630      	adds	r6, #48	; 0x30
 800d90a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d90c:	701e      	strb	r6, [r3, #0]
 800d90e:	3301      	adds	r3, #1
 800d910:	0004      	movs	r4, r0
 800d912:	000d      	movs	r5, r1
 800d914:	9308      	str	r3, [sp, #32]
 800d916:	4293      	cmp	r3, r2
 800d918:	d12d      	bne.n	800d976 <_dtoa_r+0x672>
 800d91a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d91c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d91e:	9a06      	ldr	r2, [sp, #24]
 800d920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d922:	4694      	mov	ip, r2
 800d924:	4463      	add	r3, ip
 800d926:	2200      	movs	r2, #0
 800d928:	9308      	str	r3, [sp, #32]
 800d92a:	4b47      	ldr	r3, [pc, #284]	; (800da48 <_dtoa_r+0x744>)
 800d92c:	f7f2 fe2c 	bl	8000588 <__aeabi_dadd>
 800d930:	0002      	movs	r2, r0
 800d932:	000b      	movs	r3, r1
 800d934:	0020      	movs	r0, r4
 800d936:	0029      	movs	r1, r5
 800d938:	f7f2 fda2 	bl	8000480 <__aeabi_dcmpgt>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d000      	beq.n	800d942 <_dtoa_r+0x63e>
 800d940:	e086      	b.n	800da50 <_dtoa_r+0x74c>
 800d942:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d946:	2000      	movs	r0, #0
 800d948:	493f      	ldr	r1, [pc, #252]	; (800da48 <_dtoa_r+0x744>)
 800d94a:	f7f4 f839 	bl	80019c0 <__aeabi_dsub>
 800d94e:	0002      	movs	r2, r0
 800d950:	000b      	movs	r3, r1
 800d952:	0020      	movs	r0, r4
 800d954:	0029      	movs	r1, r5
 800d956:	f7f2 fd7f 	bl	8000458 <__aeabi_dcmplt>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	d100      	bne.n	800d960 <_dtoa_r+0x65c>
 800d95e:	e716      	b.n	800d78e <_dtoa_r+0x48a>
 800d960:	9b08      	ldr	r3, [sp, #32]
 800d962:	001a      	movs	r2, r3
 800d964:	3a01      	subs	r2, #1
 800d966:	9208      	str	r2, [sp, #32]
 800d968:	7812      	ldrb	r2, [r2, #0]
 800d96a:	2a30      	cmp	r2, #48	; 0x30
 800d96c:	d0f8      	beq.n	800d960 <_dtoa_r+0x65c>
 800d96e:	9308      	str	r3, [sp, #32]
 800d970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d972:	9303      	str	r3, [sp, #12]
 800d974:	e046      	b.n	800da04 <_dtoa_r+0x700>
 800d976:	2200      	movs	r2, #0
 800d978:	4b2e      	ldr	r3, [pc, #184]	; (800da34 <_dtoa_r+0x730>)
 800d97a:	f7f3 fd5f 	bl	800143c <__aeabi_dmul>
 800d97e:	0006      	movs	r6, r0
 800d980:	000f      	movs	r7, r1
 800d982:	e7b2      	b.n	800d8ea <_dtoa_r+0x5e6>
 800d984:	9b06      	ldr	r3, [sp, #24]
 800d986:	9a06      	ldr	r2, [sp, #24]
 800d988:	930a      	str	r3, [sp, #40]	; 0x28
 800d98a:	9b07      	ldr	r3, [sp, #28]
 800d98c:	9c08      	ldr	r4, [sp, #32]
 800d98e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d990:	3b01      	subs	r3, #1
 800d992:	189b      	adds	r3, r3, r2
 800d994:	930b      	str	r3, [sp, #44]	; 0x2c
 800d996:	0032      	movs	r2, r6
 800d998:	003b      	movs	r3, r7
 800d99a:	0020      	movs	r0, r4
 800d99c:	0029      	movs	r1, r5
 800d99e:	f7f3 f953 	bl	8000c48 <__aeabi_ddiv>
 800d9a2:	f7f4 fbad 	bl	8002100 <__aeabi_d2iz>
 800d9a6:	9007      	str	r0, [sp, #28]
 800d9a8:	f7f4 fbe0 	bl	800216c <__aeabi_i2d>
 800d9ac:	0032      	movs	r2, r6
 800d9ae:	003b      	movs	r3, r7
 800d9b0:	f7f3 fd44 	bl	800143c <__aeabi_dmul>
 800d9b4:	0002      	movs	r2, r0
 800d9b6:	000b      	movs	r3, r1
 800d9b8:	0020      	movs	r0, r4
 800d9ba:	0029      	movs	r1, r5
 800d9bc:	f7f4 f800 	bl	80019c0 <__aeabi_dsub>
 800d9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9c2:	001a      	movs	r2, r3
 800d9c4:	3201      	adds	r2, #1
 800d9c6:	920a      	str	r2, [sp, #40]	; 0x28
 800d9c8:	9208      	str	r2, [sp, #32]
 800d9ca:	9a07      	ldr	r2, [sp, #28]
 800d9cc:	3230      	adds	r2, #48	; 0x30
 800d9ce:	701a      	strb	r2, [r3, #0]
 800d9d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d14f      	bne.n	800da76 <_dtoa_r+0x772>
 800d9d6:	0002      	movs	r2, r0
 800d9d8:	000b      	movs	r3, r1
 800d9da:	f7f2 fdd5 	bl	8000588 <__aeabi_dadd>
 800d9de:	0032      	movs	r2, r6
 800d9e0:	003b      	movs	r3, r7
 800d9e2:	0004      	movs	r4, r0
 800d9e4:	000d      	movs	r5, r1
 800d9e6:	f7f2 fd4b 	bl	8000480 <__aeabi_dcmpgt>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d12e      	bne.n	800da4c <_dtoa_r+0x748>
 800d9ee:	0032      	movs	r2, r6
 800d9f0:	003b      	movs	r3, r7
 800d9f2:	0020      	movs	r0, r4
 800d9f4:	0029      	movs	r1, r5
 800d9f6:	f7f2 fd29 	bl	800044c <__aeabi_dcmpeq>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d002      	beq.n	800da04 <_dtoa_r+0x700>
 800d9fe:	9b07      	ldr	r3, [sp, #28]
 800da00:	07de      	lsls	r6, r3, #31
 800da02:	d423      	bmi.n	800da4c <_dtoa_r+0x748>
 800da04:	9905      	ldr	r1, [sp, #20]
 800da06:	9804      	ldr	r0, [sp, #16]
 800da08:	f000 fbd6 	bl	800e1b8 <_Bfree>
 800da0c:	2300      	movs	r3, #0
 800da0e:	9a08      	ldr	r2, [sp, #32]
 800da10:	7013      	strb	r3, [r2, #0]
 800da12:	9b03      	ldr	r3, [sp, #12]
 800da14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800da16:	3301      	adds	r3, #1
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d100      	bne.n	800da22 <_dtoa_r+0x71e>
 800da20:	e4ba      	b.n	800d398 <_dtoa_r+0x94>
 800da22:	9a08      	ldr	r2, [sp, #32]
 800da24:	601a      	str	r2, [r3, #0]
 800da26:	e4b7      	b.n	800d398 <_dtoa_r+0x94>
 800da28:	08010f30 	.word	0x08010f30
 800da2c:	08010f08 	.word	0x08010f08
 800da30:	3ff00000 	.word	0x3ff00000
 800da34:	40240000 	.word	0x40240000
 800da38:	401c0000 	.word	0x401c0000
 800da3c:	fcc00000 	.word	0xfcc00000
 800da40:	40140000 	.word	0x40140000
 800da44:	7cc00000 	.word	0x7cc00000
 800da48:	3fe00000 	.word	0x3fe00000
 800da4c:	9b03      	ldr	r3, [sp, #12]
 800da4e:	930e      	str	r3, [sp, #56]	; 0x38
 800da50:	9b08      	ldr	r3, [sp, #32]
 800da52:	9308      	str	r3, [sp, #32]
 800da54:	3b01      	subs	r3, #1
 800da56:	781a      	ldrb	r2, [r3, #0]
 800da58:	2a39      	cmp	r2, #57	; 0x39
 800da5a:	d108      	bne.n	800da6e <_dtoa_r+0x76a>
 800da5c:	9a06      	ldr	r2, [sp, #24]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d1f7      	bne.n	800da52 <_dtoa_r+0x74e>
 800da62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da64:	9906      	ldr	r1, [sp, #24]
 800da66:	3201      	adds	r2, #1
 800da68:	920e      	str	r2, [sp, #56]	; 0x38
 800da6a:	2230      	movs	r2, #48	; 0x30
 800da6c:	700a      	strb	r2, [r1, #0]
 800da6e:	781a      	ldrb	r2, [r3, #0]
 800da70:	3201      	adds	r2, #1
 800da72:	701a      	strb	r2, [r3, #0]
 800da74:	e77c      	b.n	800d970 <_dtoa_r+0x66c>
 800da76:	2200      	movs	r2, #0
 800da78:	4ba9      	ldr	r3, [pc, #676]	; (800dd20 <_dtoa_r+0xa1c>)
 800da7a:	f7f3 fcdf 	bl	800143c <__aeabi_dmul>
 800da7e:	2200      	movs	r2, #0
 800da80:	2300      	movs	r3, #0
 800da82:	0004      	movs	r4, r0
 800da84:	000d      	movs	r5, r1
 800da86:	f7f2 fce1 	bl	800044c <__aeabi_dcmpeq>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d100      	bne.n	800da90 <_dtoa_r+0x78c>
 800da8e:	e782      	b.n	800d996 <_dtoa_r+0x692>
 800da90:	e7b8      	b.n	800da04 <_dtoa_r+0x700>
 800da92:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800da94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800da96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800da98:	2f00      	cmp	r7, #0
 800da9a:	d012      	beq.n	800dac2 <_dtoa_r+0x7be>
 800da9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800da9e:	2a01      	cmp	r2, #1
 800daa0:	dc6e      	bgt.n	800db80 <_dtoa_r+0x87c>
 800daa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800daa4:	2a00      	cmp	r2, #0
 800daa6:	d065      	beq.n	800db74 <_dtoa_r+0x870>
 800daa8:	4a9e      	ldr	r2, [pc, #632]	; (800dd24 <_dtoa_r+0xa20>)
 800daaa:	189b      	adds	r3, r3, r2
 800daac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daae:	2101      	movs	r1, #1
 800dab0:	18d2      	adds	r2, r2, r3
 800dab2:	920a      	str	r2, [sp, #40]	; 0x28
 800dab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dab6:	9804      	ldr	r0, [sp, #16]
 800dab8:	18d3      	adds	r3, r2, r3
 800daba:	930c      	str	r3, [sp, #48]	; 0x30
 800dabc:	f000 fc78 	bl	800e3b0 <__i2b>
 800dac0:	0007      	movs	r7, r0
 800dac2:	2c00      	cmp	r4, #0
 800dac4:	d00e      	beq.n	800dae4 <_dtoa_r+0x7e0>
 800dac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dd0b      	ble.n	800dae4 <_dtoa_r+0x7e0>
 800dacc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dace:	0023      	movs	r3, r4
 800dad0:	4294      	cmp	r4, r2
 800dad2:	dd00      	ble.n	800dad6 <_dtoa_r+0x7d2>
 800dad4:	0013      	movs	r3, r2
 800dad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dad8:	1ae4      	subs	r4, r4, r3
 800dada:	1ad2      	subs	r2, r2, r3
 800dadc:	920a      	str	r2, [sp, #40]	; 0x28
 800dade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	930c      	str	r3, [sp, #48]	; 0x30
 800dae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d01e      	beq.n	800db28 <_dtoa_r+0x824>
 800daea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daec:	2b00      	cmp	r3, #0
 800daee:	d05c      	beq.n	800dbaa <_dtoa_r+0x8a6>
 800daf0:	2d00      	cmp	r5, #0
 800daf2:	dd10      	ble.n	800db16 <_dtoa_r+0x812>
 800daf4:	0039      	movs	r1, r7
 800daf6:	002a      	movs	r2, r5
 800daf8:	9804      	ldr	r0, [sp, #16]
 800dafa:	f000 fd21 	bl	800e540 <__pow5mult>
 800dafe:	9a05      	ldr	r2, [sp, #20]
 800db00:	0001      	movs	r1, r0
 800db02:	0007      	movs	r7, r0
 800db04:	9804      	ldr	r0, [sp, #16]
 800db06:	f000 fc6b 	bl	800e3e0 <__multiply>
 800db0a:	0006      	movs	r6, r0
 800db0c:	9905      	ldr	r1, [sp, #20]
 800db0e:	9804      	ldr	r0, [sp, #16]
 800db10:	f000 fb52 	bl	800e1b8 <_Bfree>
 800db14:	9605      	str	r6, [sp, #20]
 800db16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db18:	1b5a      	subs	r2, r3, r5
 800db1a:	42ab      	cmp	r3, r5
 800db1c:	d004      	beq.n	800db28 <_dtoa_r+0x824>
 800db1e:	9905      	ldr	r1, [sp, #20]
 800db20:	9804      	ldr	r0, [sp, #16]
 800db22:	f000 fd0d 	bl	800e540 <__pow5mult>
 800db26:	9005      	str	r0, [sp, #20]
 800db28:	2101      	movs	r1, #1
 800db2a:	9804      	ldr	r0, [sp, #16]
 800db2c:	f000 fc40 	bl	800e3b0 <__i2b>
 800db30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db32:	0006      	movs	r6, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	dd3a      	ble.n	800dbae <_dtoa_r+0x8aa>
 800db38:	001a      	movs	r2, r3
 800db3a:	0001      	movs	r1, r0
 800db3c:	9804      	ldr	r0, [sp, #16]
 800db3e:	f000 fcff 	bl	800e540 <__pow5mult>
 800db42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db44:	0006      	movs	r6, r0
 800db46:	2500      	movs	r5, #0
 800db48:	2b01      	cmp	r3, #1
 800db4a:	dc38      	bgt.n	800dbbe <_dtoa_r+0x8ba>
 800db4c:	2500      	movs	r5, #0
 800db4e:	9b08      	ldr	r3, [sp, #32]
 800db50:	42ab      	cmp	r3, r5
 800db52:	d130      	bne.n	800dbb6 <_dtoa_r+0x8b2>
 800db54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db56:	031b      	lsls	r3, r3, #12
 800db58:	42ab      	cmp	r3, r5
 800db5a:	d12c      	bne.n	800dbb6 <_dtoa_r+0x8b2>
 800db5c:	4b72      	ldr	r3, [pc, #456]	; (800dd28 <_dtoa_r+0xa24>)
 800db5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db60:	4213      	tst	r3, r2
 800db62:	d028      	beq.n	800dbb6 <_dtoa_r+0x8b2>
 800db64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db66:	3501      	adds	r5, #1
 800db68:	3301      	adds	r3, #1
 800db6a:	930a      	str	r3, [sp, #40]	; 0x28
 800db6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db6e:	3301      	adds	r3, #1
 800db70:	930c      	str	r3, [sp, #48]	; 0x30
 800db72:	e020      	b.n	800dbb6 <_dtoa_r+0x8b2>
 800db74:	2336      	movs	r3, #54	; 0x36
 800db76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800db78:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800db7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800db7c:	1a9b      	subs	r3, r3, r2
 800db7e:	e795      	b.n	800daac <_dtoa_r+0x7a8>
 800db80:	9b07      	ldr	r3, [sp, #28]
 800db82:	1e5d      	subs	r5, r3, #1
 800db84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db86:	42ab      	cmp	r3, r5
 800db88:	db07      	blt.n	800db9a <_dtoa_r+0x896>
 800db8a:	1b5d      	subs	r5, r3, r5
 800db8c:	9b07      	ldr	r3, [sp, #28]
 800db8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800db90:	2b00      	cmp	r3, #0
 800db92:	da8b      	bge.n	800daac <_dtoa_r+0x7a8>
 800db94:	1ae4      	subs	r4, r4, r3
 800db96:	2300      	movs	r3, #0
 800db98:	e788      	b.n	800daac <_dtoa_r+0x7a8>
 800db9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800db9e:	1aeb      	subs	r3, r5, r3
 800dba0:	18d3      	adds	r3, r2, r3
 800dba2:	950d      	str	r5, [sp, #52]	; 0x34
 800dba4:	9313      	str	r3, [sp, #76]	; 0x4c
 800dba6:	2500      	movs	r5, #0
 800dba8:	e7f0      	b.n	800db8c <_dtoa_r+0x888>
 800dbaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbac:	e7b7      	b.n	800db1e <_dtoa_r+0x81a>
 800dbae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dbb0:	2500      	movs	r5, #0
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	ddca      	ble.n	800db4c <_dtoa_r+0x848>
 800dbb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dbb8:	2001      	movs	r0, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d008      	beq.n	800dbd0 <_dtoa_r+0x8cc>
 800dbbe:	6933      	ldr	r3, [r6, #16]
 800dbc0:	3303      	adds	r3, #3
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	18f3      	adds	r3, r6, r3
 800dbc6:	6858      	ldr	r0, [r3, #4]
 800dbc8:	f000 fbaa 	bl	800e320 <__hi0bits>
 800dbcc:	2320      	movs	r3, #32
 800dbce:	1a18      	subs	r0, r3, r0
 800dbd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbd2:	1818      	adds	r0, r3, r0
 800dbd4:	0002      	movs	r2, r0
 800dbd6:	231f      	movs	r3, #31
 800dbd8:	401a      	ands	r2, r3
 800dbda:	4218      	tst	r0, r3
 800dbdc:	d047      	beq.n	800dc6e <_dtoa_r+0x96a>
 800dbde:	3301      	adds	r3, #1
 800dbe0:	1a9b      	subs	r3, r3, r2
 800dbe2:	2b04      	cmp	r3, #4
 800dbe4:	dd3f      	ble.n	800dc66 <_dtoa_r+0x962>
 800dbe6:	231c      	movs	r3, #28
 800dbe8:	1a9b      	subs	r3, r3, r2
 800dbea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbec:	18e4      	adds	r4, r4, r3
 800dbee:	18d2      	adds	r2, r2, r3
 800dbf0:	920a      	str	r2, [sp, #40]	; 0x28
 800dbf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbf4:	18d3      	adds	r3, r2, r3
 800dbf6:	930c      	str	r3, [sp, #48]	; 0x30
 800dbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	dd05      	ble.n	800dc0a <_dtoa_r+0x906>
 800dbfe:	001a      	movs	r2, r3
 800dc00:	9905      	ldr	r1, [sp, #20]
 800dc02:	9804      	ldr	r0, [sp, #16]
 800dc04:	f000 fcf8 	bl	800e5f8 <__lshift>
 800dc08:	9005      	str	r0, [sp, #20]
 800dc0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dd05      	ble.n	800dc1c <_dtoa_r+0x918>
 800dc10:	0031      	movs	r1, r6
 800dc12:	001a      	movs	r2, r3
 800dc14:	9804      	ldr	r0, [sp, #16]
 800dc16:	f000 fcef 	bl	800e5f8 <__lshift>
 800dc1a:	0006      	movs	r6, r0
 800dc1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d027      	beq.n	800dc72 <_dtoa_r+0x96e>
 800dc22:	0031      	movs	r1, r6
 800dc24:	9805      	ldr	r0, [sp, #20]
 800dc26:	f000 fd55 	bl	800e6d4 <__mcmp>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	da21      	bge.n	800dc72 <_dtoa_r+0x96e>
 800dc2e:	9b03      	ldr	r3, [sp, #12]
 800dc30:	220a      	movs	r2, #10
 800dc32:	3b01      	subs	r3, #1
 800dc34:	9303      	str	r3, [sp, #12]
 800dc36:	9905      	ldr	r1, [sp, #20]
 800dc38:	2300      	movs	r3, #0
 800dc3a:	9804      	ldr	r0, [sp, #16]
 800dc3c:	f000 fae0 	bl	800e200 <__multadd>
 800dc40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc42:	9005      	str	r0, [sp, #20]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d100      	bne.n	800dc4a <_dtoa_r+0x946>
 800dc48:	e15d      	b.n	800df06 <_dtoa_r+0xc02>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	0039      	movs	r1, r7
 800dc4e:	220a      	movs	r2, #10
 800dc50:	9804      	ldr	r0, [sp, #16]
 800dc52:	f000 fad5 	bl	800e200 <__multadd>
 800dc56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc58:	0007      	movs	r7, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	dc49      	bgt.n	800dcf2 <_dtoa_r+0x9ee>
 800dc5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	dc0e      	bgt.n	800dc82 <_dtoa_r+0x97e>
 800dc64:	e045      	b.n	800dcf2 <_dtoa_r+0x9ee>
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d0c6      	beq.n	800dbf8 <_dtoa_r+0x8f4>
 800dc6a:	331c      	adds	r3, #28
 800dc6c:	e7bd      	b.n	800dbea <_dtoa_r+0x8e6>
 800dc6e:	0013      	movs	r3, r2
 800dc70:	e7fb      	b.n	800dc6a <_dtoa_r+0x966>
 800dc72:	9b07      	ldr	r3, [sp, #28]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	dc36      	bgt.n	800dce6 <_dtoa_r+0x9e2>
 800dc78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	dd33      	ble.n	800dce6 <_dtoa_r+0x9e2>
 800dc7e:	9b07      	ldr	r3, [sp, #28]
 800dc80:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10c      	bne.n	800dca2 <_dtoa_r+0x99e>
 800dc88:	0031      	movs	r1, r6
 800dc8a:	2205      	movs	r2, #5
 800dc8c:	9804      	ldr	r0, [sp, #16]
 800dc8e:	f000 fab7 	bl	800e200 <__multadd>
 800dc92:	0006      	movs	r6, r0
 800dc94:	0001      	movs	r1, r0
 800dc96:	9805      	ldr	r0, [sp, #20]
 800dc98:	f000 fd1c 	bl	800e6d4 <__mcmp>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	dd00      	ble.n	800dca2 <_dtoa_r+0x99e>
 800dca0:	e59f      	b.n	800d7e2 <_dtoa_r+0x4de>
 800dca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dca4:	43db      	mvns	r3, r3
 800dca6:	9303      	str	r3, [sp, #12]
 800dca8:	9b06      	ldr	r3, [sp, #24]
 800dcaa:	9308      	str	r3, [sp, #32]
 800dcac:	2500      	movs	r5, #0
 800dcae:	0031      	movs	r1, r6
 800dcb0:	9804      	ldr	r0, [sp, #16]
 800dcb2:	f000 fa81 	bl	800e1b8 <_Bfree>
 800dcb6:	2f00      	cmp	r7, #0
 800dcb8:	d100      	bne.n	800dcbc <_dtoa_r+0x9b8>
 800dcba:	e6a3      	b.n	800da04 <_dtoa_r+0x700>
 800dcbc:	2d00      	cmp	r5, #0
 800dcbe:	d005      	beq.n	800dccc <_dtoa_r+0x9c8>
 800dcc0:	42bd      	cmp	r5, r7
 800dcc2:	d003      	beq.n	800dccc <_dtoa_r+0x9c8>
 800dcc4:	0029      	movs	r1, r5
 800dcc6:	9804      	ldr	r0, [sp, #16]
 800dcc8:	f000 fa76 	bl	800e1b8 <_Bfree>
 800dccc:	0039      	movs	r1, r7
 800dcce:	9804      	ldr	r0, [sp, #16]
 800dcd0:	f000 fa72 	bl	800e1b8 <_Bfree>
 800dcd4:	e696      	b.n	800da04 <_dtoa_r+0x700>
 800dcd6:	2600      	movs	r6, #0
 800dcd8:	0037      	movs	r7, r6
 800dcda:	e7e2      	b.n	800dca2 <_dtoa_r+0x99e>
 800dcdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcde:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800dce0:	9303      	str	r3, [sp, #12]
 800dce2:	0037      	movs	r7, r6
 800dce4:	e57d      	b.n	800d7e2 <_dtoa_r+0x4de>
 800dce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d100      	bne.n	800dcee <_dtoa_r+0x9ea>
 800dcec:	e0c3      	b.n	800de76 <_dtoa_r+0xb72>
 800dcee:	9b07      	ldr	r3, [sp, #28]
 800dcf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcf2:	2c00      	cmp	r4, #0
 800dcf4:	dd05      	ble.n	800dd02 <_dtoa_r+0x9fe>
 800dcf6:	0039      	movs	r1, r7
 800dcf8:	0022      	movs	r2, r4
 800dcfa:	9804      	ldr	r0, [sp, #16]
 800dcfc:	f000 fc7c 	bl	800e5f8 <__lshift>
 800dd00:	0007      	movs	r7, r0
 800dd02:	0038      	movs	r0, r7
 800dd04:	2d00      	cmp	r5, #0
 800dd06:	d024      	beq.n	800dd52 <_dtoa_r+0xa4e>
 800dd08:	6879      	ldr	r1, [r7, #4]
 800dd0a:	9804      	ldr	r0, [sp, #16]
 800dd0c:	f000 fa10 	bl	800e130 <_Balloc>
 800dd10:	1e04      	subs	r4, r0, #0
 800dd12:	d111      	bne.n	800dd38 <_dtoa_r+0xa34>
 800dd14:	0022      	movs	r2, r4
 800dd16:	4b05      	ldr	r3, [pc, #20]	; (800dd2c <_dtoa_r+0xa28>)
 800dd18:	4805      	ldr	r0, [pc, #20]	; (800dd30 <_dtoa_r+0xa2c>)
 800dd1a:	4906      	ldr	r1, [pc, #24]	; (800dd34 <_dtoa_r+0xa30>)
 800dd1c:	f7ff fb07 	bl	800d32e <_dtoa_r+0x2a>
 800dd20:	40240000 	.word	0x40240000
 800dd24:	00000433 	.word	0x00000433
 800dd28:	7ff00000 	.word	0x7ff00000
 800dd2c:	08010e9d 	.word	0x08010e9d
 800dd30:	08010e45 	.word	0x08010e45
 800dd34:	000002ef 	.word	0x000002ef
 800dd38:	0039      	movs	r1, r7
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	310c      	adds	r1, #12
 800dd3e:	3202      	adds	r2, #2
 800dd40:	0092      	lsls	r2, r2, #2
 800dd42:	300c      	adds	r0, #12
 800dd44:	f7ff fa40 	bl	800d1c8 <memcpy>
 800dd48:	2201      	movs	r2, #1
 800dd4a:	0021      	movs	r1, r4
 800dd4c:	9804      	ldr	r0, [sp, #16]
 800dd4e:	f000 fc53 	bl	800e5f8 <__lshift>
 800dd52:	9b06      	ldr	r3, [sp, #24]
 800dd54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd56:	9307      	str	r3, [sp, #28]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	189b      	adds	r3, r3, r2
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	003d      	movs	r5, r7
 800dd60:	0007      	movs	r7, r0
 800dd62:	930e      	str	r3, [sp, #56]	; 0x38
 800dd64:	9b08      	ldr	r3, [sp, #32]
 800dd66:	4013      	ands	r3, r2
 800dd68:	930d      	str	r3, [sp, #52]	; 0x34
 800dd6a:	0031      	movs	r1, r6
 800dd6c:	9805      	ldr	r0, [sp, #20]
 800dd6e:	f7ff fa39 	bl	800d1e4 <quorem>
 800dd72:	0029      	movs	r1, r5
 800dd74:	0004      	movs	r4, r0
 800dd76:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd78:	9805      	ldr	r0, [sp, #20]
 800dd7a:	f000 fcab 	bl	800e6d4 <__mcmp>
 800dd7e:	003a      	movs	r2, r7
 800dd80:	900c      	str	r0, [sp, #48]	; 0x30
 800dd82:	0031      	movs	r1, r6
 800dd84:	9804      	ldr	r0, [sp, #16]
 800dd86:	f000 fcc1 	bl	800e70c <__mdiff>
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	68c3      	ldr	r3, [r0, #12]
 800dd8e:	3430      	adds	r4, #48	; 0x30
 800dd90:	9008      	str	r0, [sp, #32]
 800dd92:	920a      	str	r2, [sp, #40]	; 0x28
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d104      	bne.n	800dda2 <_dtoa_r+0xa9e>
 800dd98:	0001      	movs	r1, r0
 800dd9a:	9805      	ldr	r0, [sp, #20]
 800dd9c:	f000 fc9a 	bl	800e6d4 <__mcmp>
 800dda0:	900a      	str	r0, [sp, #40]	; 0x28
 800dda2:	9908      	ldr	r1, [sp, #32]
 800dda4:	9804      	ldr	r0, [sp, #16]
 800dda6:	f000 fa07 	bl	800e1b8 <_Bfree>
 800ddaa:	9b07      	ldr	r3, [sp, #28]
 800ddac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddae:	3301      	adds	r3, #1
 800ddb0:	9308      	str	r3, [sp, #32]
 800ddb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	d109      	bne.n	800ddd0 <_dtoa_r+0xacc>
 800ddbc:	2c39      	cmp	r4, #57	; 0x39
 800ddbe:	d022      	beq.n	800de06 <_dtoa_r+0xb02>
 800ddc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	dd01      	ble.n	800ddca <_dtoa_r+0xac6>
 800ddc6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ddc8:	3431      	adds	r4, #49	; 0x31
 800ddca:	9b07      	ldr	r3, [sp, #28]
 800ddcc:	701c      	strb	r4, [r3, #0]
 800ddce:	e76e      	b.n	800dcae <_dtoa_r+0x9aa>
 800ddd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	db04      	blt.n	800dde0 <_dtoa_r+0xadc>
 800ddd6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dddc:	4313      	orrs	r3, r2
 800ddde:	d11e      	bne.n	800de1e <_dtoa_r+0xb1a>
 800dde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	ddf1      	ble.n	800ddca <_dtoa_r+0xac6>
 800dde6:	9905      	ldr	r1, [sp, #20]
 800dde8:	2201      	movs	r2, #1
 800ddea:	9804      	ldr	r0, [sp, #16]
 800ddec:	f000 fc04 	bl	800e5f8 <__lshift>
 800ddf0:	0031      	movs	r1, r6
 800ddf2:	9005      	str	r0, [sp, #20]
 800ddf4:	f000 fc6e 	bl	800e6d4 <__mcmp>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	dc02      	bgt.n	800de02 <_dtoa_r+0xafe>
 800ddfc:	d1e5      	bne.n	800ddca <_dtoa_r+0xac6>
 800ddfe:	07e3      	lsls	r3, r4, #31
 800de00:	d5e3      	bpl.n	800ddca <_dtoa_r+0xac6>
 800de02:	2c39      	cmp	r4, #57	; 0x39
 800de04:	d1df      	bne.n	800ddc6 <_dtoa_r+0xac2>
 800de06:	2339      	movs	r3, #57	; 0x39
 800de08:	9a07      	ldr	r2, [sp, #28]
 800de0a:	7013      	strb	r3, [r2, #0]
 800de0c:	9b08      	ldr	r3, [sp, #32]
 800de0e:	9308      	str	r3, [sp, #32]
 800de10:	3b01      	subs	r3, #1
 800de12:	781a      	ldrb	r2, [r3, #0]
 800de14:	2a39      	cmp	r2, #57	; 0x39
 800de16:	d063      	beq.n	800dee0 <_dtoa_r+0xbdc>
 800de18:	3201      	adds	r2, #1
 800de1a:	701a      	strb	r2, [r3, #0]
 800de1c:	e747      	b.n	800dcae <_dtoa_r+0x9aa>
 800de1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de20:	2b00      	cmp	r3, #0
 800de22:	dd03      	ble.n	800de2c <_dtoa_r+0xb28>
 800de24:	2c39      	cmp	r4, #57	; 0x39
 800de26:	d0ee      	beq.n	800de06 <_dtoa_r+0xb02>
 800de28:	3401      	adds	r4, #1
 800de2a:	e7ce      	b.n	800ddca <_dtoa_r+0xac6>
 800de2c:	9b07      	ldr	r3, [sp, #28]
 800de2e:	9a07      	ldr	r2, [sp, #28]
 800de30:	701c      	strb	r4, [r3, #0]
 800de32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de34:	4293      	cmp	r3, r2
 800de36:	d03e      	beq.n	800deb6 <_dtoa_r+0xbb2>
 800de38:	2300      	movs	r3, #0
 800de3a:	220a      	movs	r2, #10
 800de3c:	9905      	ldr	r1, [sp, #20]
 800de3e:	9804      	ldr	r0, [sp, #16]
 800de40:	f000 f9de 	bl	800e200 <__multadd>
 800de44:	2300      	movs	r3, #0
 800de46:	9005      	str	r0, [sp, #20]
 800de48:	220a      	movs	r2, #10
 800de4a:	0029      	movs	r1, r5
 800de4c:	9804      	ldr	r0, [sp, #16]
 800de4e:	42bd      	cmp	r5, r7
 800de50:	d106      	bne.n	800de60 <_dtoa_r+0xb5c>
 800de52:	f000 f9d5 	bl	800e200 <__multadd>
 800de56:	0005      	movs	r5, r0
 800de58:	0007      	movs	r7, r0
 800de5a:	9b08      	ldr	r3, [sp, #32]
 800de5c:	9307      	str	r3, [sp, #28]
 800de5e:	e784      	b.n	800dd6a <_dtoa_r+0xa66>
 800de60:	f000 f9ce 	bl	800e200 <__multadd>
 800de64:	0039      	movs	r1, r7
 800de66:	0005      	movs	r5, r0
 800de68:	2300      	movs	r3, #0
 800de6a:	220a      	movs	r2, #10
 800de6c:	9804      	ldr	r0, [sp, #16]
 800de6e:	f000 f9c7 	bl	800e200 <__multadd>
 800de72:	0007      	movs	r7, r0
 800de74:	e7f1      	b.n	800de5a <_dtoa_r+0xb56>
 800de76:	9b07      	ldr	r3, [sp, #28]
 800de78:	930b      	str	r3, [sp, #44]	; 0x2c
 800de7a:	2500      	movs	r5, #0
 800de7c:	0031      	movs	r1, r6
 800de7e:	9805      	ldr	r0, [sp, #20]
 800de80:	f7ff f9b0 	bl	800d1e4 <quorem>
 800de84:	9b06      	ldr	r3, [sp, #24]
 800de86:	3030      	adds	r0, #48	; 0x30
 800de88:	5558      	strb	r0, [r3, r5]
 800de8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de8c:	3501      	adds	r5, #1
 800de8e:	0004      	movs	r4, r0
 800de90:	42ab      	cmp	r3, r5
 800de92:	dd07      	ble.n	800dea4 <_dtoa_r+0xba0>
 800de94:	2300      	movs	r3, #0
 800de96:	220a      	movs	r2, #10
 800de98:	9905      	ldr	r1, [sp, #20]
 800de9a:	9804      	ldr	r0, [sp, #16]
 800de9c:	f000 f9b0 	bl	800e200 <__multadd>
 800dea0:	9005      	str	r0, [sp, #20]
 800dea2:	e7eb      	b.n	800de7c <_dtoa_r+0xb78>
 800dea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dea6:	2301      	movs	r3, #1
 800dea8:	2a00      	cmp	r2, #0
 800deaa:	dd00      	ble.n	800deae <_dtoa_r+0xbaa>
 800deac:	0013      	movs	r3, r2
 800deae:	2500      	movs	r5, #0
 800deb0:	9a06      	ldr	r2, [sp, #24]
 800deb2:	18d3      	adds	r3, r2, r3
 800deb4:	9308      	str	r3, [sp, #32]
 800deb6:	9905      	ldr	r1, [sp, #20]
 800deb8:	2201      	movs	r2, #1
 800deba:	9804      	ldr	r0, [sp, #16]
 800debc:	f000 fb9c 	bl	800e5f8 <__lshift>
 800dec0:	0031      	movs	r1, r6
 800dec2:	9005      	str	r0, [sp, #20]
 800dec4:	f000 fc06 	bl	800e6d4 <__mcmp>
 800dec8:	2800      	cmp	r0, #0
 800deca:	dc9f      	bgt.n	800de0c <_dtoa_r+0xb08>
 800decc:	d101      	bne.n	800ded2 <_dtoa_r+0xbce>
 800dece:	07e4      	lsls	r4, r4, #31
 800ded0:	d49c      	bmi.n	800de0c <_dtoa_r+0xb08>
 800ded2:	9b08      	ldr	r3, [sp, #32]
 800ded4:	9308      	str	r3, [sp, #32]
 800ded6:	3b01      	subs	r3, #1
 800ded8:	781a      	ldrb	r2, [r3, #0]
 800deda:	2a30      	cmp	r2, #48	; 0x30
 800dedc:	d0fa      	beq.n	800ded4 <_dtoa_r+0xbd0>
 800dede:	e6e6      	b.n	800dcae <_dtoa_r+0x9aa>
 800dee0:	9a06      	ldr	r2, [sp, #24]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d193      	bne.n	800de0e <_dtoa_r+0xb0a>
 800dee6:	9b03      	ldr	r3, [sp, #12]
 800dee8:	3301      	adds	r3, #1
 800deea:	9303      	str	r3, [sp, #12]
 800deec:	2331      	movs	r3, #49	; 0x31
 800deee:	7013      	strb	r3, [r2, #0]
 800def0:	e6dd      	b.n	800dcae <_dtoa_r+0x9aa>
 800def2:	4b09      	ldr	r3, [pc, #36]	; (800df18 <_dtoa_r+0xc14>)
 800def4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800def6:	9306      	str	r3, [sp, #24]
 800def8:	4b08      	ldr	r3, [pc, #32]	; (800df1c <_dtoa_r+0xc18>)
 800defa:	2a00      	cmp	r2, #0
 800defc:	d001      	beq.n	800df02 <_dtoa_r+0xbfe>
 800defe:	f7ff fa49 	bl	800d394 <_dtoa_r+0x90>
 800df02:	f7ff fa49 	bl	800d398 <_dtoa_r+0x94>
 800df06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dcb6      	bgt.n	800de7a <_dtoa_r+0xb76>
 800df0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df0e:	2b02      	cmp	r3, #2
 800df10:	dd00      	ble.n	800df14 <_dtoa_r+0xc10>
 800df12:	e6b6      	b.n	800dc82 <_dtoa_r+0x97e>
 800df14:	e7b1      	b.n	800de7a <_dtoa_r+0xb76>
 800df16:	46c0      	nop			; (mov r8, r8)
 800df18:	08010e21 	.word	0x08010e21
 800df1c:	08010e29 	.word	0x08010e29

0800df20 <_free_r>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	0005      	movs	r5, r0
 800df24:	2900      	cmp	r1, #0
 800df26:	d010      	beq.n	800df4a <_free_r+0x2a>
 800df28:	1f0c      	subs	r4, r1, #4
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	da00      	bge.n	800df32 <_free_r+0x12>
 800df30:	18e4      	adds	r4, r4, r3
 800df32:	0028      	movs	r0, r5
 800df34:	f000 f8ec 	bl	800e110 <__malloc_lock>
 800df38:	4a1d      	ldr	r2, [pc, #116]	; (800dfb0 <_free_r+0x90>)
 800df3a:	6813      	ldr	r3, [r2, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d105      	bne.n	800df4c <_free_r+0x2c>
 800df40:	6063      	str	r3, [r4, #4]
 800df42:	6014      	str	r4, [r2, #0]
 800df44:	0028      	movs	r0, r5
 800df46:	f000 f8eb 	bl	800e120 <__malloc_unlock>
 800df4a:	bd70      	pop	{r4, r5, r6, pc}
 800df4c:	42a3      	cmp	r3, r4
 800df4e:	d908      	bls.n	800df62 <_free_r+0x42>
 800df50:	6820      	ldr	r0, [r4, #0]
 800df52:	1821      	adds	r1, r4, r0
 800df54:	428b      	cmp	r3, r1
 800df56:	d1f3      	bne.n	800df40 <_free_r+0x20>
 800df58:	6819      	ldr	r1, [r3, #0]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	1809      	adds	r1, r1, r0
 800df5e:	6021      	str	r1, [r4, #0]
 800df60:	e7ee      	b.n	800df40 <_free_r+0x20>
 800df62:	001a      	movs	r2, r3
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d001      	beq.n	800df6e <_free_r+0x4e>
 800df6a:	42a3      	cmp	r3, r4
 800df6c:	d9f9      	bls.n	800df62 <_free_r+0x42>
 800df6e:	6811      	ldr	r1, [r2, #0]
 800df70:	1850      	adds	r0, r2, r1
 800df72:	42a0      	cmp	r0, r4
 800df74:	d10b      	bne.n	800df8e <_free_r+0x6e>
 800df76:	6820      	ldr	r0, [r4, #0]
 800df78:	1809      	adds	r1, r1, r0
 800df7a:	1850      	adds	r0, r2, r1
 800df7c:	6011      	str	r1, [r2, #0]
 800df7e:	4283      	cmp	r3, r0
 800df80:	d1e0      	bne.n	800df44 <_free_r+0x24>
 800df82:	6818      	ldr	r0, [r3, #0]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	1841      	adds	r1, r0, r1
 800df88:	6011      	str	r1, [r2, #0]
 800df8a:	6053      	str	r3, [r2, #4]
 800df8c:	e7da      	b.n	800df44 <_free_r+0x24>
 800df8e:	42a0      	cmp	r0, r4
 800df90:	d902      	bls.n	800df98 <_free_r+0x78>
 800df92:	230c      	movs	r3, #12
 800df94:	602b      	str	r3, [r5, #0]
 800df96:	e7d5      	b.n	800df44 <_free_r+0x24>
 800df98:	6820      	ldr	r0, [r4, #0]
 800df9a:	1821      	adds	r1, r4, r0
 800df9c:	428b      	cmp	r3, r1
 800df9e:	d103      	bne.n	800dfa8 <_free_r+0x88>
 800dfa0:	6819      	ldr	r1, [r3, #0]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	1809      	adds	r1, r1, r0
 800dfa6:	6021      	str	r1, [r4, #0]
 800dfa8:	6063      	str	r3, [r4, #4]
 800dfaa:	6054      	str	r4, [r2, #4]
 800dfac:	e7ca      	b.n	800df44 <_free_r+0x24>
 800dfae:	46c0      	nop			; (mov r8, r8)
 800dfb0:	20001d94 	.word	0x20001d94

0800dfb4 <malloc>:
 800dfb4:	b510      	push	{r4, lr}
 800dfb6:	4b03      	ldr	r3, [pc, #12]	; (800dfc4 <malloc+0x10>)
 800dfb8:	0001      	movs	r1, r0
 800dfba:	6818      	ldr	r0, [r3, #0]
 800dfbc:	f000 f826 	bl	800e00c <_malloc_r>
 800dfc0:	bd10      	pop	{r4, pc}
 800dfc2:	46c0      	nop			; (mov r8, r8)
 800dfc4:	2000007c 	.word	0x2000007c

0800dfc8 <sbrk_aligned>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	4e0f      	ldr	r6, [pc, #60]	; (800e008 <sbrk_aligned+0x40>)
 800dfcc:	000d      	movs	r5, r1
 800dfce:	6831      	ldr	r1, [r6, #0]
 800dfd0:	0004      	movs	r4, r0
 800dfd2:	2900      	cmp	r1, #0
 800dfd4:	d102      	bne.n	800dfdc <sbrk_aligned+0x14>
 800dfd6:	f002 f815 	bl	8010004 <_sbrk_r>
 800dfda:	6030      	str	r0, [r6, #0]
 800dfdc:	0029      	movs	r1, r5
 800dfde:	0020      	movs	r0, r4
 800dfe0:	f002 f810 	bl	8010004 <_sbrk_r>
 800dfe4:	1c43      	adds	r3, r0, #1
 800dfe6:	d00a      	beq.n	800dffe <sbrk_aligned+0x36>
 800dfe8:	2303      	movs	r3, #3
 800dfea:	1cc5      	adds	r5, r0, #3
 800dfec:	439d      	bics	r5, r3
 800dfee:	42a8      	cmp	r0, r5
 800dff0:	d007      	beq.n	800e002 <sbrk_aligned+0x3a>
 800dff2:	1a29      	subs	r1, r5, r0
 800dff4:	0020      	movs	r0, r4
 800dff6:	f002 f805 	bl	8010004 <_sbrk_r>
 800dffa:	3001      	adds	r0, #1
 800dffc:	d101      	bne.n	800e002 <sbrk_aligned+0x3a>
 800dffe:	2501      	movs	r5, #1
 800e000:	426d      	negs	r5, r5
 800e002:	0028      	movs	r0, r5
 800e004:	bd70      	pop	{r4, r5, r6, pc}
 800e006:	46c0      	nop			; (mov r8, r8)
 800e008:	20001d98 	.word	0x20001d98

0800e00c <_malloc_r>:
 800e00c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e00e:	2203      	movs	r2, #3
 800e010:	1ccb      	adds	r3, r1, #3
 800e012:	4393      	bics	r3, r2
 800e014:	3308      	adds	r3, #8
 800e016:	0006      	movs	r6, r0
 800e018:	001f      	movs	r7, r3
 800e01a:	2b0c      	cmp	r3, #12
 800e01c:	d238      	bcs.n	800e090 <_malloc_r+0x84>
 800e01e:	270c      	movs	r7, #12
 800e020:	42b9      	cmp	r1, r7
 800e022:	d837      	bhi.n	800e094 <_malloc_r+0x88>
 800e024:	0030      	movs	r0, r6
 800e026:	f000 f873 	bl	800e110 <__malloc_lock>
 800e02a:	4b38      	ldr	r3, [pc, #224]	; (800e10c <_malloc_r+0x100>)
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	001c      	movs	r4, r3
 800e032:	2c00      	cmp	r4, #0
 800e034:	d133      	bne.n	800e09e <_malloc_r+0x92>
 800e036:	0039      	movs	r1, r7
 800e038:	0030      	movs	r0, r6
 800e03a:	f7ff ffc5 	bl	800dfc8 <sbrk_aligned>
 800e03e:	0004      	movs	r4, r0
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d15e      	bne.n	800e102 <_malloc_r+0xf6>
 800e044:	9b00      	ldr	r3, [sp, #0]
 800e046:	681c      	ldr	r4, [r3, #0]
 800e048:	0025      	movs	r5, r4
 800e04a:	2d00      	cmp	r5, #0
 800e04c:	d14e      	bne.n	800e0ec <_malloc_r+0xe0>
 800e04e:	2c00      	cmp	r4, #0
 800e050:	d051      	beq.n	800e0f6 <_malloc_r+0xea>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	0029      	movs	r1, r5
 800e056:	18e3      	adds	r3, r4, r3
 800e058:	0030      	movs	r0, r6
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	f001 ffd2 	bl	8010004 <_sbrk_r>
 800e060:	9b01      	ldr	r3, [sp, #4]
 800e062:	4283      	cmp	r3, r0
 800e064:	d147      	bne.n	800e0f6 <_malloc_r+0xea>
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	0030      	movs	r0, r6
 800e06a:	1aff      	subs	r7, r7, r3
 800e06c:	0039      	movs	r1, r7
 800e06e:	f7ff ffab 	bl	800dfc8 <sbrk_aligned>
 800e072:	3001      	adds	r0, #1
 800e074:	d03f      	beq.n	800e0f6 <_malloc_r+0xea>
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	19db      	adds	r3, r3, r7
 800e07a:	6023      	str	r3, [r4, #0]
 800e07c:	9b00      	ldr	r3, [sp, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d040      	beq.n	800e106 <_malloc_r+0xfa>
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	42a2      	cmp	r2, r4
 800e088:	d133      	bne.n	800e0f2 <_malloc_r+0xe6>
 800e08a:	2200      	movs	r2, #0
 800e08c:	605a      	str	r2, [r3, #4]
 800e08e:	e014      	b.n	800e0ba <_malloc_r+0xae>
 800e090:	2b00      	cmp	r3, #0
 800e092:	dac5      	bge.n	800e020 <_malloc_r+0x14>
 800e094:	230c      	movs	r3, #12
 800e096:	2500      	movs	r5, #0
 800e098:	6033      	str	r3, [r6, #0]
 800e09a:	0028      	movs	r0, r5
 800e09c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e09e:	6821      	ldr	r1, [r4, #0]
 800e0a0:	1bc9      	subs	r1, r1, r7
 800e0a2:	d420      	bmi.n	800e0e6 <_malloc_r+0xda>
 800e0a4:	290b      	cmp	r1, #11
 800e0a6:	d918      	bls.n	800e0da <_malloc_r+0xce>
 800e0a8:	19e2      	adds	r2, r4, r7
 800e0aa:	6027      	str	r7, [r4, #0]
 800e0ac:	42a3      	cmp	r3, r4
 800e0ae:	d112      	bne.n	800e0d6 <_malloc_r+0xca>
 800e0b0:	9b00      	ldr	r3, [sp, #0]
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	6863      	ldr	r3, [r4, #4]
 800e0b6:	6011      	str	r1, [r2, #0]
 800e0b8:	6053      	str	r3, [r2, #4]
 800e0ba:	0030      	movs	r0, r6
 800e0bc:	0025      	movs	r5, r4
 800e0be:	f000 f82f 	bl	800e120 <__malloc_unlock>
 800e0c2:	2207      	movs	r2, #7
 800e0c4:	350b      	adds	r5, #11
 800e0c6:	1d23      	adds	r3, r4, #4
 800e0c8:	4395      	bics	r5, r2
 800e0ca:	1aea      	subs	r2, r5, r3
 800e0cc:	429d      	cmp	r5, r3
 800e0ce:	d0e4      	beq.n	800e09a <_malloc_r+0x8e>
 800e0d0:	1b5b      	subs	r3, r3, r5
 800e0d2:	50a3      	str	r3, [r4, r2]
 800e0d4:	e7e1      	b.n	800e09a <_malloc_r+0x8e>
 800e0d6:	605a      	str	r2, [r3, #4]
 800e0d8:	e7ec      	b.n	800e0b4 <_malloc_r+0xa8>
 800e0da:	6862      	ldr	r2, [r4, #4]
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	d1d5      	bne.n	800e08c <_malloc_r+0x80>
 800e0e0:	9b00      	ldr	r3, [sp, #0]
 800e0e2:	601a      	str	r2, [r3, #0]
 800e0e4:	e7e9      	b.n	800e0ba <_malloc_r+0xae>
 800e0e6:	0023      	movs	r3, r4
 800e0e8:	6864      	ldr	r4, [r4, #4]
 800e0ea:	e7a2      	b.n	800e032 <_malloc_r+0x26>
 800e0ec:	002c      	movs	r4, r5
 800e0ee:	686d      	ldr	r5, [r5, #4]
 800e0f0:	e7ab      	b.n	800e04a <_malloc_r+0x3e>
 800e0f2:	0013      	movs	r3, r2
 800e0f4:	e7c4      	b.n	800e080 <_malloc_r+0x74>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	0030      	movs	r0, r6
 800e0fa:	6033      	str	r3, [r6, #0]
 800e0fc:	f000 f810 	bl	800e120 <__malloc_unlock>
 800e100:	e7cb      	b.n	800e09a <_malloc_r+0x8e>
 800e102:	6027      	str	r7, [r4, #0]
 800e104:	e7d9      	b.n	800e0ba <_malloc_r+0xae>
 800e106:	605b      	str	r3, [r3, #4]
 800e108:	deff      	udf	#255	; 0xff
 800e10a:	46c0      	nop			; (mov r8, r8)
 800e10c:	20001d94 	.word	0x20001d94

0800e110 <__malloc_lock>:
 800e110:	b510      	push	{r4, lr}
 800e112:	4802      	ldr	r0, [pc, #8]	; (800e11c <__malloc_lock+0xc>)
 800e114:	f7ff f84b 	bl	800d1ae <__retarget_lock_acquire_recursive>
 800e118:	bd10      	pop	{r4, pc}
 800e11a:	46c0      	nop			; (mov r8, r8)
 800e11c:	20001d90 	.word	0x20001d90

0800e120 <__malloc_unlock>:
 800e120:	b510      	push	{r4, lr}
 800e122:	4802      	ldr	r0, [pc, #8]	; (800e12c <__malloc_unlock+0xc>)
 800e124:	f7ff f844 	bl	800d1b0 <__retarget_lock_release_recursive>
 800e128:	bd10      	pop	{r4, pc}
 800e12a:	46c0      	nop			; (mov r8, r8)
 800e12c:	20001d90 	.word	0x20001d90

0800e130 <_Balloc>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	69c5      	ldr	r5, [r0, #28]
 800e134:	0006      	movs	r6, r0
 800e136:	000c      	movs	r4, r1
 800e138:	2d00      	cmp	r5, #0
 800e13a:	d10e      	bne.n	800e15a <_Balloc+0x2a>
 800e13c:	2010      	movs	r0, #16
 800e13e:	f7ff ff39 	bl	800dfb4 <malloc>
 800e142:	1e02      	subs	r2, r0, #0
 800e144:	61f0      	str	r0, [r6, #28]
 800e146:	d104      	bne.n	800e152 <_Balloc+0x22>
 800e148:	216b      	movs	r1, #107	; 0x6b
 800e14a:	4b19      	ldr	r3, [pc, #100]	; (800e1b0 <_Balloc+0x80>)
 800e14c:	4819      	ldr	r0, [pc, #100]	; (800e1b4 <_Balloc+0x84>)
 800e14e:	f001 ff71 	bl	8010034 <__assert_func>
 800e152:	6045      	str	r5, [r0, #4]
 800e154:	6085      	str	r5, [r0, #8]
 800e156:	6005      	str	r5, [r0, #0]
 800e158:	60c5      	str	r5, [r0, #12]
 800e15a:	69f5      	ldr	r5, [r6, #28]
 800e15c:	68eb      	ldr	r3, [r5, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d013      	beq.n	800e18a <_Balloc+0x5a>
 800e162:	69f3      	ldr	r3, [r6, #28]
 800e164:	00a2      	lsls	r2, r4, #2
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	189b      	adds	r3, r3, r2
 800e16a:	6818      	ldr	r0, [r3, #0]
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d118      	bne.n	800e1a2 <_Balloc+0x72>
 800e170:	2101      	movs	r1, #1
 800e172:	000d      	movs	r5, r1
 800e174:	40a5      	lsls	r5, r4
 800e176:	1d6a      	adds	r2, r5, #5
 800e178:	0030      	movs	r0, r6
 800e17a:	0092      	lsls	r2, r2, #2
 800e17c:	f001 ff78 	bl	8010070 <_calloc_r>
 800e180:	2800      	cmp	r0, #0
 800e182:	d00c      	beq.n	800e19e <_Balloc+0x6e>
 800e184:	6044      	str	r4, [r0, #4]
 800e186:	6085      	str	r5, [r0, #8]
 800e188:	e00d      	b.n	800e1a6 <_Balloc+0x76>
 800e18a:	2221      	movs	r2, #33	; 0x21
 800e18c:	2104      	movs	r1, #4
 800e18e:	0030      	movs	r0, r6
 800e190:	f001 ff6e 	bl	8010070 <_calloc_r>
 800e194:	69f3      	ldr	r3, [r6, #28]
 800e196:	60e8      	str	r0, [r5, #12]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1e1      	bne.n	800e162 <_Balloc+0x32>
 800e19e:	2000      	movs	r0, #0
 800e1a0:	bd70      	pop	{r4, r5, r6, pc}
 800e1a2:	6802      	ldr	r2, [r0, #0]
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	6103      	str	r3, [r0, #16]
 800e1aa:	60c3      	str	r3, [r0, #12]
 800e1ac:	e7f8      	b.n	800e1a0 <_Balloc+0x70>
 800e1ae:	46c0      	nop			; (mov r8, r8)
 800e1b0:	08010e2e 	.word	0x08010e2e
 800e1b4:	08010eae 	.word	0x08010eae

0800e1b8 <_Bfree>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	69c6      	ldr	r6, [r0, #28]
 800e1bc:	0005      	movs	r5, r0
 800e1be:	000c      	movs	r4, r1
 800e1c0:	2e00      	cmp	r6, #0
 800e1c2:	d10e      	bne.n	800e1e2 <_Bfree+0x2a>
 800e1c4:	2010      	movs	r0, #16
 800e1c6:	f7ff fef5 	bl	800dfb4 <malloc>
 800e1ca:	1e02      	subs	r2, r0, #0
 800e1cc:	61e8      	str	r0, [r5, #28]
 800e1ce:	d104      	bne.n	800e1da <_Bfree+0x22>
 800e1d0:	218f      	movs	r1, #143	; 0x8f
 800e1d2:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <_Bfree+0x40>)
 800e1d4:	4809      	ldr	r0, [pc, #36]	; (800e1fc <_Bfree+0x44>)
 800e1d6:	f001 ff2d 	bl	8010034 <__assert_func>
 800e1da:	6046      	str	r6, [r0, #4]
 800e1dc:	6086      	str	r6, [r0, #8]
 800e1de:	6006      	str	r6, [r0, #0]
 800e1e0:	60c6      	str	r6, [r0, #12]
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	d007      	beq.n	800e1f6 <_Bfree+0x3e>
 800e1e6:	69eb      	ldr	r3, [r5, #28]
 800e1e8:	6862      	ldr	r2, [r4, #4]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	0092      	lsls	r2, r2, #2
 800e1ee:	189b      	adds	r3, r3, r2
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	6022      	str	r2, [r4, #0]
 800e1f4:	601c      	str	r4, [r3, #0]
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}
 800e1f8:	08010e2e 	.word	0x08010e2e
 800e1fc:	08010eae 	.word	0x08010eae

0800e200 <__multadd>:
 800e200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e202:	000e      	movs	r6, r1
 800e204:	9001      	str	r0, [sp, #4]
 800e206:	000c      	movs	r4, r1
 800e208:	001d      	movs	r5, r3
 800e20a:	2000      	movs	r0, #0
 800e20c:	690f      	ldr	r7, [r1, #16]
 800e20e:	3614      	adds	r6, #20
 800e210:	6833      	ldr	r3, [r6, #0]
 800e212:	3001      	adds	r0, #1
 800e214:	b299      	uxth	r1, r3
 800e216:	4351      	muls	r1, r2
 800e218:	0c1b      	lsrs	r3, r3, #16
 800e21a:	4353      	muls	r3, r2
 800e21c:	1949      	adds	r1, r1, r5
 800e21e:	0c0d      	lsrs	r5, r1, #16
 800e220:	195b      	adds	r3, r3, r5
 800e222:	0c1d      	lsrs	r5, r3, #16
 800e224:	b289      	uxth	r1, r1
 800e226:	041b      	lsls	r3, r3, #16
 800e228:	185b      	adds	r3, r3, r1
 800e22a:	c608      	stmia	r6!, {r3}
 800e22c:	4287      	cmp	r7, r0
 800e22e:	dcef      	bgt.n	800e210 <__multadd+0x10>
 800e230:	2d00      	cmp	r5, #0
 800e232:	d022      	beq.n	800e27a <__multadd+0x7a>
 800e234:	68a3      	ldr	r3, [r4, #8]
 800e236:	42bb      	cmp	r3, r7
 800e238:	dc19      	bgt.n	800e26e <__multadd+0x6e>
 800e23a:	6861      	ldr	r1, [r4, #4]
 800e23c:	9801      	ldr	r0, [sp, #4]
 800e23e:	3101      	adds	r1, #1
 800e240:	f7ff ff76 	bl	800e130 <_Balloc>
 800e244:	1e06      	subs	r6, r0, #0
 800e246:	d105      	bne.n	800e254 <__multadd+0x54>
 800e248:	0032      	movs	r2, r6
 800e24a:	21ba      	movs	r1, #186	; 0xba
 800e24c:	4b0c      	ldr	r3, [pc, #48]	; (800e280 <__multadd+0x80>)
 800e24e:	480d      	ldr	r0, [pc, #52]	; (800e284 <__multadd+0x84>)
 800e250:	f001 fef0 	bl	8010034 <__assert_func>
 800e254:	0021      	movs	r1, r4
 800e256:	6922      	ldr	r2, [r4, #16]
 800e258:	310c      	adds	r1, #12
 800e25a:	3202      	adds	r2, #2
 800e25c:	0092      	lsls	r2, r2, #2
 800e25e:	300c      	adds	r0, #12
 800e260:	f7fe ffb2 	bl	800d1c8 <memcpy>
 800e264:	0021      	movs	r1, r4
 800e266:	9801      	ldr	r0, [sp, #4]
 800e268:	f7ff ffa6 	bl	800e1b8 <_Bfree>
 800e26c:	0034      	movs	r4, r6
 800e26e:	1d3b      	adds	r3, r7, #4
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	18e3      	adds	r3, r4, r3
 800e274:	605d      	str	r5, [r3, #4]
 800e276:	1c7b      	adds	r3, r7, #1
 800e278:	6123      	str	r3, [r4, #16]
 800e27a:	0020      	movs	r0, r4
 800e27c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e27e:	46c0      	nop			; (mov r8, r8)
 800e280:	08010e9d 	.word	0x08010e9d
 800e284:	08010eae 	.word	0x08010eae

0800e288 <__s2b>:
 800e288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e28a:	0006      	movs	r6, r0
 800e28c:	0018      	movs	r0, r3
 800e28e:	000c      	movs	r4, r1
 800e290:	3008      	adds	r0, #8
 800e292:	2109      	movs	r1, #9
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	0015      	movs	r5, r2
 800e298:	f7f1 ffdc 	bl	8000254 <__divsi3>
 800e29c:	2301      	movs	r3, #1
 800e29e:	2100      	movs	r1, #0
 800e2a0:	4283      	cmp	r3, r0
 800e2a2:	db0a      	blt.n	800e2ba <__s2b+0x32>
 800e2a4:	0030      	movs	r0, r6
 800e2a6:	f7ff ff43 	bl	800e130 <_Balloc>
 800e2aa:	1e01      	subs	r1, r0, #0
 800e2ac:	d108      	bne.n	800e2c0 <__s2b+0x38>
 800e2ae:	000a      	movs	r2, r1
 800e2b0:	4b19      	ldr	r3, [pc, #100]	; (800e318 <__s2b+0x90>)
 800e2b2:	481a      	ldr	r0, [pc, #104]	; (800e31c <__s2b+0x94>)
 800e2b4:	31d3      	adds	r1, #211	; 0xd3
 800e2b6:	f001 febd 	bl	8010034 <__assert_func>
 800e2ba:	005b      	lsls	r3, r3, #1
 800e2bc:	3101      	adds	r1, #1
 800e2be:	e7ef      	b.n	800e2a0 <__s2b+0x18>
 800e2c0:	9b08      	ldr	r3, [sp, #32]
 800e2c2:	6143      	str	r3, [r0, #20]
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	6103      	str	r3, [r0, #16]
 800e2c8:	2d09      	cmp	r5, #9
 800e2ca:	dd18      	ble.n	800e2fe <__s2b+0x76>
 800e2cc:	0023      	movs	r3, r4
 800e2ce:	3309      	adds	r3, #9
 800e2d0:	001f      	movs	r7, r3
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	1964      	adds	r4, r4, r5
 800e2d6:	783b      	ldrb	r3, [r7, #0]
 800e2d8:	220a      	movs	r2, #10
 800e2da:	0030      	movs	r0, r6
 800e2dc:	3b30      	subs	r3, #48	; 0x30
 800e2de:	f7ff ff8f 	bl	800e200 <__multadd>
 800e2e2:	3701      	adds	r7, #1
 800e2e4:	0001      	movs	r1, r0
 800e2e6:	42a7      	cmp	r7, r4
 800e2e8:	d1f5      	bne.n	800e2d6 <__s2b+0x4e>
 800e2ea:	002c      	movs	r4, r5
 800e2ec:	9b00      	ldr	r3, [sp, #0]
 800e2ee:	3c08      	subs	r4, #8
 800e2f0:	191c      	adds	r4, r3, r4
 800e2f2:	002f      	movs	r7, r5
 800e2f4:	9b01      	ldr	r3, [sp, #4]
 800e2f6:	429f      	cmp	r7, r3
 800e2f8:	db04      	blt.n	800e304 <__s2b+0x7c>
 800e2fa:	0008      	movs	r0, r1
 800e2fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e2fe:	2509      	movs	r5, #9
 800e300:	340a      	adds	r4, #10
 800e302:	e7f6      	b.n	800e2f2 <__s2b+0x6a>
 800e304:	1b63      	subs	r3, r4, r5
 800e306:	5ddb      	ldrb	r3, [r3, r7]
 800e308:	220a      	movs	r2, #10
 800e30a:	0030      	movs	r0, r6
 800e30c:	3b30      	subs	r3, #48	; 0x30
 800e30e:	f7ff ff77 	bl	800e200 <__multadd>
 800e312:	3701      	adds	r7, #1
 800e314:	0001      	movs	r1, r0
 800e316:	e7ed      	b.n	800e2f4 <__s2b+0x6c>
 800e318:	08010e9d 	.word	0x08010e9d
 800e31c:	08010eae 	.word	0x08010eae

0800e320 <__hi0bits>:
 800e320:	0003      	movs	r3, r0
 800e322:	0c02      	lsrs	r2, r0, #16
 800e324:	2000      	movs	r0, #0
 800e326:	4282      	cmp	r2, r0
 800e328:	d101      	bne.n	800e32e <__hi0bits+0xe>
 800e32a:	041b      	lsls	r3, r3, #16
 800e32c:	3010      	adds	r0, #16
 800e32e:	0e1a      	lsrs	r2, r3, #24
 800e330:	d101      	bne.n	800e336 <__hi0bits+0x16>
 800e332:	3008      	adds	r0, #8
 800e334:	021b      	lsls	r3, r3, #8
 800e336:	0f1a      	lsrs	r2, r3, #28
 800e338:	d101      	bne.n	800e33e <__hi0bits+0x1e>
 800e33a:	3004      	adds	r0, #4
 800e33c:	011b      	lsls	r3, r3, #4
 800e33e:	0f9a      	lsrs	r2, r3, #30
 800e340:	d101      	bne.n	800e346 <__hi0bits+0x26>
 800e342:	3002      	adds	r0, #2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	2b00      	cmp	r3, #0
 800e348:	db03      	blt.n	800e352 <__hi0bits+0x32>
 800e34a:	3001      	adds	r0, #1
 800e34c:	005b      	lsls	r3, r3, #1
 800e34e:	d400      	bmi.n	800e352 <__hi0bits+0x32>
 800e350:	2020      	movs	r0, #32
 800e352:	4770      	bx	lr

0800e354 <__lo0bits>:
 800e354:	6803      	ldr	r3, [r0, #0]
 800e356:	0001      	movs	r1, r0
 800e358:	2207      	movs	r2, #7
 800e35a:	0018      	movs	r0, r3
 800e35c:	4010      	ands	r0, r2
 800e35e:	4213      	tst	r3, r2
 800e360:	d00d      	beq.n	800e37e <__lo0bits+0x2a>
 800e362:	3a06      	subs	r2, #6
 800e364:	2000      	movs	r0, #0
 800e366:	4213      	tst	r3, r2
 800e368:	d105      	bne.n	800e376 <__lo0bits+0x22>
 800e36a:	3002      	adds	r0, #2
 800e36c:	4203      	tst	r3, r0
 800e36e:	d003      	beq.n	800e378 <__lo0bits+0x24>
 800e370:	40d3      	lsrs	r3, r2
 800e372:	0010      	movs	r0, r2
 800e374:	600b      	str	r3, [r1, #0]
 800e376:	4770      	bx	lr
 800e378:	089b      	lsrs	r3, r3, #2
 800e37a:	600b      	str	r3, [r1, #0]
 800e37c:	e7fb      	b.n	800e376 <__lo0bits+0x22>
 800e37e:	b29a      	uxth	r2, r3
 800e380:	2a00      	cmp	r2, #0
 800e382:	d101      	bne.n	800e388 <__lo0bits+0x34>
 800e384:	2010      	movs	r0, #16
 800e386:	0c1b      	lsrs	r3, r3, #16
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	2a00      	cmp	r2, #0
 800e38c:	d101      	bne.n	800e392 <__lo0bits+0x3e>
 800e38e:	3008      	adds	r0, #8
 800e390:	0a1b      	lsrs	r3, r3, #8
 800e392:	071a      	lsls	r2, r3, #28
 800e394:	d101      	bne.n	800e39a <__lo0bits+0x46>
 800e396:	3004      	adds	r0, #4
 800e398:	091b      	lsrs	r3, r3, #4
 800e39a:	079a      	lsls	r2, r3, #30
 800e39c:	d101      	bne.n	800e3a2 <__lo0bits+0x4e>
 800e39e:	3002      	adds	r0, #2
 800e3a0:	089b      	lsrs	r3, r3, #2
 800e3a2:	07da      	lsls	r2, r3, #31
 800e3a4:	d4e9      	bmi.n	800e37a <__lo0bits+0x26>
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	085b      	lsrs	r3, r3, #1
 800e3aa:	d1e6      	bne.n	800e37a <__lo0bits+0x26>
 800e3ac:	2020      	movs	r0, #32
 800e3ae:	e7e2      	b.n	800e376 <__lo0bits+0x22>

0800e3b0 <__i2b>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	000c      	movs	r4, r1
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	f7ff febb 	bl	800e130 <_Balloc>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d107      	bne.n	800e3ce <__i2b+0x1e>
 800e3be:	2146      	movs	r1, #70	; 0x46
 800e3c0:	4c05      	ldr	r4, [pc, #20]	; (800e3d8 <__i2b+0x28>)
 800e3c2:	0002      	movs	r2, r0
 800e3c4:	4b05      	ldr	r3, [pc, #20]	; (800e3dc <__i2b+0x2c>)
 800e3c6:	0020      	movs	r0, r4
 800e3c8:	31ff      	adds	r1, #255	; 0xff
 800e3ca:	f001 fe33 	bl	8010034 <__assert_func>
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	6144      	str	r4, [r0, #20]
 800e3d2:	6103      	str	r3, [r0, #16]
 800e3d4:	bd10      	pop	{r4, pc}
 800e3d6:	46c0      	nop			; (mov r8, r8)
 800e3d8:	08010eae 	.word	0x08010eae
 800e3dc:	08010e9d 	.word	0x08010e9d

0800e3e0 <__multiply>:
 800e3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e2:	0015      	movs	r5, r2
 800e3e4:	690a      	ldr	r2, [r1, #16]
 800e3e6:	692b      	ldr	r3, [r5, #16]
 800e3e8:	000c      	movs	r4, r1
 800e3ea:	b08b      	sub	sp, #44	; 0x2c
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	da01      	bge.n	800e3f4 <__multiply+0x14>
 800e3f0:	002c      	movs	r4, r5
 800e3f2:	000d      	movs	r5, r1
 800e3f4:	6927      	ldr	r7, [r4, #16]
 800e3f6:	692e      	ldr	r6, [r5, #16]
 800e3f8:	6861      	ldr	r1, [r4, #4]
 800e3fa:	19bb      	adds	r3, r7, r6
 800e3fc:	9303      	str	r3, [sp, #12]
 800e3fe:	68a3      	ldr	r3, [r4, #8]
 800e400:	19ba      	adds	r2, r7, r6
 800e402:	4293      	cmp	r3, r2
 800e404:	da00      	bge.n	800e408 <__multiply+0x28>
 800e406:	3101      	adds	r1, #1
 800e408:	f7ff fe92 	bl	800e130 <_Balloc>
 800e40c:	9002      	str	r0, [sp, #8]
 800e40e:	2800      	cmp	r0, #0
 800e410:	d106      	bne.n	800e420 <__multiply+0x40>
 800e412:	21b1      	movs	r1, #177	; 0xb1
 800e414:	4b48      	ldr	r3, [pc, #288]	; (800e538 <__multiply+0x158>)
 800e416:	4849      	ldr	r0, [pc, #292]	; (800e53c <__multiply+0x15c>)
 800e418:	9a02      	ldr	r2, [sp, #8]
 800e41a:	0049      	lsls	r1, r1, #1
 800e41c:	f001 fe0a 	bl	8010034 <__assert_func>
 800e420:	9b02      	ldr	r3, [sp, #8]
 800e422:	2200      	movs	r2, #0
 800e424:	3314      	adds	r3, #20
 800e426:	469c      	mov	ip, r3
 800e428:	19bb      	adds	r3, r7, r6
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4463      	add	r3, ip
 800e42e:	9304      	str	r3, [sp, #16]
 800e430:	4663      	mov	r3, ip
 800e432:	9904      	ldr	r1, [sp, #16]
 800e434:	428b      	cmp	r3, r1
 800e436:	d32a      	bcc.n	800e48e <__multiply+0xae>
 800e438:	0023      	movs	r3, r4
 800e43a:	00bf      	lsls	r7, r7, #2
 800e43c:	3314      	adds	r3, #20
 800e43e:	3514      	adds	r5, #20
 800e440:	9308      	str	r3, [sp, #32]
 800e442:	00b6      	lsls	r6, r6, #2
 800e444:	19db      	adds	r3, r3, r7
 800e446:	9305      	str	r3, [sp, #20]
 800e448:	19ab      	adds	r3, r5, r6
 800e44a:	9309      	str	r3, [sp, #36]	; 0x24
 800e44c:	2304      	movs	r3, #4
 800e44e:	9306      	str	r3, [sp, #24]
 800e450:	0023      	movs	r3, r4
 800e452:	9a05      	ldr	r2, [sp, #20]
 800e454:	3315      	adds	r3, #21
 800e456:	9501      	str	r5, [sp, #4]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d305      	bcc.n	800e468 <__multiply+0x88>
 800e45c:	1b13      	subs	r3, r2, r4
 800e45e:	3b15      	subs	r3, #21
 800e460:	089b      	lsrs	r3, r3, #2
 800e462:	3301      	adds	r3, #1
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	9306      	str	r3, [sp, #24]
 800e468:	9b01      	ldr	r3, [sp, #4]
 800e46a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d310      	bcc.n	800e492 <__multiply+0xb2>
 800e470:	9b03      	ldr	r3, [sp, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	dd05      	ble.n	800e482 <__multiply+0xa2>
 800e476:	9b04      	ldr	r3, [sp, #16]
 800e478:	3b04      	subs	r3, #4
 800e47a:	9304      	str	r3, [sp, #16]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d056      	beq.n	800e530 <__multiply+0x150>
 800e482:	9b02      	ldr	r3, [sp, #8]
 800e484:	9a03      	ldr	r2, [sp, #12]
 800e486:	0018      	movs	r0, r3
 800e488:	611a      	str	r2, [r3, #16]
 800e48a:	b00b      	add	sp, #44	; 0x2c
 800e48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e48e:	c304      	stmia	r3!, {r2}
 800e490:	e7cf      	b.n	800e432 <__multiply+0x52>
 800e492:	9b01      	ldr	r3, [sp, #4]
 800e494:	6818      	ldr	r0, [r3, #0]
 800e496:	b280      	uxth	r0, r0
 800e498:	2800      	cmp	r0, #0
 800e49a:	d01e      	beq.n	800e4da <__multiply+0xfa>
 800e49c:	4667      	mov	r7, ip
 800e49e:	2500      	movs	r5, #0
 800e4a0:	9e08      	ldr	r6, [sp, #32]
 800e4a2:	ce02      	ldmia	r6!, {r1}
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	9307      	str	r3, [sp, #28]
 800e4a8:	b28b      	uxth	r3, r1
 800e4aa:	4343      	muls	r3, r0
 800e4ac:	001a      	movs	r2, r3
 800e4ae:	466b      	mov	r3, sp
 800e4b0:	8b9b      	ldrh	r3, [r3, #28]
 800e4b2:	18d3      	adds	r3, r2, r3
 800e4b4:	195b      	adds	r3, r3, r5
 800e4b6:	0c0d      	lsrs	r5, r1, #16
 800e4b8:	4345      	muls	r5, r0
 800e4ba:	9a07      	ldr	r2, [sp, #28]
 800e4bc:	0c11      	lsrs	r1, r2, #16
 800e4be:	1869      	adds	r1, r5, r1
 800e4c0:	0c1a      	lsrs	r2, r3, #16
 800e4c2:	188a      	adds	r2, r1, r2
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	0c15      	lsrs	r5, r2, #16
 800e4c8:	0412      	lsls	r2, r2, #16
 800e4ca:	431a      	orrs	r2, r3
 800e4cc:	9b05      	ldr	r3, [sp, #20]
 800e4ce:	c704      	stmia	r7!, {r2}
 800e4d0:	42b3      	cmp	r3, r6
 800e4d2:	d8e6      	bhi.n	800e4a2 <__multiply+0xc2>
 800e4d4:	4663      	mov	r3, ip
 800e4d6:	9a06      	ldr	r2, [sp, #24]
 800e4d8:	509d      	str	r5, [r3, r2]
 800e4da:	9b01      	ldr	r3, [sp, #4]
 800e4dc:	6818      	ldr	r0, [r3, #0]
 800e4de:	0c00      	lsrs	r0, r0, #16
 800e4e0:	d020      	beq.n	800e524 <__multiply+0x144>
 800e4e2:	4663      	mov	r3, ip
 800e4e4:	0025      	movs	r5, r4
 800e4e6:	4661      	mov	r1, ip
 800e4e8:	2700      	movs	r7, #0
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3514      	adds	r5, #20
 800e4ee:	682a      	ldr	r2, [r5, #0]
 800e4f0:	680e      	ldr	r6, [r1, #0]
 800e4f2:	b292      	uxth	r2, r2
 800e4f4:	4342      	muls	r2, r0
 800e4f6:	0c36      	lsrs	r6, r6, #16
 800e4f8:	1992      	adds	r2, r2, r6
 800e4fa:	19d2      	adds	r2, r2, r7
 800e4fc:	0416      	lsls	r6, r2, #16
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	431e      	orrs	r6, r3
 800e502:	600e      	str	r6, [r1, #0]
 800e504:	cd40      	ldmia	r5!, {r6}
 800e506:	684b      	ldr	r3, [r1, #4]
 800e508:	0c36      	lsrs	r6, r6, #16
 800e50a:	4346      	muls	r6, r0
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	0c12      	lsrs	r2, r2, #16
 800e510:	18f3      	adds	r3, r6, r3
 800e512:	189b      	adds	r3, r3, r2
 800e514:	9a05      	ldr	r2, [sp, #20]
 800e516:	0c1f      	lsrs	r7, r3, #16
 800e518:	3104      	adds	r1, #4
 800e51a:	42aa      	cmp	r2, r5
 800e51c:	d8e7      	bhi.n	800e4ee <__multiply+0x10e>
 800e51e:	4662      	mov	r2, ip
 800e520:	9906      	ldr	r1, [sp, #24]
 800e522:	5053      	str	r3, [r2, r1]
 800e524:	9b01      	ldr	r3, [sp, #4]
 800e526:	3304      	adds	r3, #4
 800e528:	9301      	str	r3, [sp, #4]
 800e52a:	2304      	movs	r3, #4
 800e52c:	449c      	add	ip, r3
 800e52e:	e79b      	b.n	800e468 <__multiply+0x88>
 800e530:	9b03      	ldr	r3, [sp, #12]
 800e532:	3b01      	subs	r3, #1
 800e534:	9303      	str	r3, [sp, #12]
 800e536:	e79b      	b.n	800e470 <__multiply+0x90>
 800e538:	08010e9d 	.word	0x08010e9d
 800e53c:	08010eae 	.word	0x08010eae

0800e540 <__pow5mult>:
 800e540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e542:	2303      	movs	r3, #3
 800e544:	0015      	movs	r5, r2
 800e546:	0007      	movs	r7, r0
 800e548:	000e      	movs	r6, r1
 800e54a:	401a      	ands	r2, r3
 800e54c:	421d      	tst	r5, r3
 800e54e:	d008      	beq.n	800e562 <__pow5mult+0x22>
 800e550:	4925      	ldr	r1, [pc, #148]	; (800e5e8 <__pow5mult+0xa8>)
 800e552:	3a01      	subs	r2, #1
 800e554:	0092      	lsls	r2, r2, #2
 800e556:	5852      	ldr	r2, [r2, r1]
 800e558:	2300      	movs	r3, #0
 800e55a:	0031      	movs	r1, r6
 800e55c:	f7ff fe50 	bl	800e200 <__multadd>
 800e560:	0006      	movs	r6, r0
 800e562:	10ad      	asrs	r5, r5, #2
 800e564:	d03d      	beq.n	800e5e2 <__pow5mult+0xa2>
 800e566:	69fc      	ldr	r4, [r7, #28]
 800e568:	2c00      	cmp	r4, #0
 800e56a:	d10f      	bne.n	800e58c <__pow5mult+0x4c>
 800e56c:	2010      	movs	r0, #16
 800e56e:	f7ff fd21 	bl	800dfb4 <malloc>
 800e572:	1e02      	subs	r2, r0, #0
 800e574:	61f8      	str	r0, [r7, #28]
 800e576:	d105      	bne.n	800e584 <__pow5mult+0x44>
 800e578:	21b4      	movs	r1, #180	; 0xb4
 800e57a:	4b1c      	ldr	r3, [pc, #112]	; (800e5ec <__pow5mult+0xac>)
 800e57c:	481c      	ldr	r0, [pc, #112]	; (800e5f0 <__pow5mult+0xb0>)
 800e57e:	31ff      	adds	r1, #255	; 0xff
 800e580:	f001 fd58 	bl	8010034 <__assert_func>
 800e584:	6044      	str	r4, [r0, #4]
 800e586:	6084      	str	r4, [r0, #8]
 800e588:	6004      	str	r4, [r0, #0]
 800e58a:	60c4      	str	r4, [r0, #12]
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	689c      	ldr	r4, [r3, #8]
 800e590:	9301      	str	r3, [sp, #4]
 800e592:	2c00      	cmp	r4, #0
 800e594:	d108      	bne.n	800e5a8 <__pow5mult+0x68>
 800e596:	0038      	movs	r0, r7
 800e598:	4916      	ldr	r1, [pc, #88]	; (800e5f4 <__pow5mult+0xb4>)
 800e59a:	f7ff ff09 	bl	800e3b0 <__i2b>
 800e59e:	9b01      	ldr	r3, [sp, #4]
 800e5a0:	0004      	movs	r4, r0
 800e5a2:	6098      	str	r0, [r3, #8]
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	6003      	str	r3, [r0, #0]
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	421d      	tst	r5, r3
 800e5ac:	d00a      	beq.n	800e5c4 <__pow5mult+0x84>
 800e5ae:	0031      	movs	r1, r6
 800e5b0:	0022      	movs	r2, r4
 800e5b2:	0038      	movs	r0, r7
 800e5b4:	f7ff ff14 	bl	800e3e0 <__multiply>
 800e5b8:	0031      	movs	r1, r6
 800e5ba:	9001      	str	r0, [sp, #4]
 800e5bc:	0038      	movs	r0, r7
 800e5be:	f7ff fdfb 	bl	800e1b8 <_Bfree>
 800e5c2:	9e01      	ldr	r6, [sp, #4]
 800e5c4:	106d      	asrs	r5, r5, #1
 800e5c6:	d00c      	beq.n	800e5e2 <__pow5mult+0xa2>
 800e5c8:	6820      	ldr	r0, [r4, #0]
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d107      	bne.n	800e5de <__pow5mult+0x9e>
 800e5ce:	0022      	movs	r2, r4
 800e5d0:	0021      	movs	r1, r4
 800e5d2:	0038      	movs	r0, r7
 800e5d4:	f7ff ff04 	bl	800e3e0 <__multiply>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	6020      	str	r0, [r4, #0]
 800e5dc:	6003      	str	r3, [r0, #0]
 800e5de:	0004      	movs	r4, r0
 800e5e0:	e7e2      	b.n	800e5a8 <__pow5mult+0x68>
 800e5e2:	0030      	movs	r0, r6
 800e5e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e5e6:	46c0      	nop			; (mov r8, r8)
 800e5e8:	08010ff8 	.word	0x08010ff8
 800e5ec:	08010e2e 	.word	0x08010e2e
 800e5f0:	08010eae 	.word	0x08010eae
 800e5f4:	00000271 	.word	0x00000271

0800e5f8 <__lshift>:
 800e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5fa:	000c      	movs	r4, r1
 800e5fc:	0017      	movs	r7, r2
 800e5fe:	6923      	ldr	r3, [r4, #16]
 800e600:	1155      	asrs	r5, r2, #5
 800e602:	b087      	sub	sp, #28
 800e604:	18eb      	adds	r3, r5, r3
 800e606:	9302      	str	r3, [sp, #8]
 800e608:	3301      	adds	r3, #1
 800e60a:	9301      	str	r3, [sp, #4]
 800e60c:	6849      	ldr	r1, [r1, #4]
 800e60e:	68a3      	ldr	r3, [r4, #8]
 800e610:	9004      	str	r0, [sp, #16]
 800e612:	9a01      	ldr	r2, [sp, #4]
 800e614:	4293      	cmp	r3, r2
 800e616:	db10      	blt.n	800e63a <__lshift+0x42>
 800e618:	9804      	ldr	r0, [sp, #16]
 800e61a:	f7ff fd89 	bl	800e130 <_Balloc>
 800e61e:	2300      	movs	r3, #0
 800e620:	0002      	movs	r2, r0
 800e622:	0006      	movs	r6, r0
 800e624:	0019      	movs	r1, r3
 800e626:	3214      	adds	r2, #20
 800e628:	4298      	cmp	r0, r3
 800e62a:	d10c      	bne.n	800e646 <__lshift+0x4e>
 800e62c:	31df      	adds	r1, #223	; 0xdf
 800e62e:	0032      	movs	r2, r6
 800e630:	4b26      	ldr	r3, [pc, #152]	; (800e6cc <__lshift+0xd4>)
 800e632:	4827      	ldr	r0, [pc, #156]	; (800e6d0 <__lshift+0xd8>)
 800e634:	31ff      	adds	r1, #255	; 0xff
 800e636:	f001 fcfd 	bl	8010034 <__assert_func>
 800e63a:	3101      	adds	r1, #1
 800e63c:	005b      	lsls	r3, r3, #1
 800e63e:	e7e8      	b.n	800e612 <__lshift+0x1a>
 800e640:	0098      	lsls	r0, r3, #2
 800e642:	5011      	str	r1, [r2, r0]
 800e644:	3301      	adds	r3, #1
 800e646:	42ab      	cmp	r3, r5
 800e648:	dbfa      	blt.n	800e640 <__lshift+0x48>
 800e64a:	43eb      	mvns	r3, r5
 800e64c:	17db      	asrs	r3, r3, #31
 800e64e:	401d      	ands	r5, r3
 800e650:	211f      	movs	r1, #31
 800e652:	0023      	movs	r3, r4
 800e654:	0038      	movs	r0, r7
 800e656:	00ad      	lsls	r5, r5, #2
 800e658:	1955      	adds	r5, r2, r5
 800e65a:	6922      	ldr	r2, [r4, #16]
 800e65c:	3314      	adds	r3, #20
 800e65e:	0092      	lsls	r2, r2, #2
 800e660:	4008      	ands	r0, r1
 800e662:	4684      	mov	ip, r0
 800e664:	189a      	adds	r2, r3, r2
 800e666:	420f      	tst	r7, r1
 800e668:	d02a      	beq.n	800e6c0 <__lshift+0xc8>
 800e66a:	3101      	adds	r1, #1
 800e66c:	1a09      	subs	r1, r1, r0
 800e66e:	9105      	str	r1, [sp, #20]
 800e670:	2100      	movs	r1, #0
 800e672:	9503      	str	r5, [sp, #12]
 800e674:	4667      	mov	r7, ip
 800e676:	6818      	ldr	r0, [r3, #0]
 800e678:	40b8      	lsls	r0, r7
 800e67a:	4308      	orrs	r0, r1
 800e67c:	9903      	ldr	r1, [sp, #12]
 800e67e:	c101      	stmia	r1!, {r0}
 800e680:	9103      	str	r1, [sp, #12]
 800e682:	9805      	ldr	r0, [sp, #20]
 800e684:	cb02      	ldmia	r3!, {r1}
 800e686:	40c1      	lsrs	r1, r0
 800e688:	429a      	cmp	r2, r3
 800e68a:	d8f3      	bhi.n	800e674 <__lshift+0x7c>
 800e68c:	0020      	movs	r0, r4
 800e68e:	3015      	adds	r0, #21
 800e690:	2304      	movs	r3, #4
 800e692:	4282      	cmp	r2, r0
 800e694:	d304      	bcc.n	800e6a0 <__lshift+0xa8>
 800e696:	1b13      	subs	r3, r2, r4
 800e698:	3b15      	subs	r3, #21
 800e69a:	089b      	lsrs	r3, r3, #2
 800e69c:	3301      	adds	r3, #1
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	50e9      	str	r1, [r5, r3]
 800e6a2:	2900      	cmp	r1, #0
 800e6a4:	d002      	beq.n	800e6ac <__lshift+0xb4>
 800e6a6:	9b02      	ldr	r3, [sp, #8]
 800e6a8:	3302      	adds	r3, #2
 800e6aa:	9301      	str	r3, [sp, #4]
 800e6ac:	9b01      	ldr	r3, [sp, #4]
 800e6ae:	9804      	ldr	r0, [sp, #16]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	0021      	movs	r1, r4
 800e6b4:	6133      	str	r3, [r6, #16]
 800e6b6:	f7ff fd7f 	bl	800e1b8 <_Bfree>
 800e6ba:	0030      	movs	r0, r6
 800e6bc:	b007      	add	sp, #28
 800e6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6c0:	cb02      	ldmia	r3!, {r1}
 800e6c2:	c502      	stmia	r5!, {r1}
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d8fb      	bhi.n	800e6c0 <__lshift+0xc8>
 800e6c8:	e7f0      	b.n	800e6ac <__lshift+0xb4>
 800e6ca:	46c0      	nop			; (mov r8, r8)
 800e6cc:	08010e9d 	.word	0x08010e9d
 800e6d0:	08010eae 	.word	0x08010eae

0800e6d4 <__mcmp>:
 800e6d4:	b530      	push	{r4, r5, lr}
 800e6d6:	690b      	ldr	r3, [r1, #16]
 800e6d8:	6904      	ldr	r4, [r0, #16]
 800e6da:	0002      	movs	r2, r0
 800e6dc:	1ae0      	subs	r0, r4, r3
 800e6de:	429c      	cmp	r4, r3
 800e6e0:	d10e      	bne.n	800e700 <__mcmp+0x2c>
 800e6e2:	3214      	adds	r2, #20
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	3114      	adds	r1, #20
 800e6e8:	0014      	movs	r4, r2
 800e6ea:	18c9      	adds	r1, r1, r3
 800e6ec:	18d2      	adds	r2, r2, r3
 800e6ee:	3a04      	subs	r2, #4
 800e6f0:	3904      	subs	r1, #4
 800e6f2:	6815      	ldr	r5, [r2, #0]
 800e6f4:	680b      	ldr	r3, [r1, #0]
 800e6f6:	429d      	cmp	r5, r3
 800e6f8:	d003      	beq.n	800e702 <__mcmp+0x2e>
 800e6fa:	2001      	movs	r0, #1
 800e6fc:	429d      	cmp	r5, r3
 800e6fe:	d303      	bcc.n	800e708 <__mcmp+0x34>
 800e700:	bd30      	pop	{r4, r5, pc}
 800e702:	4294      	cmp	r4, r2
 800e704:	d3f3      	bcc.n	800e6ee <__mcmp+0x1a>
 800e706:	e7fb      	b.n	800e700 <__mcmp+0x2c>
 800e708:	4240      	negs	r0, r0
 800e70a:	e7f9      	b.n	800e700 <__mcmp+0x2c>

0800e70c <__mdiff>:
 800e70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e70e:	000e      	movs	r6, r1
 800e710:	0007      	movs	r7, r0
 800e712:	0011      	movs	r1, r2
 800e714:	0030      	movs	r0, r6
 800e716:	b087      	sub	sp, #28
 800e718:	0014      	movs	r4, r2
 800e71a:	f7ff ffdb 	bl	800e6d4 <__mcmp>
 800e71e:	1e05      	subs	r5, r0, #0
 800e720:	d110      	bne.n	800e744 <__mdiff+0x38>
 800e722:	0001      	movs	r1, r0
 800e724:	0038      	movs	r0, r7
 800e726:	f7ff fd03 	bl	800e130 <_Balloc>
 800e72a:	1e02      	subs	r2, r0, #0
 800e72c:	d104      	bne.n	800e738 <__mdiff+0x2c>
 800e72e:	4b3f      	ldr	r3, [pc, #252]	; (800e82c <__mdiff+0x120>)
 800e730:	483f      	ldr	r0, [pc, #252]	; (800e830 <__mdiff+0x124>)
 800e732:	4940      	ldr	r1, [pc, #256]	; (800e834 <__mdiff+0x128>)
 800e734:	f001 fc7e 	bl	8010034 <__assert_func>
 800e738:	2301      	movs	r3, #1
 800e73a:	6145      	str	r5, [r0, #20]
 800e73c:	6103      	str	r3, [r0, #16]
 800e73e:	0010      	movs	r0, r2
 800e740:	b007      	add	sp, #28
 800e742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e744:	2301      	movs	r3, #1
 800e746:	9301      	str	r3, [sp, #4]
 800e748:	2800      	cmp	r0, #0
 800e74a:	db04      	blt.n	800e756 <__mdiff+0x4a>
 800e74c:	0023      	movs	r3, r4
 800e74e:	0034      	movs	r4, r6
 800e750:	001e      	movs	r6, r3
 800e752:	2300      	movs	r3, #0
 800e754:	9301      	str	r3, [sp, #4]
 800e756:	0038      	movs	r0, r7
 800e758:	6861      	ldr	r1, [r4, #4]
 800e75a:	f7ff fce9 	bl	800e130 <_Balloc>
 800e75e:	1e02      	subs	r2, r0, #0
 800e760:	d103      	bne.n	800e76a <__mdiff+0x5e>
 800e762:	4b32      	ldr	r3, [pc, #200]	; (800e82c <__mdiff+0x120>)
 800e764:	4832      	ldr	r0, [pc, #200]	; (800e830 <__mdiff+0x124>)
 800e766:	4934      	ldr	r1, [pc, #208]	; (800e838 <__mdiff+0x12c>)
 800e768:	e7e4      	b.n	800e734 <__mdiff+0x28>
 800e76a:	9b01      	ldr	r3, [sp, #4]
 800e76c:	2700      	movs	r7, #0
 800e76e:	60c3      	str	r3, [r0, #12]
 800e770:	6920      	ldr	r0, [r4, #16]
 800e772:	3414      	adds	r4, #20
 800e774:	0083      	lsls	r3, r0, #2
 800e776:	18e3      	adds	r3, r4, r3
 800e778:	0021      	movs	r1, r4
 800e77a:	9401      	str	r4, [sp, #4]
 800e77c:	0034      	movs	r4, r6
 800e77e:	9302      	str	r3, [sp, #8]
 800e780:	6933      	ldr	r3, [r6, #16]
 800e782:	3414      	adds	r4, #20
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	18e3      	adds	r3, r4, r3
 800e788:	9303      	str	r3, [sp, #12]
 800e78a:	0013      	movs	r3, r2
 800e78c:	3314      	adds	r3, #20
 800e78e:	469c      	mov	ip, r3
 800e790:	9305      	str	r3, [sp, #20]
 800e792:	9104      	str	r1, [sp, #16]
 800e794:	9b04      	ldr	r3, [sp, #16]
 800e796:	cc02      	ldmia	r4!, {r1}
 800e798:	cb20      	ldmia	r3!, {r5}
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	b2ab      	uxth	r3, r5
 800e79e:	19df      	adds	r7, r3, r7
 800e7a0:	b28b      	uxth	r3, r1
 800e7a2:	1afb      	subs	r3, r7, r3
 800e7a4:	0c09      	lsrs	r1, r1, #16
 800e7a6:	0c2d      	lsrs	r5, r5, #16
 800e7a8:	1a6d      	subs	r5, r5, r1
 800e7aa:	1419      	asrs	r1, r3, #16
 800e7ac:	1869      	adds	r1, r5, r1
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	140f      	asrs	r7, r1, #16
 800e7b2:	0409      	lsls	r1, r1, #16
 800e7b4:	4319      	orrs	r1, r3
 800e7b6:	4663      	mov	r3, ip
 800e7b8:	c302      	stmia	r3!, {r1}
 800e7ba:	469c      	mov	ip, r3
 800e7bc:	9b03      	ldr	r3, [sp, #12]
 800e7be:	42a3      	cmp	r3, r4
 800e7c0:	d8e8      	bhi.n	800e794 <__mdiff+0x88>
 800e7c2:	0031      	movs	r1, r6
 800e7c4:	9c03      	ldr	r4, [sp, #12]
 800e7c6:	3115      	adds	r1, #21
 800e7c8:	2304      	movs	r3, #4
 800e7ca:	428c      	cmp	r4, r1
 800e7cc:	d304      	bcc.n	800e7d8 <__mdiff+0xcc>
 800e7ce:	1ba3      	subs	r3, r4, r6
 800e7d0:	3b15      	subs	r3, #21
 800e7d2:	089b      	lsrs	r3, r3, #2
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	9901      	ldr	r1, [sp, #4]
 800e7da:	18cd      	adds	r5, r1, r3
 800e7dc:	9905      	ldr	r1, [sp, #20]
 800e7de:	002e      	movs	r6, r5
 800e7e0:	18cb      	adds	r3, r1, r3
 800e7e2:	469c      	mov	ip, r3
 800e7e4:	9902      	ldr	r1, [sp, #8]
 800e7e6:	428e      	cmp	r6, r1
 800e7e8:	d310      	bcc.n	800e80c <__mdiff+0x100>
 800e7ea:	9e02      	ldr	r6, [sp, #8]
 800e7ec:	1ee9      	subs	r1, r5, #3
 800e7ee:	2400      	movs	r4, #0
 800e7f0:	428e      	cmp	r6, r1
 800e7f2:	d304      	bcc.n	800e7fe <__mdiff+0xf2>
 800e7f4:	0031      	movs	r1, r6
 800e7f6:	3103      	adds	r1, #3
 800e7f8:	1b49      	subs	r1, r1, r5
 800e7fa:	0889      	lsrs	r1, r1, #2
 800e7fc:	008c      	lsls	r4, r1, #2
 800e7fe:	191b      	adds	r3, r3, r4
 800e800:	3b04      	subs	r3, #4
 800e802:	6819      	ldr	r1, [r3, #0]
 800e804:	2900      	cmp	r1, #0
 800e806:	d00f      	beq.n	800e828 <__mdiff+0x11c>
 800e808:	6110      	str	r0, [r2, #16]
 800e80a:	e798      	b.n	800e73e <__mdiff+0x32>
 800e80c:	ce02      	ldmia	r6!, {r1}
 800e80e:	b28c      	uxth	r4, r1
 800e810:	19e4      	adds	r4, r4, r7
 800e812:	0c0f      	lsrs	r7, r1, #16
 800e814:	1421      	asrs	r1, r4, #16
 800e816:	1879      	adds	r1, r7, r1
 800e818:	b2a4      	uxth	r4, r4
 800e81a:	140f      	asrs	r7, r1, #16
 800e81c:	0409      	lsls	r1, r1, #16
 800e81e:	4321      	orrs	r1, r4
 800e820:	4664      	mov	r4, ip
 800e822:	c402      	stmia	r4!, {r1}
 800e824:	46a4      	mov	ip, r4
 800e826:	e7dd      	b.n	800e7e4 <__mdiff+0xd8>
 800e828:	3801      	subs	r0, #1
 800e82a:	e7e9      	b.n	800e800 <__mdiff+0xf4>
 800e82c:	08010e9d 	.word	0x08010e9d
 800e830:	08010eae 	.word	0x08010eae
 800e834:	00000237 	.word	0x00000237
 800e838:	00000245 	.word	0x00000245

0800e83c <__ulp>:
 800e83c:	2000      	movs	r0, #0
 800e83e:	4b0b      	ldr	r3, [pc, #44]	; (800e86c <__ulp+0x30>)
 800e840:	4019      	ands	r1, r3
 800e842:	4b0b      	ldr	r3, [pc, #44]	; (800e870 <__ulp+0x34>)
 800e844:	18c9      	adds	r1, r1, r3
 800e846:	4281      	cmp	r1, r0
 800e848:	dc06      	bgt.n	800e858 <__ulp+0x1c>
 800e84a:	4249      	negs	r1, r1
 800e84c:	150b      	asrs	r3, r1, #20
 800e84e:	2b13      	cmp	r3, #19
 800e850:	dc03      	bgt.n	800e85a <__ulp+0x1e>
 800e852:	2180      	movs	r1, #128	; 0x80
 800e854:	0309      	lsls	r1, r1, #12
 800e856:	4119      	asrs	r1, r3
 800e858:	4770      	bx	lr
 800e85a:	3b14      	subs	r3, #20
 800e85c:	2001      	movs	r0, #1
 800e85e:	2b1e      	cmp	r3, #30
 800e860:	dc02      	bgt.n	800e868 <__ulp+0x2c>
 800e862:	2080      	movs	r0, #128	; 0x80
 800e864:	0600      	lsls	r0, r0, #24
 800e866:	40d8      	lsrs	r0, r3
 800e868:	2100      	movs	r1, #0
 800e86a:	e7f5      	b.n	800e858 <__ulp+0x1c>
 800e86c:	7ff00000 	.word	0x7ff00000
 800e870:	fcc00000 	.word	0xfcc00000

0800e874 <__b2d>:
 800e874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e876:	0006      	movs	r6, r0
 800e878:	6903      	ldr	r3, [r0, #16]
 800e87a:	3614      	adds	r6, #20
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	18f3      	adds	r3, r6, r3
 800e880:	1f1d      	subs	r5, r3, #4
 800e882:	682c      	ldr	r4, [r5, #0]
 800e884:	000f      	movs	r7, r1
 800e886:	0020      	movs	r0, r4
 800e888:	9301      	str	r3, [sp, #4]
 800e88a:	f7ff fd49 	bl	800e320 <__hi0bits>
 800e88e:	2220      	movs	r2, #32
 800e890:	1a12      	subs	r2, r2, r0
 800e892:	603a      	str	r2, [r7, #0]
 800e894:	0003      	movs	r3, r0
 800e896:	4a1c      	ldr	r2, [pc, #112]	; (800e908 <__b2d+0x94>)
 800e898:	280a      	cmp	r0, #10
 800e89a:	dc15      	bgt.n	800e8c8 <__b2d+0x54>
 800e89c:	210b      	movs	r1, #11
 800e89e:	0027      	movs	r7, r4
 800e8a0:	1a09      	subs	r1, r1, r0
 800e8a2:	40cf      	lsrs	r7, r1
 800e8a4:	433a      	orrs	r2, r7
 800e8a6:	468c      	mov	ip, r1
 800e8a8:	0011      	movs	r1, r2
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	42ae      	cmp	r6, r5
 800e8ae:	d202      	bcs.n	800e8b6 <__b2d+0x42>
 800e8b0:	9a01      	ldr	r2, [sp, #4]
 800e8b2:	3a08      	subs	r2, #8
 800e8b4:	6812      	ldr	r2, [r2, #0]
 800e8b6:	3315      	adds	r3, #21
 800e8b8:	409c      	lsls	r4, r3
 800e8ba:	4663      	mov	r3, ip
 800e8bc:	0027      	movs	r7, r4
 800e8be:	40da      	lsrs	r2, r3
 800e8c0:	4317      	orrs	r7, r2
 800e8c2:	0038      	movs	r0, r7
 800e8c4:	b003      	add	sp, #12
 800e8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8c8:	2700      	movs	r7, #0
 800e8ca:	42ae      	cmp	r6, r5
 800e8cc:	d202      	bcs.n	800e8d4 <__b2d+0x60>
 800e8ce:	9d01      	ldr	r5, [sp, #4]
 800e8d0:	3d08      	subs	r5, #8
 800e8d2:	682f      	ldr	r7, [r5, #0]
 800e8d4:	210b      	movs	r1, #11
 800e8d6:	4249      	negs	r1, r1
 800e8d8:	468c      	mov	ip, r1
 800e8da:	449c      	add	ip, r3
 800e8dc:	2b0b      	cmp	r3, #11
 800e8de:	d010      	beq.n	800e902 <__b2d+0x8e>
 800e8e0:	4661      	mov	r1, ip
 800e8e2:	2320      	movs	r3, #32
 800e8e4:	408c      	lsls	r4, r1
 800e8e6:	1a5b      	subs	r3, r3, r1
 800e8e8:	0039      	movs	r1, r7
 800e8ea:	40d9      	lsrs	r1, r3
 800e8ec:	430c      	orrs	r4, r1
 800e8ee:	4322      	orrs	r2, r4
 800e8f0:	0011      	movs	r1, r2
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	42b5      	cmp	r5, r6
 800e8f6:	d901      	bls.n	800e8fc <__b2d+0x88>
 800e8f8:	3d04      	subs	r5, #4
 800e8fa:	682a      	ldr	r2, [r5, #0]
 800e8fc:	4664      	mov	r4, ip
 800e8fe:	40a7      	lsls	r7, r4
 800e900:	e7dd      	b.n	800e8be <__b2d+0x4a>
 800e902:	4322      	orrs	r2, r4
 800e904:	0011      	movs	r1, r2
 800e906:	e7dc      	b.n	800e8c2 <__b2d+0x4e>
 800e908:	3ff00000 	.word	0x3ff00000

0800e90c <__d2b>:
 800e90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e90e:	2101      	movs	r1, #1
 800e910:	0014      	movs	r4, r2
 800e912:	001d      	movs	r5, r3
 800e914:	9f08      	ldr	r7, [sp, #32]
 800e916:	f7ff fc0b 	bl	800e130 <_Balloc>
 800e91a:	1e06      	subs	r6, r0, #0
 800e91c:	d105      	bne.n	800e92a <__d2b+0x1e>
 800e91e:	0032      	movs	r2, r6
 800e920:	4b24      	ldr	r3, [pc, #144]	; (800e9b4 <__d2b+0xa8>)
 800e922:	4825      	ldr	r0, [pc, #148]	; (800e9b8 <__d2b+0xac>)
 800e924:	4925      	ldr	r1, [pc, #148]	; (800e9bc <__d2b+0xb0>)
 800e926:	f001 fb85 	bl	8010034 <__assert_func>
 800e92a:	032b      	lsls	r3, r5, #12
 800e92c:	006d      	lsls	r5, r5, #1
 800e92e:	0b1b      	lsrs	r3, r3, #12
 800e930:	0d6d      	lsrs	r5, r5, #21
 800e932:	d125      	bne.n	800e980 <__d2b+0x74>
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	2c00      	cmp	r4, #0
 800e938:	d028      	beq.n	800e98c <__d2b+0x80>
 800e93a:	4668      	mov	r0, sp
 800e93c:	9400      	str	r4, [sp, #0]
 800e93e:	f7ff fd09 	bl	800e354 <__lo0bits>
 800e942:	9b01      	ldr	r3, [sp, #4]
 800e944:	9900      	ldr	r1, [sp, #0]
 800e946:	2800      	cmp	r0, #0
 800e948:	d01e      	beq.n	800e988 <__d2b+0x7c>
 800e94a:	2220      	movs	r2, #32
 800e94c:	001c      	movs	r4, r3
 800e94e:	1a12      	subs	r2, r2, r0
 800e950:	4094      	lsls	r4, r2
 800e952:	0022      	movs	r2, r4
 800e954:	40c3      	lsrs	r3, r0
 800e956:	430a      	orrs	r2, r1
 800e958:	6172      	str	r2, [r6, #20]
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	9c01      	ldr	r4, [sp, #4]
 800e95e:	61b4      	str	r4, [r6, #24]
 800e960:	1e63      	subs	r3, r4, #1
 800e962:	419c      	sbcs	r4, r3
 800e964:	3401      	adds	r4, #1
 800e966:	6134      	str	r4, [r6, #16]
 800e968:	2d00      	cmp	r5, #0
 800e96a:	d017      	beq.n	800e99c <__d2b+0x90>
 800e96c:	2435      	movs	r4, #53	; 0x35
 800e96e:	4b14      	ldr	r3, [pc, #80]	; (800e9c0 <__d2b+0xb4>)
 800e970:	18ed      	adds	r5, r5, r3
 800e972:	182d      	adds	r5, r5, r0
 800e974:	603d      	str	r5, [r7, #0]
 800e976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e978:	1a24      	subs	r4, r4, r0
 800e97a:	601c      	str	r4, [r3, #0]
 800e97c:	0030      	movs	r0, r6
 800e97e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e980:	2280      	movs	r2, #128	; 0x80
 800e982:	0352      	lsls	r2, r2, #13
 800e984:	4313      	orrs	r3, r2
 800e986:	e7d5      	b.n	800e934 <__d2b+0x28>
 800e988:	6171      	str	r1, [r6, #20]
 800e98a:	e7e7      	b.n	800e95c <__d2b+0x50>
 800e98c:	a801      	add	r0, sp, #4
 800e98e:	f7ff fce1 	bl	800e354 <__lo0bits>
 800e992:	9b01      	ldr	r3, [sp, #4]
 800e994:	2401      	movs	r4, #1
 800e996:	6173      	str	r3, [r6, #20]
 800e998:	3020      	adds	r0, #32
 800e99a:	e7e4      	b.n	800e966 <__d2b+0x5a>
 800e99c:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <__d2b+0xb8>)
 800e99e:	18c0      	adds	r0, r0, r3
 800e9a0:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <__d2b+0xbc>)
 800e9a2:	6038      	str	r0, [r7, #0]
 800e9a4:	18e3      	adds	r3, r4, r3
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	18f3      	adds	r3, r6, r3
 800e9aa:	6958      	ldr	r0, [r3, #20]
 800e9ac:	f7ff fcb8 	bl	800e320 <__hi0bits>
 800e9b0:	0164      	lsls	r4, r4, #5
 800e9b2:	e7e0      	b.n	800e976 <__d2b+0x6a>
 800e9b4:	08010e9d 	.word	0x08010e9d
 800e9b8:	08010eae 	.word	0x08010eae
 800e9bc:	0000030f 	.word	0x0000030f
 800e9c0:	fffffbcd 	.word	0xfffffbcd
 800e9c4:	fffffbce 	.word	0xfffffbce
 800e9c8:	3fffffff 	.word	0x3fffffff

0800e9cc <__ratio>:
 800e9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ce:	b087      	sub	sp, #28
 800e9d0:	000f      	movs	r7, r1
 800e9d2:	a904      	add	r1, sp, #16
 800e9d4:	0006      	movs	r6, r0
 800e9d6:	f7ff ff4d 	bl	800e874 <__b2d>
 800e9da:	9000      	str	r0, [sp, #0]
 800e9dc:	9101      	str	r1, [sp, #4]
 800e9de:	9c00      	ldr	r4, [sp, #0]
 800e9e0:	9d01      	ldr	r5, [sp, #4]
 800e9e2:	0038      	movs	r0, r7
 800e9e4:	a905      	add	r1, sp, #20
 800e9e6:	f7ff ff45 	bl	800e874 <__b2d>
 800e9ea:	9002      	str	r0, [sp, #8]
 800e9ec:	9103      	str	r1, [sp, #12]
 800e9ee:	9a02      	ldr	r2, [sp, #8]
 800e9f0:	9b03      	ldr	r3, [sp, #12]
 800e9f2:	6930      	ldr	r0, [r6, #16]
 800e9f4:	6939      	ldr	r1, [r7, #16]
 800e9f6:	9e04      	ldr	r6, [sp, #16]
 800e9f8:	1a40      	subs	r0, r0, r1
 800e9fa:	9905      	ldr	r1, [sp, #20]
 800e9fc:	0140      	lsls	r0, r0, #5
 800e9fe:	1a71      	subs	r1, r6, r1
 800ea00:	1841      	adds	r1, r0, r1
 800ea02:	0508      	lsls	r0, r1, #20
 800ea04:	2900      	cmp	r1, #0
 800ea06:	dd07      	ble.n	800ea18 <__ratio+0x4c>
 800ea08:	9901      	ldr	r1, [sp, #4]
 800ea0a:	1845      	adds	r5, r0, r1
 800ea0c:	0020      	movs	r0, r4
 800ea0e:	0029      	movs	r1, r5
 800ea10:	f7f2 f91a 	bl	8000c48 <__aeabi_ddiv>
 800ea14:	b007      	add	sp, #28
 800ea16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea18:	9903      	ldr	r1, [sp, #12]
 800ea1a:	1a0b      	subs	r3, r1, r0
 800ea1c:	e7f6      	b.n	800ea0c <__ratio+0x40>

0800ea1e <__copybits>:
 800ea1e:	b570      	push	{r4, r5, r6, lr}
 800ea20:	0014      	movs	r4, r2
 800ea22:	0005      	movs	r5, r0
 800ea24:	3901      	subs	r1, #1
 800ea26:	6913      	ldr	r3, [r2, #16]
 800ea28:	1149      	asrs	r1, r1, #5
 800ea2a:	3101      	adds	r1, #1
 800ea2c:	0089      	lsls	r1, r1, #2
 800ea2e:	3414      	adds	r4, #20
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	1841      	adds	r1, r0, r1
 800ea34:	18e3      	adds	r3, r4, r3
 800ea36:	42a3      	cmp	r3, r4
 800ea38:	d80d      	bhi.n	800ea56 <__copybits+0x38>
 800ea3a:	0014      	movs	r4, r2
 800ea3c:	3411      	adds	r4, #17
 800ea3e:	2500      	movs	r5, #0
 800ea40:	429c      	cmp	r4, r3
 800ea42:	d803      	bhi.n	800ea4c <__copybits+0x2e>
 800ea44:	1a9b      	subs	r3, r3, r2
 800ea46:	3b11      	subs	r3, #17
 800ea48:	089b      	lsrs	r3, r3, #2
 800ea4a:	009d      	lsls	r5, r3, #2
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	1940      	adds	r0, r0, r5
 800ea50:	4281      	cmp	r1, r0
 800ea52:	d803      	bhi.n	800ea5c <__copybits+0x3e>
 800ea54:	bd70      	pop	{r4, r5, r6, pc}
 800ea56:	cc40      	ldmia	r4!, {r6}
 800ea58:	c540      	stmia	r5!, {r6}
 800ea5a:	e7ec      	b.n	800ea36 <__copybits+0x18>
 800ea5c:	c008      	stmia	r0!, {r3}
 800ea5e:	e7f7      	b.n	800ea50 <__copybits+0x32>

0800ea60 <__any_on>:
 800ea60:	0002      	movs	r2, r0
 800ea62:	6900      	ldr	r0, [r0, #16]
 800ea64:	b510      	push	{r4, lr}
 800ea66:	3214      	adds	r2, #20
 800ea68:	114b      	asrs	r3, r1, #5
 800ea6a:	4298      	cmp	r0, r3
 800ea6c:	db13      	blt.n	800ea96 <__any_on+0x36>
 800ea6e:	dd0c      	ble.n	800ea8a <__any_on+0x2a>
 800ea70:	241f      	movs	r4, #31
 800ea72:	0008      	movs	r0, r1
 800ea74:	4020      	ands	r0, r4
 800ea76:	4221      	tst	r1, r4
 800ea78:	d007      	beq.n	800ea8a <__any_on+0x2a>
 800ea7a:	0099      	lsls	r1, r3, #2
 800ea7c:	588c      	ldr	r4, [r1, r2]
 800ea7e:	0021      	movs	r1, r4
 800ea80:	40c1      	lsrs	r1, r0
 800ea82:	4081      	lsls	r1, r0
 800ea84:	2001      	movs	r0, #1
 800ea86:	428c      	cmp	r4, r1
 800ea88:	d104      	bne.n	800ea94 <__any_on+0x34>
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	18d3      	adds	r3, r2, r3
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d803      	bhi.n	800ea9a <__any_on+0x3a>
 800ea92:	2000      	movs	r0, #0
 800ea94:	bd10      	pop	{r4, pc}
 800ea96:	0003      	movs	r3, r0
 800ea98:	e7f7      	b.n	800ea8a <__any_on+0x2a>
 800ea9a:	3b04      	subs	r3, #4
 800ea9c:	6819      	ldr	r1, [r3, #0]
 800ea9e:	2900      	cmp	r1, #0
 800eaa0:	d0f5      	beq.n	800ea8e <__any_on+0x2e>
 800eaa2:	2001      	movs	r0, #1
 800eaa4:	e7f6      	b.n	800ea94 <__any_on+0x34>
	...

0800eaa8 <sulp>:
 800eaa8:	b570      	push	{r4, r5, r6, lr}
 800eaaa:	0016      	movs	r6, r2
 800eaac:	000d      	movs	r5, r1
 800eaae:	f7ff fec5 	bl	800e83c <__ulp>
 800eab2:	2e00      	cmp	r6, #0
 800eab4:	d00d      	beq.n	800ead2 <sulp+0x2a>
 800eab6:	236b      	movs	r3, #107	; 0x6b
 800eab8:	006a      	lsls	r2, r5, #1
 800eaba:	0d52      	lsrs	r2, r2, #21
 800eabc:	1a9b      	subs	r3, r3, r2
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	dd07      	ble.n	800ead2 <sulp+0x2a>
 800eac2:	2400      	movs	r4, #0
 800eac4:	4a03      	ldr	r2, [pc, #12]	; (800ead4 <sulp+0x2c>)
 800eac6:	051b      	lsls	r3, r3, #20
 800eac8:	189d      	adds	r5, r3, r2
 800eaca:	002b      	movs	r3, r5
 800eacc:	0022      	movs	r2, r4
 800eace:	f7f2 fcb5 	bl	800143c <__aeabi_dmul>
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	3ff00000 	.word	0x3ff00000

0800ead8 <_strtod_l>:
 800ead8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eada:	b0a1      	sub	sp, #132	; 0x84
 800eadc:	9219      	str	r2, [sp, #100]	; 0x64
 800eade:	2200      	movs	r2, #0
 800eae0:	2600      	movs	r6, #0
 800eae2:	2700      	movs	r7, #0
 800eae4:	9004      	str	r0, [sp, #16]
 800eae6:	9107      	str	r1, [sp, #28]
 800eae8:	921c      	str	r2, [sp, #112]	; 0x70
 800eaea:	911b      	str	r1, [sp, #108]	; 0x6c
 800eaec:	780a      	ldrb	r2, [r1, #0]
 800eaee:	2a2b      	cmp	r2, #43	; 0x2b
 800eaf0:	d055      	beq.n	800eb9e <_strtod_l+0xc6>
 800eaf2:	d841      	bhi.n	800eb78 <_strtod_l+0xa0>
 800eaf4:	2a0d      	cmp	r2, #13
 800eaf6:	d83b      	bhi.n	800eb70 <_strtod_l+0x98>
 800eaf8:	2a08      	cmp	r2, #8
 800eafa:	d83b      	bhi.n	800eb74 <_strtod_l+0x9c>
 800eafc:	2a00      	cmp	r2, #0
 800eafe:	d044      	beq.n	800eb8a <_strtod_l+0xb2>
 800eb00:	2200      	movs	r2, #0
 800eb02:	920f      	str	r2, [sp, #60]	; 0x3c
 800eb04:	2100      	movs	r1, #0
 800eb06:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800eb08:	9109      	str	r1, [sp, #36]	; 0x24
 800eb0a:	782a      	ldrb	r2, [r5, #0]
 800eb0c:	2a30      	cmp	r2, #48	; 0x30
 800eb0e:	d000      	beq.n	800eb12 <_strtod_l+0x3a>
 800eb10:	e085      	b.n	800ec1e <_strtod_l+0x146>
 800eb12:	786a      	ldrb	r2, [r5, #1]
 800eb14:	3120      	adds	r1, #32
 800eb16:	438a      	bics	r2, r1
 800eb18:	2a58      	cmp	r2, #88	; 0x58
 800eb1a:	d000      	beq.n	800eb1e <_strtod_l+0x46>
 800eb1c:	e075      	b.n	800ec0a <_strtod_l+0x132>
 800eb1e:	9302      	str	r3, [sp, #8]
 800eb20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb22:	4a97      	ldr	r2, [pc, #604]	; (800ed80 <_strtod_l+0x2a8>)
 800eb24:	9301      	str	r3, [sp, #4]
 800eb26:	ab1c      	add	r3, sp, #112	; 0x70
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	9804      	ldr	r0, [sp, #16]
 800eb2c:	ab1d      	add	r3, sp, #116	; 0x74
 800eb2e:	a91b      	add	r1, sp, #108	; 0x6c
 800eb30:	f001 fb36 	bl	80101a0 <__gethex>
 800eb34:	230f      	movs	r3, #15
 800eb36:	0002      	movs	r2, r0
 800eb38:	401a      	ands	r2, r3
 800eb3a:	0004      	movs	r4, r0
 800eb3c:	9205      	str	r2, [sp, #20]
 800eb3e:	4218      	tst	r0, r3
 800eb40:	d005      	beq.n	800eb4e <_strtod_l+0x76>
 800eb42:	2a06      	cmp	r2, #6
 800eb44:	d12d      	bne.n	800eba2 <_strtod_l+0xca>
 800eb46:	1c6b      	adds	r3, r5, #1
 800eb48:	931b      	str	r3, [sp, #108]	; 0x6c
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d002      	beq.n	800eb5a <_strtod_l+0x82>
 800eb54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb58:	6013      	str	r3, [r2, #0]
 800eb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d01b      	beq.n	800eb98 <_strtod_l+0xc0>
 800eb60:	2380      	movs	r3, #128	; 0x80
 800eb62:	0032      	movs	r2, r6
 800eb64:	061b      	lsls	r3, r3, #24
 800eb66:	18fb      	adds	r3, r7, r3
 800eb68:	0010      	movs	r0, r2
 800eb6a:	0019      	movs	r1, r3
 800eb6c:	b021      	add	sp, #132	; 0x84
 800eb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb70:	2a20      	cmp	r2, #32
 800eb72:	d1c5      	bne.n	800eb00 <_strtod_l+0x28>
 800eb74:	3101      	adds	r1, #1
 800eb76:	e7b8      	b.n	800eaea <_strtod_l+0x12>
 800eb78:	2a2d      	cmp	r2, #45	; 0x2d
 800eb7a:	d1c1      	bne.n	800eb00 <_strtod_l+0x28>
 800eb7c:	3a2c      	subs	r2, #44	; 0x2c
 800eb7e:	920f      	str	r2, [sp, #60]	; 0x3c
 800eb80:	1c4a      	adds	r2, r1, #1
 800eb82:	921b      	str	r2, [sp, #108]	; 0x6c
 800eb84:	784a      	ldrb	r2, [r1, #1]
 800eb86:	2a00      	cmp	r2, #0
 800eb88:	d1bc      	bne.n	800eb04 <_strtod_l+0x2c>
 800eb8a:	9b07      	ldr	r3, [sp, #28]
 800eb8c:	931b      	str	r3, [sp, #108]	; 0x6c
 800eb8e:	2300      	movs	r3, #0
 800eb90:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1dd      	bne.n	800eb54 <_strtod_l+0x7c>
 800eb98:	0032      	movs	r2, r6
 800eb9a:	003b      	movs	r3, r7
 800eb9c:	e7e4      	b.n	800eb68 <_strtod_l+0x90>
 800eb9e:	2200      	movs	r2, #0
 800eba0:	e7ed      	b.n	800eb7e <_strtod_l+0xa6>
 800eba2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800eba4:	2a00      	cmp	r2, #0
 800eba6:	d007      	beq.n	800ebb8 <_strtod_l+0xe0>
 800eba8:	2135      	movs	r1, #53	; 0x35
 800ebaa:	a81e      	add	r0, sp, #120	; 0x78
 800ebac:	f7ff ff37 	bl	800ea1e <__copybits>
 800ebb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ebb2:	9804      	ldr	r0, [sp, #16]
 800ebb4:	f7ff fb00 	bl	800e1b8 <_Bfree>
 800ebb8:	9805      	ldr	r0, [sp, #20]
 800ebba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ebbc:	3801      	subs	r0, #1
 800ebbe:	2804      	cmp	r0, #4
 800ebc0:	d806      	bhi.n	800ebd0 <_strtod_l+0xf8>
 800ebc2:	f7f1 faa9 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ebc6:	0312      	.short	0x0312
 800ebc8:	1e1c      	.short	0x1e1c
 800ebca:	12          	.byte	0x12
 800ebcb:	00          	.byte	0x00
 800ebcc:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ebce:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800ebd0:	05e4      	lsls	r4, r4, #23
 800ebd2:	d502      	bpl.n	800ebda <_strtod_l+0x102>
 800ebd4:	2380      	movs	r3, #128	; 0x80
 800ebd6:	061b      	lsls	r3, r3, #24
 800ebd8:	431f      	orrs	r7, r3
 800ebda:	4b6a      	ldr	r3, [pc, #424]	; (800ed84 <_strtod_l+0x2ac>)
 800ebdc:	423b      	tst	r3, r7
 800ebde:	d1b6      	bne.n	800eb4e <_strtod_l+0x76>
 800ebe0:	f7fe faba 	bl	800d158 <__errno>
 800ebe4:	2322      	movs	r3, #34	; 0x22
 800ebe6:	6003      	str	r3, [r0, #0]
 800ebe8:	e7b1      	b.n	800eb4e <_strtod_l+0x76>
 800ebea:	4967      	ldr	r1, [pc, #412]	; (800ed88 <_strtod_l+0x2b0>)
 800ebec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ebee:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ebf0:	400a      	ands	r2, r1
 800ebf2:	4966      	ldr	r1, [pc, #408]	; (800ed8c <_strtod_l+0x2b4>)
 800ebf4:	185b      	adds	r3, r3, r1
 800ebf6:	051b      	lsls	r3, r3, #20
 800ebf8:	431a      	orrs	r2, r3
 800ebfa:	0017      	movs	r7, r2
 800ebfc:	e7e8      	b.n	800ebd0 <_strtod_l+0xf8>
 800ebfe:	4f61      	ldr	r7, [pc, #388]	; (800ed84 <_strtod_l+0x2ac>)
 800ec00:	e7e6      	b.n	800ebd0 <_strtod_l+0xf8>
 800ec02:	2601      	movs	r6, #1
 800ec04:	4f62      	ldr	r7, [pc, #392]	; (800ed90 <_strtod_l+0x2b8>)
 800ec06:	4276      	negs	r6, r6
 800ec08:	e7e2      	b.n	800ebd0 <_strtod_l+0xf8>
 800ec0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec0c:	1c5a      	adds	r2, r3, #1
 800ec0e:	921b      	str	r2, [sp, #108]	; 0x6c
 800ec10:	785b      	ldrb	r3, [r3, #1]
 800ec12:	2b30      	cmp	r3, #48	; 0x30
 800ec14:	d0f9      	beq.n	800ec0a <_strtod_l+0x132>
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d099      	beq.n	800eb4e <_strtod_l+0x76>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec1e:	2500      	movs	r5, #0
 800ec20:	220a      	movs	r2, #10
 800ec22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec24:	950d      	str	r5, [sp, #52]	; 0x34
 800ec26:	9310      	str	r3, [sp, #64]	; 0x40
 800ec28:	9508      	str	r5, [sp, #32]
 800ec2a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ec2c:	7804      	ldrb	r4, [r0, #0]
 800ec2e:	0023      	movs	r3, r4
 800ec30:	3b30      	subs	r3, #48	; 0x30
 800ec32:	b2d9      	uxtb	r1, r3
 800ec34:	2909      	cmp	r1, #9
 800ec36:	d927      	bls.n	800ec88 <_strtod_l+0x1b0>
 800ec38:	2201      	movs	r2, #1
 800ec3a:	4956      	ldr	r1, [pc, #344]	; (800ed94 <_strtod_l+0x2bc>)
 800ec3c:	f7fe f9ca 	bl	800cfd4 <strncmp>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d031      	beq.n	800eca8 <_strtod_l+0x1d0>
 800ec44:	2000      	movs	r0, #0
 800ec46:	0023      	movs	r3, r4
 800ec48:	4684      	mov	ip, r0
 800ec4a:	9a08      	ldr	r2, [sp, #32]
 800ec4c:	900c      	str	r0, [sp, #48]	; 0x30
 800ec4e:	9205      	str	r2, [sp, #20]
 800ec50:	2220      	movs	r2, #32
 800ec52:	0019      	movs	r1, r3
 800ec54:	4391      	bics	r1, r2
 800ec56:	000a      	movs	r2, r1
 800ec58:	2100      	movs	r1, #0
 800ec5a:	9106      	str	r1, [sp, #24]
 800ec5c:	2a45      	cmp	r2, #69	; 0x45
 800ec5e:	d000      	beq.n	800ec62 <_strtod_l+0x18a>
 800ec60:	e0c2      	b.n	800ede8 <_strtod_l+0x310>
 800ec62:	9b05      	ldr	r3, [sp, #20]
 800ec64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec66:	4303      	orrs	r3, r0
 800ec68:	4313      	orrs	r3, r2
 800ec6a:	428b      	cmp	r3, r1
 800ec6c:	d08d      	beq.n	800eb8a <_strtod_l+0xb2>
 800ec6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec70:	9307      	str	r3, [sp, #28]
 800ec72:	3301      	adds	r3, #1
 800ec74:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec76:	9b07      	ldr	r3, [sp, #28]
 800ec78:	785b      	ldrb	r3, [r3, #1]
 800ec7a:	2b2b      	cmp	r3, #43	; 0x2b
 800ec7c:	d071      	beq.n	800ed62 <_strtod_l+0x28a>
 800ec7e:	000c      	movs	r4, r1
 800ec80:	2b2d      	cmp	r3, #45	; 0x2d
 800ec82:	d174      	bne.n	800ed6e <_strtod_l+0x296>
 800ec84:	2401      	movs	r4, #1
 800ec86:	e06d      	b.n	800ed64 <_strtod_l+0x28c>
 800ec88:	9908      	ldr	r1, [sp, #32]
 800ec8a:	2908      	cmp	r1, #8
 800ec8c:	dc09      	bgt.n	800eca2 <_strtod_l+0x1ca>
 800ec8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ec90:	4351      	muls	r1, r2
 800ec92:	185b      	adds	r3, r3, r1
 800ec94:	930d      	str	r3, [sp, #52]	; 0x34
 800ec96:	9b08      	ldr	r3, [sp, #32]
 800ec98:	3001      	adds	r0, #1
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	9308      	str	r3, [sp, #32]
 800ec9e:	901b      	str	r0, [sp, #108]	; 0x6c
 800eca0:	e7c3      	b.n	800ec2a <_strtod_l+0x152>
 800eca2:	4355      	muls	r5, r2
 800eca4:	195d      	adds	r5, r3, r5
 800eca6:	e7f6      	b.n	800ec96 <_strtod_l+0x1be>
 800eca8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ecaa:	1c5a      	adds	r2, r3, #1
 800ecac:	921b      	str	r2, [sp, #108]	; 0x6c
 800ecae:	9a08      	ldr	r2, [sp, #32]
 800ecb0:	785b      	ldrb	r3, [r3, #1]
 800ecb2:	2a00      	cmp	r2, #0
 800ecb4:	d03a      	beq.n	800ed2c <_strtod_l+0x254>
 800ecb6:	900c      	str	r0, [sp, #48]	; 0x30
 800ecb8:	9205      	str	r2, [sp, #20]
 800ecba:	001a      	movs	r2, r3
 800ecbc:	3a30      	subs	r2, #48	; 0x30
 800ecbe:	2a09      	cmp	r2, #9
 800ecc0:	d912      	bls.n	800ece8 <_strtod_l+0x210>
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	4694      	mov	ip, r2
 800ecc6:	e7c3      	b.n	800ec50 <_strtod_l+0x178>
 800ecc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ecca:	3001      	adds	r0, #1
 800eccc:	1c5a      	adds	r2, r3, #1
 800ecce:	921b      	str	r2, [sp, #108]	; 0x6c
 800ecd0:	785b      	ldrb	r3, [r3, #1]
 800ecd2:	2b30      	cmp	r3, #48	; 0x30
 800ecd4:	d0f8      	beq.n	800ecc8 <_strtod_l+0x1f0>
 800ecd6:	001a      	movs	r2, r3
 800ecd8:	3a31      	subs	r2, #49	; 0x31
 800ecda:	2a08      	cmp	r2, #8
 800ecdc:	d83c      	bhi.n	800ed58 <_strtod_l+0x280>
 800ecde:	900c      	str	r0, [sp, #48]	; 0x30
 800ece0:	2000      	movs	r0, #0
 800ece2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ece4:	9005      	str	r0, [sp, #20]
 800ece6:	9210      	str	r2, [sp, #64]	; 0x40
 800ece8:	001a      	movs	r2, r3
 800ecea:	1c41      	adds	r1, r0, #1
 800ecec:	3a30      	subs	r2, #48	; 0x30
 800ecee:	2b30      	cmp	r3, #48	; 0x30
 800ecf0:	d016      	beq.n	800ed20 <_strtod_l+0x248>
 800ecf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecf4:	185b      	adds	r3, r3, r1
 800ecf6:	930c      	str	r3, [sp, #48]	; 0x30
 800ecf8:	9b05      	ldr	r3, [sp, #20]
 800ecfa:	210a      	movs	r1, #10
 800ecfc:	469c      	mov	ip, r3
 800ecfe:	4484      	add	ip, r0
 800ed00:	4563      	cmp	r3, ip
 800ed02:	d115      	bne.n	800ed30 <_strtod_l+0x258>
 800ed04:	9905      	ldr	r1, [sp, #20]
 800ed06:	9b05      	ldr	r3, [sp, #20]
 800ed08:	3101      	adds	r1, #1
 800ed0a:	1809      	adds	r1, r1, r0
 800ed0c:	181b      	adds	r3, r3, r0
 800ed0e:	9105      	str	r1, [sp, #20]
 800ed10:	2b08      	cmp	r3, #8
 800ed12:	dc19      	bgt.n	800ed48 <_strtod_l+0x270>
 800ed14:	230a      	movs	r3, #10
 800ed16:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ed18:	434b      	muls	r3, r1
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	18d3      	adds	r3, r2, r3
 800ed1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ed20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed22:	0008      	movs	r0, r1
 800ed24:	1c5a      	adds	r2, r3, #1
 800ed26:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed28:	785b      	ldrb	r3, [r3, #1]
 800ed2a:	e7c6      	b.n	800ecba <_strtod_l+0x1e2>
 800ed2c:	9808      	ldr	r0, [sp, #32]
 800ed2e:	e7d0      	b.n	800ecd2 <_strtod_l+0x1fa>
 800ed30:	1c5c      	adds	r4, r3, #1
 800ed32:	2b08      	cmp	r3, #8
 800ed34:	dc04      	bgt.n	800ed40 <_strtod_l+0x268>
 800ed36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed38:	434b      	muls	r3, r1
 800ed3a:	930d      	str	r3, [sp, #52]	; 0x34
 800ed3c:	0023      	movs	r3, r4
 800ed3e:	e7df      	b.n	800ed00 <_strtod_l+0x228>
 800ed40:	2c10      	cmp	r4, #16
 800ed42:	dcfb      	bgt.n	800ed3c <_strtod_l+0x264>
 800ed44:	434d      	muls	r5, r1
 800ed46:	e7f9      	b.n	800ed3c <_strtod_l+0x264>
 800ed48:	9b05      	ldr	r3, [sp, #20]
 800ed4a:	2100      	movs	r1, #0
 800ed4c:	2b10      	cmp	r3, #16
 800ed4e:	dce7      	bgt.n	800ed20 <_strtod_l+0x248>
 800ed50:	230a      	movs	r3, #10
 800ed52:	435d      	muls	r5, r3
 800ed54:	1955      	adds	r5, r2, r5
 800ed56:	e7e3      	b.n	800ed20 <_strtod_l+0x248>
 800ed58:	2200      	movs	r2, #0
 800ed5a:	920c      	str	r2, [sp, #48]	; 0x30
 800ed5c:	9205      	str	r2, [sp, #20]
 800ed5e:	3201      	adds	r2, #1
 800ed60:	e7b0      	b.n	800ecc4 <_strtod_l+0x1ec>
 800ed62:	2400      	movs	r4, #0
 800ed64:	9b07      	ldr	r3, [sp, #28]
 800ed66:	3302      	adds	r3, #2
 800ed68:	931b      	str	r3, [sp, #108]	; 0x6c
 800ed6a:	9b07      	ldr	r3, [sp, #28]
 800ed6c:	789b      	ldrb	r3, [r3, #2]
 800ed6e:	001a      	movs	r2, r3
 800ed70:	3a30      	subs	r2, #48	; 0x30
 800ed72:	2a09      	cmp	r2, #9
 800ed74:	d914      	bls.n	800eda0 <_strtod_l+0x2c8>
 800ed76:	9a07      	ldr	r2, [sp, #28]
 800ed78:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	e033      	b.n	800ede6 <_strtod_l+0x30e>
 800ed7e:	46c0      	nop			; (mov r8, r8)
 800ed80:	08011008 	.word	0x08011008
 800ed84:	7ff00000 	.word	0x7ff00000
 800ed88:	ffefffff 	.word	0xffefffff
 800ed8c:	00000433 	.word	0x00000433
 800ed90:	7fffffff 	.word	0x7fffffff
 800ed94:	08011004 	.word	0x08011004
 800ed98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed9a:	1c5a      	adds	r2, r3, #1
 800ed9c:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed9e:	785b      	ldrb	r3, [r3, #1]
 800eda0:	2b30      	cmp	r3, #48	; 0x30
 800eda2:	d0f9      	beq.n	800ed98 <_strtod_l+0x2c0>
 800eda4:	2200      	movs	r2, #0
 800eda6:	9206      	str	r2, [sp, #24]
 800eda8:	001a      	movs	r2, r3
 800edaa:	3a31      	subs	r2, #49	; 0x31
 800edac:	2a08      	cmp	r2, #8
 800edae:	d81b      	bhi.n	800ede8 <_strtod_l+0x310>
 800edb0:	3b30      	subs	r3, #48	; 0x30
 800edb2:	930e      	str	r3, [sp, #56]	; 0x38
 800edb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800edb6:	9306      	str	r3, [sp, #24]
 800edb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800edba:	1c59      	adds	r1, r3, #1
 800edbc:	911b      	str	r1, [sp, #108]	; 0x6c
 800edbe:	785b      	ldrb	r3, [r3, #1]
 800edc0:	001a      	movs	r2, r3
 800edc2:	3a30      	subs	r2, #48	; 0x30
 800edc4:	2a09      	cmp	r2, #9
 800edc6:	d93a      	bls.n	800ee3e <_strtod_l+0x366>
 800edc8:	9a06      	ldr	r2, [sp, #24]
 800edca:	1a8a      	subs	r2, r1, r2
 800edcc:	49b2      	ldr	r1, [pc, #712]	; (800f098 <_strtod_l+0x5c0>)
 800edce:	9106      	str	r1, [sp, #24]
 800edd0:	2a08      	cmp	r2, #8
 800edd2:	dc04      	bgt.n	800edde <_strtod_l+0x306>
 800edd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800edd6:	9206      	str	r2, [sp, #24]
 800edd8:	428a      	cmp	r2, r1
 800edda:	dd00      	ble.n	800edde <_strtod_l+0x306>
 800eddc:	9106      	str	r1, [sp, #24]
 800edde:	2c00      	cmp	r4, #0
 800ede0:	d002      	beq.n	800ede8 <_strtod_l+0x310>
 800ede2:	9a06      	ldr	r2, [sp, #24]
 800ede4:	4252      	negs	r2, r2
 800ede6:	9206      	str	r2, [sp, #24]
 800ede8:	9a05      	ldr	r2, [sp, #20]
 800edea:	2a00      	cmp	r2, #0
 800edec:	d14d      	bne.n	800ee8a <_strtod_l+0x3b2>
 800edee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edf0:	4310      	orrs	r0, r2
 800edf2:	d000      	beq.n	800edf6 <_strtod_l+0x31e>
 800edf4:	e6ab      	b.n	800eb4e <_strtod_l+0x76>
 800edf6:	4662      	mov	r2, ip
 800edf8:	2a00      	cmp	r2, #0
 800edfa:	d000      	beq.n	800edfe <_strtod_l+0x326>
 800edfc:	e6c5      	b.n	800eb8a <_strtod_l+0xb2>
 800edfe:	2b69      	cmp	r3, #105	; 0x69
 800ee00:	d027      	beq.n	800ee52 <_strtod_l+0x37a>
 800ee02:	dc23      	bgt.n	800ee4c <_strtod_l+0x374>
 800ee04:	2b49      	cmp	r3, #73	; 0x49
 800ee06:	d024      	beq.n	800ee52 <_strtod_l+0x37a>
 800ee08:	2b4e      	cmp	r3, #78	; 0x4e
 800ee0a:	d000      	beq.n	800ee0e <_strtod_l+0x336>
 800ee0c:	e6bd      	b.n	800eb8a <_strtod_l+0xb2>
 800ee0e:	49a3      	ldr	r1, [pc, #652]	; (800f09c <_strtod_l+0x5c4>)
 800ee10:	a81b      	add	r0, sp, #108	; 0x6c
 800ee12:	f001 fbfb 	bl	801060c <__match>
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d100      	bne.n	800ee1c <_strtod_l+0x344>
 800ee1a:	e6b6      	b.n	800eb8a <_strtod_l+0xb2>
 800ee1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	2b28      	cmp	r3, #40	; 0x28
 800ee22:	d12c      	bne.n	800ee7e <_strtod_l+0x3a6>
 800ee24:	499e      	ldr	r1, [pc, #632]	; (800f0a0 <_strtod_l+0x5c8>)
 800ee26:	aa1e      	add	r2, sp, #120	; 0x78
 800ee28:	a81b      	add	r0, sp, #108	; 0x6c
 800ee2a:	f001 fc03 	bl	8010634 <__hexnan>
 800ee2e:	2805      	cmp	r0, #5
 800ee30:	d125      	bne.n	800ee7e <_strtod_l+0x3a6>
 800ee32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee34:	4a9b      	ldr	r2, [pc, #620]	; (800f0a4 <_strtod_l+0x5cc>)
 800ee36:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ee38:	431a      	orrs	r2, r3
 800ee3a:	0017      	movs	r7, r2
 800ee3c:	e687      	b.n	800eb4e <_strtod_l+0x76>
 800ee3e:	220a      	movs	r2, #10
 800ee40:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ee42:	434a      	muls	r2, r1
 800ee44:	18d2      	adds	r2, r2, r3
 800ee46:	3a30      	subs	r2, #48	; 0x30
 800ee48:	920e      	str	r2, [sp, #56]	; 0x38
 800ee4a:	e7b5      	b.n	800edb8 <_strtod_l+0x2e0>
 800ee4c:	2b6e      	cmp	r3, #110	; 0x6e
 800ee4e:	d0de      	beq.n	800ee0e <_strtod_l+0x336>
 800ee50:	e69b      	b.n	800eb8a <_strtod_l+0xb2>
 800ee52:	4995      	ldr	r1, [pc, #596]	; (800f0a8 <_strtod_l+0x5d0>)
 800ee54:	a81b      	add	r0, sp, #108	; 0x6c
 800ee56:	f001 fbd9 	bl	801060c <__match>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	d100      	bne.n	800ee60 <_strtod_l+0x388>
 800ee5e:	e694      	b.n	800eb8a <_strtod_l+0xb2>
 800ee60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee62:	4992      	ldr	r1, [pc, #584]	; (800f0ac <_strtod_l+0x5d4>)
 800ee64:	3b01      	subs	r3, #1
 800ee66:	a81b      	add	r0, sp, #108	; 0x6c
 800ee68:	931b      	str	r3, [sp, #108]	; 0x6c
 800ee6a:	f001 fbcf 	bl	801060c <__match>
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d102      	bne.n	800ee78 <_strtod_l+0x3a0>
 800ee72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee74:	3301      	adds	r3, #1
 800ee76:	931b      	str	r3, [sp, #108]	; 0x6c
 800ee78:	2600      	movs	r6, #0
 800ee7a:	4f8a      	ldr	r7, [pc, #552]	; (800f0a4 <_strtod_l+0x5cc>)
 800ee7c:	e667      	b.n	800eb4e <_strtod_l+0x76>
 800ee7e:	488c      	ldr	r0, [pc, #560]	; (800f0b0 <_strtod_l+0x5d8>)
 800ee80:	f001 f8d2 	bl	8010028 <nan>
 800ee84:	0006      	movs	r6, r0
 800ee86:	000f      	movs	r7, r1
 800ee88:	e661      	b.n	800eb4e <_strtod_l+0x76>
 800ee8a:	9b06      	ldr	r3, [sp, #24]
 800ee8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee8e:	1a9b      	subs	r3, r3, r2
 800ee90:	9309      	str	r3, [sp, #36]	; 0x24
 800ee92:	9b08      	ldr	r3, [sp, #32]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d101      	bne.n	800ee9c <_strtod_l+0x3c4>
 800ee98:	9b05      	ldr	r3, [sp, #20]
 800ee9a:	9308      	str	r3, [sp, #32]
 800ee9c:	9c05      	ldr	r4, [sp, #20]
 800ee9e:	2c10      	cmp	r4, #16
 800eea0:	dd00      	ble.n	800eea4 <_strtod_l+0x3cc>
 800eea2:	2410      	movs	r4, #16
 800eea4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eea6:	f7f3 f991 	bl	80021cc <__aeabi_ui2d>
 800eeaa:	9b05      	ldr	r3, [sp, #20]
 800eeac:	0006      	movs	r6, r0
 800eeae:	000f      	movs	r7, r1
 800eeb0:	2b09      	cmp	r3, #9
 800eeb2:	dd15      	ble.n	800eee0 <_strtod_l+0x408>
 800eeb4:	0022      	movs	r2, r4
 800eeb6:	4b7f      	ldr	r3, [pc, #508]	; (800f0b4 <_strtod_l+0x5dc>)
 800eeb8:	3a09      	subs	r2, #9
 800eeba:	00d2      	lsls	r2, r2, #3
 800eebc:	189b      	adds	r3, r3, r2
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	f7f2 fabb 	bl	800143c <__aeabi_dmul>
 800eec6:	0006      	movs	r6, r0
 800eec8:	0028      	movs	r0, r5
 800eeca:	000f      	movs	r7, r1
 800eecc:	f7f3 f97e 	bl	80021cc <__aeabi_ui2d>
 800eed0:	0002      	movs	r2, r0
 800eed2:	000b      	movs	r3, r1
 800eed4:	0030      	movs	r0, r6
 800eed6:	0039      	movs	r1, r7
 800eed8:	f7f1 fb56 	bl	8000588 <__aeabi_dadd>
 800eedc:	0006      	movs	r6, r0
 800eede:	000f      	movs	r7, r1
 800eee0:	9b05      	ldr	r3, [sp, #20]
 800eee2:	2b0f      	cmp	r3, #15
 800eee4:	dc39      	bgt.n	800ef5a <_strtod_l+0x482>
 800eee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d100      	bne.n	800eeee <_strtod_l+0x416>
 800eeec:	e62f      	b.n	800eb4e <_strtod_l+0x76>
 800eeee:	dd24      	ble.n	800ef3a <_strtod_l+0x462>
 800eef0:	2b16      	cmp	r3, #22
 800eef2:	dc09      	bgt.n	800ef08 <_strtod_l+0x430>
 800eef4:	496f      	ldr	r1, [pc, #444]	; (800f0b4 <_strtod_l+0x5dc>)
 800eef6:	00db      	lsls	r3, r3, #3
 800eef8:	18c9      	adds	r1, r1, r3
 800eefa:	0032      	movs	r2, r6
 800eefc:	6808      	ldr	r0, [r1, #0]
 800eefe:	6849      	ldr	r1, [r1, #4]
 800ef00:	003b      	movs	r3, r7
 800ef02:	f7f2 fa9b 	bl	800143c <__aeabi_dmul>
 800ef06:	e7bd      	b.n	800ee84 <_strtod_l+0x3ac>
 800ef08:	2325      	movs	r3, #37	; 0x25
 800ef0a:	9a05      	ldr	r2, [sp, #20]
 800ef0c:	1a9b      	subs	r3, r3, r2
 800ef0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef10:	4293      	cmp	r3, r2
 800ef12:	db22      	blt.n	800ef5a <_strtod_l+0x482>
 800ef14:	240f      	movs	r4, #15
 800ef16:	9b05      	ldr	r3, [sp, #20]
 800ef18:	4d66      	ldr	r5, [pc, #408]	; (800f0b4 <_strtod_l+0x5dc>)
 800ef1a:	1ae4      	subs	r4, r4, r3
 800ef1c:	00e1      	lsls	r1, r4, #3
 800ef1e:	1869      	adds	r1, r5, r1
 800ef20:	0032      	movs	r2, r6
 800ef22:	6808      	ldr	r0, [r1, #0]
 800ef24:	6849      	ldr	r1, [r1, #4]
 800ef26:	003b      	movs	r3, r7
 800ef28:	f7f2 fa88 	bl	800143c <__aeabi_dmul>
 800ef2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef2e:	1b1c      	subs	r4, r3, r4
 800ef30:	00e4      	lsls	r4, r4, #3
 800ef32:	192d      	adds	r5, r5, r4
 800ef34:	682a      	ldr	r2, [r5, #0]
 800ef36:	686b      	ldr	r3, [r5, #4]
 800ef38:	e7e3      	b.n	800ef02 <_strtod_l+0x42a>
 800ef3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef3c:	3316      	adds	r3, #22
 800ef3e:	db0c      	blt.n	800ef5a <_strtod_l+0x482>
 800ef40:	9906      	ldr	r1, [sp, #24]
 800ef42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef44:	4b5b      	ldr	r3, [pc, #364]	; (800f0b4 <_strtod_l+0x5dc>)
 800ef46:	1a52      	subs	r2, r2, r1
 800ef48:	00d2      	lsls	r2, r2, #3
 800ef4a:	189b      	adds	r3, r3, r2
 800ef4c:	0030      	movs	r0, r6
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	0039      	movs	r1, r7
 800ef54:	f7f1 fe78 	bl	8000c48 <__aeabi_ddiv>
 800ef58:	e794      	b.n	800ee84 <_strtod_l+0x3ac>
 800ef5a:	9b05      	ldr	r3, [sp, #20]
 800ef5c:	1b1c      	subs	r4, r3, r4
 800ef5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef60:	18e4      	adds	r4, r4, r3
 800ef62:	2c00      	cmp	r4, #0
 800ef64:	dd72      	ble.n	800f04c <_strtod_l+0x574>
 800ef66:	220f      	movs	r2, #15
 800ef68:	0023      	movs	r3, r4
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	4214      	tst	r4, r2
 800ef6e:	d00a      	beq.n	800ef86 <_strtod_l+0x4ae>
 800ef70:	4950      	ldr	r1, [pc, #320]	; (800f0b4 <_strtod_l+0x5dc>)
 800ef72:	00db      	lsls	r3, r3, #3
 800ef74:	18c9      	adds	r1, r1, r3
 800ef76:	0032      	movs	r2, r6
 800ef78:	6808      	ldr	r0, [r1, #0]
 800ef7a:	6849      	ldr	r1, [r1, #4]
 800ef7c:	003b      	movs	r3, r7
 800ef7e:	f7f2 fa5d 	bl	800143c <__aeabi_dmul>
 800ef82:	0006      	movs	r6, r0
 800ef84:	000f      	movs	r7, r1
 800ef86:	230f      	movs	r3, #15
 800ef88:	439c      	bics	r4, r3
 800ef8a:	d04a      	beq.n	800f022 <_strtod_l+0x54a>
 800ef8c:	3326      	adds	r3, #38	; 0x26
 800ef8e:	33ff      	adds	r3, #255	; 0xff
 800ef90:	429c      	cmp	r4, r3
 800ef92:	dd22      	ble.n	800efda <_strtod_l+0x502>
 800ef94:	2300      	movs	r3, #0
 800ef96:	9305      	str	r3, [sp, #20]
 800ef98:	9306      	str	r3, [sp, #24]
 800ef9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ef9c:	9308      	str	r3, [sp, #32]
 800ef9e:	2322      	movs	r3, #34	; 0x22
 800efa0:	2600      	movs	r6, #0
 800efa2:	9a04      	ldr	r2, [sp, #16]
 800efa4:	4f3f      	ldr	r7, [pc, #252]	; (800f0a4 <_strtod_l+0x5cc>)
 800efa6:	6013      	str	r3, [r2, #0]
 800efa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efaa:	42b3      	cmp	r3, r6
 800efac:	d100      	bne.n	800efb0 <_strtod_l+0x4d8>
 800efae:	e5ce      	b.n	800eb4e <_strtod_l+0x76>
 800efb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800efb2:	9804      	ldr	r0, [sp, #16]
 800efb4:	f7ff f900 	bl	800e1b8 <_Bfree>
 800efb8:	9908      	ldr	r1, [sp, #32]
 800efba:	9804      	ldr	r0, [sp, #16]
 800efbc:	f7ff f8fc 	bl	800e1b8 <_Bfree>
 800efc0:	9906      	ldr	r1, [sp, #24]
 800efc2:	9804      	ldr	r0, [sp, #16]
 800efc4:	f7ff f8f8 	bl	800e1b8 <_Bfree>
 800efc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800efca:	9804      	ldr	r0, [sp, #16]
 800efcc:	f7ff f8f4 	bl	800e1b8 <_Bfree>
 800efd0:	9905      	ldr	r1, [sp, #20]
 800efd2:	9804      	ldr	r0, [sp, #16]
 800efd4:	f7ff f8f0 	bl	800e1b8 <_Bfree>
 800efd8:	e5b9      	b.n	800eb4e <_strtod_l+0x76>
 800efda:	2300      	movs	r3, #0
 800efdc:	0030      	movs	r0, r6
 800efde:	0039      	movs	r1, r7
 800efe0:	4d35      	ldr	r5, [pc, #212]	; (800f0b8 <_strtod_l+0x5e0>)
 800efe2:	1124      	asrs	r4, r4, #4
 800efe4:	9307      	str	r3, [sp, #28]
 800efe6:	2c01      	cmp	r4, #1
 800efe8:	dc1e      	bgt.n	800f028 <_strtod_l+0x550>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d001      	beq.n	800eff2 <_strtod_l+0x51a>
 800efee:	0006      	movs	r6, r0
 800eff0:	000f      	movs	r7, r1
 800eff2:	4b32      	ldr	r3, [pc, #200]	; (800f0bc <_strtod_l+0x5e4>)
 800eff4:	9a07      	ldr	r2, [sp, #28]
 800eff6:	18ff      	adds	r7, r7, r3
 800eff8:	4b2f      	ldr	r3, [pc, #188]	; (800f0b8 <_strtod_l+0x5e0>)
 800effa:	00d2      	lsls	r2, r2, #3
 800effc:	189d      	adds	r5, r3, r2
 800effe:	6828      	ldr	r0, [r5, #0]
 800f000:	6869      	ldr	r1, [r5, #4]
 800f002:	0032      	movs	r2, r6
 800f004:	003b      	movs	r3, r7
 800f006:	f7f2 fa19 	bl	800143c <__aeabi_dmul>
 800f00a:	4b26      	ldr	r3, [pc, #152]	; (800f0a4 <_strtod_l+0x5cc>)
 800f00c:	4a2c      	ldr	r2, [pc, #176]	; (800f0c0 <_strtod_l+0x5e8>)
 800f00e:	0006      	movs	r6, r0
 800f010:	400b      	ands	r3, r1
 800f012:	4293      	cmp	r3, r2
 800f014:	d8be      	bhi.n	800ef94 <_strtod_l+0x4bc>
 800f016:	4a2b      	ldr	r2, [pc, #172]	; (800f0c4 <_strtod_l+0x5ec>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d913      	bls.n	800f044 <_strtod_l+0x56c>
 800f01c:	2601      	movs	r6, #1
 800f01e:	4f2a      	ldr	r7, [pc, #168]	; (800f0c8 <_strtod_l+0x5f0>)
 800f020:	4276      	negs	r6, r6
 800f022:	2300      	movs	r3, #0
 800f024:	9307      	str	r3, [sp, #28]
 800f026:	e088      	b.n	800f13a <_strtod_l+0x662>
 800f028:	2201      	movs	r2, #1
 800f02a:	4214      	tst	r4, r2
 800f02c:	d004      	beq.n	800f038 <_strtod_l+0x560>
 800f02e:	682a      	ldr	r2, [r5, #0]
 800f030:	686b      	ldr	r3, [r5, #4]
 800f032:	f7f2 fa03 	bl	800143c <__aeabi_dmul>
 800f036:	2301      	movs	r3, #1
 800f038:	9a07      	ldr	r2, [sp, #28]
 800f03a:	1064      	asrs	r4, r4, #1
 800f03c:	3201      	adds	r2, #1
 800f03e:	9207      	str	r2, [sp, #28]
 800f040:	3508      	adds	r5, #8
 800f042:	e7d0      	b.n	800efe6 <_strtod_l+0x50e>
 800f044:	23d4      	movs	r3, #212	; 0xd4
 800f046:	049b      	lsls	r3, r3, #18
 800f048:	18cf      	adds	r7, r1, r3
 800f04a:	e7ea      	b.n	800f022 <_strtod_l+0x54a>
 800f04c:	2c00      	cmp	r4, #0
 800f04e:	d0e8      	beq.n	800f022 <_strtod_l+0x54a>
 800f050:	4264      	negs	r4, r4
 800f052:	230f      	movs	r3, #15
 800f054:	0022      	movs	r2, r4
 800f056:	401a      	ands	r2, r3
 800f058:	421c      	tst	r4, r3
 800f05a:	d00a      	beq.n	800f072 <_strtod_l+0x59a>
 800f05c:	4b15      	ldr	r3, [pc, #84]	; (800f0b4 <_strtod_l+0x5dc>)
 800f05e:	00d2      	lsls	r2, r2, #3
 800f060:	189b      	adds	r3, r3, r2
 800f062:	0030      	movs	r0, r6
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	0039      	movs	r1, r7
 800f06a:	f7f1 fded 	bl	8000c48 <__aeabi_ddiv>
 800f06e:	0006      	movs	r6, r0
 800f070:	000f      	movs	r7, r1
 800f072:	1124      	asrs	r4, r4, #4
 800f074:	d0d5      	beq.n	800f022 <_strtod_l+0x54a>
 800f076:	2c1f      	cmp	r4, #31
 800f078:	dd28      	ble.n	800f0cc <_strtod_l+0x5f4>
 800f07a:	2300      	movs	r3, #0
 800f07c:	9305      	str	r3, [sp, #20]
 800f07e:	9306      	str	r3, [sp, #24]
 800f080:	930d      	str	r3, [sp, #52]	; 0x34
 800f082:	9308      	str	r3, [sp, #32]
 800f084:	2322      	movs	r3, #34	; 0x22
 800f086:	9a04      	ldr	r2, [sp, #16]
 800f088:	2600      	movs	r6, #0
 800f08a:	6013      	str	r3, [r2, #0]
 800f08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f08e:	2700      	movs	r7, #0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d18d      	bne.n	800efb0 <_strtod_l+0x4d8>
 800f094:	e55b      	b.n	800eb4e <_strtod_l+0x76>
 800f096:	46c0      	nop			; (mov r8, r8)
 800f098:	00004e1f 	.word	0x00004e1f
 800f09c:	08010df5 	.word	0x08010df5
 800f0a0:	0801101c 	.word	0x0801101c
 800f0a4:	7ff00000 	.word	0x7ff00000
 800f0a8:	08010ded 	.word	0x08010ded
 800f0ac:	08010e24 	.word	0x08010e24
 800f0b0:	080111ad 	.word	0x080111ad
 800f0b4:	08010f30 	.word	0x08010f30
 800f0b8:	08010f08 	.word	0x08010f08
 800f0bc:	fcb00000 	.word	0xfcb00000
 800f0c0:	7ca00000 	.word	0x7ca00000
 800f0c4:	7c900000 	.word	0x7c900000
 800f0c8:	7fefffff 	.word	0x7fefffff
 800f0cc:	2310      	movs	r3, #16
 800f0ce:	0022      	movs	r2, r4
 800f0d0:	401a      	ands	r2, r3
 800f0d2:	9207      	str	r2, [sp, #28]
 800f0d4:	421c      	tst	r4, r3
 800f0d6:	d001      	beq.n	800f0dc <_strtod_l+0x604>
 800f0d8:	335a      	adds	r3, #90	; 0x5a
 800f0da:	9307      	str	r3, [sp, #28]
 800f0dc:	0030      	movs	r0, r6
 800f0de:	0039      	movs	r1, r7
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	4dc4      	ldr	r5, [pc, #784]	; (800f3f4 <_strtod_l+0x91c>)
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	4214      	tst	r4, r2
 800f0e8:	d004      	beq.n	800f0f4 <_strtod_l+0x61c>
 800f0ea:	682a      	ldr	r2, [r5, #0]
 800f0ec:	686b      	ldr	r3, [r5, #4]
 800f0ee:	f7f2 f9a5 	bl	800143c <__aeabi_dmul>
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	1064      	asrs	r4, r4, #1
 800f0f6:	3508      	adds	r5, #8
 800f0f8:	2c00      	cmp	r4, #0
 800f0fa:	d1f3      	bne.n	800f0e4 <_strtod_l+0x60c>
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <_strtod_l+0x62c>
 800f100:	0006      	movs	r6, r0
 800f102:	000f      	movs	r7, r1
 800f104:	9b07      	ldr	r3, [sp, #28]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00f      	beq.n	800f12a <_strtod_l+0x652>
 800f10a:	236b      	movs	r3, #107	; 0x6b
 800f10c:	007a      	lsls	r2, r7, #1
 800f10e:	0d52      	lsrs	r2, r2, #21
 800f110:	0039      	movs	r1, r7
 800f112:	1a9b      	subs	r3, r3, r2
 800f114:	2b00      	cmp	r3, #0
 800f116:	dd08      	ble.n	800f12a <_strtod_l+0x652>
 800f118:	2b1f      	cmp	r3, #31
 800f11a:	dc00      	bgt.n	800f11e <_strtod_l+0x646>
 800f11c:	e121      	b.n	800f362 <_strtod_l+0x88a>
 800f11e:	2600      	movs	r6, #0
 800f120:	2b34      	cmp	r3, #52	; 0x34
 800f122:	dc00      	bgt.n	800f126 <_strtod_l+0x64e>
 800f124:	e116      	b.n	800f354 <_strtod_l+0x87c>
 800f126:	27dc      	movs	r7, #220	; 0xdc
 800f128:	04bf      	lsls	r7, r7, #18
 800f12a:	2200      	movs	r2, #0
 800f12c:	2300      	movs	r3, #0
 800f12e:	0030      	movs	r0, r6
 800f130:	0039      	movs	r1, r7
 800f132:	f7f1 f98b 	bl	800044c <__aeabi_dcmpeq>
 800f136:	2800      	cmp	r0, #0
 800f138:	d19f      	bne.n	800f07a <_strtod_l+0x5a2>
 800f13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f13c:	9a08      	ldr	r2, [sp, #32]
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f142:	9b05      	ldr	r3, [sp, #20]
 800f144:	9804      	ldr	r0, [sp, #16]
 800f146:	f7ff f89f 	bl	800e288 <__s2b>
 800f14a:	900d      	str	r0, [sp, #52]	; 0x34
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d100      	bne.n	800f152 <_strtod_l+0x67a>
 800f150:	e720      	b.n	800ef94 <_strtod_l+0x4bc>
 800f152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f154:	9906      	ldr	r1, [sp, #24]
 800f156:	17da      	asrs	r2, r3, #31
 800f158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f15a:	1a5b      	subs	r3, r3, r1
 800f15c:	401a      	ands	r2, r3
 800f15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f160:	9215      	str	r2, [sp, #84]	; 0x54
 800f162:	43db      	mvns	r3, r3
 800f164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f166:	17db      	asrs	r3, r3, #31
 800f168:	401a      	ands	r2, r3
 800f16a:	2300      	movs	r3, #0
 800f16c:	9218      	str	r2, [sp, #96]	; 0x60
 800f16e:	9305      	str	r3, [sp, #20]
 800f170:	9306      	str	r3, [sp, #24]
 800f172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f174:	9804      	ldr	r0, [sp, #16]
 800f176:	6859      	ldr	r1, [r3, #4]
 800f178:	f7fe ffda 	bl	800e130 <_Balloc>
 800f17c:	9008      	str	r0, [sp, #32]
 800f17e:	2800      	cmp	r0, #0
 800f180:	d100      	bne.n	800f184 <_strtod_l+0x6ac>
 800f182:	e70c      	b.n	800ef9e <_strtod_l+0x4c6>
 800f184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f186:	300c      	adds	r0, #12
 800f188:	0019      	movs	r1, r3
 800f18a:	691a      	ldr	r2, [r3, #16]
 800f18c:	310c      	adds	r1, #12
 800f18e:	3202      	adds	r2, #2
 800f190:	0092      	lsls	r2, r2, #2
 800f192:	f7fe f819 	bl	800d1c8 <memcpy>
 800f196:	ab1e      	add	r3, sp, #120	; 0x78
 800f198:	9301      	str	r3, [sp, #4]
 800f19a:	ab1d      	add	r3, sp, #116	; 0x74
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	0032      	movs	r2, r6
 800f1a0:	003b      	movs	r3, r7
 800f1a2:	9804      	ldr	r0, [sp, #16]
 800f1a4:	9610      	str	r6, [sp, #64]	; 0x40
 800f1a6:	9711      	str	r7, [sp, #68]	; 0x44
 800f1a8:	f7ff fbb0 	bl	800e90c <__d2b>
 800f1ac:	901c      	str	r0, [sp, #112]	; 0x70
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d100      	bne.n	800f1b4 <_strtod_l+0x6dc>
 800f1b2:	e6f4      	b.n	800ef9e <_strtod_l+0x4c6>
 800f1b4:	2101      	movs	r1, #1
 800f1b6:	9804      	ldr	r0, [sp, #16]
 800f1b8:	f7ff f8fa 	bl	800e3b0 <__i2b>
 800f1bc:	9006      	str	r0, [sp, #24]
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	d100      	bne.n	800f1c4 <_strtod_l+0x6ec>
 800f1c2:	e6ec      	b.n	800ef9e <_strtod_l+0x4c6>
 800f1c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f1c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f1ca:	1ad4      	subs	r4, r2, r3
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	db01      	blt.n	800f1d4 <_strtod_l+0x6fc>
 800f1d0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800f1d2:	195d      	adds	r5, r3, r5
 800f1d4:	9907      	ldr	r1, [sp, #28]
 800f1d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f1d8:	1a5b      	subs	r3, r3, r1
 800f1da:	2136      	movs	r1, #54	; 0x36
 800f1dc:	189b      	adds	r3, r3, r2
 800f1de:	1a8a      	subs	r2, r1, r2
 800f1e0:	4985      	ldr	r1, [pc, #532]	; (800f3f8 <_strtod_l+0x920>)
 800f1e2:	2001      	movs	r0, #1
 800f1e4:	468c      	mov	ip, r1
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	9114      	str	r1, [sp, #80]	; 0x50
 800f1ec:	9012      	str	r0, [sp, #72]	; 0x48
 800f1ee:	4563      	cmp	r3, ip
 800f1f0:	da07      	bge.n	800f202 <_strtod_l+0x72a>
 800f1f2:	4661      	mov	r1, ip
 800f1f4:	1ac9      	subs	r1, r1, r3
 800f1f6:	1a52      	subs	r2, r2, r1
 800f1f8:	291f      	cmp	r1, #31
 800f1fa:	dd00      	ble.n	800f1fe <_strtod_l+0x726>
 800f1fc:	e0b6      	b.n	800f36c <_strtod_l+0x894>
 800f1fe:	4088      	lsls	r0, r1
 800f200:	9012      	str	r0, [sp, #72]	; 0x48
 800f202:	18ab      	adds	r3, r5, r2
 800f204:	930c      	str	r3, [sp, #48]	; 0x30
 800f206:	18a4      	adds	r4, r4, r2
 800f208:	9b07      	ldr	r3, [sp, #28]
 800f20a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f20c:	191c      	adds	r4, r3, r4
 800f20e:	002b      	movs	r3, r5
 800f210:	4295      	cmp	r5, r2
 800f212:	dd00      	ble.n	800f216 <_strtod_l+0x73e>
 800f214:	0013      	movs	r3, r2
 800f216:	42a3      	cmp	r3, r4
 800f218:	dd00      	ble.n	800f21c <_strtod_l+0x744>
 800f21a:	0023      	movs	r3, r4
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	dd04      	ble.n	800f22a <_strtod_l+0x752>
 800f220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f222:	1ae4      	subs	r4, r4, r3
 800f224:	1ad2      	subs	r2, r2, r3
 800f226:	920c      	str	r2, [sp, #48]	; 0x30
 800f228:	1aed      	subs	r5, r5, r3
 800f22a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	dd17      	ble.n	800f260 <_strtod_l+0x788>
 800f230:	001a      	movs	r2, r3
 800f232:	9906      	ldr	r1, [sp, #24]
 800f234:	9804      	ldr	r0, [sp, #16]
 800f236:	f7ff f983 	bl	800e540 <__pow5mult>
 800f23a:	9006      	str	r0, [sp, #24]
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d100      	bne.n	800f242 <_strtod_l+0x76a>
 800f240:	e6ad      	b.n	800ef9e <_strtod_l+0x4c6>
 800f242:	0001      	movs	r1, r0
 800f244:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f246:	9804      	ldr	r0, [sp, #16]
 800f248:	f7ff f8ca 	bl	800e3e0 <__multiply>
 800f24c:	900e      	str	r0, [sp, #56]	; 0x38
 800f24e:	2800      	cmp	r0, #0
 800f250:	d100      	bne.n	800f254 <_strtod_l+0x77c>
 800f252:	e6a4      	b.n	800ef9e <_strtod_l+0x4c6>
 800f254:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f256:	9804      	ldr	r0, [sp, #16]
 800f258:	f7fe ffae 	bl	800e1b8 <_Bfree>
 800f25c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f25e:	931c      	str	r3, [sp, #112]	; 0x70
 800f260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f262:	2b00      	cmp	r3, #0
 800f264:	dd00      	ble.n	800f268 <_strtod_l+0x790>
 800f266:	e087      	b.n	800f378 <_strtod_l+0x8a0>
 800f268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	dd08      	ble.n	800f280 <_strtod_l+0x7a8>
 800f26e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f270:	9908      	ldr	r1, [sp, #32]
 800f272:	9804      	ldr	r0, [sp, #16]
 800f274:	f7ff f964 	bl	800e540 <__pow5mult>
 800f278:	9008      	str	r0, [sp, #32]
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d100      	bne.n	800f280 <_strtod_l+0x7a8>
 800f27e:	e68e      	b.n	800ef9e <_strtod_l+0x4c6>
 800f280:	2c00      	cmp	r4, #0
 800f282:	dd08      	ble.n	800f296 <_strtod_l+0x7be>
 800f284:	0022      	movs	r2, r4
 800f286:	9908      	ldr	r1, [sp, #32]
 800f288:	9804      	ldr	r0, [sp, #16]
 800f28a:	f7ff f9b5 	bl	800e5f8 <__lshift>
 800f28e:	9008      	str	r0, [sp, #32]
 800f290:	2800      	cmp	r0, #0
 800f292:	d100      	bne.n	800f296 <_strtod_l+0x7be>
 800f294:	e683      	b.n	800ef9e <_strtod_l+0x4c6>
 800f296:	2d00      	cmp	r5, #0
 800f298:	dd08      	ble.n	800f2ac <_strtod_l+0x7d4>
 800f29a:	002a      	movs	r2, r5
 800f29c:	9906      	ldr	r1, [sp, #24]
 800f29e:	9804      	ldr	r0, [sp, #16]
 800f2a0:	f7ff f9aa 	bl	800e5f8 <__lshift>
 800f2a4:	9006      	str	r0, [sp, #24]
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d100      	bne.n	800f2ac <_strtod_l+0x7d4>
 800f2aa:	e678      	b.n	800ef9e <_strtod_l+0x4c6>
 800f2ac:	9a08      	ldr	r2, [sp, #32]
 800f2ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f2b0:	9804      	ldr	r0, [sp, #16]
 800f2b2:	f7ff fa2b 	bl	800e70c <__mdiff>
 800f2b6:	9005      	str	r0, [sp, #20]
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d100      	bne.n	800f2be <_strtod_l+0x7e6>
 800f2bc:	e66f      	b.n	800ef9e <_strtod_l+0x4c6>
 800f2be:	2200      	movs	r2, #0
 800f2c0:	68c3      	ldr	r3, [r0, #12]
 800f2c2:	9906      	ldr	r1, [sp, #24]
 800f2c4:	60c2      	str	r2, [r0, #12]
 800f2c6:	930c      	str	r3, [sp, #48]	; 0x30
 800f2c8:	f7ff fa04 	bl	800e6d4 <__mcmp>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	da5d      	bge.n	800f38c <_strtod_l+0x8b4>
 800f2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2d2:	4333      	orrs	r3, r6
 800f2d4:	d000      	beq.n	800f2d8 <_strtod_l+0x800>
 800f2d6:	e088      	b.n	800f3ea <_strtod_l+0x912>
 800f2d8:	033b      	lsls	r3, r7, #12
 800f2da:	d000      	beq.n	800f2de <_strtod_l+0x806>
 800f2dc:	e085      	b.n	800f3ea <_strtod_l+0x912>
 800f2de:	22d6      	movs	r2, #214	; 0xd6
 800f2e0:	4b46      	ldr	r3, [pc, #280]	; (800f3fc <_strtod_l+0x924>)
 800f2e2:	04d2      	lsls	r2, r2, #19
 800f2e4:	403b      	ands	r3, r7
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d97f      	bls.n	800f3ea <_strtod_l+0x912>
 800f2ea:	9b05      	ldr	r3, [sp, #20]
 800f2ec:	695b      	ldr	r3, [r3, #20]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d103      	bne.n	800f2fa <_strtod_l+0x822>
 800f2f2:	9b05      	ldr	r3, [sp, #20]
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	dd77      	ble.n	800f3ea <_strtod_l+0x912>
 800f2fa:	9905      	ldr	r1, [sp, #20]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	9804      	ldr	r0, [sp, #16]
 800f300:	f7ff f97a 	bl	800e5f8 <__lshift>
 800f304:	9906      	ldr	r1, [sp, #24]
 800f306:	9005      	str	r0, [sp, #20]
 800f308:	f7ff f9e4 	bl	800e6d4 <__mcmp>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	dd6c      	ble.n	800f3ea <_strtod_l+0x912>
 800f310:	9907      	ldr	r1, [sp, #28]
 800f312:	003b      	movs	r3, r7
 800f314:	4a39      	ldr	r2, [pc, #228]	; (800f3fc <_strtod_l+0x924>)
 800f316:	2900      	cmp	r1, #0
 800f318:	d100      	bne.n	800f31c <_strtod_l+0x844>
 800f31a:	e094      	b.n	800f446 <_strtod_l+0x96e>
 800f31c:	0011      	movs	r1, r2
 800f31e:	20d6      	movs	r0, #214	; 0xd6
 800f320:	4039      	ands	r1, r7
 800f322:	04c0      	lsls	r0, r0, #19
 800f324:	4281      	cmp	r1, r0
 800f326:	dd00      	ble.n	800f32a <_strtod_l+0x852>
 800f328:	e08d      	b.n	800f446 <_strtod_l+0x96e>
 800f32a:	23dc      	movs	r3, #220	; 0xdc
 800f32c:	049b      	lsls	r3, r3, #18
 800f32e:	4299      	cmp	r1, r3
 800f330:	dc00      	bgt.n	800f334 <_strtod_l+0x85c>
 800f332:	e6a7      	b.n	800f084 <_strtod_l+0x5ac>
 800f334:	0030      	movs	r0, r6
 800f336:	0039      	movs	r1, r7
 800f338:	4b31      	ldr	r3, [pc, #196]	; (800f400 <_strtod_l+0x928>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	f7f2 f87e 	bl	800143c <__aeabi_dmul>
 800f340:	4b2e      	ldr	r3, [pc, #184]	; (800f3fc <_strtod_l+0x924>)
 800f342:	0006      	movs	r6, r0
 800f344:	000f      	movs	r7, r1
 800f346:	420b      	tst	r3, r1
 800f348:	d000      	beq.n	800f34c <_strtod_l+0x874>
 800f34a:	e631      	b.n	800efb0 <_strtod_l+0x4d8>
 800f34c:	2322      	movs	r3, #34	; 0x22
 800f34e:	9a04      	ldr	r2, [sp, #16]
 800f350:	6013      	str	r3, [r2, #0]
 800f352:	e62d      	b.n	800efb0 <_strtod_l+0x4d8>
 800f354:	234b      	movs	r3, #75	; 0x4b
 800f356:	1a9a      	subs	r2, r3, r2
 800f358:	3b4c      	subs	r3, #76	; 0x4c
 800f35a:	4093      	lsls	r3, r2
 800f35c:	4019      	ands	r1, r3
 800f35e:	000f      	movs	r7, r1
 800f360:	e6e3      	b.n	800f12a <_strtod_l+0x652>
 800f362:	2201      	movs	r2, #1
 800f364:	4252      	negs	r2, r2
 800f366:	409a      	lsls	r2, r3
 800f368:	4016      	ands	r6, r2
 800f36a:	e6de      	b.n	800f12a <_strtod_l+0x652>
 800f36c:	4925      	ldr	r1, [pc, #148]	; (800f404 <_strtod_l+0x92c>)
 800f36e:	1acb      	subs	r3, r1, r3
 800f370:	0001      	movs	r1, r0
 800f372:	4099      	lsls	r1, r3
 800f374:	9114      	str	r1, [sp, #80]	; 0x50
 800f376:	e743      	b.n	800f200 <_strtod_l+0x728>
 800f378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f37a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f37c:	9804      	ldr	r0, [sp, #16]
 800f37e:	f7ff f93b 	bl	800e5f8 <__lshift>
 800f382:	901c      	str	r0, [sp, #112]	; 0x70
 800f384:	2800      	cmp	r0, #0
 800f386:	d000      	beq.n	800f38a <_strtod_l+0x8b2>
 800f388:	e76e      	b.n	800f268 <_strtod_l+0x790>
 800f38a:	e608      	b.n	800ef9e <_strtod_l+0x4c6>
 800f38c:	970e      	str	r7, [sp, #56]	; 0x38
 800f38e:	2800      	cmp	r0, #0
 800f390:	d177      	bne.n	800f482 <_strtod_l+0x9aa>
 800f392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f394:	033b      	lsls	r3, r7, #12
 800f396:	0b1b      	lsrs	r3, r3, #12
 800f398:	2a00      	cmp	r2, #0
 800f39a:	d039      	beq.n	800f410 <_strtod_l+0x938>
 800f39c:	4a1a      	ldr	r2, [pc, #104]	; (800f408 <_strtod_l+0x930>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d139      	bne.n	800f416 <_strtod_l+0x93e>
 800f3a2:	2101      	movs	r1, #1
 800f3a4:	9b07      	ldr	r3, [sp, #28]
 800f3a6:	4249      	negs	r1, r1
 800f3a8:	0032      	movs	r2, r6
 800f3aa:	0008      	movs	r0, r1
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d00b      	beq.n	800f3c8 <_strtod_l+0x8f0>
 800f3b0:	24d4      	movs	r4, #212	; 0xd4
 800f3b2:	4b12      	ldr	r3, [pc, #72]	; (800f3fc <_strtod_l+0x924>)
 800f3b4:	0008      	movs	r0, r1
 800f3b6:	403b      	ands	r3, r7
 800f3b8:	04e4      	lsls	r4, r4, #19
 800f3ba:	42a3      	cmp	r3, r4
 800f3bc:	d804      	bhi.n	800f3c8 <_strtod_l+0x8f0>
 800f3be:	306c      	adds	r0, #108	; 0x6c
 800f3c0:	0d1b      	lsrs	r3, r3, #20
 800f3c2:	1ac3      	subs	r3, r0, r3
 800f3c4:	4099      	lsls	r1, r3
 800f3c6:	0008      	movs	r0, r1
 800f3c8:	4282      	cmp	r2, r0
 800f3ca:	d124      	bne.n	800f416 <_strtod_l+0x93e>
 800f3cc:	4b0f      	ldr	r3, [pc, #60]	; (800f40c <_strtod_l+0x934>)
 800f3ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f3d0:	4299      	cmp	r1, r3
 800f3d2:	d102      	bne.n	800f3da <_strtod_l+0x902>
 800f3d4:	3201      	adds	r2, #1
 800f3d6:	d100      	bne.n	800f3da <_strtod_l+0x902>
 800f3d8:	e5e1      	b.n	800ef9e <_strtod_l+0x4c6>
 800f3da:	4b08      	ldr	r3, [pc, #32]	; (800f3fc <_strtod_l+0x924>)
 800f3dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3de:	2600      	movs	r6, #0
 800f3e0:	401a      	ands	r2, r3
 800f3e2:	0013      	movs	r3, r2
 800f3e4:	2280      	movs	r2, #128	; 0x80
 800f3e6:	0352      	lsls	r2, r2, #13
 800f3e8:	189f      	adds	r7, r3, r2
 800f3ea:	9b07      	ldr	r3, [sp, #28]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d1a1      	bne.n	800f334 <_strtod_l+0x85c>
 800f3f0:	e5de      	b.n	800efb0 <_strtod_l+0x4d8>
 800f3f2:	46c0      	nop			; (mov r8, r8)
 800f3f4:	08011030 	.word	0x08011030
 800f3f8:	fffffc02 	.word	0xfffffc02
 800f3fc:	7ff00000 	.word	0x7ff00000
 800f400:	39500000 	.word	0x39500000
 800f404:	fffffbe2 	.word	0xfffffbe2
 800f408:	000fffff 	.word	0x000fffff
 800f40c:	7fefffff 	.word	0x7fefffff
 800f410:	4333      	orrs	r3, r6
 800f412:	d100      	bne.n	800f416 <_strtod_l+0x93e>
 800f414:	e77c      	b.n	800f310 <_strtod_l+0x838>
 800f416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d01d      	beq.n	800f458 <_strtod_l+0x980>
 800f41c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f41e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f420:	4213      	tst	r3, r2
 800f422:	d0e2      	beq.n	800f3ea <_strtod_l+0x912>
 800f424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f426:	0030      	movs	r0, r6
 800f428:	0039      	movs	r1, r7
 800f42a:	9a07      	ldr	r2, [sp, #28]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d017      	beq.n	800f460 <_strtod_l+0x988>
 800f430:	f7ff fb3a 	bl	800eaa8 <sulp>
 800f434:	0002      	movs	r2, r0
 800f436:	000b      	movs	r3, r1
 800f438:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f43a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f43c:	f7f1 f8a4 	bl	8000588 <__aeabi_dadd>
 800f440:	0006      	movs	r6, r0
 800f442:	000f      	movs	r7, r1
 800f444:	e7d1      	b.n	800f3ea <_strtod_l+0x912>
 800f446:	2601      	movs	r6, #1
 800f448:	4013      	ands	r3, r2
 800f44a:	4a98      	ldr	r2, [pc, #608]	; (800f6ac <_strtod_l+0xbd4>)
 800f44c:	4276      	negs	r6, r6
 800f44e:	189b      	adds	r3, r3, r2
 800f450:	4a97      	ldr	r2, [pc, #604]	; (800f6b0 <_strtod_l+0xbd8>)
 800f452:	431a      	orrs	r2, r3
 800f454:	0017      	movs	r7, r2
 800f456:	e7c8      	b.n	800f3ea <_strtod_l+0x912>
 800f458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f45a:	4233      	tst	r3, r6
 800f45c:	d0c5      	beq.n	800f3ea <_strtod_l+0x912>
 800f45e:	e7e1      	b.n	800f424 <_strtod_l+0x94c>
 800f460:	f7ff fb22 	bl	800eaa8 <sulp>
 800f464:	0002      	movs	r2, r0
 800f466:	000b      	movs	r3, r1
 800f468:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f46a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f46c:	f7f2 faa8 	bl	80019c0 <__aeabi_dsub>
 800f470:	2200      	movs	r2, #0
 800f472:	2300      	movs	r3, #0
 800f474:	0006      	movs	r6, r0
 800f476:	000f      	movs	r7, r1
 800f478:	f7f0 ffe8 	bl	800044c <__aeabi_dcmpeq>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d0b4      	beq.n	800f3ea <_strtod_l+0x912>
 800f480:	e600      	b.n	800f084 <_strtod_l+0x5ac>
 800f482:	9906      	ldr	r1, [sp, #24]
 800f484:	9805      	ldr	r0, [sp, #20]
 800f486:	f7ff faa1 	bl	800e9cc <__ratio>
 800f48a:	2380      	movs	r3, #128	; 0x80
 800f48c:	2200      	movs	r2, #0
 800f48e:	05db      	lsls	r3, r3, #23
 800f490:	0004      	movs	r4, r0
 800f492:	000d      	movs	r5, r1
 800f494:	f7f0 ffea 	bl	800046c <__aeabi_dcmple>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d06d      	beq.n	800f578 <_strtod_l+0xaa0>
 800f49c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d000      	beq.n	800f4a4 <_strtod_l+0x9cc>
 800f4a2:	e07e      	b.n	800f5a2 <_strtod_l+0xaca>
 800f4a4:	2e00      	cmp	r6, #0
 800f4a6:	d158      	bne.n	800f55a <_strtod_l+0xa82>
 800f4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4aa:	031b      	lsls	r3, r3, #12
 800f4ac:	d000      	beq.n	800f4b0 <_strtod_l+0x9d8>
 800f4ae:	e07f      	b.n	800f5b0 <_strtod_l+0xad8>
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	0020      	movs	r0, r4
 800f4b4:	0029      	movs	r1, r5
 800f4b6:	4b7f      	ldr	r3, [pc, #508]	; (800f6b4 <_strtod_l+0xbdc>)
 800f4b8:	f7f0 ffce 	bl	8000458 <__aeabi_dcmplt>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d158      	bne.n	800f572 <_strtod_l+0xa9a>
 800f4c0:	0020      	movs	r0, r4
 800f4c2:	0029      	movs	r1, r5
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	4b7c      	ldr	r3, [pc, #496]	; (800f6b8 <_strtod_l+0xbe0>)
 800f4c8:	f7f1 ffb8 	bl	800143c <__aeabi_dmul>
 800f4cc:	0004      	movs	r4, r0
 800f4ce:	000d      	movs	r5, r1
 800f4d0:	2380      	movs	r3, #128	; 0x80
 800f4d2:	061b      	lsls	r3, r3, #24
 800f4d4:	940a      	str	r4, [sp, #40]	; 0x28
 800f4d6:	18eb      	adds	r3, r5, r3
 800f4d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4de:	9212      	str	r2, [sp, #72]	; 0x48
 800f4e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800f4e2:	4a76      	ldr	r2, [pc, #472]	; (800f6bc <_strtod_l+0xbe4>)
 800f4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4e6:	4013      	ands	r3, r2
 800f4e8:	9314      	str	r3, [sp, #80]	; 0x50
 800f4ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f4ec:	4b74      	ldr	r3, [pc, #464]	; (800f6c0 <_strtod_l+0xbe8>)
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d000      	beq.n	800f4f4 <_strtod_l+0xa1c>
 800f4f2:	e091      	b.n	800f618 <_strtod_l+0xb40>
 800f4f4:	4a73      	ldr	r2, [pc, #460]	; (800f6c4 <_strtod_l+0xbec>)
 800f4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4f8:	4694      	mov	ip, r2
 800f4fa:	4463      	add	r3, ip
 800f4fc:	001f      	movs	r7, r3
 800f4fe:	0030      	movs	r0, r6
 800f500:	0019      	movs	r1, r3
 800f502:	f7ff f99b 	bl	800e83c <__ulp>
 800f506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f50a:	f7f1 ff97 	bl	800143c <__aeabi_dmul>
 800f50e:	0032      	movs	r2, r6
 800f510:	003b      	movs	r3, r7
 800f512:	f7f1 f839 	bl	8000588 <__aeabi_dadd>
 800f516:	4a69      	ldr	r2, [pc, #420]	; (800f6bc <_strtod_l+0xbe4>)
 800f518:	4b6b      	ldr	r3, [pc, #428]	; (800f6c8 <_strtod_l+0xbf0>)
 800f51a:	0006      	movs	r6, r0
 800f51c:	400a      	ands	r2, r1
 800f51e:	429a      	cmp	r2, r3
 800f520:	d949      	bls.n	800f5b6 <_strtod_l+0xade>
 800f522:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f524:	4b69      	ldr	r3, [pc, #420]	; (800f6cc <_strtod_l+0xbf4>)
 800f526:	429a      	cmp	r2, r3
 800f528:	d103      	bne.n	800f532 <_strtod_l+0xa5a>
 800f52a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f52c:	3301      	adds	r3, #1
 800f52e:	d100      	bne.n	800f532 <_strtod_l+0xa5a>
 800f530:	e535      	b.n	800ef9e <_strtod_l+0x4c6>
 800f532:	2601      	movs	r6, #1
 800f534:	4f65      	ldr	r7, [pc, #404]	; (800f6cc <_strtod_l+0xbf4>)
 800f536:	4276      	negs	r6, r6
 800f538:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f53a:	9804      	ldr	r0, [sp, #16]
 800f53c:	f7fe fe3c 	bl	800e1b8 <_Bfree>
 800f540:	9908      	ldr	r1, [sp, #32]
 800f542:	9804      	ldr	r0, [sp, #16]
 800f544:	f7fe fe38 	bl	800e1b8 <_Bfree>
 800f548:	9906      	ldr	r1, [sp, #24]
 800f54a:	9804      	ldr	r0, [sp, #16]
 800f54c:	f7fe fe34 	bl	800e1b8 <_Bfree>
 800f550:	9905      	ldr	r1, [sp, #20]
 800f552:	9804      	ldr	r0, [sp, #16]
 800f554:	f7fe fe30 	bl	800e1b8 <_Bfree>
 800f558:	e60b      	b.n	800f172 <_strtod_l+0x69a>
 800f55a:	2e01      	cmp	r6, #1
 800f55c:	d103      	bne.n	800f566 <_strtod_l+0xa8e>
 800f55e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f560:	2b00      	cmp	r3, #0
 800f562:	d100      	bne.n	800f566 <_strtod_l+0xa8e>
 800f564:	e58e      	b.n	800f084 <_strtod_l+0x5ac>
 800f566:	2300      	movs	r3, #0
 800f568:	4c59      	ldr	r4, [pc, #356]	; (800f6d0 <_strtod_l+0xbf8>)
 800f56a:	930a      	str	r3, [sp, #40]	; 0x28
 800f56c:	940b      	str	r4, [sp, #44]	; 0x2c
 800f56e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f570:	e01c      	b.n	800f5ac <_strtod_l+0xad4>
 800f572:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f574:	4d50      	ldr	r5, [pc, #320]	; (800f6b8 <_strtod_l+0xbe0>)
 800f576:	e7ab      	b.n	800f4d0 <_strtod_l+0x9f8>
 800f578:	2200      	movs	r2, #0
 800f57a:	0020      	movs	r0, r4
 800f57c:	0029      	movs	r1, r5
 800f57e:	4b4e      	ldr	r3, [pc, #312]	; (800f6b8 <_strtod_l+0xbe0>)
 800f580:	f7f1 ff5c 	bl	800143c <__aeabi_dmul>
 800f584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f586:	0004      	movs	r4, r0
 800f588:	000b      	movs	r3, r1
 800f58a:	000d      	movs	r5, r1
 800f58c:	2a00      	cmp	r2, #0
 800f58e:	d104      	bne.n	800f59a <_strtod_l+0xac2>
 800f590:	2280      	movs	r2, #128	; 0x80
 800f592:	0612      	lsls	r2, r2, #24
 800f594:	900a      	str	r0, [sp, #40]	; 0x28
 800f596:	188b      	adds	r3, r1, r2
 800f598:	e79e      	b.n	800f4d8 <_strtod_l+0xa00>
 800f59a:	0002      	movs	r2, r0
 800f59c:	920a      	str	r2, [sp, #40]	; 0x28
 800f59e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5a0:	e79b      	b.n	800f4da <_strtod_l+0xa02>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	4c43      	ldr	r4, [pc, #268]	; (800f6b4 <_strtod_l+0xbdc>)
 800f5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f5a8:	940b      	str	r4, [sp, #44]	; 0x2c
 800f5aa:	2400      	movs	r4, #0
 800f5ac:	4d41      	ldr	r5, [pc, #260]	; (800f6b4 <_strtod_l+0xbdc>)
 800f5ae:	e794      	b.n	800f4da <_strtod_l+0xa02>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	4c47      	ldr	r4, [pc, #284]	; (800f6d0 <_strtod_l+0xbf8>)
 800f5b4:	e7f7      	b.n	800f5a6 <_strtod_l+0xace>
 800f5b6:	23d4      	movs	r3, #212	; 0xd4
 800f5b8:	049b      	lsls	r3, r3, #18
 800f5ba:	18cf      	adds	r7, r1, r3
 800f5bc:	9b07      	ldr	r3, [sp, #28]
 800f5be:	970e      	str	r7, [sp, #56]	; 0x38
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1b9      	bne.n	800f538 <_strtod_l+0xa60>
 800f5c4:	4b3d      	ldr	r3, [pc, #244]	; (800f6bc <_strtod_l+0xbe4>)
 800f5c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f5c8:	403b      	ands	r3, r7
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d1b4      	bne.n	800f538 <_strtod_l+0xa60>
 800f5ce:	0020      	movs	r0, r4
 800f5d0:	0029      	movs	r1, r5
 800f5d2:	f7f0 ff87 	bl	80004e4 <__aeabi_d2lz>
 800f5d6:	f7f0 ffc1 	bl	800055c <__aeabi_l2d>
 800f5da:	0002      	movs	r2, r0
 800f5dc:	000b      	movs	r3, r1
 800f5de:	0020      	movs	r0, r4
 800f5e0:	0029      	movs	r1, r5
 800f5e2:	f7f2 f9ed 	bl	80019c0 <__aeabi_dsub>
 800f5e6:	033b      	lsls	r3, r7, #12
 800f5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5ea:	0b1b      	lsrs	r3, r3, #12
 800f5ec:	4333      	orrs	r3, r6
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	0004      	movs	r4, r0
 800f5f2:	000d      	movs	r5, r1
 800f5f4:	4a37      	ldr	r2, [pc, #220]	; (800f6d4 <_strtod_l+0xbfc>)
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d054      	beq.n	800f6a4 <_strtod_l+0xbcc>
 800f5fa:	4b37      	ldr	r3, [pc, #220]	; (800f6d8 <_strtod_l+0xc00>)
 800f5fc:	f7f0 ff2c 	bl	8000458 <__aeabi_dcmplt>
 800f600:	2800      	cmp	r0, #0
 800f602:	d000      	beq.n	800f606 <_strtod_l+0xb2e>
 800f604:	e4d4      	b.n	800efb0 <_strtod_l+0x4d8>
 800f606:	0020      	movs	r0, r4
 800f608:	0029      	movs	r1, r5
 800f60a:	4a34      	ldr	r2, [pc, #208]	; (800f6dc <_strtod_l+0xc04>)
 800f60c:	4b2a      	ldr	r3, [pc, #168]	; (800f6b8 <_strtod_l+0xbe0>)
 800f60e:	f7f0 ff37 	bl	8000480 <__aeabi_dcmpgt>
 800f612:	2800      	cmp	r0, #0
 800f614:	d090      	beq.n	800f538 <_strtod_l+0xa60>
 800f616:	e4cb      	b.n	800efb0 <_strtod_l+0x4d8>
 800f618:	9b07      	ldr	r3, [sp, #28]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d02b      	beq.n	800f676 <_strtod_l+0xb9e>
 800f61e:	23d4      	movs	r3, #212	; 0xd4
 800f620:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f622:	04db      	lsls	r3, r3, #19
 800f624:	429a      	cmp	r2, r3
 800f626:	d826      	bhi.n	800f676 <_strtod_l+0xb9e>
 800f628:	0020      	movs	r0, r4
 800f62a:	0029      	movs	r1, r5
 800f62c:	4a2c      	ldr	r2, [pc, #176]	; (800f6e0 <_strtod_l+0xc08>)
 800f62e:	4b2d      	ldr	r3, [pc, #180]	; (800f6e4 <_strtod_l+0xc0c>)
 800f630:	f7f0 ff1c 	bl	800046c <__aeabi_dcmple>
 800f634:	2800      	cmp	r0, #0
 800f636:	d017      	beq.n	800f668 <_strtod_l+0xb90>
 800f638:	0020      	movs	r0, r4
 800f63a:	0029      	movs	r1, r5
 800f63c:	f7f0 ff34 	bl	80004a8 <__aeabi_d2uiz>
 800f640:	2800      	cmp	r0, #0
 800f642:	d100      	bne.n	800f646 <_strtod_l+0xb6e>
 800f644:	3001      	adds	r0, #1
 800f646:	f7f2 fdc1 	bl	80021cc <__aeabi_ui2d>
 800f64a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f64c:	0004      	movs	r4, r0
 800f64e:	000b      	movs	r3, r1
 800f650:	000d      	movs	r5, r1
 800f652:	2a00      	cmp	r2, #0
 800f654:	d122      	bne.n	800f69c <_strtod_l+0xbc4>
 800f656:	2280      	movs	r2, #128	; 0x80
 800f658:	0612      	lsls	r2, r2, #24
 800f65a:	188b      	adds	r3, r1, r2
 800f65c:	9016      	str	r0, [sp, #88]	; 0x58
 800f65e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f660:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f664:	9212      	str	r2, [sp, #72]	; 0x48
 800f666:	9313      	str	r3, [sp, #76]	; 0x4c
 800f668:	22d6      	movs	r2, #214	; 0xd6
 800f66a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f66c:	04d2      	lsls	r2, r2, #19
 800f66e:	189b      	adds	r3, r3, r2
 800f670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f672:	1a9b      	subs	r3, r3, r2
 800f674:	9313      	str	r3, [sp, #76]	; 0x4c
 800f676:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f678:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f67a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f67c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800f67e:	f7ff f8dd 	bl	800e83c <__ulp>
 800f682:	0002      	movs	r2, r0
 800f684:	000b      	movs	r3, r1
 800f686:	0030      	movs	r0, r6
 800f688:	0039      	movs	r1, r7
 800f68a:	f7f1 fed7 	bl	800143c <__aeabi_dmul>
 800f68e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f692:	f7f0 ff79 	bl	8000588 <__aeabi_dadd>
 800f696:	0006      	movs	r6, r0
 800f698:	000f      	movs	r7, r1
 800f69a:	e78f      	b.n	800f5bc <_strtod_l+0xae4>
 800f69c:	0002      	movs	r2, r0
 800f69e:	9216      	str	r2, [sp, #88]	; 0x58
 800f6a0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f6a2:	e7dd      	b.n	800f660 <_strtod_l+0xb88>
 800f6a4:	4b10      	ldr	r3, [pc, #64]	; (800f6e8 <_strtod_l+0xc10>)
 800f6a6:	f7f0 fed7 	bl	8000458 <__aeabi_dcmplt>
 800f6aa:	e7b2      	b.n	800f612 <_strtod_l+0xb3a>
 800f6ac:	fff00000 	.word	0xfff00000
 800f6b0:	000fffff 	.word	0x000fffff
 800f6b4:	3ff00000 	.word	0x3ff00000
 800f6b8:	3fe00000 	.word	0x3fe00000
 800f6bc:	7ff00000 	.word	0x7ff00000
 800f6c0:	7fe00000 	.word	0x7fe00000
 800f6c4:	fcb00000 	.word	0xfcb00000
 800f6c8:	7c9fffff 	.word	0x7c9fffff
 800f6cc:	7fefffff 	.word	0x7fefffff
 800f6d0:	bff00000 	.word	0xbff00000
 800f6d4:	94a03595 	.word	0x94a03595
 800f6d8:	3fdfffff 	.word	0x3fdfffff
 800f6dc:	35afe535 	.word	0x35afe535
 800f6e0:	ffc00000 	.word	0xffc00000
 800f6e4:	41dfffff 	.word	0x41dfffff
 800f6e8:	3fcfffff 	.word	0x3fcfffff

0800f6ec <_strtod_r>:
 800f6ec:	b510      	push	{r4, lr}
 800f6ee:	4b02      	ldr	r3, [pc, #8]	; (800f6f8 <_strtod_r+0xc>)
 800f6f0:	f7ff f9f2 	bl	800ead8 <_strtod_l>
 800f6f4:	bd10      	pop	{r4, pc}
 800f6f6:	46c0      	nop			; (mov r8, r8)
 800f6f8:	20000080 	.word	0x20000080

0800f6fc <_strtol_l.constprop.0>:
 800f6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6fe:	b087      	sub	sp, #28
 800f700:	001e      	movs	r6, r3
 800f702:	9005      	str	r0, [sp, #20]
 800f704:	9101      	str	r1, [sp, #4]
 800f706:	9202      	str	r2, [sp, #8]
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d048      	beq.n	800f79e <_strtol_l.constprop.0+0xa2>
 800f70c:	000b      	movs	r3, r1
 800f70e:	2e24      	cmp	r6, #36	; 0x24
 800f710:	d845      	bhi.n	800f79e <_strtol_l.constprop.0+0xa2>
 800f712:	4a3b      	ldr	r2, [pc, #236]	; (800f800 <_strtol_l.constprop.0+0x104>)
 800f714:	2108      	movs	r1, #8
 800f716:	4694      	mov	ip, r2
 800f718:	001a      	movs	r2, r3
 800f71a:	4660      	mov	r0, ip
 800f71c:	7814      	ldrb	r4, [r2, #0]
 800f71e:	3301      	adds	r3, #1
 800f720:	5d00      	ldrb	r0, [r0, r4]
 800f722:	001d      	movs	r5, r3
 800f724:	0007      	movs	r7, r0
 800f726:	400f      	ands	r7, r1
 800f728:	4208      	tst	r0, r1
 800f72a:	d1f5      	bne.n	800f718 <_strtol_l.constprop.0+0x1c>
 800f72c:	2c2d      	cmp	r4, #45	; 0x2d
 800f72e:	d13d      	bne.n	800f7ac <_strtol_l.constprop.0+0xb0>
 800f730:	2701      	movs	r7, #1
 800f732:	781c      	ldrb	r4, [r3, #0]
 800f734:	1c95      	adds	r5, r2, #2
 800f736:	2e00      	cmp	r6, #0
 800f738:	d05e      	beq.n	800f7f8 <_strtol_l.constprop.0+0xfc>
 800f73a:	2e10      	cmp	r6, #16
 800f73c:	d109      	bne.n	800f752 <_strtol_l.constprop.0+0x56>
 800f73e:	2c30      	cmp	r4, #48	; 0x30
 800f740:	d107      	bne.n	800f752 <_strtol_l.constprop.0+0x56>
 800f742:	2220      	movs	r2, #32
 800f744:	782b      	ldrb	r3, [r5, #0]
 800f746:	4393      	bics	r3, r2
 800f748:	2b58      	cmp	r3, #88	; 0x58
 800f74a:	d150      	bne.n	800f7ee <_strtol_l.constprop.0+0xf2>
 800f74c:	2610      	movs	r6, #16
 800f74e:	786c      	ldrb	r4, [r5, #1]
 800f750:	3502      	adds	r5, #2
 800f752:	4b2c      	ldr	r3, [pc, #176]	; (800f804 <_strtol_l.constprop.0+0x108>)
 800f754:	0031      	movs	r1, r6
 800f756:	18fb      	adds	r3, r7, r3
 800f758:	0018      	movs	r0, r3
 800f75a:	9303      	str	r3, [sp, #12]
 800f75c:	f7f0 fd76 	bl	800024c <__aeabi_uidivmod>
 800f760:	2200      	movs	r2, #0
 800f762:	9104      	str	r1, [sp, #16]
 800f764:	2101      	movs	r1, #1
 800f766:	4684      	mov	ip, r0
 800f768:	0010      	movs	r0, r2
 800f76a:	4249      	negs	r1, r1
 800f76c:	0023      	movs	r3, r4
 800f76e:	3b30      	subs	r3, #48	; 0x30
 800f770:	2b09      	cmp	r3, #9
 800f772:	d903      	bls.n	800f77c <_strtol_l.constprop.0+0x80>
 800f774:	3b11      	subs	r3, #17
 800f776:	2b19      	cmp	r3, #25
 800f778:	d81d      	bhi.n	800f7b6 <_strtol_l.constprop.0+0xba>
 800f77a:	330a      	adds	r3, #10
 800f77c:	429e      	cmp	r6, r3
 800f77e:	dd1e      	ble.n	800f7be <_strtol_l.constprop.0+0xc2>
 800f780:	1c54      	adds	r4, r2, #1
 800f782:	d009      	beq.n	800f798 <_strtol_l.constprop.0+0x9c>
 800f784:	000a      	movs	r2, r1
 800f786:	4584      	cmp	ip, r0
 800f788:	d306      	bcc.n	800f798 <_strtol_l.constprop.0+0x9c>
 800f78a:	d102      	bne.n	800f792 <_strtol_l.constprop.0+0x96>
 800f78c:	9c04      	ldr	r4, [sp, #16]
 800f78e:	429c      	cmp	r4, r3
 800f790:	db02      	blt.n	800f798 <_strtol_l.constprop.0+0x9c>
 800f792:	2201      	movs	r2, #1
 800f794:	4370      	muls	r0, r6
 800f796:	1818      	adds	r0, r3, r0
 800f798:	782c      	ldrb	r4, [r5, #0]
 800f79a:	3501      	adds	r5, #1
 800f79c:	e7e6      	b.n	800f76c <_strtol_l.constprop.0+0x70>
 800f79e:	f7fd fcdb 	bl	800d158 <__errno>
 800f7a2:	2316      	movs	r3, #22
 800f7a4:	6003      	str	r3, [r0, #0]
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	b007      	add	sp, #28
 800f7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ac:	2c2b      	cmp	r4, #43	; 0x2b
 800f7ae:	d1c2      	bne.n	800f736 <_strtol_l.constprop.0+0x3a>
 800f7b0:	781c      	ldrb	r4, [r3, #0]
 800f7b2:	1c95      	adds	r5, r2, #2
 800f7b4:	e7bf      	b.n	800f736 <_strtol_l.constprop.0+0x3a>
 800f7b6:	0023      	movs	r3, r4
 800f7b8:	3b61      	subs	r3, #97	; 0x61
 800f7ba:	2b19      	cmp	r3, #25
 800f7bc:	d9dd      	bls.n	800f77a <_strtol_l.constprop.0+0x7e>
 800f7be:	1c53      	adds	r3, r2, #1
 800f7c0:	d109      	bne.n	800f7d6 <_strtol_l.constprop.0+0xda>
 800f7c2:	2322      	movs	r3, #34	; 0x22
 800f7c4:	9a05      	ldr	r2, [sp, #20]
 800f7c6:	9803      	ldr	r0, [sp, #12]
 800f7c8:	6013      	str	r3, [r2, #0]
 800f7ca:	9b02      	ldr	r3, [sp, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d0eb      	beq.n	800f7a8 <_strtol_l.constprop.0+0xac>
 800f7d0:	1e6b      	subs	r3, r5, #1
 800f7d2:	9301      	str	r3, [sp, #4]
 800f7d4:	e007      	b.n	800f7e6 <_strtol_l.constprop.0+0xea>
 800f7d6:	2f00      	cmp	r7, #0
 800f7d8:	d000      	beq.n	800f7dc <_strtol_l.constprop.0+0xe0>
 800f7da:	4240      	negs	r0, r0
 800f7dc:	9b02      	ldr	r3, [sp, #8]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d0e2      	beq.n	800f7a8 <_strtol_l.constprop.0+0xac>
 800f7e2:	2a00      	cmp	r2, #0
 800f7e4:	d1f4      	bne.n	800f7d0 <_strtol_l.constprop.0+0xd4>
 800f7e6:	9b02      	ldr	r3, [sp, #8]
 800f7e8:	9a01      	ldr	r2, [sp, #4]
 800f7ea:	601a      	str	r2, [r3, #0]
 800f7ec:	e7dc      	b.n	800f7a8 <_strtol_l.constprop.0+0xac>
 800f7ee:	2430      	movs	r4, #48	; 0x30
 800f7f0:	2e00      	cmp	r6, #0
 800f7f2:	d1ae      	bne.n	800f752 <_strtol_l.constprop.0+0x56>
 800f7f4:	3608      	adds	r6, #8
 800f7f6:	e7ac      	b.n	800f752 <_strtol_l.constprop.0+0x56>
 800f7f8:	2c30      	cmp	r4, #48	; 0x30
 800f7fa:	d0a2      	beq.n	800f742 <_strtol_l.constprop.0+0x46>
 800f7fc:	260a      	movs	r6, #10
 800f7fe:	e7a8      	b.n	800f752 <_strtol_l.constprop.0+0x56>
 800f800:	08011059 	.word	0x08011059
 800f804:	7fffffff 	.word	0x7fffffff

0800f808 <_strtol_r>:
 800f808:	b510      	push	{r4, lr}
 800f80a:	f7ff ff77 	bl	800f6fc <_strtol_l.constprop.0>
 800f80e:	bd10      	pop	{r4, pc}

0800f810 <__ssputs_r>:
 800f810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f812:	b085      	sub	sp, #20
 800f814:	9301      	str	r3, [sp, #4]
 800f816:	9203      	str	r2, [sp, #12]
 800f818:	688e      	ldr	r6, [r1, #8]
 800f81a:	9a01      	ldr	r2, [sp, #4]
 800f81c:	0007      	movs	r7, r0
 800f81e:	000c      	movs	r4, r1
 800f820:	680b      	ldr	r3, [r1, #0]
 800f822:	4296      	cmp	r6, r2
 800f824:	d831      	bhi.n	800f88a <__ssputs_r+0x7a>
 800f826:	898a      	ldrh	r2, [r1, #12]
 800f828:	2190      	movs	r1, #144	; 0x90
 800f82a:	00c9      	lsls	r1, r1, #3
 800f82c:	420a      	tst	r2, r1
 800f82e:	d029      	beq.n	800f884 <__ssputs_r+0x74>
 800f830:	2003      	movs	r0, #3
 800f832:	6921      	ldr	r1, [r4, #16]
 800f834:	1a5b      	subs	r3, r3, r1
 800f836:	9302      	str	r3, [sp, #8]
 800f838:	6963      	ldr	r3, [r4, #20]
 800f83a:	4343      	muls	r3, r0
 800f83c:	0fdd      	lsrs	r5, r3, #31
 800f83e:	18ed      	adds	r5, r5, r3
 800f840:	9b01      	ldr	r3, [sp, #4]
 800f842:	9802      	ldr	r0, [sp, #8]
 800f844:	3301      	adds	r3, #1
 800f846:	181b      	adds	r3, r3, r0
 800f848:	106d      	asrs	r5, r5, #1
 800f84a:	42ab      	cmp	r3, r5
 800f84c:	d900      	bls.n	800f850 <__ssputs_r+0x40>
 800f84e:	001d      	movs	r5, r3
 800f850:	0552      	lsls	r2, r2, #21
 800f852:	d529      	bpl.n	800f8a8 <__ssputs_r+0x98>
 800f854:	0029      	movs	r1, r5
 800f856:	0038      	movs	r0, r7
 800f858:	f7fe fbd8 	bl	800e00c <_malloc_r>
 800f85c:	1e06      	subs	r6, r0, #0
 800f85e:	d02d      	beq.n	800f8bc <__ssputs_r+0xac>
 800f860:	9a02      	ldr	r2, [sp, #8]
 800f862:	6921      	ldr	r1, [r4, #16]
 800f864:	f7fd fcb0 	bl	800d1c8 <memcpy>
 800f868:	89a2      	ldrh	r2, [r4, #12]
 800f86a:	4b19      	ldr	r3, [pc, #100]	; (800f8d0 <__ssputs_r+0xc0>)
 800f86c:	401a      	ands	r2, r3
 800f86e:	2380      	movs	r3, #128	; 0x80
 800f870:	4313      	orrs	r3, r2
 800f872:	81a3      	strh	r3, [r4, #12]
 800f874:	9b02      	ldr	r3, [sp, #8]
 800f876:	6126      	str	r6, [r4, #16]
 800f878:	18f6      	adds	r6, r6, r3
 800f87a:	6026      	str	r6, [r4, #0]
 800f87c:	6165      	str	r5, [r4, #20]
 800f87e:	9e01      	ldr	r6, [sp, #4]
 800f880:	1aed      	subs	r5, r5, r3
 800f882:	60a5      	str	r5, [r4, #8]
 800f884:	9b01      	ldr	r3, [sp, #4]
 800f886:	429e      	cmp	r6, r3
 800f888:	d900      	bls.n	800f88c <__ssputs_r+0x7c>
 800f88a:	9e01      	ldr	r6, [sp, #4]
 800f88c:	0032      	movs	r2, r6
 800f88e:	9903      	ldr	r1, [sp, #12]
 800f890:	6820      	ldr	r0, [r4, #0]
 800f892:	f000 fb7f 	bl	800ff94 <memmove>
 800f896:	2000      	movs	r0, #0
 800f898:	68a3      	ldr	r3, [r4, #8]
 800f89a:	1b9b      	subs	r3, r3, r6
 800f89c:	60a3      	str	r3, [r4, #8]
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	199b      	adds	r3, r3, r6
 800f8a2:	6023      	str	r3, [r4, #0]
 800f8a4:	b005      	add	sp, #20
 800f8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8a8:	002a      	movs	r2, r5
 800f8aa:	0038      	movs	r0, r7
 800f8ac:	f000 ff7c 	bl	80107a8 <_realloc_r>
 800f8b0:	1e06      	subs	r6, r0, #0
 800f8b2:	d1df      	bne.n	800f874 <__ssputs_r+0x64>
 800f8b4:	0038      	movs	r0, r7
 800f8b6:	6921      	ldr	r1, [r4, #16]
 800f8b8:	f7fe fb32 	bl	800df20 <_free_r>
 800f8bc:	230c      	movs	r3, #12
 800f8be:	2001      	movs	r0, #1
 800f8c0:	603b      	str	r3, [r7, #0]
 800f8c2:	89a2      	ldrh	r2, [r4, #12]
 800f8c4:	3334      	adds	r3, #52	; 0x34
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	81a3      	strh	r3, [r4, #12]
 800f8ca:	4240      	negs	r0, r0
 800f8cc:	e7ea      	b.n	800f8a4 <__ssputs_r+0x94>
 800f8ce:	46c0      	nop			; (mov r8, r8)
 800f8d0:	fffffb7f 	.word	0xfffffb7f

0800f8d4 <_svfiprintf_r>:
 800f8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8d6:	b0a1      	sub	sp, #132	; 0x84
 800f8d8:	9003      	str	r0, [sp, #12]
 800f8da:	001d      	movs	r5, r3
 800f8dc:	898b      	ldrh	r3, [r1, #12]
 800f8de:	000f      	movs	r7, r1
 800f8e0:	0016      	movs	r6, r2
 800f8e2:	061b      	lsls	r3, r3, #24
 800f8e4:	d511      	bpl.n	800f90a <_svfiprintf_r+0x36>
 800f8e6:	690b      	ldr	r3, [r1, #16]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d10e      	bne.n	800f90a <_svfiprintf_r+0x36>
 800f8ec:	2140      	movs	r1, #64	; 0x40
 800f8ee:	f7fe fb8d 	bl	800e00c <_malloc_r>
 800f8f2:	6038      	str	r0, [r7, #0]
 800f8f4:	6138      	str	r0, [r7, #16]
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	d105      	bne.n	800f906 <_svfiprintf_r+0x32>
 800f8fa:	230c      	movs	r3, #12
 800f8fc:	9a03      	ldr	r2, [sp, #12]
 800f8fe:	3801      	subs	r0, #1
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	b021      	add	sp, #132	; 0x84
 800f904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f906:	2340      	movs	r3, #64	; 0x40
 800f908:	617b      	str	r3, [r7, #20]
 800f90a:	2300      	movs	r3, #0
 800f90c:	ac08      	add	r4, sp, #32
 800f90e:	6163      	str	r3, [r4, #20]
 800f910:	3320      	adds	r3, #32
 800f912:	7663      	strb	r3, [r4, #25]
 800f914:	3310      	adds	r3, #16
 800f916:	76a3      	strb	r3, [r4, #26]
 800f918:	9507      	str	r5, [sp, #28]
 800f91a:	0035      	movs	r5, r6
 800f91c:	782b      	ldrb	r3, [r5, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <_svfiprintf_r+0x52>
 800f922:	2b25      	cmp	r3, #37	; 0x25
 800f924:	d148      	bne.n	800f9b8 <_svfiprintf_r+0xe4>
 800f926:	1bab      	subs	r3, r5, r6
 800f928:	9305      	str	r3, [sp, #20]
 800f92a:	42b5      	cmp	r5, r6
 800f92c:	d00b      	beq.n	800f946 <_svfiprintf_r+0x72>
 800f92e:	0032      	movs	r2, r6
 800f930:	0039      	movs	r1, r7
 800f932:	9803      	ldr	r0, [sp, #12]
 800f934:	f7ff ff6c 	bl	800f810 <__ssputs_r>
 800f938:	3001      	adds	r0, #1
 800f93a:	d100      	bne.n	800f93e <_svfiprintf_r+0x6a>
 800f93c:	e0af      	b.n	800fa9e <_svfiprintf_r+0x1ca>
 800f93e:	6963      	ldr	r3, [r4, #20]
 800f940:	9a05      	ldr	r2, [sp, #20]
 800f942:	189b      	adds	r3, r3, r2
 800f944:	6163      	str	r3, [r4, #20]
 800f946:	782b      	ldrb	r3, [r5, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d100      	bne.n	800f94e <_svfiprintf_r+0x7a>
 800f94c:	e0a7      	b.n	800fa9e <_svfiprintf_r+0x1ca>
 800f94e:	2201      	movs	r2, #1
 800f950:	2300      	movs	r3, #0
 800f952:	4252      	negs	r2, r2
 800f954:	6062      	str	r2, [r4, #4]
 800f956:	a904      	add	r1, sp, #16
 800f958:	3254      	adds	r2, #84	; 0x54
 800f95a:	1852      	adds	r2, r2, r1
 800f95c:	1c6e      	adds	r6, r5, #1
 800f95e:	6023      	str	r3, [r4, #0]
 800f960:	60e3      	str	r3, [r4, #12]
 800f962:	60a3      	str	r3, [r4, #8]
 800f964:	7013      	strb	r3, [r2, #0]
 800f966:	65a3      	str	r3, [r4, #88]	; 0x58
 800f968:	4b55      	ldr	r3, [pc, #340]	; (800fac0 <_svfiprintf_r+0x1ec>)
 800f96a:	2205      	movs	r2, #5
 800f96c:	0018      	movs	r0, r3
 800f96e:	7831      	ldrb	r1, [r6, #0]
 800f970:	9305      	str	r3, [sp, #20]
 800f972:	f7fd fc1e 	bl	800d1b2 <memchr>
 800f976:	1c75      	adds	r5, r6, #1
 800f978:	2800      	cmp	r0, #0
 800f97a:	d11f      	bne.n	800f9bc <_svfiprintf_r+0xe8>
 800f97c:	6822      	ldr	r2, [r4, #0]
 800f97e:	06d3      	lsls	r3, r2, #27
 800f980:	d504      	bpl.n	800f98c <_svfiprintf_r+0xb8>
 800f982:	2353      	movs	r3, #83	; 0x53
 800f984:	a904      	add	r1, sp, #16
 800f986:	185b      	adds	r3, r3, r1
 800f988:	2120      	movs	r1, #32
 800f98a:	7019      	strb	r1, [r3, #0]
 800f98c:	0713      	lsls	r3, r2, #28
 800f98e:	d504      	bpl.n	800f99a <_svfiprintf_r+0xc6>
 800f990:	2353      	movs	r3, #83	; 0x53
 800f992:	a904      	add	r1, sp, #16
 800f994:	185b      	adds	r3, r3, r1
 800f996:	212b      	movs	r1, #43	; 0x2b
 800f998:	7019      	strb	r1, [r3, #0]
 800f99a:	7833      	ldrb	r3, [r6, #0]
 800f99c:	2b2a      	cmp	r3, #42	; 0x2a
 800f99e:	d016      	beq.n	800f9ce <_svfiprintf_r+0xfa>
 800f9a0:	0035      	movs	r5, r6
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	200a      	movs	r0, #10
 800f9a6:	68e3      	ldr	r3, [r4, #12]
 800f9a8:	782a      	ldrb	r2, [r5, #0]
 800f9aa:	1c6e      	adds	r6, r5, #1
 800f9ac:	3a30      	subs	r2, #48	; 0x30
 800f9ae:	2a09      	cmp	r2, #9
 800f9b0:	d94e      	bls.n	800fa50 <_svfiprintf_r+0x17c>
 800f9b2:	2900      	cmp	r1, #0
 800f9b4:	d111      	bne.n	800f9da <_svfiprintf_r+0x106>
 800f9b6:	e017      	b.n	800f9e8 <_svfiprintf_r+0x114>
 800f9b8:	3501      	adds	r5, #1
 800f9ba:	e7af      	b.n	800f91c <_svfiprintf_r+0x48>
 800f9bc:	9b05      	ldr	r3, [sp, #20]
 800f9be:	6822      	ldr	r2, [r4, #0]
 800f9c0:	1ac0      	subs	r0, r0, r3
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4083      	lsls	r3, r0
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	002e      	movs	r6, r5
 800f9ca:	6023      	str	r3, [r4, #0]
 800f9cc:	e7cc      	b.n	800f968 <_svfiprintf_r+0x94>
 800f9ce:	9b07      	ldr	r3, [sp, #28]
 800f9d0:	1d19      	adds	r1, r3, #4
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	9107      	str	r1, [sp, #28]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	db01      	blt.n	800f9de <_svfiprintf_r+0x10a>
 800f9da:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9dc:	e004      	b.n	800f9e8 <_svfiprintf_r+0x114>
 800f9de:	425b      	negs	r3, r3
 800f9e0:	60e3      	str	r3, [r4, #12]
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	6023      	str	r3, [r4, #0]
 800f9e8:	782b      	ldrb	r3, [r5, #0]
 800f9ea:	2b2e      	cmp	r3, #46	; 0x2e
 800f9ec:	d10a      	bne.n	800fa04 <_svfiprintf_r+0x130>
 800f9ee:	786b      	ldrb	r3, [r5, #1]
 800f9f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f9f2:	d135      	bne.n	800fa60 <_svfiprintf_r+0x18c>
 800f9f4:	9b07      	ldr	r3, [sp, #28]
 800f9f6:	3502      	adds	r5, #2
 800f9f8:	1d1a      	adds	r2, r3, #4
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	9207      	str	r2, [sp, #28]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	db2b      	blt.n	800fa5a <_svfiprintf_r+0x186>
 800fa02:	9309      	str	r3, [sp, #36]	; 0x24
 800fa04:	4e2f      	ldr	r6, [pc, #188]	; (800fac4 <_svfiprintf_r+0x1f0>)
 800fa06:	2203      	movs	r2, #3
 800fa08:	0030      	movs	r0, r6
 800fa0a:	7829      	ldrb	r1, [r5, #0]
 800fa0c:	f7fd fbd1 	bl	800d1b2 <memchr>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d006      	beq.n	800fa22 <_svfiprintf_r+0x14e>
 800fa14:	2340      	movs	r3, #64	; 0x40
 800fa16:	1b80      	subs	r0, r0, r6
 800fa18:	4083      	lsls	r3, r0
 800fa1a:	6822      	ldr	r2, [r4, #0]
 800fa1c:	3501      	adds	r5, #1
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	6023      	str	r3, [r4, #0]
 800fa22:	7829      	ldrb	r1, [r5, #0]
 800fa24:	2206      	movs	r2, #6
 800fa26:	4828      	ldr	r0, [pc, #160]	; (800fac8 <_svfiprintf_r+0x1f4>)
 800fa28:	1c6e      	adds	r6, r5, #1
 800fa2a:	7621      	strb	r1, [r4, #24]
 800fa2c:	f7fd fbc1 	bl	800d1b2 <memchr>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d03c      	beq.n	800faae <_svfiprintf_r+0x1da>
 800fa34:	4b25      	ldr	r3, [pc, #148]	; (800facc <_svfiprintf_r+0x1f8>)
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d125      	bne.n	800fa86 <_svfiprintf_r+0x1b2>
 800fa3a:	2207      	movs	r2, #7
 800fa3c:	9b07      	ldr	r3, [sp, #28]
 800fa3e:	3307      	adds	r3, #7
 800fa40:	4393      	bics	r3, r2
 800fa42:	3308      	adds	r3, #8
 800fa44:	9307      	str	r3, [sp, #28]
 800fa46:	6963      	ldr	r3, [r4, #20]
 800fa48:	9a04      	ldr	r2, [sp, #16]
 800fa4a:	189b      	adds	r3, r3, r2
 800fa4c:	6163      	str	r3, [r4, #20]
 800fa4e:	e764      	b.n	800f91a <_svfiprintf_r+0x46>
 800fa50:	4343      	muls	r3, r0
 800fa52:	0035      	movs	r5, r6
 800fa54:	2101      	movs	r1, #1
 800fa56:	189b      	adds	r3, r3, r2
 800fa58:	e7a6      	b.n	800f9a8 <_svfiprintf_r+0xd4>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	425b      	negs	r3, r3
 800fa5e:	e7d0      	b.n	800fa02 <_svfiprintf_r+0x12e>
 800fa60:	2300      	movs	r3, #0
 800fa62:	200a      	movs	r0, #10
 800fa64:	001a      	movs	r2, r3
 800fa66:	3501      	adds	r5, #1
 800fa68:	6063      	str	r3, [r4, #4]
 800fa6a:	7829      	ldrb	r1, [r5, #0]
 800fa6c:	1c6e      	adds	r6, r5, #1
 800fa6e:	3930      	subs	r1, #48	; 0x30
 800fa70:	2909      	cmp	r1, #9
 800fa72:	d903      	bls.n	800fa7c <_svfiprintf_r+0x1a8>
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d0c5      	beq.n	800fa04 <_svfiprintf_r+0x130>
 800fa78:	9209      	str	r2, [sp, #36]	; 0x24
 800fa7a:	e7c3      	b.n	800fa04 <_svfiprintf_r+0x130>
 800fa7c:	4342      	muls	r2, r0
 800fa7e:	0035      	movs	r5, r6
 800fa80:	2301      	movs	r3, #1
 800fa82:	1852      	adds	r2, r2, r1
 800fa84:	e7f1      	b.n	800fa6a <_svfiprintf_r+0x196>
 800fa86:	aa07      	add	r2, sp, #28
 800fa88:	9200      	str	r2, [sp, #0]
 800fa8a:	0021      	movs	r1, r4
 800fa8c:	003a      	movs	r2, r7
 800fa8e:	4b10      	ldr	r3, [pc, #64]	; (800fad0 <_svfiprintf_r+0x1fc>)
 800fa90:	9803      	ldr	r0, [sp, #12]
 800fa92:	f7fc fa73 	bl	800bf7c <_printf_float>
 800fa96:	9004      	str	r0, [sp, #16]
 800fa98:	9b04      	ldr	r3, [sp, #16]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	d1d3      	bne.n	800fa46 <_svfiprintf_r+0x172>
 800fa9e:	89bb      	ldrh	r3, [r7, #12]
 800faa0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800faa2:	065b      	lsls	r3, r3, #25
 800faa4:	d400      	bmi.n	800faa8 <_svfiprintf_r+0x1d4>
 800faa6:	e72c      	b.n	800f902 <_svfiprintf_r+0x2e>
 800faa8:	2001      	movs	r0, #1
 800faaa:	4240      	negs	r0, r0
 800faac:	e729      	b.n	800f902 <_svfiprintf_r+0x2e>
 800faae:	aa07      	add	r2, sp, #28
 800fab0:	9200      	str	r2, [sp, #0]
 800fab2:	0021      	movs	r1, r4
 800fab4:	003a      	movs	r2, r7
 800fab6:	4b06      	ldr	r3, [pc, #24]	; (800fad0 <_svfiprintf_r+0x1fc>)
 800fab8:	9803      	ldr	r0, [sp, #12]
 800faba:	f7fc fd25 	bl	800c508 <_printf_i>
 800fabe:	e7ea      	b.n	800fa96 <_svfiprintf_r+0x1c2>
 800fac0:	08011159 	.word	0x08011159
 800fac4:	0801115f 	.word	0x0801115f
 800fac8:	08011163 	.word	0x08011163
 800facc:	0800bf7d 	.word	0x0800bf7d
 800fad0:	0800f811 	.word	0x0800f811

0800fad4 <__sfputc_r>:
 800fad4:	6893      	ldr	r3, [r2, #8]
 800fad6:	b510      	push	{r4, lr}
 800fad8:	3b01      	subs	r3, #1
 800fada:	6093      	str	r3, [r2, #8]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	da04      	bge.n	800faea <__sfputc_r+0x16>
 800fae0:	6994      	ldr	r4, [r2, #24]
 800fae2:	42a3      	cmp	r3, r4
 800fae4:	db07      	blt.n	800faf6 <__sfputc_r+0x22>
 800fae6:	290a      	cmp	r1, #10
 800fae8:	d005      	beq.n	800faf6 <__sfputc_r+0x22>
 800faea:	6813      	ldr	r3, [r2, #0]
 800faec:	1c58      	adds	r0, r3, #1
 800faee:	6010      	str	r0, [r2, #0]
 800faf0:	7019      	strb	r1, [r3, #0]
 800faf2:	0008      	movs	r0, r1
 800faf4:	bd10      	pop	{r4, pc}
 800faf6:	f7fd f9bf 	bl	800ce78 <__swbuf_r>
 800fafa:	0001      	movs	r1, r0
 800fafc:	e7f9      	b.n	800faf2 <__sfputc_r+0x1e>

0800fafe <__sfputs_r>:
 800fafe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb00:	0006      	movs	r6, r0
 800fb02:	000f      	movs	r7, r1
 800fb04:	0014      	movs	r4, r2
 800fb06:	18d5      	adds	r5, r2, r3
 800fb08:	42ac      	cmp	r4, r5
 800fb0a:	d101      	bne.n	800fb10 <__sfputs_r+0x12>
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	e007      	b.n	800fb20 <__sfputs_r+0x22>
 800fb10:	7821      	ldrb	r1, [r4, #0]
 800fb12:	003a      	movs	r2, r7
 800fb14:	0030      	movs	r0, r6
 800fb16:	f7ff ffdd 	bl	800fad4 <__sfputc_r>
 800fb1a:	3401      	adds	r4, #1
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	d1f3      	bne.n	800fb08 <__sfputs_r+0xa>
 800fb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb24 <_vfiprintf_r>:
 800fb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb26:	b0a1      	sub	sp, #132	; 0x84
 800fb28:	000f      	movs	r7, r1
 800fb2a:	0015      	movs	r5, r2
 800fb2c:	001e      	movs	r6, r3
 800fb2e:	9003      	str	r0, [sp, #12]
 800fb30:	2800      	cmp	r0, #0
 800fb32:	d004      	beq.n	800fb3e <_vfiprintf_r+0x1a>
 800fb34:	6a03      	ldr	r3, [r0, #32]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d101      	bne.n	800fb3e <_vfiprintf_r+0x1a>
 800fb3a:	f7fd f88d 	bl	800cc58 <__sinit>
 800fb3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb40:	07db      	lsls	r3, r3, #31
 800fb42:	d405      	bmi.n	800fb50 <_vfiprintf_r+0x2c>
 800fb44:	89bb      	ldrh	r3, [r7, #12]
 800fb46:	059b      	lsls	r3, r3, #22
 800fb48:	d402      	bmi.n	800fb50 <_vfiprintf_r+0x2c>
 800fb4a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fb4c:	f7fd fb2f 	bl	800d1ae <__retarget_lock_acquire_recursive>
 800fb50:	89bb      	ldrh	r3, [r7, #12]
 800fb52:	071b      	lsls	r3, r3, #28
 800fb54:	d502      	bpl.n	800fb5c <_vfiprintf_r+0x38>
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d113      	bne.n	800fb84 <_vfiprintf_r+0x60>
 800fb5c:	0039      	movs	r1, r7
 800fb5e:	9803      	ldr	r0, [sp, #12]
 800fb60:	f7fd f9cc 	bl	800cefc <__swsetup_r>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	d00d      	beq.n	800fb84 <_vfiprintf_r+0x60>
 800fb68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb6a:	07db      	lsls	r3, r3, #31
 800fb6c:	d503      	bpl.n	800fb76 <_vfiprintf_r+0x52>
 800fb6e:	2001      	movs	r0, #1
 800fb70:	4240      	negs	r0, r0
 800fb72:	b021      	add	sp, #132	; 0x84
 800fb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb76:	89bb      	ldrh	r3, [r7, #12]
 800fb78:	059b      	lsls	r3, r3, #22
 800fb7a:	d4f8      	bmi.n	800fb6e <_vfiprintf_r+0x4a>
 800fb7c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fb7e:	f7fd fb17 	bl	800d1b0 <__retarget_lock_release_recursive>
 800fb82:	e7f4      	b.n	800fb6e <_vfiprintf_r+0x4a>
 800fb84:	2300      	movs	r3, #0
 800fb86:	ac08      	add	r4, sp, #32
 800fb88:	6163      	str	r3, [r4, #20]
 800fb8a:	3320      	adds	r3, #32
 800fb8c:	7663      	strb	r3, [r4, #25]
 800fb8e:	3310      	adds	r3, #16
 800fb90:	76a3      	strb	r3, [r4, #26]
 800fb92:	9607      	str	r6, [sp, #28]
 800fb94:	002e      	movs	r6, r5
 800fb96:	7833      	ldrb	r3, [r6, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d001      	beq.n	800fba0 <_vfiprintf_r+0x7c>
 800fb9c:	2b25      	cmp	r3, #37	; 0x25
 800fb9e:	d148      	bne.n	800fc32 <_vfiprintf_r+0x10e>
 800fba0:	1b73      	subs	r3, r6, r5
 800fba2:	9305      	str	r3, [sp, #20]
 800fba4:	42ae      	cmp	r6, r5
 800fba6:	d00b      	beq.n	800fbc0 <_vfiprintf_r+0x9c>
 800fba8:	002a      	movs	r2, r5
 800fbaa:	0039      	movs	r1, r7
 800fbac:	9803      	ldr	r0, [sp, #12]
 800fbae:	f7ff ffa6 	bl	800fafe <__sfputs_r>
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	d100      	bne.n	800fbb8 <_vfiprintf_r+0x94>
 800fbb6:	e0af      	b.n	800fd18 <_vfiprintf_r+0x1f4>
 800fbb8:	6963      	ldr	r3, [r4, #20]
 800fbba:	9a05      	ldr	r2, [sp, #20]
 800fbbc:	189b      	adds	r3, r3, r2
 800fbbe:	6163      	str	r3, [r4, #20]
 800fbc0:	7833      	ldrb	r3, [r6, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d100      	bne.n	800fbc8 <_vfiprintf_r+0xa4>
 800fbc6:	e0a7      	b.n	800fd18 <_vfiprintf_r+0x1f4>
 800fbc8:	2201      	movs	r2, #1
 800fbca:	2300      	movs	r3, #0
 800fbcc:	4252      	negs	r2, r2
 800fbce:	6062      	str	r2, [r4, #4]
 800fbd0:	a904      	add	r1, sp, #16
 800fbd2:	3254      	adds	r2, #84	; 0x54
 800fbd4:	1852      	adds	r2, r2, r1
 800fbd6:	1c75      	adds	r5, r6, #1
 800fbd8:	6023      	str	r3, [r4, #0]
 800fbda:	60e3      	str	r3, [r4, #12]
 800fbdc:	60a3      	str	r3, [r4, #8]
 800fbde:	7013      	strb	r3, [r2, #0]
 800fbe0:	65a3      	str	r3, [r4, #88]	; 0x58
 800fbe2:	4b59      	ldr	r3, [pc, #356]	; (800fd48 <_vfiprintf_r+0x224>)
 800fbe4:	2205      	movs	r2, #5
 800fbe6:	0018      	movs	r0, r3
 800fbe8:	7829      	ldrb	r1, [r5, #0]
 800fbea:	9305      	str	r3, [sp, #20]
 800fbec:	f7fd fae1 	bl	800d1b2 <memchr>
 800fbf0:	1c6e      	adds	r6, r5, #1
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	d11f      	bne.n	800fc36 <_vfiprintf_r+0x112>
 800fbf6:	6822      	ldr	r2, [r4, #0]
 800fbf8:	06d3      	lsls	r3, r2, #27
 800fbfa:	d504      	bpl.n	800fc06 <_vfiprintf_r+0xe2>
 800fbfc:	2353      	movs	r3, #83	; 0x53
 800fbfe:	a904      	add	r1, sp, #16
 800fc00:	185b      	adds	r3, r3, r1
 800fc02:	2120      	movs	r1, #32
 800fc04:	7019      	strb	r1, [r3, #0]
 800fc06:	0713      	lsls	r3, r2, #28
 800fc08:	d504      	bpl.n	800fc14 <_vfiprintf_r+0xf0>
 800fc0a:	2353      	movs	r3, #83	; 0x53
 800fc0c:	a904      	add	r1, sp, #16
 800fc0e:	185b      	adds	r3, r3, r1
 800fc10:	212b      	movs	r1, #43	; 0x2b
 800fc12:	7019      	strb	r1, [r3, #0]
 800fc14:	782b      	ldrb	r3, [r5, #0]
 800fc16:	2b2a      	cmp	r3, #42	; 0x2a
 800fc18:	d016      	beq.n	800fc48 <_vfiprintf_r+0x124>
 800fc1a:	002e      	movs	r6, r5
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	200a      	movs	r0, #10
 800fc20:	68e3      	ldr	r3, [r4, #12]
 800fc22:	7832      	ldrb	r2, [r6, #0]
 800fc24:	1c75      	adds	r5, r6, #1
 800fc26:	3a30      	subs	r2, #48	; 0x30
 800fc28:	2a09      	cmp	r2, #9
 800fc2a:	d94e      	bls.n	800fcca <_vfiprintf_r+0x1a6>
 800fc2c:	2900      	cmp	r1, #0
 800fc2e:	d111      	bne.n	800fc54 <_vfiprintf_r+0x130>
 800fc30:	e017      	b.n	800fc62 <_vfiprintf_r+0x13e>
 800fc32:	3601      	adds	r6, #1
 800fc34:	e7af      	b.n	800fb96 <_vfiprintf_r+0x72>
 800fc36:	9b05      	ldr	r3, [sp, #20]
 800fc38:	6822      	ldr	r2, [r4, #0]
 800fc3a:	1ac0      	subs	r0, r0, r3
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	4083      	lsls	r3, r0
 800fc40:	4313      	orrs	r3, r2
 800fc42:	0035      	movs	r5, r6
 800fc44:	6023      	str	r3, [r4, #0]
 800fc46:	e7cc      	b.n	800fbe2 <_vfiprintf_r+0xbe>
 800fc48:	9b07      	ldr	r3, [sp, #28]
 800fc4a:	1d19      	adds	r1, r3, #4
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	9107      	str	r1, [sp, #28]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	db01      	blt.n	800fc58 <_vfiprintf_r+0x134>
 800fc54:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc56:	e004      	b.n	800fc62 <_vfiprintf_r+0x13e>
 800fc58:	425b      	negs	r3, r3
 800fc5a:	60e3      	str	r3, [r4, #12]
 800fc5c:	2302      	movs	r3, #2
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	7833      	ldrb	r3, [r6, #0]
 800fc64:	2b2e      	cmp	r3, #46	; 0x2e
 800fc66:	d10a      	bne.n	800fc7e <_vfiprintf_r+0x15a>
 800fc68:	7873      	ldrb	r3, [r6, #1]
 800fc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800fc6c:	d135      	bne.n	800fcda <_vfiprintf_r+0x1b6>
 800fc6e:	9b07      	ldr	r3, [sp, #28]
 800fc70:	3602      	adds	r6, #2
 800fc72:	1d1a      	adds	r2, r3, #4
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	9207      	str	r2, [sp, #28]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	db2b      	blt.n	800fcd4 <_vfiprintf_r+0x1b0>
 800fc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc7e:	4d33      	ldr	r5, [pc, #204]	; (800fd4c <_vfiprintf_r+0x228>)
 800fc80:	2203      	movs	r2, #3
 800fc82:	0028      	movs	r0, r5
 800fc84:	7831      	ldrb	r1, [r6, #0]
 800fc86:	f7fd fa94 	bl	800d1b2 <memchr>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d006      	beq.n	800fc9c <_vfiprintf_r+0x178>
 800fc8e:	2340      	movs	r3, #64	; 0x40
 800fc90:	1b40      	subs	r0, r0, r5
 800fc92:	4083      	lsls	r3, r0
 800fc94:	6822      	ldr	r2, [r4, #0]
 800fc96:	3601      	adds	r6, #1
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	6023      	str	r3, [r4, #0]
 800fc9c:	7831      	ldrb	r1, [r6, #0]
 800fc9e:	2206      	movs	r2, #6
 800fca0:	482b      	ldr	r0, [pc, #172]	; (800fd50 <_vfiprintf_r+0x22c>)
 800fca2:	1c75      	adds	r5, r6, #1
 800fca4:	7621      	strb	r1, [r4, #24]
 800fca6:	f7fd fa84 	bl	800d1b2 <memchr>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d043      	beq.n	800fd36 <_vfiprintf_r+0x212>
 800fcae:	4b29      	ldr	r3, [pc, #164]	; (800fd54 <_vfiprintf_r+0x230>)
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d125      	bne.n	800fd00 <_vfiprintf_r+0x1dc>
 800fcb4:	2207      	movs	r2, #7
 800fcb6:	9b07      	ldr	r3, [sp, #28]
 800fcb8:	3307      	adds	r3, #7
 800fcba:	4393      	bics	r3, r2
 800fcbc:	3308      	adds	r3, #8
 800fcbe:	9307      	str	r3, [sp, #28]
 800fcc0:	6963      	ldr	r3, [r4, #20]
 800fcc2:	9a04      	ldr	r2, [sp, #16]
 800fcc4:	189b      	adds	r3, r3, r2
 800fcc6:	6163      	str	r3, [r4, #20]
 800fcc8:	e764      	b.n	800fb94 <_vfiprintf_r+0x70>
 800fcca:	4343      	muls	r3, r0
 800fccc:	002e      	movs	r6, r5
 800fcce:	2101      	movs	r1, #1
 800fcd0:	189b      	adds	r3, r3, r2
 800fcd2:	e7a6      	b.n	800fc22 <_vfiprintf_r+0xfe>
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	425b      	negs	r3, r3
 800fcd8:	e7d0      	b.n	800fc7c <_vfiprintf_r+0x158>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	200a      	movs	r0, #10
 800fcde:	001a      	movs	r2, r3
 800fce0:	3601      	adds	r6, #1
 800fce2:	6063      	str	r3, [r4, #4]
 800fce4:	7831      	ldrb	r1, [r6, #0]
 800fce6:	1c75      	adds	r5, r6, #1
 800fce8:	3930      	subs	r1, #48	; 0x30
 800fcea:	2909      	cmp	r1, #9
 800fcec:	d903      	bls.n	800fcf6 <_vfiprintf_r+0x1d2>
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d0c5      	beq.n	800fc7e <_vfiprintf_r+0x15a>
 800fcf2:	9209      	str	r2, [sp, #36]	; 0x24
 800fcf4:	e7c3      	b.n	800fc7e <_vfiprintf_r+0x15a>
 800fcf6:	4342      	muls	r2, r0
 800fcf8:	002e      	movs	r6, r5
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	1852      	adds	r2, r2, r1
 800fcfe:	e7f1      	b.n	800fce4 <_vfiprintf_r+0x1c0>
 800fd00:	aa07      	add	r2, sp, #28
 800fd02:	9200      	str	r2, [sp, #0]
 800fd04:	0021      	movs	r1, r4
 800fd06:	003a      	movs	r2, r7
 800fd08:	4b13      	ldr	r3, [pc, #76]	; (800fd58 <_vfiprintf_r+0x234>)
 800fd0a:	9803      	ldr	r0, [sp, #12]
 800fd0c:	f7fc f936 	bl	800bf7c <_printf_float>
 800fd10:	9004      	str	r0, [sp, #16]
 800fd12:	9b04      	ldr	r3, [sp, #16]
 800fd14:	3301      	adds	r3, #1
 800fd16:	d1d3      	bne.n	800fcc0 <_vfiprintf_r+0x19c>
 800fd18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd1a:	07db      	lsls	r3, r3, #31
 800fd1c:	d405      	bmi.n	800fd2a <_vfiprintf_r+0x206>
 800fd1e:	89bb      	ldrh	r3, [r7, #12]
 800fd20:	059b      	lsls	r3, r3, #22
 800fd22:	d402      	bmi.n	800fd2a <_vfiprintf_r+0x206>
 800fd24:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fd26:	f7fd fa43 	bl	800d1b0 <__retarget_lock_release_recursive>
 800fd2a:	89bb      	ldrh	r3, [r7, #12]
 800fd2c:	065b      	lsls	r3, r3, #25
 800fd2e:	d500      	bpl.n	800fd32 <_vfiprintf_r+0x20e>
 800fd30:	e71d      	b.n	800fb6e <_vfiprintf_r+0x4a>
 800fd32:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fd34:	e71d      	b.n	800fb72 <_vfiprintf_r+0x4e>
 800fd36:	aa07      	add	r2, sp, #28
 800fd38:	9200      	str	r2, [sp, #0]
 800fd3a:	0021      	movs	r1, r4
 800fd3c:	003a      	movs	r2, r7
 800fd3e:	4b06      	ldr	r3, [pc, #24]	; (800fd58 <_vfiprintf_r+0x234>)
 800fd40:	9803      	ldr	r0, [sp, #12]
 800fd42:	f7fc fbe1 	bl	800c508 <_printf_i>
 800fd46:	e7e3      	b.n	800fd10 <_vfiprintf_r+0x1ec>
 800fd48:	08011159 	.word	0x08011159
 800fd4c:	0801115f 	.word	0x0801115f
 800fd50:	08011163 	.word	0x08011163
 800fd54:	0800bf7d 	.word	0x0800bf7d
 800fd58:	0800faff 	.word	0x0800faff

0800fd5c <__sflush_r>:
 800fd5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd5e:	898b      	ldrh	r3, [r1, #12]
 800fd60:	0005      	movs	r5, r0
 800fd62:	000c      	movs	r4, r1
 800fd64:	071a      	lsls	r2, r3, #28
 800fd66:	d45c      	bmi.n	800fe22 <__sflush_r+0xc6>
 800fd68:	684a      	ldr	r2, [r1, #4]
 800fd6a:	2a00      	cmp	r2, #0
 800fd6c:	dc04      	bgt.n	800fd78 <__sflush_r+0x1c>
 800fd6e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800fd70:	2a00      	cmp	r2, #0
 800fd72:	dc01      	bgt.n	800fd78 <__sflush_r+0x1c>
 800fd74:	2000      	movs	r0, #0
 800fd76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd78:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800fd7a:	2f00      	cmp	r7, #0
 800fd7c:	d0fa      	beq.n	800fd74 <__sflush_r+0x18>
 800fd7e:	2200      	movs	r2, #0
 800fd80:	2080      	movs	r0, #128	; 0x80
 800fd82:	682e      	ldr	r6, [r5, #0]
 800fd84:	602a      	str	r2, [r5, #0]
 800fd86:	001a      	movs	r2, r3
 800fd88:	0140      	lsls	r0, r0, #5
 800fd8a:	6a21      	ldr	r1, [r4, #32]
 800fd8c:	4002      	ands	r2, r0
 800fd8e:	4203      	tst	r3, r0
 800fd90:	d034      	beq.n	800fdfc <__sflush_r+0xa0>
 800fd92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd94:	89a3      	ldrh	r3, [r4, #12]
 800fd96:	075b      	lsls	r3, r3, #29
 800fd98:	d506      	bpl.n	800fda8 <__sflush_r+0x4c>
 800fd9a:	6863      	ldr	r3, [r4, #4]
 800fd9c:	1ac0      	subs	r0, r0, r3
 800fd9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d001      	beq.n	800fda8 <__sflush_r+0x4c>
 800fda4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fda6:	1ac0      	subs	r0, r0, r3
 800fda8:	0002      	movs	r2, r0
 800fdaa:	2300      	movs	r3, #0
 800fdac:	0028      	movs	r0, r5
 800fdae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800fdb0:	6a21      	ldr	r1, [r4, #32]
 800fdb2:	47b8      	blx	r7
 800fdb4:	89a2      	ldrh	r2, [r4, #12]
 800fdb6:	1c43      	adds	r3, r0, #1
 800fdb8:	d106      	bne.n	800fdc8 <__sflush_r+0x6c>
 800fdba:	6829      	ldr	r1, [r5, #0]
 800fdbc:	291d      	cmp	r1, #29
 800fdbe:	d82c      	bhi.n	800fe1a <__sflush_r+0xbe>
 800fdc0:	4b2a      	ldr	r3, [pc, #168]	; (800fe6c <__sflush_r+0x110>)
 800fdc2:	410b      	asrs	r3, r1
 800fdc4:	07db      	lsls	r3, r3, #31
 800fdc6:	d428      	bmi.n	800fe1a <__sflush_r+0xbe>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	6063      	str	r3, [r4, #4]
 800fdcc:	6923      	ldr	r3, [r4, #16]
 800fdce:	6023      	str	r3, [r4, #0]
 800fdd0:	04d2      	lsls	r2, r2, #19
 800fdd2:	d505      	bpl.n	800fde0 <__sflush_r+0x84>
 800fdd4:	1c43      	adds	r3, r0, #1
 800fdd6:	d102      	bne.n	800fdde <__sflush_r+0x82>
 800fdd8:	682b      	ldr	r3, [r5, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d100      	bne.n	800fde0 <__sflush_r+0x84>
 800fdde:	6560      	str	r0, [r4, #84]	; 0x54
 800fde0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fde2:	602e      	str	r6, [r5, #0]
 800fde4:	2900      	cmp	r1, #0
 800fde6:	d0c5      	beq.n	800fd74 <__sflush_r+0x18>
 800fde8:	0023      	movs	r3, r4
 800fdea:	3344      	adds	r3, #68	; 0x44
 800fdec:	4299      	cmp	r1, r3
 800fdee:	d002      	beq.n	800fdf6 <__sflush_r+0x9a>
 800fdf0:	0028      	movs	r0, r5
 800fdf2:	f7fe f895 	bl	800df20 <_free_r>
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	6360      	str	r0, [r4, #52]	; 0x34
 800fdfa:	e7bc      	b.n	800fd76 <__sflush_r+0x1a>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	0028      	movs	r0, r5
 800fe00:	47b8      	blx	r7
 800fe02:	1c43      	adds	r3, r0, #1
 800fe04:	d1c6      	bne.n	800fd94 <__sflush_r+0x38>
 800fe06:	682b      	ldr	r3, [r5, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d0c3      	beq.n	800fd94 <__sflush_r+0x38>
 800fe0c:	2b1d      	cmp	r3, #29
 800fe0e:	d001      	beq.n	800fe14 <__sflush_r+0xb8>
 800fe10:	2b16      	cmp	r3, #22
 800fe12:	d101      	bne.n	800fe18 <__sflush_r+0xbc>
 800fe14:	602e      	str	r6, [r5, #0]
 800fe16:	e7ad      	b.n	800fd74 <__sflush_r+0x18>
 800fe18:	89a2      	ldrh	r2, [r4, #12]
 800fe1a:	2340      	movs	r3, #64	; 0x40
 800fe1c:	4313      	orrs	r3, r2
 800fe1e:	81a3      	strh	r3, [r4, #12]
 800fe20:	e7a9      	b.n	800fd76 <__sflush_r+0x1a>
 800fe22:	690e      	ldr	r6, [r1, #16]
 800fe24:	2e00      	cmp	r6, #0
 800fe26:	d0a5      	beq.n	800fd74 <__sflush_r+0x18>
 800fe28:	680f      	ldr	r7, [r1, #0]
 800fe2a:	600e      	str	r6, [r1, #0]
 800fe2c:	1bba      	subs	r2, r7, r6
 800fe2e:	9201      	str	r2, [sp, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	079b      	lsls	r3, r3, #30
 800fe34:	d100      	bne.n	800fe38 <__sflush_r+0xdc>
 800fe36:	694a      	ldr	r2, [r1, #20]
 800fe38:	60a2      	str	r2, [r4, #8]
 800fe3a:	9b01      	ldr	r3, [sp, #4]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	dd99      	ble.n	800fd74 <__sflush_r+0x18>
 800fe40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fe42:	0032      	movs	r2, r6
 800fe44:	001f      	movs	r7, r3
 800fe46:	0028      	movs	r0, r5
 800fe48:	9b01      	ldr	r3, [sp, #4]
 800fe4a:	6a21      	ldr	r1, [r4, #32]
 800fe4c:	47b8      	blx	r7
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	dc06      	bgt.n	800fe60 <__sflush_r+0x104>
 800fe52:	2340      	movs	r3, #64	; 0x40
 800fe54:	2001      	movs	r0, #1
 800fe56:	89a2      	ldrh	r2, [r4, #12]
 800fe58:	4240      	negs	r0, r0
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	81a3      	strh	r3, [r4, #12]
 800fe5e:	e78a      	b.n	800fd76 <__sflush_r+0x1a>
 800fe60:	9b01      	ldr	r3, [sp, #4]
 800fe62:	1836      	adds	r6, r6, r0
 800fe64:	1a1b      	subs	r3, r3, r0
 800fe66:	9301      	str	r3, [sp, #4]
 800fe68:	e7e7      	b.n	800fe3a <__sflush_r+0xde>
 800fe6a:	46c0      	nop			; (mov r8, r8)
 800fe6c:	dfbffffe 	.word	0xdfbffffe

0800fe70 <_fflush_r>:
 800fe70:	690b      	ldr	r3, [r1, #16]
 800fe72:	b570      	push	{r4, r5, r6, lr}
 800fe74:	0005      	movs	r5, r0
 800fe76:	000c      	movs	r4, r1
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d102      	bne.n	800fe82 <_fflush_r+0x12>
 800fe7c:	2500      	movs	r5, #0
 800fe7e:	0028      	movs	r0, r5
 800fe80:	bd70      	pop	{r4, r5, r6, pc}
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d004      	beq.n	800fe90 <_fflush_r+0x20>
 800fe86:	6a03      	ldr	r3, [r0, #32]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d101      	bne.n	800fe90 <_fflush_r+0x20>
 800fe8c:	f7fc fee4 	bl	800cc58 <__sinit>
 800fe90:	220c      	movs	r2, #12
 800fe92:	5ea3      	ldrsh	r3, [r4, r2]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d0f1      	beq.n	800fe7c <_fflush_r+0xc>
 800fe98:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe9a:	07d2      	lsls	r2, r2, #31
 800fe9c:	d404      	bmi.n	800fea8 <_fflush_r+0x38>
 800fe9e:	059b      	lsls	r3, r3, #22
 800fea0:	d402      	bmi.n	800fea8 <_fflush_r+0x38>
 800fea2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fea4:	f7fd f983 	bl	800d1ae <__retarget_lock_acquire_recursive>
 800fea8:	0028      	movs	r0, r5
 800feaa:	0021      	movs	r1, r4
 800feac:	f7ff ff56 	bl	800fd5c <__sflush_r>
 800feb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800feb2:	0005      	movs	r5, r0
 800feb4:	07db      	lsls	r3, r3, #31
 800feb6:	d4e2      	bmi.n	800fe7e <_fflush_r+0xe>
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	059b      	lsls	r3, r3, #22
 800febc:	d4df      	bmi.n	800fe7e <_fflush_r+0xe>
 800febe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fec0:	f7fd f976 	bl	800d1b0 <__retarget_lock_release_recursive>
 800fec4:	e7db      	b.n	800fe7e <_fflush_r+0xe>
	...

0800fec8 <__swhatbuf_r>:
 800fec8:	b570      	push	{r4, r5, r6, lr}
 800feca:	000e      	movs	r6, r1
 800fecc:	001d      	movs	r5, r3
 800fece:	230e      	movs	r3, #14
 800fed0:	5ec9      	ldrsh	r1, [r1, r3]
 800fed2:	0014      	movs	r4, r2
 800fed4:	b096      	sub	sp, #88	; 0x58
 800fed6:	2900      	cmp	r1, #0
 800fed8:	da0c      	bge.n	800fef4 <__swhatbuf_r+0x2c>
 800feda:	89b2      	ldrh	r2, [r6, #12]
 800fedc:	2380      	movs	r3, #128	; 0x80
 800fede:	0011      	movs	r1, r2
 800fee0:	4019      	ands	r1, r3
 800fee2:	421a      	tst	r2, r3
 800fee4:	d013      	beq.n	800ff0e <__swhatbuf_r+0x46>
 800fee6:	2100      	movs	r1, #0
 800fee8:	3b40      	subs	r3, #64	; 0x40
 800feea:	2000      	movs	r0, #0
 800feec:	6029      	str	r1, [r5, #0]
 800feee:	6023      	str	r3, [r4, #0]
 800fef0:	b016      	add	sp, #88	; 0x58
 800fef2:	bd70      	pop	{r4, r5, r6, pc}
 800fef4:	466a      	mov	r2, sp
 800fef6:	f000 f861 	bl	800ffbc <_fstat_r>
 800fefa:	2800      	cmp	r0, #0
 800fefc:	dbed      	blt.n	800feda <__swhatbuf_r+0x12>
 800fefe:	23f0      	movs	r3, #240	; 0xf0
 800ff00:	9901      	ldr	r1, [sp, #4]
 800ff02:	021b      	lsls	r3, r3, #8
 800ff04:	4019      	ands	r1, r3
 800ff06:	4b03      	ldr	r3, [pc, #12]	; (800ff14 <__swhatbuf_r+0x4c>)
 800ff08:	18c9      	adds	r1, r1, r3
 800ff0a:	424b      	negs	r3, r1
 800ff0c:	4159      	adcs	r1, r3
 800ff0e:	2380      	movs	r3, #128	; 0x80
 800ff10:	00db      	lsls	r3, r3, #3
 800ff12:	e7ea      	b.n	800feea <__swhatbuf_r+0x22>
 800ff14:	ffffe000 	.word	0xffffe000

0800ff18 <__smakebuf_r>:
 800ff18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff1a:	2602      	movs	r6, #2
 800ff1c:	898b      	ldrh	r3, [r1, #12]
 800ff1e:	0005      	movs	r5, r0
 800ff20:	000c      	movs	r4, r1
 800ff22:	4233      	tst	r3, r6
 800ff24:	d006      	beq.n	800ff34 <__smakebuf_r+0x1c>
 800ff26:	0023      	movs	r3, r4
 800ff28:	3347      	adds	r3, #71	; 0x47
 800ff2a:	6023      	str	r3, [r4, #0]
 800ff2c:	6123      	str	r3, [r4, #16]
 800ff2e:	2301      	movs	r3, #1
 800ff30:	6163      	str	r3, [r4, #20]
 800ff32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ff34:	466a      	mov	r2, sp
 800ff36:	ab01      	add	r3, sp, #4
 800ff38:	f7ff ffc6 	bl	800fec8 <__swhatbuf_r>
 800ff3c:	9900      	ldr	r1, [sp, #0]
 800ff3e:	0007      	movs	r7, r0
 800ff40:	0028      	movs	r0, r5
 800ff42:	f7fe f863 	bl	800e00c <_malloc_r>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d108      	bne.n	800ff5c <__smakebuf_r+0x44>
 800ff4a:	220c      	movs	r2, #12
 800ff4c:	5ea3      	ldrsh	r3, [r4, r2]
 800ff4e:	059a      	lsls	r2, r3, #22
 800ff50:	d4ef      	bmi.n	800ff32 <__smakebuf_r+0x1a>
 800ff52:	2203      	movs	r2, #3
 800ff54:	4393      	bics	r3, r2
 800ff56:	431e      	orrs	r6, r3
 800ff58:	81a6      	strh	r6, [r4, #12]
 800ff5a:	e7e4      	b.n	800ff26 <__smakebuf_r+0xe>
 800ff5c:	2380      	movs	r3, #128	; 0x80
 800ff5e:	89a2      	ldrh	r2, [r4, #12]
 800ff60:	6020      	str	r0, [r4, #0]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	81a3      	strh	r3, [r4, #12]
 800ff66:	9b00      	ldr	r3, [sp, #0]
 800ff68:	6120      	str	r0, [r4, #16]
 800ff6a:	6163      	str	r3, [r4, #20]
 800ff6c:	9b01      	ldr	r3, [sp, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d00c      	beq.n	800ff8c <__smakebuf_r+0x74>
 800ff72:	0028      	movs	r0, r5
 800ff74:	230e      	movs	r3, #14
 800ff76:	5ee1      	ldrsh	r1, [r4, r3]
 800ff78:	f000 f832 	bl	800ffe0 <_isatty_r>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d005      	beq.n	800ff8c <__smakebuf_r+0x74>
 800ff80:	2303      	movs	r3, #3
 800ff82:	89a2      	ldrh	r2, [r4, #12]
 800ff84:	439a      	bics	r2, r3
 800ff86:	3b02      	subs	r3, #2
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	81a3      	strh	r3, [r4, #12]
 800ff8c:	89a3      	ldrh	r3, [r4, #12]
 800ff8e:	433b      	orrs	r3, r7
 800ff90:	81a3      	strh	r3, [r4, #12]
 800ff92:	e7ce      	b.n	800ff32 <__smakebuf_r+0x1a>

0800ff94 <memmove>:
 800ff94:	b510      	push	{r4, lr}
 800ff96:	4288      	cmp	r0, r1
 800ff98:	d902      	bls.n	800ffa0 <memmove+0xc>
 800ff9a:	188b      	adds	r3, r1, r2
 800ff9c:	4298      	cmp	r0, r3
 800ff9e:	d303      	bcc.n	800ffa8 <memmove+0x14>
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	e007      	b.n	800ffb4 <memmove+0x20>
 800ffa4:	5c8b      	ldrb	r3, [r1, r2]
 800ffa6:	5483      	strb	r3, [r0, r2]
 800ffa8:	3a01      	subs	r2, #1
 800ffaa:	d2fb      	bcs.n	800ffa4 <memmove+0x10>
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	5ccc      	ldrb	r4, [r1, r3]
 800ffb0:	54c4      	strb	r4, [r0, r3]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d1fa      	bne.n	800ffae <memmove+0x1a>
 800ffb8:	e7f8      	b.n	800ffac <memmove+0x18>
	...

0800ffbc <_fstat_r>:
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	b570      	push	{r4, r5, r6, lr}
 800ffc0:	4d06      	ldr	r5, [pc, #24]	; (800ffdc <_fstat_r+0x20>)
 800ffc2:	0004      	movs	r4, r0
 800ffc4:	0008      	movs	r0, r1
 800ffc6:	0011      	movs	r1, r2
 800ffc8:	602b      	str	r3, [r5, #0]
 800ffca:	f7f4 fddf 	bl	8004b8c <_fstat>
 800ffce:	1c43      	adds	r3, r0, #1
 800ffd0:	d103      	bne.n	800ffda <_fstat_r+0x1e>
 800ffd2:	682b      	ldr	r3, [r5, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d000      	beq.n	800ffda <_fstat_r+0x1e>
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	bd70      	pop	{r4, r5, r6, pc}
 800ffdc:	20001d8c 	.word	0x20001d8c

0800ffe0 <_isatty_r>:
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	b570      	push	{r4, r5, r6, lr}
 800ffe4:	4d06      	ldr	r5, [pc, #24]	; (8010000 <_isatty_r+0x20>)
 800ffe6:	0004      	movs	r4, r0
 800ffe8:	0008      	movs	r0, r1
 800ffea:	602b      	str	r3, [r5, #0]
 800ffec:	f7f4 fddc 	bl	8004ba8 <_isatty>
 800fff0:	1c43      	adds	r3, r0, #1
 800fff2:	d103      	bne.n	800fffc <_isatty_r+0x1c>
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d000      	beq.n	800fffc <_isatty_r+0x1c>
 800fffa:	6023      	str	r3, [r4, #0]
 800fffc:	bd70      	pop	{r4, r5, r6, pc}
 800fffe:	46c0      	nop			; (mov r8, r8)
 8010000:	20001d8c 	.word	0x20001d8c

08010004 <_sbrk_r>:
 8010004:	2300      	movs	r3, #0
 8010006:	b570      	push	{r4, r5, r6, lr}
 8010008:	4d06      	ldr	r5, [pc, #24]	; (8010024 <_sbrk_r+0x20>)
 801000a:	0004      	movs	r4, r0
 801000c:	0008      	movs	r0, r1
 801000e:	602b      	str	r3, [r5, #0]
 8010010:	f7f4 fdde 	bl	8004bd0 <_sbrk>
 8010014:	1c43      	adds	r3, r0, #1
 8010016:	d103      	bne.n	8010020 <_sbrk_r+0x1c>
 8010018:	682b      	ldr	r3, [r5, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d000      	beq.n	8010020 <_sbrk_r+0x1c>
 801001e:	6023      	str	r3, [r4, #0]
 8010020:	bd70      	pop	{r4, r5, r6, pc}
 8010022:	46c0      	nop			; (mov r8, r8)
 8010024:	20001d8c 	.word	0x20001d8c

08010028 <nan>:
 8010028:	2000      	movs	r0, #0
 801002a:	4901      	ldr	r1, [pc, #4]	; (8010030 <nan+0x8>)
 801002c:	4770      	bx	lr
 801002e:	46c0      	nop			; (mov r8, r8)
 8010030:	7ff80000 	.word	0x7ff80000

08010034 <__assert_func>:
 8010034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010036:	0014      	movs	r4, r2
 8010038:	001a      	movs	r2, r3
 801003a:	4b09      	ldr	r3, [pc, #36]	; (8010060 <__assert_func+0x2c>)
 801003c:	0005      	movs	r5, r0
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	000e      	movs	r6, r1
 8010042:	68d8      	ldr	r0, [r3, #12]
 8010044:	4b07      	ldr	r3, [pc, #28]	; (8010064 <__assert_func+0x30>)
 8010046:	2c00      	cmp	r4, #0
 8010048:	d101      	bne.n	801004e <__assert_func+0x1a>
 801004a:	4b07      	ldr	r3, [pc, #28]	; (8010068 <__assert_func+0x34>)
 801004c:	001c      	movs	r4, r3
 801004e:	4907      	ldr	r1, [pc, #28]	; (801006c <__assert_func+0x38>)
 8010050:	9301      	str	r3, [sp, #4]
 8010052:	9402      	str	r4, [sp, #8]
 8010054:	002b      	movs	r3, r5
 8010056:	9600      	str	r6, [sp, #0]
 8010058:	f000 fbe2 	bl	8010820 <fiprintf>
 801005c:	f000 fbf0 	bl	8010840 <abort>
 8010060:	2000007c 	.word	0x2000007c
 8010064:	08011172 	.word	0x08011172
 8010068:	080111ad 	.word	0x080111ad
 801006c:	0801117f 	.word	0x0801117f

08010070 <_calloc_r>:
 8010070:	b570      	push	{r4, r5, r6, lr}
 8010072:	0c0b      	lsrs	r3, r1, #16
 8010074:	0c15      	lsrs	r5, r2, #16
 8010076:	2b00      	cmp	r3, #0
 8010078:	d11e      	bne.n	80100b8 <_calloc_r+0x48>
 801007a:	2d00      	cmp	r5, #0
 801007c:	d10c      	bne.n	8010098 <_calloc_r+0x28>
 801007e:	b289      	uxth	r1, r1
 8010080:	b294      	uxth	r4, r2
 8010082:	434c      	muls	r4, r1
 8010084:	0021      	movs	r1, r4
 8010086:	f7fd ffc1 	bl	800e00c <_malloc_r>
 801008a:	1e05      	subs	r5, r0, #0
 801008c:	d01b      	beq.n	80100c6 <_calloc_r+0x56>
 801008e:	0022      	movs	r2, r4
 8010090:	2100      	movs	r1, #0
 8010092:	f7fc ff97 	bl	800cfc4 <memset>
 8010096:	e016      	b.n	80100c6 <_calloc_r+0x56>
 8010098:	1c2b      	adds	r3, r5, #0
 801009a:	1c0c      	adds	r4, r1, #0
 801009c:	b289      	uxth	r1, r1
 801009e:	b292      	uxth	r2, r2
 80100a0:	434a      	muls	r2, r1
 80100a2:	b2a1      	uxth	r1, r4
 80100a4:	b29c      	uxth	r4, r3
 80100a6:	434c      	muls	r4, r1
 80100a8:	0c13      	lsrs	r3, r2, #16
 80100aa:	18e4      	adds	r4, r4, r3
 80100ac:	0c23      	lsrs	r3, r4, #16
 80100ae:	d107      	bne.n	80100c0 <_calloc_r+0x50>
 80100b0:	0424      	lsls	r4, r4, #16
 80100b2:	b292      	uxth	r2, r2
 80100b4:	4314      	orrs	r4, r2
 80100b6:	e7e5      	b.n	8010084 <_calloc_r+0x14>
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	d101      	bne.n	80100c0 <_calloc_r+0x50>
 80100bc:	1c14      	adds	r4, r2, #0
 80100be:	e7ed      	b.n	801009c <_calloc_r+0x2c>
 80100c0:	230c      	movs	r3, #12
 80100c2:	2500      	movs	r5, #0
 80100c4:	6003      	str	r3, [r0, #0]
 80100c6:	0028      	movs	r0, r5
 80100c8:	bd70      	pop	{r4, r5, r6, pc}

080100ca <rshift>:
 80100ca:	0002      	movs	r2, r0
 80100cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ce:	6904      	ldr	r4, [r0, #16]
 80100d0:	114b      	asrs	r3, r1, #5
 80100d2:	b085      	sub	sp, #20
 80100d4:	3214      	adds	r2, #20
 80100d6:	9302      	str	r3, [sp, #8]
 80100d8:	114d      	asrs	r5, r1, #5
 80100da:	0013      	movs	r3, r2
 80100dc:	42ac      	cmp	r4, r5
 80100de:	dd32      	ble.n	8010146 <rshift+0x7c>
 80100e0:	261f      	movs	r6, #31
 80100e2:	000f      	movs	r7, r1
 80100e4:	114b      	asrs	r3, r1, #5
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	00a5      	lsls	r5, r4, #2
 80100ea:	18d3      	adds	r3, r2, r3
 80100ec:	4037      	ands	r7, r6
 80100ee:	1955      	adds	r5, r2, r5
 80100f0:	9300      	str	r3, [sp, #0]
 80100f2:	9701      	str	r7, [sp, #4]
 80100f4:	4231      	tst	r1, r6
 80100f6:	d10d      	bne.n	8010114 <rshift+0x4a>
 80100f8:	0016      	movs	r6, r2
 80100fa:	0019      	movs	r1, r3
 80100fc:	428d      	cmp	r5, r1
 80100fe:	d836      	bhi.n	801016e <rshift+0xa4>
 8010100:	9900      	ldr	r1, [sp, #0]
 8010102:	2300      	movs	r3, #0
 8010104:	3903      	subs	r1, #3
 8010106:	428d      	cmp	r5, r1
 8010108:	d302      	bcc.n	8010110 <rshift+0x46>
 801010a:	9b02      	ldr	r3, [sp, #8]
 801010c:	1ae4      	subs	r4, r4, r3
 801010e:	00a3      	lsls	r3, r4, #2
 8010110:	18d3      	adds	r3, r2, r3
 8010112:	e018      	b.n	8010146 <rshift+0x7c>
 8010114:	2120      	movs	r1, #32
 8010116:	9e01      	ldr	r6, [sp, #4]
 8010118:	9f01      	ldr	r7, [sp, #4]
 801011a:	1b89      	subs	r1, r1, r6
 801011c:	9e00      	ldr	r6, [sp, #0]
 801011e:	9103      	str	r1, [sp, #12]
 8010120:	ce02      	ldmia	r6!, {r1}
 8010122:	4694      	mov	ip, r2
 8010124:	40f9      	lsrs	r1, r7
 8010126:	42b5      	cmp	r5, r6
 8010128:	d816      	bhi.n	8010158 <rshift+0x8e>
 801012a:	9e00      	ldr	r6, [sp, #0]
 801012c:	2300      	movs	r3, #0
 801012e:	3601      	adds	r6, #1
 8010130:	42b5      	cmp	r5, r6
 8010132:	d303      	bcc.n	801013c <rshift+0x72>
 8010134:	9b02      	ldr	r3, [sp, #8]
 8010136:	1ae3      	subs	r3, r4, r3
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	3b04      	subs	r3, #4
 801013c:	18d3      	adds	r3, r2, r3
 801013e:	6019      	str	r1, [r3, #0]
 8010140:	2900      	cmp	r1, #0
 8010142:	d000      	beq.n	8010146 <rshift+0x7c>
 8010144:	3304      	adds	r3, #4
 8010146:	1a99      	subs	r1, r3, r2
 8010148:	1089      	asrs	r1, r1, #2
 801014a:	6101      	str	r1, [r0, #16]
 801014c:	4293      	cmp	r3, r2
 801014e:	d101      	bne.n	8010154 <rshift+0x8a>
 8010150:	2300      	movs	r3, #0
 8010152:	6143      	str	r3, [r0, #20]
 8010154:	b005      	add	sp, #20
 8010156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010158:	6837      	ldr	r7, [r6, #0]
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	409f      	lsls	r7, r3
 801015e:	430f      	orrs	r7, r1
 8010160:	4661      	mov	r1, ip
 8010162:	c180      	stmia	r1!, {r7}
 8010164:	468c      	mov	ip, r1
 8010166:	9b01      	ldr	r3, [sp, #4]
 8010168:	ce02      	ldmia	r6!, {r1}
 801016a:	40d9      	lsrs	r1, r3
 801016c:	e7db      	b.n	8010126 <rshift+0x5c>
 801016e:	c980      	ldmia	r1!, {r7}
 8010170:	c680      	stmia	r6!, {r7}
 8010172:	e7c3      	b.n	80100fc <rshift+0x32>

08010174 <__hexdig_fun>:
 8010174:	0002      	movs	r2, r0
 8010176:	3a30      	subs	r2, #48	; 0x30
 8010178:	0003      	movs	r3, r0
 801017a:	2a09      	cmp	r2, #9
 801017c:	d802      	bhi.n	8010184 <__hexdig_fun+0x10>
 801017e:	3b20      	subs	r3, #32
 8010180:	b2d8      	uxtb	r0, r3
 8010182:	4770      	bx	lr
 8010184:	0002      	movs	r2, r0
 8010186:	3a61      	subs	r2, #97	; 0x61
 8010188:	2a05      	cmp	r2, #5
 801018a:	d801      	bhi.n	8010190 <__hexdig_fun+0x1c>
 801018c:	3b47      	subs	r3, #71	; 0x47
 801018e:	e7f7      	b.n	8010180 <__hexdig_fun+0xc>
 8010190:	001a      	movs	r2, r3
 8010192:	3a41      	subs	r2, #65	; 0x41
 8010194:	2000      	movs	r0, #0
 8010196:	2a05      	cmp	r2, #5
 8010198:	d8f3      	bhi.n	8010182 <__hexdig_fun+0xe>
 801019a:	3b27      	subs	r3, #39	; 0x27
 801019c:	e7f0      	b.n	8010180 <__hexdig_fun+0xc>
	...

080101a0 <__gethex>:
 80101a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a2:	b089      	sub	sp, #36	; 0x24
 80101a4:	9307      	str	r3, [sp, #28]
 80101a6:	2302      	movs	r3, #2
 80101a8:	9201      	str	r2, [sp, #4]
 80101aa:	680a      	ldr	r2, [r1, #0]
 80101ac:	425b      	negs	r3, r3
 80101ae:	9003      	str	r0, [sp, #12]
 80101b0:	9106      	str	r1, [sp, #24]
 80101b2:	1c96      	adds	r6, r2, #2
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	199a      	adds	r2, r3, r6
 80101b8:	9600      	str	r6, [sp, #0]
 80101ba:	9205      	str	r2, [sp, #20]
 80101bc:	9a00      	ldr	r2, [sp, #0]
 80101be:	3601      	adds	r6, #1
 80101c0:	7810      	ldrb	r0, [r2, #0]
 80101c2:	2830      	cmp	r0, #48	; 0x30
 80101c4:	d0f7      	beq.n	80101b6 <__gethex+0x16>
 80101c6:	f7ff ffd5 	bl	8010174 <__hexdig_fun>
 80101ca:	2300      	movs	r3, #0
 80101cc:	001d      	movs	r5, r3
 80101ce:	9302      	str	r3, [sp, #8]
 80101d0:	4298      	cmp	r0, r3
 80101d2:	d11d      	bne.n	8010210 <__gethex+0x70>
 80101d4:	2201      	movs	r2, #1
 80101d6:	49a6      	ldr	r1, [pc, #664]	; (8010470 <__gethex+0x2d0>)
 80101d8:	9800      	ldr	r0, [sp, #0]
 80101da:	f7fc fefb 	bl	800cfd4 <strncmp>
 80101de:	0007      	movs	r7, r0
 80101e0:	42a8      	cmp	r0, r5
 80101e2:	d169      	bne.n	80102b8 <__gethex+0x118>
 80101e4:	9b00      	ldr	r3, [sp, #0]
 80101e6:	0034      	movs	r4, r6
 80101e8:	7858      	ldrb	r0, [r3, #1]
 80101ea:	f7ff ffc3 	bl	8010174 <__hexdig_fun>
 80101ee:	2301      	movs	r3, #1
 80101f0:	9302      	str	r3, [sp, #8]
 80101f2:	42a8      	cmp	r0, r5
 80101f4:	d02f      	beq.n	8010256 <__gethex+0xb6>
 80101f6:	9600      	str	r6, [sp, #0]
 80101f8:	9b00      	ldr	r3, [sp, #0]
 80101fa:	7818      	ldrb	r0, [r3, #0]
 80101fc:	2830      	cmp	r0, #48	; 0x30
 80101fe:	d009      	beq.n	8010214 <__gethex+0x74>
 8010200:	f7ff ffb8 	bl	8010174 <__hexdig_fun>
 8010204:	4242      	negs	r2, r0
 8010206:	4142      	adcs	r2, r0
 8010208:	2301      	movs	r3, #1
 801020a:	0035      	movs	r5, r6
 801020c:	9202      	str	r2, [sp, #8]
 801020e:	9305      	str	r3, [sp, #20]
 8010210:	9c00      	ldr	r4, [sp, #0]
 8010212:	e004      	b.n	801021e <__gethex+0x7e>
 8010214:	9b00      	ldr	r3, [sp, #0]
 8010216:	3301      	adds	r3, #1
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	e7ed      	b.n	80101f8 <__gethex+0x58>
 801021c:	3401      	adds	r4, #1
 801021e:	7820      	ldrb	r0, [r4, #0]
 8010220:	f7ff ffa8 	bl	8010174 <__hexdig_fun>
 8010224:	1e07      	subs	r7, r0, #0
 8010226:	d1f9      	bne.n	801021c <__gethex+0x7c>
 8010228:	2201      	movs	r2, #1
 801022a:	0020      	movs	r0, r4
 801022c:	4990      	ldr	r1, [pc, #576]	; (8010470 <__gethex+0x2d0>)
 801022e:	f7fc fed1 	bl	800cfd4 <strncmp>
 8010232:	2800      	cmp	r0, #0
 8010234:	d10d      	bne.n	8010252 <__gethex+0xb2>
 8010236:	2d00      	cmp	r5, #0
 8010238:	d106      	bne.n	8010248 <__gethex+0xa8>
 801023a:	3401      	adds	r4, #1
 801023c:	0025      	movs	r5, r4
 801023e:	7820      	ldrb	r0, [r4, #0]
 8010240:	f7ff ff98 	bl	8010174 <__hexdig_fun>
 8010244:	2800      	cmp	r0, #0
 8010246:	d102      	bne.n	801024e <__gethex+0xae>
 8010248:	1b2d      	subs	r5, r5, r4
 801024a:	00af      	lsls	r7, r5, #2
 801024c:	e003      	b.n	8010256 <__gethex+0xb6>
 801024e:	3401      	adds	r4, #1
 8010250:	e7f5      	b.n	801023e <__gethex+0x9e>
 8010252:	2d00      	cmp	r5, #0
 8010254:	d1f8      	bne.n	8010248 <__gethex+0xa8>
 8010256:	2220      	movs	r2, #32
 8010258:	7823      	ldrb	r3, [r4, #0]
 801025a:	0026      	movs	r6, r4
 801025c:	4393      	bics	r3, r2
 801025e:	2b50      	cmp	r3, #80	; 0x50
 8010260:	d11d      	bne.n	801029e <__gethex+0xfe>
 8010262:	7863      	ldrb	r3, [r4, #1]
 8010264:	2b2b      	cmp	r3, #43	; 0x2b
 8010266:	d02c      	beq.n	80102c2 <__gethex+0x122>
 8010268:	2b2d      	cmp	r3, #45	; 0x2d
 801026a:	d02e      	beq.n	80102ca <__gethex+0x12a>
 801026c:	2300      	movs	r3, #0
 801026e:	1c66      	adds	r6, r4, #1
 8010270:	9304      	str	r3, [sp, #16]
 8010272:	7830      	ldrb	r0, [r6, #0]
 8010274:	f7ff ff7e 	bl	8010174 <__hexdig_fun>
 8010278:	1e43      	subs	r3, r0, #1
 801027a:	b2db      	uxtb	r3, r3
 801027c:	2b18      	cmp	r3, #24
 801027e:	d82b      	bhi.n	80102d8 <__gethex+0x138>
 8010280:	3810      	subs	r0, #16
 8010282:	0005      	movs	r5, r0
 8010284:	7870      	ldrb	r0, [r6, #1]
 8010286:	f7ff ff75 	bl	8010174 <__hexdig_fun>
 801028a:	1e43      	subs	r3, r0, #1
 801028c:	b2db      	uxtb	r3, r3
 801028e:	3601      	adds	r6, #1
 8010290:	2b18      	cmp	r3, #24
 8010292:	d91c      	bls.n	80102ce <__gethex+0x12e>
 8010294:	9b04      	ldr	r3, [sp, #16]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d000      	beq.n	801029c <__gethex+0xfc>
 801029a:	426d      	negs	r5, r5
 801029c:	197f      	adds	r7, r7, r5
 801029e:	9b06      	ldr	r3, [sp, #24]
 80102a0:	601e      	str	r6, [r3, #0]
 80102a2:	9b02      	ldr	r3, [sp, #8]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d019      	beq.n	80102dc <__gethex+0x13c>
 80102a8:	2600      	movs	r6, #0
 80102aa:	9b05      	ldr	r3, [sp, #20]
 80102ac:	42b3      	cmp	r3, r6
 80102ae:	d100      	bne.n	80102b2 <__gethex+0x112>
 80102b0:	3606      	adds	r6, #6
 80102b2:	0030      	movs	r0, r6
 80102b4:	b009      	add	sp, #36	; 0x24
 80102b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102b8:	2301      	movs	r3, #1
 80102ba:	2700      	movs	r7, #0
 80102bc:	9c00      	ldr	r4, [sp, #0]
 80102be:	9302      	str	r3, [sp, #8]
 80102c0:	e7c9      	b.n	8010256 <__gethex+0xb6>
 80102c2:	2300      	movs	r3, #0
 80102c4:	9304      	str	r3, [sp, #16]
 80102c6:	1ca6      	adds	r6, r4, #2
 80102c8:	e7d3      	b.n	8010272 <__gethex+0xd2>
 80102ca:	2301      	movs	r3, #1
 80102cc:	e7fa      	b.n	80102c4 <__gethex+0x124>
 80102ce:	230a      	movs	r3, #10
 80102d0:	435d      	muls	r5, r3
 80102d2:	182d      	adds	r5, r5, r0
 80102d4:	3d10      	subs	r5, #16
 80102d6:	e7d5      	b.n	8010284 <__gethex+0xe4>
 80102d8:	0026      	movs	r6, r4
 80102da:	e7e0      	b.n	801029e <__gethex+0xfe>
 80102dc:	9b00      	ldr	r3, [sp, #0]
 80102de:	9902      	ldr	r1, [sp, #8]
 80102e0:	1ae3      	subs	r3, r4, r3
 80102e2:	3b01      	subs	r3, #1
 80102e4:	2b07      	cmp	r3, #7
 80102e6:	dc0a      	bgt.n	80102fe <__gethex+0x15e>
 80102e8:	9803      	ldr	r0, [sp, #12]
 80102ea:	f7fd ff21 	bl	800e130 <_Balloc>
 80102ee:	1e05      	subs	r5, r0, #0
 80102f0:	d108      	bne.n	8010304 <__gethex+0x164>
 80102f2:	002a      	movs	r2, r5
 80102f4:	21e4      	movs	r1, #228	; 0xe4
 80102f6:	4b5f      	ldr	r3, [pc, #380]	; (8010474 <__gethex+0x2d4>)
 80102f8:	485f      	ldr	r0, [pc, #380]	; (8010478 <__gethex+0x2d8>)
 80102fa:	f7ff fe9b 	bl	8010034 <__assert_func>
 80102fe:	3101      	adds	r1, #1
 8010300:	105b      	asrs	r3, r3, #1
 8010302:	e7ef      	b.n	80102e4 <__gethex+0x144>
 8010304:	0003      	movs	r3, r0
 8010306:	3314      	adds	r3, #20
 8010308:	9302      	str	r3, [sp, #8]
 801030a:	9305      	str	r3, [sp, #20]
 801030c:	2300      	movs	r3, #0
 801030e:	001e      	movs	r6, r3
 8010310:	9304      	str	r3, [sp, #16]
 8010312:	9b00      	ldr	r3, [sp, #0]
 8010314:	42a3      	cmp	r3, r4
 8010316:	d33f      	bcc.n	8010398 <__gethex+0x1f8>
 8010318:	9c05      	ldr	r4, [sp, #20]
 801031a:	9b02      	ldr	r3, [sp, #8]
 801031c:	c440      	stmia	r4!, {r6}
 801031e:	1ae4      	subs	r4, r4, r3
 8010320:	10a4      	asrs	r4, r4, #2
 8010322:	0030      	movs	r0, r6
 8010324:	612c      	str	r4, [r5, #16]
 8010326:	f7fd fffb 	bl	800e320 <__hi0bits>
 801032a:	9b01      	ldr	r3, [sp, #4]
 801032c:	0164      	lsls	r4, r4, #5
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	1a26      	subs	r6, r4, r0
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	429e      	cmp	r6, r3
 8010336:	dd51      	ble.n	80103dc <__gethex+0x23c>
 8010338:	1af6      	subs	r6, r6, r3
 801033a:	0031      	movs	r1, r6
 801033c:	0028      	movs	r0, r5
 801033e:	f7fe fb8f 	bl	800ea60 <__any_on>
 8010342:	1e04      	subs	r4, r0, #0
 8010344:	d016      	beq.n	8010374 <__gethex+0x1d4>
 8010346:	2401      	movs	r4, #1
 8010348:	231f      	movs	r3, #31
 801034a:	0020      	movs	r0, r4
 801034c:	1e72      	subs	r2, r6, #1
 801034e:	4013      	ands	r3, r2
 8010350:	4098      	lsls	r0, r3
 8010352:	0003      	movs	r3, r0
 8010354:	1151      	asrs	r1, r2, #5
 8010356:	9802      	ldr	r0, [sp, #8]
 8010358:	0089      	lsls	r1, r1, #2
 801035a:	5809      	ldr	r1, [r1, r0]
 801035c:	4219      	tst	r1, r3
 801035e:	d009      	beq.n	8010374 <__gethex+0x1d4>
 8010360:	42a2      	cmp	r2, r4
 8010362:	dd06      	ble.n	8010372 <__gethex+0x1d2>
 8010364:	0028      	movs	r0, r5
 8010366:	1eb1      	subs	r1, r6, #2
 8010368:	f7fe fb7a 	bl	800ea60 <__any_on>
 801036c:	3402      	adds	r4, #2
 801036e:	2800      	cmp	r0, #0
 8010370:	d100      	bne.n	8010374 <__gethex+0x1d4>
 8010372:	2402      	movs	r4, #2
 8010374:	0031      	movs	r1, r6
 8010376:	0028      	movs	r0, r5
 8010378:	f7ff fea7 	bl	80100ca <rshift>
 801037c:	19bf      	adds	r7, r7, r6
 801037e:	9b01      	ldr	r3, [sp, #4]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	42bb      	cmp	r3, r7
 8010384:	da3a      	bge.n	80103fc <__gethex+0x25c>
 8010386:	0029      	movs	r1, r5
 8010388:	9803      	ldr	r0, [sp, #12]
 801038a:	f7fd ff15 	bl	800e1b8 <_Bfree>
 801038e:	2300      	movs	r3, #0
 8010390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010392:	26a3      	movs	r6, #163	; 0xa3
 8010394:	6013      	str	r3, [r2, #0]
 8010396:	e78c      	b.n	80102b2 <__gethex+0x112>
 8010398:	3c01      	subs	r4, #1
 801039a:	7823      	ldrb	r3, [r4, #0]
 801039c:	2b2e      	cmp	r3, #46	; 0x2e
 801039e:	d012      	beq.n	80103c6 <__gethex+0x226>
 80103a0:	9b04      	ldr	r3, [sp, #16]
 80103a2:	2b20      	cmp	r3, #32
 80103a4:	d104      	bne.n	80103b0 <__gethex+0x210>
 80103a6:	9b05      	ldr	r3, [sp, #20]
 80103a8:	c340      	stmia	r3!, {r6}
 80103aa:	2600      	movs	r6, #0
 80103ac:	9305      	str	r3, [sp, #20]
 80103ae:	9604      	str	r6, [sp, #16]
 80103b0:	7820      	ldrb	r0, [r4, #0]
 80103b2:	f7ff fedf 	bl	8010174 <__hexdig_fun>
 80103b6:	230f      	movs	r3, #15
 80103b8:	4018      	ands	r0, r3
 80103ba:	9b04      	ldr	r3, [sp, #16]
 80103bc:	4098      	lsls	r0, r3
 80103be:	3304      	adds	r3, #4
 80103c0:	4306      	orrs	r6, r0
 80103c2:	9304      	str	r3, [sp, #16]
 80103c4:	e7a5      	b.n	8010312 <__gethex+0x172>
 80103c6:	9b00      	ldr	r3, [sp, #0]
 80103c8:	42a3      	cmp	r3, r4
 80103ca:	d8e9      	bhi.n	80103a0 <__gethex+0x200>
 80103cc:	2201      	movs	r2, #1
 80103ce:	0020      	movs	r0, r4
 80103d0:	4927      	ldr	r1, [pc, #156]	; (8010470 <__gethex+0x2d0>)
 80103d2:	f7fc fdff 	bl	800cfd4 <strncmp>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d1e2      	bne.n	80103a0 <__gethex+0x200>
 80103da:	e79a      	b.n	8010312 <__gethex+0x172>
 80103dc:	9b00      	ldr	r3, [sp, #0]
 80103de:	2400      	movs	r4, #0
 80103e0:	429e      	cmp	r6, r3
 80103e2:	dacc      	bge.n	801037e <__gethex+0x1de>
 80103e4:	1b9e      	subs	r6, r3, r6
 80103e6:	0029      	movs	r1, r5
 80103e8:	0032      	movs	r2, r6
 80103ea:	9803      	ldr	r0, [sp, #12]
 80103ec:	f7fe f904 	bl	800e5f8 <__lshift>
 80103f0:	0003      	movs	r3, r0
 80103f2:	3314      	adds	r3, #20
 80103f4:	0005      	movs	r5, r0
 80103f6:	1bbf      	subs	r7, r7, r6
 80103f8:	9302      	str	r3, [sp, #8]
 80103fa:	e7c0      	b.n	801037e <__gethex+0x1de>
 80103fc:	9b01      	ldr	r3, [sp, #4]
 80103fe:	685e      	ldr	r6, [r3, #4]
 8010400:	42be      	cmp	r6, r7
 8010402:	dd70      	ble.n	80104e6 <__gethex+0x346>
 8010404:	9b00      	ldr	r3, [sp, #0]
 8010406:	1bf6      	subs	r6, r6, r7
 8010408:	42b3      	cmp	r3, r6
 801040a:	dc37      	bgt.n	801047c <__gethex+0x2dc>
 801040c:	9b01      	ldr	r3, [sp, #4]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	2b02      	cmp	r3, #2
 8010412:	d024      	beq.n	801045e <__gethex+0x2be>
 8010414:	2b03      	cmp	r3, #3
 8010416:	d026      	beq.n	8010466 <__gethex+0x2c6>
 8010418:	2b01      	cmp	r3, #1
 801041a:	d117      	bne.n	801044c <__gethex+0x2ac>
 801041c:	9b00      	ldr	r3, [sp, #0]
 801041e:	42b3      	cmp	r3, r6
 8010420:	d114      	bne.n	801044c <__gethex+0x2ac>
 8010422:	2b01      	cmp	r3, #1
 8010424:	d10b      	bne.n	801043e <__gethex+0x29e>
 8010426:	9b01      	ldr	r3, [sp, #4]
 8010428:	9a07      	ldr	r2, [sp, #28]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	2662      	movs	r6, #98	; 0x62
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	2301      	movs	r3, #1
 8010432:	9a02      	ldr	r2, [sp, #8]
 8010434:	612b      	str	r3, [r5, #16]
 8010436:	6013      	str	r3, [r2, #0]
 8010438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801043a:	601d      	str	r5, [r3, #0]
 801043c:	e739      	b.n	80102b2 <__gethex+0x112>
 801043e:	9900      	ldr	r1, [sp, #0]
 8010440:	0028      	movs	r0, r5
 8010442:	3901      	subs	r1, #1
 8010444:	f7fe fb0c 	bl	800ea60 <__any_on>
 8010448:	2800      	cmp	r0, #0
 801044a:	d1ec      	bne.n	8010426 <__gethex+0x286>
 801044c:	0029      	movs	r1, r5
 801044e:	9803      	ldr	r0, [sp, #12]
 8010450:	f7fd feb2 	bl	800e1b8 <_Bfree>
 8010454:	2300      	movs	r3, #0
 8010456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010458:	2650      	movs	r6, #80	; 0x50
 801045a:	6013      	str	r3, [r2, #0]
 801045c:	e729      	b.n	80102b2 <__gethex+0x112>
 801045e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1f3      	bne.n	801044c <__gethex+0x2ac>
 8010464:	e7df      	b.n	8010426 <__gethex+0x286>
 8010466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1dc      	bne.n	8010426 <__gethex+0x286>
 801046c:	e7ee      	b.n	801044c <__gethex+0x2ac>
 801046e:	46c0      	nop			; (mov r8, r8)
 8010470:	08011004 	.word	0x08011004
 8010474:	08010e9d 	.word	0x08010e9d
 8010478:	080111ae 	.word	0x080111ae
 801047c:	1e77      	subs	r7, r6, #1
 801047e:	2c00      	cmp	r4, #0
 8010480:	d12f      	bne.n	80104e2 <__gethex+0x342>
 8010482:	2f00      	cmp	r7, #0
 8010484:	d004      	beq.n	8010490 <__gethex+0x2f0>
 8010486:	0039      	movs	r1, r7
 8010488:	0028      	movs	r0, r5
 801048a:	f7fe fae9 	bl	800ea60 <__any_on>
 801048e:	0004      	movs	r4, r0
 8010490:	231f      	movs	r3, #31
 8010492:	117a      	asrs	r2, r7, #5
 8010494:	401f      	ands	r7, r3
 8010496:	3b1e      	subs	r3, #30
 8010498:	40bb      	lsls	r3, r7
 801049a:	9902      	ldr	r1, [sp, #8]
 801049c:	0092      	lsls	r2, r2, #2
 801049e:	5852      	ldr	r2, [r2, r1]
 80104a0:	421a      	tst	r2, r3
 80104a2:	d001      	beq.n	80104a8 <__gethex+0x308>
 80104a4:	2302      	movs	r3, #2
 80104a6:	431c      	orrs	r4, r3
 80104a8:	9b00      	ldr	r3, [sp, #0]
 80104aa:	0031      	movs	r1, r6
 80104ac:	1b9b      	subs	r3, r3, r6
 80104ae:	2602      	movs	r6, #2
 80104b0:	0028      	movs	r0, r5
 80104b2:	9300      	str	r3, [sp, #0]
 80104b4:	f7ff fe09 	bl	80100ca <rshift>
 80104b8:	9b01      	ldr	r3, [sp, #4]
 80104ba:	685f      	ldr	r7, [r3, #4]
 80104bc:	2c00      	cmp	r4, #0
 80104be:	d041      	beq.n	8010544 <__gethex+0x3a4>
 80104c0:	9b01      	ldr	r3, [sp, #4]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d010      	beq.n	80104ea <__gethex+0x34a>
 80104c8:	2b03      	cmp	r3, #3
 80104ca:	d012      	beq.n	80104f2 <__gethex+0x352>
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d106      	bne.n	80104de <__gethex+0x33e>
 80104d0:	07a2      	lsls	r2, r4, #30
 80104d2:	d504      	bpl.n	80104de <__gethex+0x33e>
 80104d4:	9a02      	ldr	r2, [sp, #8]
 80104d6:	6812      	ldr	r2, [r2, #0]
 80104d8:	4314      	orrs	r4, r2
 80104da:	421c      	tst	r4, r3
 80104dc:	d10c      	bne.n	80104f8 <__gethex+0x358>
 80104de:	2310      	movs	r3, #16
 80104e0:	e02f      	b.n	8010542 <__gethex+0x3a2>
 80104e2:	2401      	movs	r4, #1
 80104e4:	e7d4      	b.n	8010490 <__gethex+0x2f0>
 80104e6:	2601      	movs	r6, #1
 80104e8:	e7e8      	b.n	80104bc <__gethex+0x31c>
 80104ea:	2301      	movs	r3, #1
 80104ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104ee:	1a9b      	subs	r3, r3, r2
 80104f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80104f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d0f2      	beq.n	80104de <__gethex+0x33e>
 80104f8:	692b      	ldr	r3, [r5, #16]
 80104fa:	2000      	movs	r0, #0
 80104fc:	9302      	str	r3, [sp, #8]
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	9304      	str	r3, [sp, #16]
 8010502:	002b      	movs	r3, r5
 8010504:	9a04      	ldr	r2, [sp, #16]
 8010506:	3314      	adds	r3, #20
 8010508:	1899      	adds	r1, r3, r2
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	1c54      	adds	r4, r2, #1
 801050e:	d01e      	beq.n	801054e <__gethex+0x3ae>
 8010510:	3201      	adds	r2, #1
 8010512:	601a      	str	r2, [r3, #0]
 8010514:	002b      	movs	r3, r5
 8010516:	3314      	adds	r3, #20
 8010518:	2e02      	cmp	r6, #2
 801051a:	d141      	bne.n	80105a0 <__gethex+0x400>
 801051c:	9a01      	ldr	r2, [sp, #4]
 801051e:	9900      	ldr	r1, [sp, #0]
 8010520:	6812      	ldr	r2, [r2, #0]
 8010522:	3a01      	subs	r2, #1
 8010524:	428a      	cmp	r2, r1
 8010526:	d10b      	bne.n	8010540 <__gethex+0x3a0>
 8010528:	221f      	movs	r2, #31
 801052a:	9800      	ldr	r0, [sp, #0]
 801052c:	1149      	asrs	r1, r1, #5
 801052e:	4002      	ands	r2, r0
 8010530:	2001      	movs	r0, #1
 8010532:	0004      	movs	r4, r0
 8010534:	4094      	lsls	r4, r2
 8010536:	0089      	lsls	r1, r1, #2
 8010538:	58cb      	ldr	r3, [r1, r3]
 801053a:	4223      	tst	r3, r4
 801053c:	d000      	beq.n	8010540 <__gethex+0x3a0>
 801053e:	2601      	movs	r6, #1
 8010540:	2320      	movs	r3, #32
 8010542:	431e      	orrs	r6, r3
 8010544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010546:	601d      	str	r5, [r3, #0]
 8010548:	9b07      	ldr	r3, [sp, #28]
 801054a:	601f      	str	r7, [r3, #0]
 801054c:	e6b1      	b.n	80102b2 <__gethex+0x112>
 801054e:	c301      	stmia	r3!, {r0}
 8010550:	4299      	cmp	r1, r3
 8010552:	d8da      	bhi.n	801050a <__gethex+0x36a>
 8010554:	68ab      	ldr	r3, [r5, #8]
 8010556:	9a02      	ldr	r2, [sp, #8]
 8010558:	429a      	cmp	r2, r3
 801055a:	db18      	blt.n	801058e <__gethex+0x3ee>
 801055c:	6869      	ldr	r1, [r5, #4]
 801055e:	9803      	ldr	r0, [sp, #12]
 8010560:	3101      	adds	r1, #1
 8010562:	f7fd fde5 	bl	800e130 <_Balloc>
 8010566:	1e04      	subs	r4, r0, #0
 8010568:	d104      	bne.n	8010574 <__gethex+0x3d4>
 801056a:	0022      	movs	r2, r4
 801056c:	2184      	movs	r1, #132	; 0x84
 801056e:	4b1c      	ldr	r3, [pc, #112]	; (80105e0 <__gethex+0x440>)
 8010570:	481c      	ldr	r0, [pc, #112]	; (80105e4 <__gethex+0x444>)
 8010572:	e6c2      	b.n	80102fa <__gethex+0x15a>
 8010574:	0029      	movs	r1, r5
 8010576:	692a      	ldr	r2, [r5, #16]
 8010578:	310c      	adds	r1, #12
 801057a:	3202      	adds	r2, #2
 801057c:	0092      	lsls	r2, r2, #2
 801057e:	300c      	adds	r0, #12
 8010580:	f7fc fe22 	bl	800d1c8 <memcpy>
 8010584:	0029      	movs	r1, r5
 8010586:	9803      	ldr	r0, [sp, #12]
 8010588:	f7fd fe16 	bl	800e1b8 <_Bfree>
 801058c:	0025      	movs	r5, r4
 801058e:	692b      	ldr	r3, [r5, #16]
 8010590:	1c5a      	adds	r2, r3, #1
 8010592:	612a      	str	r2, [r5, #16]
 8010594:	2201      	movs	r2, #1
 8010596:	3304      	adds	r3, #4
 8010598:	009b      	lsls	r3, r3, #2
 801059a:	18eb      	adds	r3, r5, r3
 801059c:	605a      	str	r2, [r3, #4]
 801059e:	e7b9      	b.n	8010514 <__gethex+0x374>
 80105a0:	692a      	ldr	r2, [r5, #16]
 80105a2:	9902      	ldr	r1, [sp, #8]
 80105a4:	428a      	cmp	r2, r1
 80105a6:	dd09      	ble.n	80105bc <__gethex+0x41c>
 80105a8:	2101      	movs	r1, #1
 80105aa:	0028      	movs	r0, r5
 80105ac:	f7ff fd8d 	bl	80100ca <rshift>
 80105b0:	9b01      	ldr	r3, [sp, #4]
 80105b2:	3701      	adds	r7, #1
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	42bb      	cmp	r3, r7
 80105b8:	dac1      	bge.n	801053e <__gethex+0x39e>
 80105ba:	e6e4      	b.n	8010386 <__gethex+0x1e6>
 80105bc:	221f      	movs	r2, #31
 80105be:	9c00      	ldr	r4, [sp, #0]
 80105c0:	9900      	ldr	r1, [sp, #0]
 80105c2:	2601      	movs	r6, #1
 80105c4:	4014      	ands	r4, r2
 80105c6:	4211      	tst	r1, r2
 80105c8:	d0ba      	beq.n	8010540 <__gethex+0x3a0>
 80105ca:	9a04      	ldr	r2, [sp, #16]
 80105cc:	189b      	adds	r3, r3, r2
 80105ce:	3b04      	subs	r3, #4
 80105d0:	6818      	ldr	r0, [r3, #0]
 80105d2:	f7fd fea5 	bl	800e320 <__hi0bits>
 80105d6:	2320      	movs	r3, #32
 80105d8:	1b1b      	subs	r3, r3, r4
 80105da:	4298      	cmp	r0, r3
 80105dc:	dbe4      	blt.n	80105a8 <__gethex+0x408>
 80105de:	e7af      	b.n	8010540 <__gethex+0x3a0>
 80105e0:	08010e9d 	.word	0x08010e9d
 80105e4:	080111ae 	.word	0x080111ae

080105e8 <L_shift>:
 80105e8:	2308      	movs	r3, #8
 80105ea:	b570      	push	{r4, r5, r6, lr}
 80105ec:	2520      	movs	r5, #32
 80105ee:	1a9a      	subs	r2, r3, r2
 80105f0:	0092      	lsls	r2, r2, #2
 80105f2:	1aad      	subs	r5, r5, r2
 80105f4:	6843      	ldr	r3, [r0, #4]
 80105f6:	6804      	ldr	r4, [r0, #0]
 80105f8:	001e      	movs	r6, r3
 80105fa:	40ae      	lsls	r6, r5
 80105fc:	40d3      	lsrs	r3, r2
 80105fe:	4334      	orrs	r4, r6
 8010600:	6004      	str	r4, [r0, #0]
 8010602:	6043      	str	r3, [r0, #4]
 8010604:	3004      	adds	r0, #4
 8010606:	4288      	cmp	r0, r1
 8010608:	d3f4      	bcc.n	80105f4 <L_shift+0xc>
 801060a:	bd70      	pop	{r4, r5, r6, pc}

0801060c <__match>:
 801060c:	b530      	push	{r4, r5, lr}
 801060e:	6803      	ldr	r3, [r0, #0]
 8010610:	780c      	ldrb	r4, [r1, #0]
 8010612:	3301      	adds	r3, #1
 8010614:	2c00      	cmp	r4, #0
 8010616:	d102      	bne.n	801061e <__match+0x12>
 8010618:	6003      	str	r3, [r0, #0]
 801061a:	2001      	movs	r0, #1
 801061c:	bd30      	pop	{r4, r5, pc}
 801061e:	781a      	ldrb	r2, [r3, #0]
 8010620:	0015      	movs	r5, r2
 8010622:	3d41      	subs	r5, #65	; 0x41
 8010624:	2d19      	cmp	r5, #25
 8010626:	d800      	bhi.n	801062a <__match+0x1e>
 8010628:	3220      	adds	r2, #32
 801062a:	3101      	adds	r1, #1
 801062c:	42a2      	cmp	r2, r4
 801062e:	d0ef      	beq.n	8010610 <__match+0x4>
 8010630:	2000      	movs	r0, #0
 8010632:	e7f3      	b.n	801061c <__match+0x10>

08010634 <__hexnan>:
 8010634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010636:	680b      	ldr	r3, [r1, #0]
 8010638:	b08b      	sub	sp, #44	; 0x2c
 801063a:	9201      	str	r2, [sp, #4]
 801063c:	9901      	ldr	r1, [sp, #4]
 801063e:	115a      	asrs	r2, r3, #5
 8010640:	0092      	lsls	r2, r2, #2
 8010642:	188a      	adds	r2, r1, r2
 8010644:	9202      	str	r2, [sp, #8]
 8010646:	0019      	movs	r1, r3
 8010648:	221f      	movs	r2, #31
 801064a:	4011      	ands	r1, r2
 801064c:	9008      	str	r0, [sp, #32]
 801064e:	9106      	str	r1, [sp, #24]
 8010650:	4213      	tst	r3, r2
 8010652:	d002      	beq.n	801065a <__hexnan+0x26>
 8010654:	9b02      	ldr	r3, [sp, #8]
 8010656:	3304      	adds	r3, #4
 8010658:	9302      	str	r3, [sp, #8]
 801065a:	9b02      	ldr	r3, [sp, #8]
 801065c:	2500      	movs	r5, #0
 801065e:	1f1f      	subs	r7, r3, #4
 8010660:	003e      	movs	r6, r7
 8010662:	003c      	movs	r4, r7
 8010664:	9b08      	ldr	r3, [sp, #32]
 8010666:	603d      	str	r5, [r7, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	9507      	str	r5, [sp, #28]
 801066c:	9305      	str	r3, [sp, #20]
 801066e:	9503      	str	r5, [sp, #12]
 8010670:	9b05      	ldr	r3, [sp, #20]
 8010672:	3301      	adds	r3, #1
 8010674:	9309      	str	r3, [sp, #36]	; 0x24
 8010676:	9b05      	ldr	r3, [sp, #20]
 8010678:	785b      	ldrb	r3, [r3, #1]
 801067a:	9304      	str	r3, [sp, #16]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d028      	beq.n	80106d2 <__hexnan+0x9e>
 8010680:	9804      	ldr	r0, [sp, #16]
 8010682:	f7ff fd77 	bl	8010174 <__hexdig_fun>
 8010686:	2800      	cmp	r0, #0
 8010688:	d154      	bne.n	8010734 <__hexnan+0x100>
 801068a:	9b04      	ldr	r3, [sp, #16]
 801068c:	2b20      	cmp	r3, #32
 801068e:	d819      	bhi.n	80106c4 <__hexnan+0x90>
 8010690:	9b03      	ldr	r3, [sp, #12]
 8010692:	9a07      	ldr	r2, [sp, #28]
 8010694:	4293      	cmp	r3, r2
 8010696:	dd12      	ble.n	80106be <__hexnan+0x8a>
 8010698:	42b4      	cmp	r4, r6
 801069a:	d206      	bcs.n	80106aa <__hexnan+0x76>
 801069c:	2d07      	cmp	r5, #7
 801069e:	dc04      	bgt.n	80106aa <__hexnan+0x76>
 80106a0:	002a      	movs	r2, r5
 80106a2:	0031      	movs	r1, r6
 80106a4:	0020      	movs	r0, r4
 80106a6:	f7ff ff9f 	bl	80105e8 <L_shift>
 80106aa:	9b01      	ldr	r3, [sp, #4]
 80106ac:	2508      	movs	r5, #8
 80106ae:	429c      	cmp	r4, r3
 80106b0:	d905      	bls.n	80106be <__hexnan+0x8a>
 80106b2:	1f26      	subs	r6, r4, #4
 80106b4:	2500      	movs	r5, #0
 80106b6:	0034      	movs	r4, r6
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	6035      	str	r5, [r6, #0]
 80106bc:	9307      	str	r3, [sp, #28]
 80106be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c0:	9305      	str	r3, [sp, #20]
 80106c2:	e7d5      	b.n	8010670 <__hexnan+0x3c>
 80106c4:	9b04      	ldr	r3, [sp, #16]
 80106c6:	2b29      	cmp	r3, #41	; 0x29
 80106c8:	d159      	bne.n	801077e <__hexnan+0x14a>
 80106ca:	9b05      	ldr	r3, [sp, #20]
 80106cc:	9a08      	ldr	r2, [sp, #32]
 80106ce:	3302      	adds	r3, #2
 80106d0:	6013      	str	r3, [r2, #0]
 80106d2:	9b03      	ldr	r3, [sp, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d052      	beq.n	801077e <__hexnan+0x14a>
 80106d8:	42b4      	cmp	r4, r6
 80106da:	d206      	bcs.n	80106ea <__hexnan+0xb6>
 80106dc:	2d07      	cmp	r5, #7
 80106de:	dc04      	bgt.n	80106ea <__hexnan+0xb6>
 80106e0:	002a      	movs	r2, r5
 80106e2:	0031      	movs	r1, r6
 80106e4:	0020      	movs	r0, r4
 80106e6:	f7ff ff7f 	bl	80105e8 <L_shift>
 80106ea:	9b01      	ldr	r3, [sp, #4]
 80106ec:	429c      	cmp	r4, r3
 80106ee:	d935      	bls.n	801075c <__hexnan+0x128>
 80106f0:	001a      	movs	r2, r3
 80106f2:	0023      	movs	r3, r4
 80106f4:	cb02      	ldmia	r3!, {r1}
 80106f6:	c202      	stmia	r2!, {r1}
 80106f8:	429f      	cmp	r7, r3
 80106fa:	d2fb      	bcs.n	80106f4 <__hexnan+0xc0>
 80106fc:	9b02      	ldr	r3, [sp, #8]
 80106fe:	1c62      	adds	r2, r4, #1
 8010700:	1ed9      	subs	r1, r3, #3
 8010702:	2304      	movs	r3, #4
 8010704:	4291      	cmp	r1, r2
 8010706:	d305      	bcc.n	8010714 <__hexnan+0xe0>
 8010708:	9b02      	ldr	r3, [sp, #8]
 801070a:	3b04      	subs	r3, #4
 801070c:	1b1b      	subs	r3, r3, r4
 801070e:	089b      	lsrs	r3, r3, #2
 8010710:	3301      	adds	r3, #1
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	9a01      	ldr	r2, [sp, #4]
 8010716:	18d3      	adds	r3, r2, r3
 8010718:	2200      	movs	r2, #0
 801071a:	c304      	stmia	r3!, {r2}
 801071c:	429f      	cmp	r7, r3
 801071e:	d2fc      	bcs.n	801071a <__hexnan+0xe6>
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d104      	bne.n	8010730 <__hexnan+0xfc>
 8010726:	9b01      	ldr	r3, [sp, #4]
 8010728:	429f      	cmp	r7, r3
 801072a:	d126      	bne.n	801077a <__hexnan+0x146>
 801072c:	2301      	movs	r3, #1
 801072e:	603b      	str	r3, [r7, #0]
 8010730:	2005      	movs	r0, #5
 8010732:	e025      	b.n	8010780 <__hexnan+0x14c>
 8010734:	9b03      	ldr	r3, [sp, #12]
 8010736:	3501      	adds	r5, #1
 8010738:	3301      	adds	r3, #1
 801073a:	9303      	str	r3, [sp, #12]
 801073c:	2d08      	cmp	r5, #8
 801073e:	dd06      	ble.n	801074e <__hexnan+0x11a>
 8010740:	9b01      	ldr	r3, [sp, #4]
 8010742:	429c      	cmp	r4, r3
 8010744:	d9bb      	bls.n	80106be <__hexnan+0x8a>
 8010746:	2300      	movs	r3, #0
 8010748:	2501      	movs	r5, #1
 801074a:	3c04      	subs	r4, #4
 801074c:	6023      	str	r3, [r4, #0]
 801074e:	220f      	movs	r2, #15
 8010750:	6823      	ldr	r3, [r4, #0]
 8010752:	4010      	ands	r0, r2
 8010754:	011b      	lsls	r3, r3, #4
 8010756:	4303      	orrs	r3, r0
 8010758:	6023      	str	r3, [r4, #0]
 801075a:	e7b0      	b.n	80106be <__hexnan+0x8a>
 801075c:	9b06      	ldr	r3, [sp, #24]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d0de      	beq.n	8010720 <__hexnan+0xec>
 8010762:	2320      	movs	r3, #32
 8010764:	9a06      	ldr	r2, [sp, #24]
 8010766:	9902      	ldr	r1, [sp, #8]
 8010768:	1a9b      	subs	r3, r3, r2
 801076a:	2201      	movs	r2, #1
 801076c:	4252      	negs	r2, r2
 801076e:	40da      	lsrs	r2, r3
 8010770:	3904      	subs	r1, #4
 8010772:	680b      	ldr	r3, [r1, #0]
 8010774:	4013      	ands	r3, r2
 8010776:	600b      	str	r3, [r1, #0]
 8010778:	e7d2      	b.n	8010720 <__hexnan+0xec>
 801077a:	3f04      	subs	r7, #4
 801077c:	e7d0      	b.n	8010720 <__hexnan+0xec>
 801077e:	2004      	movs	r0, #4
 8010780:	b00b      	add	sp, #44	; 0x2c
 8010782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010784 <__ascii_mbtowc>:
 8010784:	b082      	sub	sp, #8
 8010786:	2900      	cmp	r1, #0
 8010788:	d100      	bne.n	801078c <__ascii_mbtowc+0x8>
 801078a:	a901      	add	r1, sp, #4
 801078c:	1e10      	subs	r0, r2, #0
 801078e:	d006      	beq.n	801079e <__ascii_mbtowc+0x1a>
 8010790:	2b00      	cmp	r3, #0
 8010792:	d006      	beq.n	80107a2 <__ascii_mbtowc+0x1e>
 8010794:	7813      	ldrb	r3, [r2, #0]
 8010796:	600b      	str	r3, [r1, #0]
 8010798:	7810      	ldrb	r0, [r2, #0]
 801079a:	1e43      	subs	r3, r0, #1
 801079c:	4198      	sbcs	r0, r3
 801079e:	b002      	add	sp, #8
 80107a0:	4770      	bx	lr
 80107a2:	2002      	movs	r0, #2
 80107a4:	4240      	negs	r0, r0
 80107a6:	e7fa      	b.n	801079e <__ascii_mbtowc+0x1a>

080107a8 <_realloc_r>:
 80107a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107aa:	0007      	movs	r7, r0
 80107ac:	000e      	movs	r6, r1
 80107ae:	0014      	movs	r4, r2
 80107b0:	2900      	cmp	r1, #0
 80107b2:	d105      	bne.n	80107c0 <_realloc_r+0x18>
 80107b4:	0011      	movs	r1, r2
 80107b6:	f7fd fc29 	bl	800e00c <_malloc_r>
 80107ba:	0005      	movs	r5, r0
 80107bc:	0028      	movs	r0, r5
 80107be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107c0:	2a00      	cmp	r2, #0
 80107c2:	d103      	bne.n	80107cc <_realloc_r+0x24>
 80107c4:	f7fd fbac 	bl	800df20 <_free_r>
 80107c8:	0025      	movs	r5, r4
 80107ca:	e7f7      	b.n	80107bc <_realloc_r+0x14>
 80107cc:	f000 f83f 	bl	801084e <_malloc_usable_size_r>
 80107d0:	9001      	str	r0, [sp, #4]
 80107d2:	4284      	cmp	r4, r0
 80107d4:	d803      	bhi.n	80107de <_realloc_r+0x36>
 80107d6:	0035      	movs	r5, r6
 80107d8:	0843      	lsrs	r3, r0, #1
 80107da:	42a3      	cmp	r3, r4
 80107dc:	d3ee      	bcc.n	80107bc <_realloc_r+0x14>
 80107de:	0021      	movs	r1, r4
 80107e0:	0038      	movs	r0, r7
 80107e2:	f7fd fc13 	bl	800e00c <_malloc_r>
 80107e6:	1e05      	subs	r5, r0, #0
 80107e8:	d0e8      	beq.n	80107bc <_realloc_r+0x14>
 80107ea:	9b01      	ldr	r3, [sp, #4]
 80107ec:	0022      	movs	r2, r4
 80107ee:	429c      	cmp	r4, r3
 80107f0:	d900      	bls.n	80107f4 <_realloc_r+0x4c>
 80107f2:	001a      	movs	r2, r3
 80107f4:	0031      	movs	r1, r6
 80107f6:	0028      	movs	r0, r5
 80107f8:	f7fc fce6 	bl	800d1c8 <memcpy>
 80107fc:	0031      	movs	r1, r6
 80107fe:	0038      	movs	r0, r7
 8010800:	f7fd fb8e 	bl	800df20 <_free_r>
 8010804:	e7da      	b.n	80107bc <_realloc_r+0x14>

08010806 <__ascii_wctomb>:
 8010806:	0003      	movs	r3, r0
 8010808:	1e08      	subs	r0, r1, #0
 801080a:	d005      	beq.n	8010818 <__ascii_wctomb+0x12>
 801080c:	2aff      	cmp	r2, #255	; 0xff
 801080e:	d904      	bls.n	801081a <__ascii_wctomb+0x14>
 8010810:	228a      	movs	r2, #138	; 0x8a
 8010812:	2001      	movs	r0, #1
 8010814:	601a      	str	r2, [r3, #0]
 8010816:	4240      	negs	r0, r0
 8010818:	4770      	bx	lr
 801081a:	2001      	movs	r0, #1
 801081c:	700a      	strb	r2, [r1, #0]
 801081e:	e7fb      	b.n	8010818 <__ascii_wctomb+0x12>

08010820 <fiprintf>:
 8010820:	b40e      	push	{r1, r2, r3}
 8010822:	b517      	push	{r0, r1, r2, r4, lr}
 8010824:	4c05      	ldr	r4, [pc, #20]	; (801083c <fiprintf+0x1c>)
 8010826:	ab05      	add	r3, sp, #20
 8010828:	cb04      	ldmia	r3!, {r2}
 801082a:	0001      	movs	r1, r0
 801082c:	6820      	ldr	r0, [r4, #0]
 801082e:	9301      	str	r3, [sp, #4]
 8010830:	f7ff f978 	bl	800fb24 <_vfiprintf_r>
 8010834:	bc1e      	pop	{r1, r2, r3, r4}
 8010836:	bc08      	pop	{r3}
 8010838:	b003      	add	sp, #12
 801083a:	4718      	bx	r3
 801083c:	2000007c 	.word	0x2000007c

08010840 <abort>:
 8010840:	2006      	movs	r0, #6
 8010842:	b510      	push	{r4, lr}
 8010844:	f000 f836 	bl	80108b4 <raise>
 8010848:	2001      	movs	r0, #1
 801084a:	f7f4 f950 	bl	8004aee <_exit>

0801084e <_malloc_usable_size_r>:
 801084e:	1f0b      	subs	r3, r1, #4
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	1f18      	subs	r0, r3, #4
 8010854:	2b00      	cmp	r3, #0
 8010856:	da01      	bge.n	801085c <_malloc_usable_size_r+0xe>
 8010858:	580b      	ldr	r3, [r1, r0]
 801085a:	18c0      	adds	r0, r0, r3
 801085c:	4770      	bx	lr

0801085e <_raise_r>:
 801085e:	b570      	push	{r4, r5, r6, lr}
 8010860:	0004      	movs	r4, r0
 8010862:	000d      	movs	r5, r1
 8010864:	291f      	cmp	r1, #31
 8010866:	d904      	bls.n	8010872 <_raise_r+0x14>
 8010868:	2316      	movs	r3, #22
 801086a:	6003      	str	r3, [r0, #0]
 801086c:	2001      	movs	r0, #1
 801086e:	4240      	negs	r0, r0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8010874:	2b00      	cmp	r3, #0
 8010876:	d004      	beq.n	8010882 <_raise_r+0x24>
 8010878:	008a      	lsls	r2, r1, #2
 801087a:	189b      	adds	r3, r3, r2
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	2a00      	cmp	r2, #0
 8010880:	d108      	bne.n	8010894 <_raise_r+0x36>
 8010882:	0020      	movs	r0, r4
 8010884:	f000 f832 	bl	80108ec <_getpid_r>
 8010888:	002a      	movs	r2, r5
 801088a:	0001      	movs	r1, r0
 801088c:	0020      	movs	r0, r4
 801088e:	f000 f81b 	bl	80108c8 <_kill_r>
 8010892:	e7ed      	b.n	8010870 <_raise_r+0x12>
 8010894:	2000      	movs	r0, #0
 8010896:	2a01      	cmp	r2, #1
 8010898:	d0ea      	beq.n	8010870 <_raise_r+0x12>
 801089a:	1c51      	adds	r1, r2, #1
 801089c:	d103      	bne.n	80108a6 <_raise_r+0x48>
 801089e:	2316      	movs	r3, #22
 80108a0:	3001      	adds	r0, #1
 80108a2:	6023      	str	r3, [r4, #0]
 80108a4:	e7e4      	b.n	8010870 <_raise_r+0x12>
 80108a6:	2400      	movs	r4, #0
 80108a8:	0028      	movs	r0, r5
 80108aa:	601c      	str	r4, [r3, #0]
 80108ac:	4790      	blx	r2
 80108ae:	0020      	movs	r0, r4
 80108b0:	e7de      	b.n	8010870 <_raise_r+0x12>
	...

080108b4 <raise>:
 80108b4:	b510      	push	{r4, lr}
 80108b6:	4b03      	ldr	r3, [pc, #12]	; (80108c4 <raise+0x10>)
 80108b8:	0001      	movs	r1, r0
 80108ba:	6818      	ldr	r0, [r3, #0]
 80108bc:	f7ff ffcf 	bl	801085e <_raise_r>
 80108c0:	bd10      	pop	{r4, pc}
 80108c2:	46c0      	nop			; (mov r8, r8)
 80108c4:	2000007c 	.word	0x2000007c

080108c8 <_kill_r>:
 80108c8:	2300      	movs	r3, #0
 80108ca:	b570      	push	{r4, r5, r6, lr}
 80108cc:	4d06      	ldr	r5, [pc, #24]	; (80108e8 <_kill_r+0x20>)
 80108ce:	0004      	movs	r4, r0
 80108d0:	0008      	movs	r0, r1
 80108d2:	0011      	movs	r1, r2
 80108d4:	602b      	str	r3, [r5, #0]
 80108d6:	f7f4 f8fa 	bl	8004ace <_kill>
 80108da:	1c43      	adds	r3, r0, #1
 80108dc:	d103      	bne.n	80108e6 <_kill_r+0x1e>
 80108de:	682b      	ldr	r3, [r5, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d000      	beq.n	80108e6 <_kill_r+0x1e>
 80108e4:	6023      	str	r3, [r4, #0]
 80108e6:	bd70      	pop	{r4, r5, r6, pc}
 80108e8:	20001d8c 	.word	0x20001d8c

080108ec <_getpid_r>:
 80108ec:	b510      	push	{r4, lr}
 80108ee:	f7f4 f8e8 	bl	8004ac2 <_getpid>
 80108f2:	bd10      	pop	{r4, pc}

080108f4 <_init>:
 80108f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108f6:	46c0      	nop			; (mov r8, r8)
 80108f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108fa:	bc08      	pop	{r3}
 80108fc:	469e      	mov	lr, r3
 80108fe:	4770      	bx	lr

08010900 <_fini>:
 8010900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010902:	46c0      	nop			; (mov r8, r8)
 8010904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010906:	bc08      	pop	{r3}
 8010908:	469e      	mov	lr, r3
 801090a:	4770      	bx	lr
