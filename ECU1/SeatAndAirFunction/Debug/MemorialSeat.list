
MemorialSeat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008760  08008760  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08008760  08008760  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008760  08008760  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008760  08008760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008764  08008764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08008768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000003c  080087a4  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080087a4  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012323  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c3  00000000  00000000  000323ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00035690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfb  00000000  00000000  00036600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d563  00000000  00000000  000371fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016cf0  00000000  00000000  0005475e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abb5b  00000000  00000000  0006b44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000373c  00000000  00000000  00116fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000003c 	.word	0x2000003c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008658 	.word	0x08008658

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000040 	.word	0x20000040
 8000100:	08008658 	.word	0x08008658

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_d2uiz>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	2200      	movs	r2, #0
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <__aeabi_d2uiz+0x38>)
 80003f6:	0004      	movs	r4, r0
 80003f8:	000d      	movs	r5, r1
 80003fa:	f001 fd69 	bl	8001ed0 <__aeabi_dcmpge>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d104      	bne.n	800040c <__aeabi_d2uiz+0x1c>
 8000402:	0020      	movs	r0, r4
 8000404:	0029      	movs	r1, r5
 8000406:	f001 fca3 	bl	8001d50 <__aeabi_d2iz>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <__aeabi_d2uiz+0x38>)
 800040e:	2200      	movs	r2, #0
 8000410:	0020      	movs	r0, r4
 8000412:	0029      	movs	r1, r5
 8000414:	f001 f91a 	bl	800164c <__aeabi_dsub>
 8000418:	f001 fc9a 	bl	8001d50 <__aeabi_d2iz>
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	061b      	lsls	r3, r3, #24
 8000420:	469c      	mov	ip, r3
 8000422:	4460      	add	r0, ip
 8000424:	e7f1      	b.n	800040a <__aeabi_d2uiz+0x1a>
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	41e00000 	.word	0x41e00000

0800042c <__aeabi_dadd>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	464f      	mov	r7, r9
 8000430:	4646      	mov	r6, r8
 8000432:	46d6      	mov	lr, sl
 8000434:	0004      	movs	r4, r0
 8000436:	b5c0      	push	{r6, r7, lr}
 8000438:	001f      	movs	r7, r3
 800043a:	030b      	lsls	r3, r1, #12
 800043c:	0010      	movs	r0, r2
 800043e:	004e      	lsls	r6, r1, #1
 8000440:	0a5b      	lsrs	r3, r3, #9
 8000442:	0fcd      	lsrs	r5, r1, #31
 8000444:	0f61      	lsrs	r1, r4, #29
 8000446:	007a      	lsls	r2, r7, #1
 8000448:	4319      	orrs	r1, r3
 800044a:	00e3      	lsls	r3, r4, #3
 800044c:	033c      	lsls	r4, r7, #12
 800044e:	0fff      	lsrs	r7, r7, #31
 8000450:	46bc      	mov	ip, r7
 8000452:	0a64      	lsrs	r4, r4, #9
 8000454:	0f47      	lsrs	r7, r0, #29
 8000456:	4327      	orrs	r7, r4
 8000458:	0d76      	lsrs	r6, r6, #21
 800045a:	0d52      	lsrs	r2, r2, #21
 800045c:	00c0      	lsls	r0, r0, #3
 800045e:	46b9      	mov	r9, r7
 8000460:	4680      	mov	r8, r0
 8000462:	1ab7      	subs	r7, r6, r2
 8000464:	4565      	cmp	r5, ip
 8000466:	d100      	bne.n	800046a <__aeabi_dadd+0x3e>
 8000468:	e09b      	b.n	80005a2 <__aeabi_dadd+0x176>
 800046a:	2f00      	cmp	r7, #0
 800046c:	dc00      	bgt.n	8000470 <__aeabi_dadd+0x44>
 800046e:	e084      	b.n	800057a <__aeabi_dadd+0x14e>
 8000470:	2a00      	cmp	r2, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_dadd+0x4a>
 8000474:	e0be      	b.n	80005f4 <__aeabi_dadd+0x1c8>
 8000476:	4ac8      	ldr	r2, [pc, #800]	; (8000798 <__aeabi_dadd+0x36c>)
 8000478:	4296      	cmp	r6, r2
 800047a:	d100      	bne.n	800047e <__aeabi_dadd+0x52>
 800047c:	e124      	b.n	80006c8 <__aeabi_dadd+0x29c>
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	464c      	mov	r4, r9
 8000482:	0412      	lsls	r2, r2, #16
 8000484:	4314      	orrs	r4, r2
 8000486:	46a1      	mov	r9, r4
 8000488:	2f38      	cmp	r7, #56	; 0x38
 800048a:	dd00      	ble.n	800048e <__aeabi_dadd+0x62>
 800048c:	e167      	b.n	800075e <__aeabi_dadd+0x332>
 800048e:	2f1f      	cmp	r7, #31
 8000490:	dd00      	ble.n	8000494 <__aeabi_dadd+0x68>
 8000492:	e1d6      	b.n	8000842 <__aeabi_dadd+0x416>
 8000494:	2220      	movs	r2, #32
 8000496:	464c      	mov	r4, r9
 8000498:	1bd2      	subs	r2, r2, r7
 800049a:	4094      	lsls	r4, r2
 800049c:	46a2      	mov	sl, r4
 800049e:	4644      	mov	r4, r8
 80004a0:	40fc      	lsrs	r4, r7
 80004a2:	0020      	movs	r0, r4
 80004a4:	4654      	mov	r4, sl
 80004a6:	4304      	orrs	r4, r0
 80004a8:	4640      	mov	r0, r8
 80004aa:	4090      	lsls	r0, r2
 80004ac:	1e42      	subs	r2, r0, #1
 80004ae:	4190      	sbcs	r0, r2
 80004b0:	464a      	mov	r2, r9
 80004b2:	40fa      	lsrs	r2, r7
 80004b4:	4304      	orrs	r4, r0
 80004b6:	1a89      	subs	r1, r1, r2
 80004b8:	1b1c      	subs	r4, r3, r4
 80004ba:	42a3      	cmp	r3, r4
 80004bc:	4192      	sbcs	r2, r2
 80004be:	4252      	negs	r2, r2
 80004c0:	1a8b      	subs	r3, r1, r2
 80004c2:	469a      	mov	sl, r3
 80004c4:	4653      	mov	r3, sl
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	d400      	bmi.n	80004cc <__aeabi_dadd+0xa0>
 80004ca:	e0d4      	b.n	8000676 <__aeabi_dadd+0x24a>
 80004cc:	4653      	mov	r3, sl
 80004ce:	025a      	lsls	r2, r3, #9
 80004d0:	0a53      	lsrs	r3, r2, #9
 80004d2:	469a      	mov	sl, r3
 80004d4:	4653      	mov	r3, sl
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_dadd+0xb0>
 80004da:	e104      	b.n	80006e6 <__aeabi_dadd+0x2ba>
 80004dc:	4650      	mov	r0, sl
 80004de:	f001 fd01 	bl	8001ee4 <__clzsi2>
 80004e2:	0003      	movs	r3, r0
 80004e4:	3b08      	subs	r3, #8
 80004e6:	2220      	movs	r2, #32
 80004e8:	0020      	movs	r0, r4
 80004ea:	1ad2      	subs	r2, r2, r3
 80004ec:	4651      	mov	r1, sl
 80004ee:	40d0      	lsrs	r0, r2
 80004f0:	4099      	lsls	r1, r3
 80004f2:	0002      	movs	r2, r0
 80004f4:	409c      	lsls	r4, r3
 80004f6:	430a      	orrs	r2, r1
 80004f8:	42b3      	cmp	r3, r6
 80004fa:	da00      	bge.n	80004fe <__aeabi_dadd+0xd2>
 80004fc:	e102      	b.n	8000704 <__aeabi_dadd+0x2d8>
 80004fe:	1b9b      	subs	r3, r3, r6
 8000500:	1c59      	adds	r1, r3, #1
 8000502:	291f      	cmp	r1, #31
 8000504:	dd00      	ble.n	8000508 <__aeabi_dadd+0xdc>
 8000506:	e0a7      	b.n	8000658 <__aeabi_dadd+0x22c>
 8000508:	2320      	movs	r3, #32
 800050a:	0010      	movs	r0, r2
 800050c:	0026      	movs	r6, r4
 800050e:	1a5b      	subs	r3, r3, r1
 8000510:	409c      	lsls	r4, r3
 8000512:	4098      	lsls	r0, r3
 8000514:	40ce      	lsrs	r6, r1
 8000516:	40ca      	lsrs	r2, r1
 8000518:	1e63      	subs	r3, r4, #1
 800051a:	419c      	sbcs	r4, r3
 800051c:	4330      	orrs	r0, r6
 800051e:	4692      	mov	sl, r2
 8000520:	2600      	movs	r6, #0
 8000522:	4304      	orrs	r4, r0
 8000524:	0763      	lsls	r3, r4, #29
 8000526:	d009      	beq.n	800053c <__aeabi_dadd+0x110>
 8000528:	230f      	movs	r3, #15
 800052a:	4023      	ands	r3, r4
 800052c:	2b04      	cmp	r3, #4
 800052e:	d005      	beq.n	800053c <__aeabi_dadd+0x110>
 8000530:	1d23      	adds	r3, r4, #4
 8000532:	42a3      	cmp	r3, r4
 8000534:	41a4      	sbcs	r4, r4
 8000536:	4264      	negs	r4, r4
 8000538:	44a2      	add	sl, r4
 800053a:	001c      	movs	r4, r3
 800053c:	4653      	mov	r3, sl
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	d400      	bmi.n	8000544 <__aeabi_dadd+0x118>
 8000542:	e09b      	b.n	800067c <__aeabi_dadd+0x250>
 8000544:	4b94      	ldr	r3, [pc, #592]	; (8000798 <__aeabi_dadd+0x36c>)
 8000546:	3601      	adds	r6, #1
 8000548:	429e      	cmp	r6, r3
 800054a:	d100      	bne.n	800054e <__aeabi_dadd+0x122>
 800054c:	e0b8      	b.n	80006c0 <__aeabi_dadd+0x294>
 800054e:	4653      	mov	r3, sl
 8000550:	4992      	ldr	r1, [pc, #584]	; (800079c <__aeabi_dadd+0x370>)
 8000552:	08e4      	lsrs	r4, r4, #3
 8000554:	400b      	ands	r3, r1
 8000556:	0019      	movs	r1, r3
 8000558:	075b      	lsls	r3, r3, #29
 800055a:	4323      	orrs	r3, r4
 800055c:	0572      	lsls	r2, r6, #21
 800055e:	024c      	lsls	r4, r1, #9
 8000560:	0b24      	lsrs	r4, r4, #12
 8000562:	0d52      	lsrs	r2, r2, #21
 8000564:	0512      	lsls	r2, r2, #20
 8000566:	07ed      	lsls	r5, r5, #31
 8000568:	4322      	orrs	r2, r4
 800056a:	432a      	orrs	r2, r5
 800056c:	0018      	movs	r0, r3
 800056e:	0011      	movs	r1, r2
 8000570:	bce0      	pop	{r5, r6, r7}
 8000572:	46ba      	mov	sl, r7
 8000574:	46b1      	mov	r9, r6
 8000576:	46a8      	mov	r8, r5
 8000578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057a:	2f00      	cmp	r7, #0
 800057c:	d048      	beq.n	8000610 <__aeabi_dadd+0x1e4>
 800057e:	1b97      	subs	r7, r2, r6
 8000580:	2e00      	cmp	r6, #0
 8000582:	d000      	beq.n	8000586 <__aeabi_dadd+0x15a>
 8000584:	e10e      	b.n	80007a4 <__aeabi_dadd+0x378>
 8000586:	000c      	movs	r4, r1
 8000588:	431c      	orrs	r4, r3
 800058a:	d100      	bne.n	800058e <__aeabi_dadd+0x162>
 800058c:	e1b7      	b.n	80008fe <__aeabi_dadd+0x4d2>
 800058e:	1e7c      	subs	r4, r7, #1
 8000590:	2f01      	cmp	r7, #1
 8000592:	d100      	bne.n	8000596 <__aeabi_dadd+0x16a>
 8000594:	e226      	b.n	80009e4 <__aeabi_dadd+0x5b8>
 8000596:	4d80      	ldr	r5, [pc, #512]	; (8000798 <__aeabi_dadd+0x36c>)
 8000598:	42af      	cmp	r7, r5
 800059a:	d100      	bne.n	800059e <__aeabi_dadd+0x172>
 800059c:	e1d5      	b.n	800094a <__aeabi_dadd+0x51e>
 800059e:	0027      	movs	r7, r4
 80005a0:	e107      	b.n	80007b2 <__aeabi_dadd+0x386>
 80005a2:	2f00      	cmp	r7, #0
 80005a4:	dc00      	bgt.n	80005a8 <__aeabi_dadd+0x17c>
 80005a6:	e0b2      	b.n	800070e <__aeabi_dadd+0x2e2>
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d047      	beq.n	800063c <__aeabi_dadd+0x210>
 80005ac:	4a7a      	ldr	r2, [pc, #488]	; (8000798 <__aeabi_dadd+0x36c>)
 80005ae:	4296      	cmp	r6, r2
 80005b0:	d100      	bne.n	80005b4 <__aeabi_dadd+0x188>
 80005b2:	e089      	b.n	80006c8 <__aeabi_dadd+0x29c>
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	464c      	mov	r4, r9
 80005b8:	0412      	lsls	r2, r2, #16
 80005ba:	4314      	orrs	r4, r2
 80005bc:	46a1      	mov	r9, r4
 80005be:	2f38      	cmp	r7, #56	; 0x38
 80005c0:	dc6b      	bgt.n	800069a <__aeabi_dadd+0x26e>
 80005c2:	2f1f      	cmp	r7, #31
 80005c4:	dc00      	bgt.n	80005c8 <__aeabi_dadd+0x19c>
 80005c6:	e16e      	b.n	80008a6 <__aeabi_dadd+0x47a>
 80005c8:	003a      	movs	r2, r7
 80005ca:	4648      	mov	r0, r9
 80005cc:	3a20      	subs	r2, #32
 80005ce:	40d0      	lsrs	r0, r2
 80005d0:	4684      	mov	ip, r0
 80005d2:	2f20      	cmp	r7, #32
 80005d4:	d007      	beq.n	80005e6 <__aeabi_dadd+0x1ba>
 80005d6:	2240      	movs	r2, #64	; 0x40
 80005d8:	4648      	mov	r0, r9
 80005da:	1bd2      	subs	r2, r2, r7
 80005dc:	4090      	lsls	r0, r2
 80005de:	0002      	movs	r2, r0
 80005e0:	4640      	mov	r0, r8
 80005e2:	4310      	orrs	r0, r2
 80005e4:	4680      	mov	r8, r0
 80005e6:	4640      	mov	r0, r8
 80005e8:	1e42      	subs	r2, r0, #1
 80005ea:	4190      	sbcs	r0, r2
 80005ec:	4662      	mov	r2, ip
 80005ee:	0004      	movs	r4, r0
 80005f0:	4314      	orrs	r4, r2
 80005f2:	e057      	b.n	80006a4 <__aeabi_dadd+0x278>
 80005f4:	464a      	mov	r2, r9
 80005f6:	4302      	orrs	r2, r0
 80005f8:	d100      	bne.n	80005fc <__aeabi_dadd+0x1d0>
 80005fa:	e103      	b.n	8000804 <__aeabi_dadd+0x3d8>
 80005fc:	1e7a      	subs	r2, r7, #1
 80005fe:	2f01      	cmp	r7, #1
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x1d8>
 8000602:	e193      	b.n	800092c <__aeabi_dadd+0x500>
 8000604:	4c64      	ldr	r4, [pc, #400]	; (8000798 <__aeabi_dadd+0x36c>)
 8000606:	42a7      	cmp	r7, r4
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x1e0>
 800060a:	e18a      	b.n	8000922 <__aeabi_dadd+0x4f6>
 800060c:	0017      	movs	r7, r2
 800060e:	e73b      	b.n	8000488 <__aeabi_dadd+0x5c>
 8000610:	4c63      	ldr	r4, [pc, #396]	; (80007a0 <__aeabi_dadd+0x374>)
 8000612:	1c72      	adds	r2, r6, #1
 8000614:	4222      	tst	r2, r4
 8000616:	d000      	beq.n	800061a <__aeabi_dadd+0x1ee>
 8000618:	e0e0      	b.n	80007dc <__aeabi_dadd+0x3b0>
 800061a:	000a      	movs	r2, r1
 800061c:	431a      	orrs	r2, r3
 800061e:	2e00      	cmp	r6, #0
 8000620:	d000      	beq.n	8000624 <__aeabi_dadd+0x1f8>
 8000622:	e174      	b.n	800090e <__aeabi_dadd+0x4e2>
 8000624:	2a00      	cmp	r2, #0
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x1fe>
 8000628:	e1d0      	b.n	80009cc <__aeabi_dadd+0x5a0>
 800062a:	464a      	mov	r2, r9
 800062c:	4302      	orrs	r2, r0
 800062e:	d000      	beq.n	8000632 <__aeabi_dadd+0x206>
 8000630:	e1e3      	b.n	80009fa <__aeabi_dadd+0x5ce>
 8000632:	074a      	lsls	r2, r1, #29
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	4313      	orrs	r3, r2
 8000638:	08c9      	lsrs	r1, r1, #3
 800063a:	e029      	b.n	8000690 <__aeabi_dadd+0x264>
 800063c:	464a      	mov	r2, r9
 800063e:	4302      	orrs	r2, r0
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x218>
 8000642:	e17d      	b.n	8000940 <__aeabi_dadd+0x514>
 8000644:	1e7a      	subs	r2, r7, #1
 8000646:	2f01      	cmp	r7, #1
 8000648:	d100      	bne.n	800064c <__aeabi_dadd+0x220>
 800064a:	e0e0      	b.n	800080e <__aeabi_dadd+0x3e2>
 800064c:	4c52      	ldr	r4, [pc, #328]	; (8000798 <__aeabi_dadd+0x36c>)
 800064e:	42a7      	cmp	r7, r4
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x228>
 8000652:	e166      	b.n	8000922 <__aeabi_dadd+0x4f6>
 8000654:	0017      	movs	r7, r2
 8000656:	e7b2      	b.n	80005be <__aeabi_dadd+0x192>
 8000658:	0010      	movs	r0, r2
 800065a:	3b1f      	subs	r3, #31
 800065c:	40d8      	lsrs	r0, r3
 800065e:	2920      	cmp	r1, #32
 8000660:	d003      	beq.n	800066a <__aeabi_dadd+0x23e>
 8000662:	2340      	movs	r3, #64	; 0x40
 8000664:	1a5b      	subs	r3, r3, r1
 8000666:	409a      	lsls	r2, r3
 8000668:	4314      	orrs	r4, r2
 800066a:	1e63      	subs	r3, r4, #1
 800066c:	419c      	sbcs	r4, r3
 800066e:	2300      	movs	r3, #0
 8000670:	2600      	movs	r6, #0
 8000672:	469a      	mov	sl, r3
 8000674:	4304      	orrs	r4, r0
 8000676:	0763      	lsls	r3, r4, #29
 8000678:	d000      	beq.n	800067c <__aeabi_dadd+0x250>
 800067a:	e755      	b.n	8000528 <__aeabi_dadd+0xfc>
 800067c:	4652      	mov	r2, sl
 800067e:	08e3      	lsrs	r3, r4, #3
 8000680:	0752      	lsls	r2, r2, #29
 8000682:	4313      	orrs	r3, r2
 8000684:	4652      	mov	r2, sl
 8000686:	0037      	movs	r7, r6
 8000688:	08d1      	lsrs	r1, r2, #3
 800068a:	4a43      	ldr	r2, [pc, #268]	; (8000798 <__aeabi_dadd+0x36c>)
 800068c:	4297      	cmp	r7, r2
 800068e:	d01f      	beq.n	80006d0 <__aeabi_dadd+0x2a4>
 8000690:	0309      	lsls	r1, r1, #12
 8000692:	057a      	lsls	r2, r7, #21
 8000694:	0b0c      	lsrs	r4, r1, #12
 8000696:	0d52      	lsrs	r2, r2, #21
 8000698:	e764      	b.n	8000564 <__aeabi_dadd+0x138>
 800069a:	4642      	mov	r2, r8
 800069c:	464c      	mov	r4, r9
 800069e:	4314      	orrs	r4, r2
 80006a0:	1e62      	subs	r2, r4, #1
 80006a2:	4194      	sbcs	r4, r2
 80006a4:	18e4      	adds	r4, r4, r3
 80006a6:	429c      	cmp	r4, r3
 80006a8:	4192      	sbcs	r2, r2
 80006aa:	4252      	negs	r2, r2
 80006ac:	4692      	mov	sl, r2
 80006ae:	448a      	add	sl, r1
 80006b0:	4653      	mov	r3, sl
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	d5df      	bpl.n	8000676 <__aeabi_dadd+0x24a>
 80006b6:	4b38      	ldr	r3, [pc, #224]	; (8000798 <__aeabi_dadd+0x36c>)
 80006b8:	3601      	adds	r6, #1
 80006ba:	429e      	cmp	r6, r3
 80006bc:	d000      	beq.n	80006c0 <__aeabi_dadd+0x294>
 80006be:	e0b3      	b.n	8000828 <__aeabi_dadd+0x3fc>
 80006c0:	0032      	movs	r2, r6
 80006c2:	2400      	movs	r4, #0
 80006c4:	2300      	movs	r3, #0
 80006c6:	e74d      	b.n	8000564 <__aeabi_dadd+0x138>
 80006c8:	074a      	lsls	r2, r1, #29
 80006ca:	08db      	lsrs	r3, r3, #3
 80006cc:	4313      	orrs	r3, r2
 80006ce:	08c9      	lsrs	r1, r1, #3
 80006d0:	001a      	movs	r2, r3
 80006d2:	430a      	orrs	r2, r1
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x2ac>
 80006d6:	e200      	b.n	8000ada <__aeabi_dadd+0x6ae>
 80006d8:	2480      	movs	r4, #128	; 0x80
 80006da:	0324      	lsls	r4, r4, #12
 80006dc:	430c      	orrs	r4, r1
 80006de:	0324      	lsls	r4, r4, #12
 80006e0:	4a2d      	ldr	r2, [pc, #180]	; (8000798 <__aeabi_dadd+0x36c>)
 80006e2:	0b24      	lsrs	r4, r4, #12
 80006e4:	e73e      	b.n	8000564 <__aeabi_dadd+0x138>
 80006e6:	0020      	movs	r0, r4
 80006e8:	f001 fbfc 	bl	8001ee4 <__clzsi2>
 80006ec:	0003      	movs	r3, r0
 80006ee:	3318      	adds	r3, #24
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_dadd+0x2ca>
 80006f4:	e6f7      	b.n	80004e6 <__aeabi_dadd+0xba>
 80006f6:	0022      	movs	r2, r4
 80006f8:	3808      	subs	r0, #8
 80006fa:	4082      	lsls	r2, r0
 80006fc:	2400      	movs	r4, #0
 80006fe:	42b3      	cmp	r3, r6
 8000700:	db00      	blt.n	8000704 <__aeabi_dadd+0x2d8>
 8000702:	e6fc      	b.n	80004fe <__aeabi_dadd+0xd2>
 8000704:	1af6      	subs	r6, r6, r3
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <__aeabi_dadd+0x370>)
 8000708:	401a      	ands	r2, r3
 800070a:	4692      	mov	sl, r2
 800070c:	e70a      	b.n	8000524 <__aeabi_dadd+0xf8>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d02b      	beq.n	800076a <__aeabi_dadd+0x33e>
 8000712:	1b97      	subs	r7, r2, r6
 8000714:	2e00      	cmp	r6, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x2ee>
 8000718:	e0b8      	b.n	800088c <__aeabi_dadd+0x460>
 800071a:	4c1f      	ldr	r4, [pc, #124]	; (8000798 <__aeabi_dadd+0x36c>)
 800071c:	42a2      	cmp	r2, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x2f6>
 8000720:	e11c      	b.n	800095c <__aeabi_dadd+0x530>
 8000722:	2480      	movs	r4, #128	; 0x80
 8000724:	0424      	lsls	r4, r4, #16
 8000726:	4321      	orrs	r1, r4
 8000728:	2f38      	cmp	r7, #56	; 0x38
 800072a:	dd00      	ble.n	800072e <__aeabi_dadd+0x302>
 800072c:	e11e      	b.n	800096c <__aeabi_dadd+0x540>
 800072e:	2f1f      	cmp	r7, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x308>
 8000732:	e19e      	b.n	8000a72 <__aeabi_dadd+0x646>
 8000734:	2620      	movs	r6, #32
 8000736:	000c      	movs	r4, r1
 8000738:	1bf6      	subs	r6, r6, r7
 800073a:	0018      	movs	r0, r3
 800073c:	40b3      	lsls	r3, r6
 800073e:	40b4      	lsls	r4, r6
 8000740:	40f8      	lsrs	r0, r7
 8000742:	1e5e      	subs	r6, r3, #1
 8000744:	41b3      	sbcs	r3, r6
 8000746:	40f9      	lsrs	r1, r7
 8000748:	4304      	orrs	r4, r0
 800074a:	431c      	orrs	r4, r3
 800074c:	4489      	add	r9, r1
 800074e:	4444      	add	r4, r8
 8000750:	4544      	cmp	r4, r8
 8000752:	419b      	sbcs	r3, r3
 8000754:	425b      	negs	r3, r3
 8000756:	444b      	add	r3, r9
 8000758:	469a      	mov	sl, r3
 800075a:	0016      	movs	r6, r2
 800075c:	e7a8      	b.n	80006b0 <__aeabi_dadd+0x284>
 800075e:	4642      	mov	r2, r8
 8000760:	464c      	mov	r4, r9
 8000762:	4314      	orrs	r4, r2
 8000764:	1e62      	subs	r2, r4, #1
 8000766:	4194      	sbcs	r4, r2
 8000768:	e6a6      	b.n	80004b8 <__aeabi_dadd+0x8c>
 800076a:	4c0d      	ldr	r4, [pc, #52]	; (80007a0 <__aeabi_dadd+0x374>)
 800076c:	1c72      	adds	r2, r6, #1
 800076e:	4222      	tst	r2, r4
 8000770:	d000      	beq.n	8000774 <__aeabi_dadd+0x348>
 8000772:	e0a8      	b.n	80008c6 <__aeabi_dadd+0x49a>
 8000774:	000a      	movs	r2, r1
 8000776:	431a      	orrs	r2, r3
 8000778:	2e00      	cmp	r6, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x352>
 800077c:	e10a      	b.n	8000994 <__aeabi_dadd+0x568>
 800077e:	2a00      	cmp	r2, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0x358>
 8000782:	e15e      	b.n	8000a42 <__aeabi_dadd+0x616>
 8000784:	464a      	mov	r2, r9
 8000786:	4302      	orrs	r2, r0
 8000788:	d000      	beq.n	800078c <__aeabi_dadd+0x360>
 800078a:	e161      	b.n	8000a50 <__aeabi_dadd+0x624>
 800078c:	074a      	lsls	r2, r1, #29
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	4313      	orrs	r3, r2
 8000792:	08c9      	lsrs	r1, r1, #3
 8000794:	e77c      	b.n	8000690 <__aeabi_dadd+0x264>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	000007ff 	.word	0x000007ff
 800079c:	ff7fffff 	.word	0xff7fffff
 80007a0:	000007fe 	.word	0x000007fe
 80007a4:	4ccf      	ldr	r4, [pc, #828]	; (8000ae4 <__aeabi_dadd+0x6b8>)
 80007a6:	42a2      	cmp	r2, r4
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x380>
 80007aa:	e0ce      	b.n	800094a <__aeabi_dadd+0x51e>
 80007ac:	2480      	movs	r4, #128	; 0x80
 80007ae:	0424      	lsls	r4, r4, #16
 80007b0:	4321      	orrs	r1, r4
 80007b2:	2f38      	cmp	r7, #56	; 0x38
 80007b4:	dc5b      	bgt.n	800086e <__aeabi_dadd+0x442>
 80007b6:	2f1f      	cmp	r7, #31
 80007b8:	dd00      	ble.n	80007bc <__aeabi_dadd+0x390>
 80007ba:	e0dc      	b.n	8000976 <__aeabi_dadd+0x54a>
 80007bc:	2520      	movs	r5, #32
 80007be:	000c      	movs	r4, r1
 80007c0:	1bed      	subs	r5, r5, r7
 80007c2:	001e      	movs	r6, r3
 80007c4:	40ab      	lsls	r3, r5
 80007c6:	40ac      	lsls	r4, r5
 80007c8:	40fe      	lsrs	r6, r7
 80007ca:	1e5d      	subs	r5, r3, #1
 80007cc:	41ab      	sbcs	r3, r5
 80007ce:	4334      	orrs	r4, r6
 80007d0:	40f9      	lsrs	r1, r7
 80007d2:	431c      	orrs	r4, r3
 80007d4:	464b      	mov	r3, r9
 80007d6:	1a5b      	subs	r3, r3, r1
 80007d8:	4699      	mov	r9, r3
 80007da:	e04c      	b.n	8000876 <__aeabi_dadd+0x44a>
 80007dc:	464a      	mov	r2, r9
 80007de:	1a1c      	subs	r4, r3, r0
 80007e0:	1a88      	subs	r0, r1, r2
 80007e2:	42a3      	cmp	r3, r4
 80007e4:	4192      	sbcs	r2, r2
 80007e6:	4252      	negs	r2, r2
 80007e8:	4692      	mov	sl, r2
 80007ea:	0002      	movs	r2, r0
 80007ec:	4650      	mov	r0, sl
 80007ee:	1a12      	subs	r2, r2, r0
 80007f0:	4692      	mov	sl, r2
 80007f2:	0212      	lsls	r2, r2, #8
 80007f4:	d478      	bmi.n	80008e8 <__aeabi_dadd+0x4bc>
 80007f6:	4653      	mov	r3, sl
 80007f8:	4323      	orrs	r3, r4
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x3d2>
 80007fc:	e66a      	b.n	80004d4 <__aeabi_dadd+0xa8>
 80007fe:	2100      	movs	r1, #0
 8000800:	2500      	movs	r5, #0
 8000802:	e745      	b.n	8000690 <__aeabi_dadd+0x264>
 8000804:	074a      	lsls	r2, r1, #29
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	4313      	orrs	r3, r2
 800080a:	08c9      	lsrs	r1, r1, #3
 800080c:	e73d      	b.n	800068a <__aeabi_dadd+0x25e>
 800080e:	181c      	adds	r4, r3, r0
 8000810:	429c      	cmp	r4, r3
 8000812:	419b      	sbcs	r3, r3
 8000814:	4449      	add	r1, r9
 8000816:	468a      	mov	sl, r1
 8000818:	425b      	negs	r3, r3
 800081a:	449a      	add	sl, r3
 800081c:	4653      	mov	r3, sl
 800081e:	2601      	movs	r6, #1
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	d400      	bmi.n	8000826 <__aeabi_dadd+0x3fa>
 8000824:	e727      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000826:	2602      	movs	r6, #2
 8000828:	4652      	mov	r2, sl
 800082a:	4baf      	ldr	r3, [pc, #700]	; (8000ae8 <__aeabi_dadd+0x6bc>)
 800082c:	2101      	movs	r1, #1
 800082e:	401a      	ands	r2, r3
 8000830:	0013      	movs	r3, r2
 8000832:	4021      	ands	r1, r4
 8000834:	0862      	lsrs	r2, r4, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	07dc      	lsls	r4, r3, #31
 800083a:	085b      	lsrs	r3, r3, #1
 800083c:	469a      	mov	sl, r3
 800083e:	4314      	orrs	r4, r2
 8000840:	e670      	b.n	8000524 <__aeabi_dadd+0xf8>
 8000842:	003a      	movs	r2, r7
 8000844:	464c      	mov	r4, r9
 8000846:	3a20      	subs	r2, #32
 8000848:	40d4      	lsrs	r4, r2
 800084a:	46a4      	mov	ip, r4
 800084c:	2f20      	cmp	r7, #32
 800084e:	d007      	beq.n	8000860 <__aeabi_dadd+0x434>
 8000850:	2240      	movs	r2, #64	; 0x40
 8000852:	4648      	mov	r0, r9
 8000854:	1bd2      	subs	r2, r2, r7
 8000856:	4090      	lsls	r0, r2
 8000858:	0002      	movs	r2, r0
 800085a:	4640      	mov	r0, r8
 800085c:	4310      	orrs	r0, r2
 800085e:	4680      	mov	r8, r0
 8000860:	4640      	mov	r0, r8
 8000862:	1e42      	subs	r2, r0, #1
 8000864:	4190      	sbcs	r0, r2
 8000866:	4662      	mov	r2, ip
 8000868:	0004      	movs	r4, r0
 800086a:	4314      	orrs	r4, r2
 800086c:	e624      	b.n	80004b8 <__aeabi_dadd+0x8c>
 800086e:	4319      	orrs	r1, r3
 8000870:	000c      	movs	r4, r1
 8000872:	1e63      	subs	r3, r4, #1
 8000874:	419c      	sbcs	r4, r3
 8000876:	4643      	mov	r3, r8
 8000878:	1b1c      	subs	r4, r3, r4
 800087a:	45a0      	cmp	r8, r4
 800087c:	419b      	sbcs	r3, r3
 800087e:	4649      	mov	r1, r9
 8000880:	425b      	negs	r3, r3
 8000882:	1acb      	subs	r3, r1, r3
 8000884:	469a      	mov	sl, r3
 8000886:	4665      	mov	r5, ip
 8000888:	0016      	movs	r6, r2
 800088a:	e61b      	b.n	80004c4 <__aeabi_dadd+0x98>
 800088c:	000c      	movs	r4, r1
 800088e:	431c      	orrs	r4, r3
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x468>
 8000892:	e0c7      	b.n	8000a24 <__aeabi_dadd+0x5f8>
 8000894:	1e7c      	subs	r4, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x470>
 800089a:	e0f9      	b.n	8000a90 <__aeabi_dadd+0x664>
 800089c:	4e91      	ldr	r6, [pc, #580]	; (8000ae4 <__aeabi_dadd+0x6b8>)
 800089e:	42b7      	cmp	r7, r6
 80008a0:	d05c      	beq.n	800095c <__aeabi_dadd+0x530>
 80008a2:	0027      	movs	r7, r4
 80008a4:	e740      	b.n	8000728 <__aeabi_dadd+0x2fc>
 80008a6:	2220      	movs	r2, #32
 80008a8:	464c      	mov	r4, r9
 80008aa:	4640      	mov	r0, r8
 80008ac:	1bd2      	subs	r2, r2, r7
 80008ae:	4094      	lsls	r4, r2
 80008b0:	40f8      	lsrs	r0, r7
 80008b2:	4304      	orrs	r4, r0
 80008b4:	4640      	mov	r0, r8
 80008b6:	4090      	lsls	r0, r2
 80008b8:	1e42      	subs	r2, r0, #1
 80008ba:	4190      	sbcs	r0, r2
 80008bc:	464a      	mov	r2, r9
 80008be:	40fa      	lsrs	r2, r7
 80008c0:	4304      	orrs	r4, r0
 80008c2:	1889      	adds	r1, r1, r2
 80008c4:	e6ee      	b.n	80006a4 <__aeabi_dadd+0x278>
 80008c6:	4c87      	ldr	r4, [pc, #540]	; (8000ae4 <__aeabi_dadd+0x6b8>)
 80008c8:	42a2      	cmp	r2, r4
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x4a2>
 80008cc:	e6f9      	b.n	80006c2 <__aeabi_dadd+0x296>
 80008ce:	1818      	adds	r0, r3, r0
 80008d0:	4298      	cmp	r0, r3
 80008d2:	419b      	sbcs	r3, r3
 80008d4:	4449      	add	r1, r9
 80008d6:	425b      	negs	r3, r3
 80008d8:	18cb      	adds	r3, r1, r3
 80008da:	07dc      	lsls	r4, r3, #31
 80008dc:	0840      	lsrs	r0, r0, #1
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	469a      	mov	sl, r3
 80008e2:	0016      	movs	r6, r2
 80008e4:	4304      	orrs	r4, r0
 80008e6:	e6c6      	b.n	8000676 <__aeabi_dadd+0x24a>
 80008e8:	4642      	mov	r2, r8
 80008ea:	1ad4      	subs	r4, r2, r3
 80008ec:	45a0      	cmp	r8, r4
 80008ee:	4180      	sbcs	r0, r0
 80008f0:	464b      	mov	r3, r9
 80008f2:	4240      	negs	r0, r0
 80008f4:	1a59      	subs	r1, r3, r1
 80008f6:	1a0b      	subs	r3, r1, r0
 80008f8:	469a      	mov	sl, r3
 80008fa:	4665      	mov	r5, ip
 80008fc:	e5ea      	b.n	80004d4 <__aeabi_dadd+0xa8>
 80008fe:	464b      	mov	r3, r9
 8000900:	464a      	mov	r2, r9
 8000902:	08c0      	lsrs	r0, r0, #3
 8000904:	075b      	lsls	r3, r3, #29
 8000906:	4665      	mov	r5, ip
 8000908:	4303      	orrs	r3, r0
 800090a:	08d1      	lsrs	r1, r2, #3
 800090c:	e6bd      	b.n	800068a <__aeabi_dadd+0x25e>
 800090e:	2a00      	cmp	r2, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_dadd+0x4e8>
 8000912:	e08e      	b.n	8000a32 <__aeabi_dadd+0x606>
 8000914:	464b      	mov	r3, r9
 8000916:	4303      	orrs	r3, r0
 8000918:	d117      	bne.n	800094a <__aeabi_dadd+0x51e>
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	2500      	movs	r5, #0
 800091e:	0309      	lsls	r1, r1, #12
 8000920:	e6da      	b.n	80006d8 <__aeabi_dadd+0x2ac>
 8000922:	074a      	lsls	r2, r1, #29
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	4313      	orrs	r3, r2
 8000928:	08c9      	lsrs	r1, r1, #3
 800092a:	e6d1      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 800092c:	1a1c      	subs	r4, r3, r0
 800092e:	464a      	mov	r2, r9
 8000930:	42a3      	cmp	r3, r4
 8000932:	419b      	sbcs	r3, r3
 8000934:	1a89      	subs	r1, r1, r2
 8000936:	425b      	negs	r3, r3
 8000938:	1acb      	subs	r3, r1, r3
 800093a:	469a      	mov	sl, r3
 800093c:	2601      	movs	r6, #1
 800093e:	e5c1      	b.n	80004c4 <__aeabi_dadd+0x98>
 8000940:	074a      	lsls	r2, r1, #29
 8000942:	08db      	lsrs	r3, r3, #3
 8000944:	4313      	orrs	r3, r2
 8000946:	08c9      	lsrs	r1, r1, #3
 8000948:	e69f      	b.n	800068a <__aeabi_dadd+0x25e>
 800094a:	4643      	mov	r3, r8
 800094c:	08d8      	lsrs	r0, r3, #3
 800094e:	464b      	mov	r3, r9
 8000950:	464a      	mov	r2, r9
 8000952:	075b      	lsls	r3, r3, #29
 8000954:	4665      	mov	r5, ip
 8000956:	4303      	orrs	r3, r0
 8000958:	08d1      	lsrs	r1, r2, #3
 800095a:	e6b9      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 800095c:	4643      	mov	r3, r8
 800095e:	08d8      	lsrs	r0, r3, #3
 8000960:	464b      	mov	r3, r9
 8000962:	464a      	mov	r2, r9
 8000964:	075b      	lsls	r3, r3, #29
 8000966:	4303      	orrs	r3, r0
 8000968:	08d1      	lsrs	r1, r2, #3
 800096a:	e6b1      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 800096c:	4319      	orrs	r1, r3
 800096e:	000c      	movs	r4, r1
 8000970:	1e63      	subs	r3, r4, #1
 8000972:	419c      	sbcs	r4, r3
 8000974:	e6eb      	b.n	800074e <__aeabi_dadd+0x322>
 8000976:	003c      	movs	r4, r7
 8000978:	000d      	movs	r5, r1
 800097a:	3c20      	subs	r4, #32
 800097c:	40e5      	lsrs	r5, r4
 800097e:	2f20      	cmp	r7, #32
 8000980:	d003      	beq.n	800098a <__aeabi_dadd+0x55e>
 8000982:	2440      	movs	r4, #64	; 0x40
 8000984:	1be4      	subs	r4, r4, r7
 8000986:	40a1      	lsls	r1, r4
 8000988:	430b      	orrs	r3, r1
 800098a:	001c      	movs	r4, r3
 800098c:	1e63      	subs	r3, r4, #1
 800098e:	419c      	sbcs	r4, r3
 8000990:	432c      	orrs	r4, r5
 8000992:	e770      	b.n	8000876 <__aeabi_dadd+0x44a>
 8000994:	2a00      	cmp	r2, #0
 8000996:	d0e1      	beq.n	800095c <__aeabi_dadd+0x530>
 8000998:	464a      	mov	r2, r9
 800099a:	4302      	orrs	r2, r0
 800099c:	d0c1      	beq.n	8000922 <__aeabi_dadd+0x4f6>
 800099e:	074a      	lsls	r2, r1, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	08c9      	lsrs	r1, r1, #3
 80009a8:	0312      	lsls	r2, r2, #12
 80009aa:	4211      	tst	r1, r2
 80009ac:	d008      	beq.n	80009c0 <__aeabi_dadd+0x594>
 80009ae:	4648      	mov	r0, r9
 80009b0:	08c4      	lsrs	r4, r0, #3
 80009b2:	4214      	tst	r4, r2
 80009b4:	d104      	bne.n	80009c0 <__aeabi_dadd+0x594>
 80009b6:	4643      	mov	r3, r8
 80009b8:	0021      	movs	r1, r4
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	0742      	lsls	r2, r0, #29
 80009be:	4313      	orrs	r3, r2
 80009c0:	0f5a      	lsrs	r2, r3, #29
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	0752      	lsls	r2, r2, #29
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	e681      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 80009cc:	464b      	mov	r3, r9
 80009ce:	4303      	orrs	r3, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x5a8>
 80009d2:	e714      	b.n	80007fe <__aeabi_dadd+0x3d2>
 80009d4:	464b      	mov	r3, r9
 80009d6:	464a      	mov	r2, r9
 80009d8:	08c0      	lsrs	r0, r0, #3
 80009da:	075b      	lsls	r3, r3, #29
 80009dc:	4665      	mov	r5, ip
 80009de:	4303      	orrs	r3, r0
 80009e0:	08d1      	lsrs	r1, r2, #3
 80009e2:	e655      	b.n	8000690 <__aeabi_dadd+0x264>
 80009e4:	1ac4      	subs	r4, r0, r3
 80009e6:	45a0      	cmp	r8, r4
 80009e8:	4180      	sbcs	r0, r0
 80009ea:	464b      	mov	r3, r9
 80009ec:	4240      	negs	r0, r0
 80009ee:	1a59      	subs	r1, r3, r1
 80009f0:	1a0b      	subs	r3, r1, r0
 80009f2:	469a      	mov	sl, r3
 80009f4:	4665      	mov	r5, ip
 80009f6:	2601      	movs	r6, #1
 80009f8:	e564      	b.n	80004c4 <__aeabi_dadd+0x98>
 80009fa:	1a1c      	subs	r4, r3, r0
 80009fc:	464a      	mov	r2, r9
 80009fe:	42a3      	cmp	r3, r4
 8000a00:	4180      	sbcs	r0, r0
 8000a02:	1a8a      	subs	r2, r1, r2
 8000a04:	4240      	negs	r0, r0
 8000a06:	1a12      	subs	r2, r2, r0
 8000a08:	4692      	mov	sl, r2
 8000a0a:	0212      	lsls	r2, r2, #8
 8000a0c:	d549      	bpl.n	8000aa2 <__aeabi_dadd+0x676>
 8000a0e:	4642      	mov	r2, r8
 8000a10:	1ad4      	subs	r4, r2, r3
 8000a12:	45a0      	cmp	r8, r4
 8000a14:	4180      	sbcs	r0, r0
 8000a16:	464b      	mov	r3, r9
 8000a18:	4240      	negs	r0, r0
 8000a1a:	1a59      	subs	r1, r3, r1
 8000a1c:	1a0b      	subs	r3, r1, r0
 8000a1e:	469a      	mov	sl, r3
 8000a20:	4665      	mov	r5, ip
 8000a22:	e57f      	b.n	8000524 <__aeabi_dadd+0xf8>
 8000a24:	464b      	mov	r3, r9
 8000a26:	464a      	mov	r2, r9
 8000a28:	08c0      	lsrs	r0, r0, #3
 8000a2a:	075b      	lsls	r3, r3, #29
 8000a2c:	4303      	orrs	r3, r0
 8000a2e:	08d1      	lsrs	r1, r2, #3
 8000a30:	e62b      	b.n	800068a <__aeabi_dadd+0x25e>
 8000a32:	464a      	mov	r2, r9
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	4302      	orrs	r2, r0
 8000a38:	d138      	bne.n	8000aac <__aeabi_dadd+0x680>
 8000a3a:	074a      	lsls	r2, r1, #29
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	08c9      	lsrs	r1, r1, #3
 8000a40:	e646      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 8000a42:	464b      	mov	r3, r9
 8000a44:	464a      	mov	r2, r9
 8000a46:	08c0      	lsrs	r0, r0, #3
 8000a48:	075b      	lsls	r3, r3, #29
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	08d1      	lsrs	r1, r2, #3
 8000a4e:	e61f      	b.n	8000690 <__aeabi_dadd+0x264>
 8000a50:	181c      	adds	r4, r3, r0
 8000a52:	429c      	cmp	r4, r3
 8000a54:	419b      	sbcs	r3, r3
 8000a56:	4449      	add	r1, r9
 8000a58:	468a      	mov	sl, r1
 8000a5a:	425b      	negs	r3, r3
 8000a5c:	449a      	add	sl, r3
 8000a5e:	4653      	mov	r3, sl
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	d400      	bmi.n	8000a66 <__aeabi_dadd+0x63a>
 8000a64:	e607      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000a66:	4652      	mov	r2, sl
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <__aeabi_dadd+0x6bc>)
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	4692      	mov	sl, r2
 8000a70:	e601      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000a72:	003c      	movs	r4, r7
 8000a74:	000e      	movs	r6, r1
 8000a76:	3c20      	subs	r4, #32
 8000a78:	40e6      	lsrs	r6, r4
 8000a7a:	2f20      	cmp	r7, #32
 8000a7c:	d003      	beq.n	8000a86 <__aeabi_dadd+0x65a>
 8000a7e:	2440      	movs	r4, #64	; 0x40
 8000a80:	1be4      	subs	r4, r4, r7
 8000a82:	40a1      	lsls	r1, r4
 8000a84:	430b      	orrs	r3, r1
 8000a86:	001c      	movs	r4, r3
 8000a88:	1e63      	subs	r3, r4, #1
 8000a8a:	419c      	sbcs	r4, r3
 8000a8c:	4334      	orrs	r4, r6
 8000a8e:	e65e      	b.n	800074e <__aeabi_dadd+0x322>
 8000a90:	4443      	add	r3, r8
 8000a92:	4283      	cmp	r3, r0
 8000a94:	4180      	sbcs	r0, r0
 8000a96:	4449      	add	r1, r9
 8000a98:	468a      	mov	sl, r1
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	001c      	movs	r4, r3
 8000a9e:	4482      	add	sl, r0
 8000aa0:	e6bc      	b.n	800081c <__aeabi_dadd+0x3f0>
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	4323      	orrs	r3, r4
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x67e>
 8000aa8:	e6a9      	b.n	80007fe <__aeabi_dadd+0x3d2>
 8000aaa:	e5e4      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000aac:	074a      	lsls	r2, r1, #29
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	08c9      	lsrs	r1, r1, #3
 8000ab4:	0312      	lsls	r2, r2, #12
 8000ab6:	4211      	tst	r1, r2
 8000ab8:	d009      	beq.n	8000ace <__aeabi_dadd+0x6a2>
 8000aba:	4648      	mov	r0, r9
 8000abc:	08c4      	lsrs	r4, r0, #3
 8000abe:	4214      	tst	r4, r2
 8000ac0:	d105      	bne.n	8000ace <__aeabi_dadd+0x6a2>
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	4665      	mov	r5, ip
 8000ac6:	0021      	movs	r1, r4
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	0742      	lsls	r2, r0, #29
 8000acc:	4313      	orrs	r3, r2
 8000ace:	0f5a      	lsrs	r2, r3, #29
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	0752      	lsls	r2, r2, #29
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	e5fa      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 8000ada:	2300      	movs	r3, #0
 8000adc:	4a01      	ldr	r2, [pc, #4]	; (8000ae4 <__aeabi_dadd+0x6b8>)
 8000ade:	001c      	movs	r4, r3
 8000ae0:	e540      	b.n	8000564 <__aeabi_dadd+0x138>
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	000007ff 	.word	0x000007ff
 8000ae8:	ff7fffff 	.word	0xff7fffff

08000aec <__aeabi_ddiv>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	4657      	mov	r7, sl
 8000af0:	464e      	mov	r6, r9
 8000af2:	4645      	mov	r5, r8
 8000af4:	46de      	mov	lr, fp
 8000af6:	b5e0      	push	{r5, r6, r7, lr}
 8000af8:	030c      	lsls	r4, r1, #12
 8000afa:	001f      	movs	r7, r3
 8000afc:	004b      	lsls	r3, r1, #1
 8000afe:	4681      	mov	r9, r0
 8000b00:	4692      	mov	sl, r2
 8000b02:	0005      	movs	r5, r0
 8000b04:	b085      	sub	sp, #20
 8000b06:	0b24      	lsrs	r4, r4, #12
 8000b08:	0d5b      	lsrs	r3, r3, #21
 8000b0a:	0fce      	lsrs	r6, r1, #31
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_ddiv+0x26>
 8000b10:	e152      	b.n	8000db8 <__aeabi_ddiv+0x2cc>
 8000b12:	4ad2      	ldr	r2, [pc, #840]	; (8000e5c <__aeabi_ddiv+0x370>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d100      	bne.n	8000b1a <__aeabi_ddiv+0x2e>
 8000b18:	e16e      	b.n	8000df8 <__aeabi_ddiv+0x30c>
 8000b1a:	0f42      	lsrs	r2, r0, #29
 8000b1c:	00e4      	lsls	r4, r4, #3
 8000b1e:	4314      	orrs	r4, r2
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	0412      	lsls	r2, r2, #16
 8000b24:	4322      	orrs	r2, r4
 8000b26:	4690      	mov	r8, r2
 8000b28:	4acd      	ldr	r2, [pc, #820]	; (8000e60 <__aeabi_ddiv+0x374>)
 8000b2a:	00c5      	lsls	r5, r0, #3
 8000b2c:	4693      	mov	fp, r2
 8000b2e:	449b      	add	fp, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	4699      	mov	r9, r3
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	033c      	lsls	r4, r7, #12
 8000b38:	007b      	lsls	r3, r7, #1
 8000b3a:	4650      	mov	r0, sl
 8000b3c:	0b24      	lsrs	r4, r4, #12
 8000b3e:	0d5b      	lsrs	r3, r3, #21
 8000b40:	0fff      	lsrs	r7, r7, #31
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d100      	bne.n	8000b48 <__aeabi_ddiv+0x5c>
 8000b46:	e11a      	b.n	8000d7e <__aeabi_ddiv+0x292>
 8000b48:	4ac4      	ldr	r2, [pc, #784]	; (8000e5c <__aeabi_ddiv+0x370>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_ddiv+0x64>
 8000b4e:	e15e      	b.n	8000e0e <__aeabi_ddiv+0x322>
 8000b50:	0f42      	lsrs	r2, r0, #29
 8000b52:	00e4      	lsls	r4, r4, #3
 8000b54:	4322      	orrs	r2, r4
 8000b56:	2480      	movs	r4, #128	; 0x80
 8000b58:	0424      	lsls	r4, r4, #16
 8000b5a:	4314      	orrs	r4, r2
 8000b5c:	4ac0      	ldr	r2, [pc, #768]	; (8000e60 <__aeabi_ddiv+0x374>)
 8000b5e:	00c1      	lsls	r1, r0, #3
 8000b60:	4694      	mov	ip, r2
 8000b62:	465a      	mov	r2, fp
 8000b64:	4463      	add	r3, ip
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	469b      	mov	fp, r3
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	0033      	movs	r3, r6
 8000b6e:	407b      	eors	r3, r7
 8000b70:	469a      	mov	sl, r3
 8000b72:	464b      	mov	r3, r9
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d827      	bhi.n	8000bc8 <__aeabi_ddiv+0xdc>
 8000b78:	4aba      	ldr	r2, [pc, #744]	; (8000e64 <__aeabi_ddiv+0x378>)
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	58d3      	ldr	r3, [r2, r3]
 8000b7e:	469f      	mov	pc, r3
 8000b80:	46b2      	mov	sl, r6
 8000b82:	9b00      	ldr	r3, [sp, #0]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d016      	beq.n	8000bb6 <__aeabi_ddiv+0xca>
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0xa2>
 8000b8c:	e287      	b.n	800109e <__aeabi_ddiv+0x5b2>
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d000      	beq.n	8000b94 <__aeabi_ddiv+0xa8>
 8000b92:	e0d5      	b.n	8000d40 <__aeabi_ddiv+0x254>
 8000b94:	2300      	movs	r3, #0
 8000b96:	2200      	movs	r2, #0
 8000b98:	2500      	movs	r5, #0
 8000b9a:	051b      	lsls	r3, r3, #20
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	4652      	mov	r2, sl
 8000ba0:	07d2      	lsls	r2, r2, #31
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	0028      	movs	r0, r5
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	b005      	add	sp, #20
 8000baa:	bcf0      	pop	{r4, r5, r6, r7}
 8000bac:	46bb      	mov	fp, r7
 8000bae:	46b2      	mov	sl, r6
 8000bb0:	46a9      	mov	r9, r5
 8000bb2:	46a0      	mov	r8, r4
 8000bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2500      	movs	r5, #0
 8000bba:	4ba8      	ldr	r3, [pc, #672]	; (8000e5c <__aeabi_ddiv+0x370>)
 8000bbc:	e7ed      	b.n	8000b9a <__aeabi_ddiv+0xae>
 8000bbe:	46ba      	mov	sl, r7
 8000bc0:	46a0      	mov	r8, r4
 8000bc2:	000d      	movs	r5, r1
 8000bc4:	9000      	str	r0, [sp, #0]
 8000bc6:	e7dc      	b.n	8000b82 <__aeabi_ddiv+0x96>
 8000bc8:	4544      	cmp	r4, r8
 8000bca:	d200      	bcs.n	8000bce <__aeabi_ddiv+0xe2>
 8000bcc:	e1c4      	b.n	8000f58 <__aeabi_ddiv+0x46c>
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_ddiv+0xe6>
 8000bd0:	e1bf      	b.n	8000f52 <__aeabi_ddiv+0x466>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	469c      	mov	ip, r3
 8000bd8:	002e      	movs	r6, r5
 8000bda:	4640      	mov	r0, r8
 8000bdc:	2500      	movs	r5, #0
 8000bde:	44e3      	add	fp, ip
 8000be0:	0223      	lsls	r3, r4, #8
 8000be2:	0e0c      	lsrs	r4, r1, #24
 8000be4:	431c      	orrs	r4, r3
 8000be6:	0c1b      	lsrs	r3, r3, #16
 8000be8:	4699      	mov	r9, r3
 8000bea:	0423      	lsls	r3, r4, #16
 8000bec:	020a      	lsls	r2, r1, #8
 8000bee:	0c1f      	lsrs	r7, r3, #16
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	9200      	str	r2, [sp, #0]
 8000bf4:	9701      	str	r7, [sp, #4]
 8000bf6:	f7ff fb0b 	bl	8000210 <__aeabi_uidivmod>
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	437a      	muls	r2, r7
 8000bfe:	040b      	lsls	r3, r1, #16
 8000c00:	0c31      	lsrs	r1, r6, #16
 8000c02:	4680      	mov	r8, r0
 8000c04:	4319      	orrs	r1, r3
 8000c06:	428a      	cmp	r2, r1
 8000c08:	d907      	bls.n	8000c1a <__aeabi_ddiv+0x12e>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	469c      	mov	ip, r3
 8000c10:	1909      	adds	r1, r1, r4
 8000c12:	44e0      	add	r8, ip
 8000c14:	428c      	cmp	r4, r1
 8000c16:	d800      	bhi.n	8000c1a <__aeabi_ddiv+0x12e>
 8000c18:	e201      	b.n	800101e <__aeabi_ddiv+0x532>
 8000c1a:	1a88      	subs	r0, r1, r2
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	f7ff faf7 	bl	8000210 <__aeabi_uidivmod>
 8000c22:	9a01      	ldr	r2, [sp, #4]
 8000c24:	0436      	lsls	r6, r6, #16
 8000c26:	4342      	muls	r2, r0
 8000c28:	0409      	lsls	r1, r1, #16
 8000c2a:	0c36      	lsrs	r6, r6, #16
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	430e      	orrs	r6, r1
 8000c30:	42b2      	cmp	r2, r6
 8000c32:	d904      	bls.n	8000c3e <__aeabi_ddiv+0x152>
 8000c34:	1936      	adds	r6, r6, r4
 8000c36:	3b01      	subs	r3, #1
 8000c38:	42b4      	cmp	r4, r6
 8000c3a:	d800      	bhi.n	8000c3e <__aeabi_ddiv+0x152>
 8000c3c:	e1e9      	b.n	8001012 <__aeabi_ddiv+0x526>
 8000c3e:	1ab0      	subs	r0, r6, r2
 8000c40:	4642      	mov	r2, r8
 8000c42:	9e00      	ldr	r6, [sp, #0]
 8000c44:	0412      	lsls	r2, r2, #16
 8000c46:	431a      	orrs	r2, r3
 8000c48:	0c33      	lsrs	r3, r6, #16
 8000c4a:	001f      	movs	r7, r3
 8000c4c:	0c11      	lsrs	r1, r2, #16
 8000c4e:	4690      	mov	r8, r2
 8000c50:	9302      	str	r3, [sp, #8]
 8000c52:	0413      	lsls	r3, r2, #16
 8000c54:	0432      	lsls	r2, r6, #16
 8000c56:	0c16      	lsrs	r6, r2, #16
 8000c58:	0032      	movs	r2, r6
 8000c5a:	0c1b      	lsrs	r3, r3, #16
 8000c5c:	435a      	muls	r2, r3
 8000c5e:	9603      	str	r6, [sp, #12]
 8000c60:	437b      	muls	r3, r7
 8000c62:	434e      	muls	r6, r1
 8000c64:	4379      	muls	r1, r7
 8000c66:	0c17      	lsrs	r7, r2, #16
 8000c68:	46bc      	mov	ip, r7
 8000c6a:	199b      	adds	r3, r3, r6
 8000c6c:	4463      	add	r3, ip
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	d903      	bls.n	8000c7a <__aeabi_ddiv+0x18e>
 8000c72:	2680      	movs	r6, #128	; 0x80
 8000c74:	0276      	lsls	r6, r6, #9
 8000c76:	46b4      	mov	ip, r6
 8000c78:	4461      	add	r1, ip
 8000c7a:	0c1e      	lsrs	r6, r3, #16
 8000c7c:	1871      	adds	r1, r6, r1
 8000c7e:	0416      	lsls	r6, r2, #16
 8000c80:	041b      	lsls	r3, r3, #16
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	199e      	adds	r6, r3, r6
 8000c86:	4288      	cmp	r0, r1
 8000c88:	d302      	bcc.n	8000c90 <__aeabi_ddiv+0x1a4>
 8000c8a:	d112      	bne.n	8000cb2 <__aeabi_ddiv+0x1c6>
 8000c8c:	42b5      	cmp	r5, r6
 8000c8e:	d210      	bcs.n	8000cb2 <__aeabi_ddiv+0x1c6>
 8000c90:	4643      	mov	r3, r8
 8000c92:	1e5a      	subs	r2, r3, #1
 8000c94:	9b00      	ldr	r3, [sp, #0]
 8000c96:	469c      	mov	ip, r3
 8000c98:	4465      	add	r5, ip
 8000c9a:	001f      	movs	r7, r3
 8000c9c:	429d      	cmp	r5, r3
 8000c9e:	419b      	sbcs	r3, r3
 8000ca0:	425b      	negs	r3, r3
 8000ca2:	191b      	adds	r3, r3, r4
 8000ca4:	18c0      	adds	r0, r0, r3
 8000ca6:	4284      	cmp	r4, r0
 8000ca8:	d200      	bcs.n	8000cac <__aeabi_ddiv+0x1c0>
 8000caa:	e19e      	b.n	8000fea <__aeabi_ddiv+0x4fe>
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x1c4>
 8000cae:	e199      	b.n	8000fe4 <__aeabi_ddiv+0x4f8>
 8000cb0:	4690      	mov	r8, r2
 8000cb2:	1bae      	subs	r6, r5, r6
 8000cb4:	42b5      	cmp	r5, r6
 8000cb6:	41ad      	sbcs	r5, r5
 8000cb8:	1a40      	subs	r0, r0, r1
 8000cba:	426d      	negs	r5, r5
 8000cbc:	1b40      	subs	r0, r0, r5
 8000cbe:	4284      	cmp	r4, r0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_ddiv+0x1d8>
 8000cc2:	e1d2      	b.n	800106a <__aeabi_ddiv+0x57e>
 8000cc4:	4649      	mov	r1, r9
 8000cc6:	f7ff faa3 	bl	8000210 <__aeabi_uidivmod>
 8000cca:	9a01      	ldr	r2, [sp, #4]
 8000ccc:	040b      	lsls	r3, r1, #16
 8000cce:	4342      	muls	r2, r0
 8000cd0:	0c31      	lsrs	r1, r6, #16
 8000cd2:	0005      	movs	r5, r0
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	d900      	bls.n	8000cdc <__aeabi_ddiv+0x1f0>
 8000cda:	e16c      	b.n	8000fb6 <__aeabi_ddiv+0x4ca>
 8000cdc:	1a88      	subs	r0, r1, r2
 8000cde:	4649      	mov	r1, r9
 8000ce0:	f7ff fa96 	bl	8000210 <__aeabi_uidivmod>
 8000ce4:	9a01      	ldr	r2, [sp, #4]
 8000ce6:	0436      	lsls	r6, r6, #16
 8000ce8:	4342      	muls	r2, r0
 8000cea:	0409      	lsls	r1, r1, #16
 8000cec:	0c36      	lsrs	r6, r6, #16
 8000cee:	0003      	movs	r3, r0
 8000cf0:	430e      	orrs	r6, r1
 8000cf2:	42b2      	cmp	r2, r6
 8000cf4:	d900      	bls.n	8000cf8 <__aeabi_ddiv+0x20c>
 8000cf6:	e153      	b.n	8000fa0 <__aeabi_ddiv+0x4b4>
 8000cf8:	9803      	ldr	r0, [sp, #12]
 8000cfa:	1ab6      	subs	r6, r6, r2
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	042d      	lsls	r5, r5, #16
 8000d00:	431d      	orrs	r5, r3
 8000d02:	9f02      	ldr	r7, [sp, #8]
 8000d04:	042b      	lsls	r3, r5, #16
 8000d06:	0c1b      	lsrs	r3, r3, #16
 8000d08:	435a      	muls	r2, r3
 8000d0a:	437b      	muls	r3, r7
 8000d0c:	469c      	mov	ip, r3
 8000d0e:	0c29      	lsrs	r1, r5, #16
 8000d10:	4348      	muls	r0, r1
 8000d12:	0c13      	lsrs	r3, r2, #16
 8000d14:	4484      	add	ip, r0
 8000d16:	4463      	add	r3, ip
 8000d18:	4379      	muls	r1, r7
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d903      	bls.n	8000d26 <__aeabi_ddiv+0x23a>
 8000d1e:	2080      	movs	r0, #128	; 0x80
 8000d20:	0240      	lsls	r0, r0, #9
 8000d22:	4684      	mov	ip, r0
 8000d24:	4461      	add	r1, ip
 8000d26:	0c18      	lsrs	r0, r3, #16
 8000d28:	0412      	lsls	r2, r2, #16
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	0c12      	lsrs	r2, r2, #16
 8000d2e:	1840      	adds	r0, r0, r1
 8000d30:	189b      	adds	r3, r3, r2
 8000d32:	4286      	cmp	r6, r0
 8000d34:	d200      	bcs.n	8000d38 <__aeabi_ddiv+0x24c>
 8000d36:	e100      	b.n	8000f3a <__aeabi_ddiv+0x44e>
 8000d38:	d100      	bne.n	8000d3c <__aeabi_ddiv+0x250>
 8000d3a:	e0fb      	b.n	8000f34 <__aeabi_ddiv+0x448>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	431d      	orrs	r5, r3
 8000d40:	4b49      	ldr	r3, [pc, #292]	; (8000e68 <__aeabi_ddiv+0x37c>)
 8000d42:	445b      	add	r3, fp
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	dc00      	bgt.n	8000d4a <__aeabi_ddiv+0x25e>
 8000d48:	e0aa      	b.n	8000ea0 <__aeabi_ddiv+0x3b4>
 8000d4a:	076a      	lsls	r2, r5, #29
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_ddiv+0x264>
 8000d4e:	e13d      	b.n	8000fcc <__aeabi_ddiv+0x4e0>
 8000d50:	08e9      	lsrs	r1, r5, #3
 8000d52:	4642      	mov	r2, r8
 8000d54:	01d2      	lsls	r2, r2, #7
 8000d56:	d506      	bpl.n	8000d66 <__aeabi_ddiv+0x27a>
 8000d58:	4642      	mov	r2, r8
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <__aeabi_ddiv+0x380>)
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	4690      	mov	r8, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	445b      	add	r3, fp
 8000d66:	4a42      	ldr	r2, [pc, #264]	; (8000e70 <__aeabi_ddiv+0x384>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_ddiv+0x282>
 8000d6c:	e723      	b.n	8000bb6 <__aeabi_ddiv+0xca>
 8000d6e:	4642      	mov	r2, r8
 8000d70:	055b      	lsls	r3, r3, #21
 8000d72:	0755      	lsls	r5, r2, #29
 8000d74:	0252      	lsls	r2, r2, #9
 8000d76:	430d      	orrs	r5, r1
 8000d78:	0b12      	lsrs	r2, r2, #12
 8000d7a:	0d5b      	lsrs	r3, r3, #21
 8000d7c:	e70d      	b.n	8000b9a <__aeabi_ddiv+0xae>
 8000d7e:	4651      	mov	r1, sl
 8000d80:	4321      	orrs	r1, r4
 8000d82:	d100      	bne.n	8000d86 <__aeabi_ddiv+0x29a>
 8000d84:	e07c      	b.n	8000e80 <__aeabi_ddiv+0x394>
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x2a0>
 8000d8a:	e0fb      	b.n	8000f84 <__aeabi_ddiv+0x498>
 8000d8c:	0020      	movs	r0, r4
 8000d8e:	f001 f8a9 	bl	8001ee4 <__clzsi2>
 8000d92:	0002      	movs	r2, r0
 8000d94:	3a0b      	subs	r2, #11
 8000d96:	231d      	movs	r3, #29
 8000d98:	1a9b      	subs	r3, r3, r2
 8000d9a:	4652      	mov	r2, sl
 8000d9c:	0001      	movs	r1, r0
 8000d9e:	40da      	lsrs	r2, r3
 8000da0:	4653      	mov	r3, sl
 8000da2:	3908      	subs	r1, #8
 8000da4:	408b      	lsls	r3, r1
 8000da6:	408c      	lsls	r4, r1
 8000da8:	0019      	movs	r1, r3
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <__aeabi_ddiv+0x388>)
 8000dae:	4458      	add	r0, fp
 8000db0:	469b      	mov	fp, r3
 8000db2:	4483      	add	fp, r0
 8000db4:	2000      	movs	r0, #0
 8000db6:	e6d9      	b.n	8000b6c <__aeabi_ddiv+0x80>
 8000db8:	0003      	movs	r3, r0
 8000dba:	4323      	orrs	r3, r4
 8000dbc:	4698      	mov	r8, r3
 8000dbe:	d044      	beq.n	8000e4a <__aeabi_ddiv+0x35e>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x2da>
 8000dc4:	e0cf      	b.n	8000f66 <__aeabi_ddiv+0x47a>
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f001 f88c 	bl	8001ee4 <__clzsi2>
 8000dcc:	0001      	movs	r1, r0
 8000dce:	0002      	movs	r2, r0
 8000dd0:	390b      	subs	r1, #11
 8000dd2:	231d      	movs	r3, #29
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	0010      	movs	r0, r2
 8000dda:	40d9      	lsrs	r1, r3
 8000ddc:	3808      	subs	r0, #8
 8000dde:	4084      	lsls	r4, r0
 8000de0:	000b      	movs	r3, r1
 8000de2:	464d      	mov	r5, r9
 8000de4:	4323      	orrs	r3, r4
 8000de6:	4698      	mov	r8, r3
 8000de8:	4085      	lsls	r5, r0
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <__aeabi_ddiv+0x38c>)
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	469b      	mov	fp, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	4699      	mov	r9, r3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	e69e      	b.n	8000b36 <__aeabi_ddiv+0x4a>
 8000df8:	0002      	movs	r2, r0
 8000dfa:	4322      	orrs	r2, r4
 8000dfc:	4690      	mov	r8, r2
 8000dfe:	d11d      	bne.n	8000e3c <__aeabi_ddiv+0x350>
 8000e00:	2208      	movs	r2, #8
 8000e02:	469b      	mov	fp, r3
 8000e04:	2302      	movs	r3, #2
 8000e06:	2500      	movs	r5, #0
 8000e08:	4691      	mov	r9, r2
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	e693      	b.n	8000b36 <__aeabi_ddiv+0x4a>
 8000e0e:	4651      	mov	r1, sl
 8000e10:	4321      	orrs	r1, r4
 8000e12:	d109      	bne.n	8000e28 <__aeabi_ddiv+0x33c>
 8000e14:	2302      	movs	r3, #2
 8000e16:	464a      	mov	r2, r9
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <__aeabi_ddiv+0x390>)
 8000e1c:	4691      	mov	r9, r2
 8000e1e:	469c      	mov	ip, r3
 8000e20:	2400      	movs	r4, #0
 8000e22:	2002      	movs	r0, #2
 8000e24:	44e3      	add	fp, ip
 8000e26:	e6a1      	b.n	8000b6c <__aeabi_ddiv+0x80>
 8000e28:	2303      	movs	r3, #3
 8000e2a:	464a      	mov	r2, r9
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <__aeabi_ddiv+0x390>)
 8000e30:	4691      	mov	r9, r2
 8000e32:	469c      	mov	ip, r3
 8000e34:	4651      	mov	r1, sl
 8000e36:	2003      	movs	r0, #3
 8000e38:	44e3      	add	fp, ip
 8000e3a:	e697      	b.n	8000b6c <__aeabi_ddiv+0x80>
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	469b      	mov	fp, r3
 8000e40:	2303      	movs	r3, #3
 8000e42:	46a0      	mov	r8, r4
 8000e44:	4691      	mov	r9, r2
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e675      	b.n	8000b36 <__aeabi_ddiv+0x4a>
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	469b      	mov	fp, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	2500      	movs	r5, #0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	e66d      	b.n	8000b36 <__aeabi_ddiv+0x4a>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	000007ff 	.word	0x000007ff
 8000e60:	fffffc01 	.word	0xfffffc01
 8000e64:	080086e8 	.word	0x080086e8
 8000e68:	000003ff 	.word	0x000003ff
 8000e6c:	feffffff 	.word	0xfeffffff
 8000e70:	000007fe 	.word	0x000007fe
 8000e74:	000003f3 	.word	0x000003f3
 8000e78:	fffffc0d 	.word	0xfffffc0d
 8000e7c:	fffff801 	.word	0xfffff801
 8000e80:	464a      	mov	r2, r9
 8000e82:	2301      	movs	r3, #1
 8000e84:	431a      	orrs	r2, r3
 8000e86:	4691      	mov	r9, r2
 8000e88:	2400      	movs	r4, #0
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	e66e      	b.n	8000b6c <__aeabi_ddiv+0x80>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	469a      	mov	sl, r3
 8000e94:	2500      	movs	r5, #0
 8000e96:	4b88      	ldr	r3, [pc, #544]	; (80010b8 <__aeabi_ddiv+0x5cc>)
 8000e98:	0312      	lsls	r2, r2, #12
 8000e9a:	e67e      	b.n	8000b9a <__aeabi_ddiv+0xae>
 8000e9c:	2501      	movs	r5, #1
 8000e9e:	426d      	negs	r5, r5
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	1ad2      	subs	r2, r2, r3
 8000ea4:	2a38      	cmp	r2, #56	; 0x38
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_ddiv+0x3be>
 8000ea8:	e674      	b.n	8000b94 <__aeabi_ddiv+0xa8>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dc00      	bgt.n	8000eb0 <__aeabi_ddiv+0x3c4>
 8000eae:	e0bd      	b.n	800102c <__aeabi_ddiv+0x540>
 8000eb0:	211f      	movs	r1, #31
 8000eb2:	4249      	negs	r1, r1
 8000eb4:	1acb      	subs	r3, r1, r3
 8000eb6:	4641      	mov	r1, r8
 8000eb8:	40d9      	lsrs	r1, r3
 8000eba:	000b      	movs	r3, r1
 8000ebc:	2a20      	cmp	r2, #32
 8000ebe:	d004      	beq.n	8000eca <__aeabi_ddiv+0x3de>
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	4a7e      	ldr	r2, [pc, #504]	; (80010bc <__aeabi_ddiv+0x5d0>)
 8000ec4:	445a      	add	r2, fp
 8000ec6:	4091      	lsls	r1, r2
 8000ec8:	430d      	orrs	r5, r1
 8000eca:	0029      	movs	r1, r5
 8000ecc:	1e4a      	subs	r2, r1, #1
 8000ece:	4191      	sbcs	r1, r2
 8000ed0:	4319      	orrs	r1, r3
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	001d      	movs	r5, r3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	400d      	ands	r5, r1
 8000eda:	420b      	tst	r3, r1
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x3f4>
 8000ede:	e0d0      	b.n	8001082 <__aeabi_ddiv+0x596>
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	2a04      	cmp	r2, #4
 8000ee8:	d100      	bne.n	8000eec <__aeabi_ddiv+0x400>
 8000eea:	e0c7      	b.n	800107c <__aeabi_ddiv+0x590>
 8000eec:	1d0a      	adds	r2, r1, #4
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	4189      	sbcs	r1, r1
 8000ef2:	4249      	negs	r1, r1
 8000ef4:	185b      	adds	r3, r3, r1
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	021a      	lsls	r2, r3, #8
 8000efa:	d400      	bmi.n	8000efe <__aeabi_ddiv+0x412>
 8000efc:	e0be      	b.n	800107c <__aeabi_ddiv+0x590>
 8000efe:	2301      	movs	r3, #1
 8000f00:	2200      	movs	r2, #0
 8000f02:	2500      	movs	r5, #0
 8000f04:	e649      	b.n	8000b9a <__aeabi_ddiv+0xae>
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	4643      	mov	r3, r8
 8000f0a:	0312      	lsls	r2, r2, #12
 8000f0c:	4213      	tst	r3, r2
 8000f0e:	d008      	beq.n	8000f22 <__aeabi_ddiv+0x436>
 8000f10:	4214      	tst	r4, r2
 8000f12:	d106      	bne.n	8000f22 <__aeabi_ddiv+0x436>
 8000f14:	4322      	orrs	r2, r4
 8000f16:	0312      	lsls	r2, r2, #12
 8000f18:	46ba      	mov	sl, r7
 8000f1a:	000d      	movs	r5, r1
 8000f1c:	4b66      	ldr	r3, [pc, #408]	; (80010b8 <__aeabi_ddiv+0x5cc>)
 8000f1e:	0b12      	lsrs	r2, r2, #12
 8000f20:	e63b      	b.n	8000b9a <__aeabi_ddiv+0xae>
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	4643      	mov	r3, r8
 8000f26:	0312      	lsls	r2, r2, #12
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	0312      	lsls	r2, r2, #12
 8000f2c:	46b2      	mov	sl, r6
 8000f2e:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <__aeabi_ddiv+0x5cc>)
 8000f30:	0b12      	lsrs	r2, r2, #12
 8000f32:	e632      	b.n	8000b9a <__aeabi_ddiv+0xae>
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_ddiv+0x44e>
 8000f38:	e702      	b.n	8000d40 <__aeabi_ddiv+0x254>
 8000f3a:	19a6      	adds	r6, r4, r6
 8000f3c:	1e6a      	subs	r2, r5, #1
 8000f3e:	42a6      	cmp	r6, r4
 8000f40:	d200      	bcs.n	8000f44 <__aeabi_ddiv+0x458>
 8000f42:	e089      	b.n	8001058 <__aeabi_ddiv+0x56c>
 8000f44:	4286      	cmp	r6, r0
 8000f46:	d200      	bcs.n	8000f4a <__aeabi_ddiv+0x45e>
 8000f48:	e09f      	b.n	800108a <__aeabi_ddiv+0x59e>
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_ddiv+0x462>
 8000f4c:	e0af      	b.n	80010ae <__aeabi_ddiv+0x5c2>
 8000f4e:	0015      	movs	r5, r2
 8000f50:	e6f4      	b.n	8000d3c <__aeabi_ddiv+0x250>
 8000f52:	42a9      	cmp	r1, r5
 8000f54:	d900      	bls.n	8000f58 <__aeabi_ddiv+0x46c>
 8000f56:	e63c      	b.n	8000bd2 <__aeabi_ddiv+0xe6>
 8000f58:	4643      	mov	r3, r8
 8000f5a:	07de      	lsls	r6, r3, #31
 8000f5c:	0858      	lsrs	r0, r3, #1
 8000f5e:	086b      	lsrs	r3, r5, #1
 8000f60:	431e      	orrs	r6, r3
 8000f62:	07ed      	lsls	r5, r5, #31
 8000f64:	e63c      	b.n	8000be0 <__aeabi_ddiv+0xf4>
 8000f66:	f000 ffbd 	bl	8001ee4 <__clzsi2>
 8000f6a:	0001      	movs	r1, r0
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	3115      	adds	r1, #21
 8000f70:	3220      	adds	r2, #32
 8000f72:	291c      	cmp	r1, #28
 8000f74:	dc00      	bgt.n	8000f78 <__aeabi_ddiv+0x48c>
 8000f76:	e72c      	b.n	8000dd2 <__aeabi_ddiv+0x2e6>
 8000f78:	464b      	mov	r3, r9
 8000f7a:	3808      	subs	r0, #8
 8000f7c:	4083      	lsls	r3, r0
 8000f7e:	2500      	movs	r5, #0
 8000f80:	4698      	mov	r8, r3
 8000f82:	e732      	b.n	8000dea <__aeabi_ddiv+0x2fe>
 8000f84:	f000 ffae 	bl	8001ee4 <__clzsi2>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	3215      	adds	r2, #21
 8000f8e:	3020      	adds	r0, #32
 8000f90:	2a1c      	cmp	r2, #28
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x4aa>
 8000f94:	e6ff      	b.n	8000d96 <__aeabi_ddiv+0x2aa>
 8000f96:	4654      	mov	r4, sl
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	409c      	lsls	r4, r3
 8000f9e:	e705      	b.n	8000dac <__aeabi_ddiv+0x2c0>
 8000fa0:	1936      	adds	r6, r6, r4
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	42b4      	cmp	r4, r6
 8000fa6:	d900      	bls.n	8000faa <__aeabi_ddiv+0x4be>
 8000fa8:	e6a6      	b.n	8000cf8 <__aeabi_ddiv+0x20c>
 8000faa:	42b2      	cmp	r2, r6
 8000fac:	d800      	bhi.n	8000fb0 <__aeabi_ddiv+0x4c4>
 8000fae:	e6a3      	b.n	8000cf8 <__aeabi_ddiv+0x20c>
 8000fb0:	1e83      	subs	r3, r0, #2
 8000fb2:	1936      	adds	r6, r6, r4
 8000fb4:	e6a0      	b.n	8000cf8 <__aeabi_ddiv+0x20c>
 8000fb6:	1909      	adds	r1, r1, r4
 8000fb8:	3d01      	subs	r5, #1
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d900      	bls.n	8000fc0 <__aeabi_ddiv+0x4d4>
 8000fbe:	e68d      	b.n	8000cdc <__aeabi_ddiv+0x1f0>
 8000fc0:	428a      	cmp	r2, r1
 8000fc2:	d800      	bhi.n	8000fc6 <__aeabi_ddiv+0x4da>
 8000fc4:	e68a      	b.n	8000cdc <__aeabi_ddiv+0x1f0>
 8000fc6:	1e85      	subs	r5, r0, #2
 8000fc8:	1909      	adds	r1, r1, r4
 8000fca:	e687      	b.n	8000cdc <__aeabi_ddiv+0x1f0>
 8000fcc:	220f      	movs	r2, #15
 8000fce:	402a      	ands	r2, r5
 8000fd0:	2a04      	cmp	r2, #4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x4ea>
 8000fd4:	e6bc      	b.n	8000d50 <__aeabi_ddiv+0x264>
 8000fd6:	1d29      	adds	r1, r5, #4
 8000fd8:	42a9      	cmp	r1, r5
 8000fda:	41ad      	sbcs	r5, r5
 8000fdc:	426d      	negs	r5, r5
 8000fde:	08c9      	lsrs	r1, r1, #3
 8000fe0:	44a8      	add	r8, r5
 8000fe2:	e6b6      	b.n	8000d52 <__aeabi_ddiv+0x266>
 8000fe4:	42af      	cmp	r7, r5
 8000fe6:	d900      	bls.n	8000fea <__aeabi_ddiv+0x4fe>
 8000fe8:	e662      	b.n	8000cb0 <__aeabi_ddiv+0x1c4>
 8000fea:	4281      	cmp	r1, r0
 8000fec:	d804      	bhi.n	8000ff8 <__aeabi_ddiv+0x50c>
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_ddiv+0x506>
 8000ff0:	e65e      	b.n	8000cb0 <__aeabi_ddiv+0x1c4>
 8000ff2:	42ae      	cmp	r6, r5
 8000ff4:	d800      	bhi.n	8000ff8 <__aeabi_ddiv+0x50c>
 8000ff6:	e65b      	b.n	8000cb0 <__aeabi_ddiv+0x1c4>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	44e0      	add	r8, ip
 8001002:	469c      	mov	ip, r3
 8001004:	4465      	add	r5, ip
 8001006:	429d      	cmp	r5, r3
 8001008:	419b      	sbcs	r3, r3
 800100a:	425b      	negs	r3, r3
 800100c:	191b      	adds	r3, r3, r4
 800100e:	18c0      	adds	r0, r0, r3
 8001010:	e64f      	b.n	8000cb2 <__aeabi_ddiv+0x1c6>
 8001012:	42b2      	cmp	r2, r6
 8001014:	d800      	bhi.n	8001018 <__aeabi_ddiv+0x52c>
 8001016:	e612      	b.n	8000c3e <__aeabi_ddiv+0x152>
 8001018:	1e83      	subs	r3, r0, #2
 800101a:	1936      	adds	r6, r6, r4
 800101c:	e60f      	b.n	8000c3e <__aeabi_ddiv+0x152>
 800101e:	428a      	cmp	r2, r1
 8001020:	d800      	bhi.n	8001024 <__aeabi_ddiv+0x538>
 8001022:	e5fa      	b.n	8000c1a <__aeabi_ddiv+0x12e>
 8001024:	1e83      	subs	r3, r0, #2
 8001026:	4698      	mov	r8, r3
 8001028:	1909      	adds	r1, r1, r4
 800102a:	e5f6      	b.n	8000c1a <__aeabi_ddiv+0x12e>
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <__aeabi_ddiv+0x5d4>)
 800102e:	0028      	movs	r0, r5
 8001030:	445b      	add	r3, fp
 8001032:	4641      	mov	r1, r8
 8001034:	409d      	lsls	r5, r3
 8001036:	4099      	lsls	r1, r3
 8001038:	40d0      	lsrs	r0, r2
 800103a:	1e6b      	subs	r3, r5, #1
 800103c:	419d      	sbcs	r5, r3
 800103e:	4643      	mov	r3, r8
 8001040:	4301      	orrs	r1, r0
 8001042:	4329      	orrs	r1, r5
 8001044:	40d3      	lsrs	r3, r2
 8001046:	074a      	lsls	r2, r1, #29
 8001048:	d100      	bne.n	800104c <__aeabi_ddiv+0x560>
 800104a:	e755      	b.n	8000ef8 <__aeabi_ddiv+0x40c>
 800104c:	220f      	movs	r2, #15
 800104e:	400a      	ands	r2, r1
 8001050:	2a04      	cmp	r2, #4
 8001052:	d000      	beq.n	8001056 <__aeabi_ddiv+0x56a>
 8001054:	e74a      	b.n	8000eec <__aeabi_ddiv+0x400>
 8001056:	e74f      	b.n	8000ef8 <__aeabi_ddiv+0x40c>
 8001058:	0015      	movs	r5, r2
 800105a:	4286      	cmp	r6, r0
 800105c:	d000      	beq.n	8001060 <__aeabi_ddiv+0x574>
 800105e:	e66d      	b.n	8000d3c <__aeabi_ddiv+0x250>
 8001060:	9a00      	ldr	r2, [sp, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d000      	beq.n	8001068 <__aeabi_ddiv+0x57c>
 8001066:	e669      	b.n	8000d3c <__aeabi_ddiv+0x250>
 8001068:	e66a      	b.n	8000d40 <__aeabi_ddiv+0x254>
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <__aeabi_ddiv+0x5d8>)
 800106c:	445b      	add	r3, fp
 800106e:	2b00      	cmp	r3, #0
 8001070:	dc00      	bgt.n	8001074 <__aeabi_ddiv+0x588>
 8001072:	e713      	b.n	8000e9c <__aeabi_ddiv+0x3b0>
 8001074:	2501      	movs	r5, #1
 8001076:	2100      	movs	r1, #0
 8001078:	44a8      	add	r8, r5
 800107a:	e66a      	b.n	8000d52 <__aeabi_ddiv+0x266>
 800107c:	075d      	lsls	r5, r3, #29
 800107e:	025b      	lsls	r3, r3, #9
 8001080:	0b1a      	lsrs	r2, r3, #12
 8001082:	08c9      	lsrs	r1, r1, #3
 8001084:	2300      	movs	r3, #0
 8001086:	430d      	orrs	r5, r1
 8001088:	e587      	b.n	8000b9a <__aeabi_ddiv+0xae>
 800108a:	9900      	ldr	r1, [sp, #0]
 800108c:	3d02      	subs	r5, #2
 800108e:	004a      	lsls	r2, r1, #1
 8001090:	428a      	cmp	r2, r1
 8001092:	41bf      	sbcs	r7, r7
 8001094:	427f      	negs	r7, r7
 8001096:	193f      	adds	r7, r7, r4
 8001098:	19f6      	adds	r6, r6, r7
 800109a:	9200      	str	r2, [sp, #0]
 800109c:	e7dd      	b.n	800105a <__aeabi_ddiv+0x56e>
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	4643      	mov	r3, r8
 80010a2:	0312      	lsls	r2, r2, #12
 80010a4:	431a      	orrs	r2, r3
 80010a6:	0312      	lsls	r2, r2, #12
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <__aeabi_ddiv+0x5cc>)
 80010aa:	0b12      	lsrs	r2, r2, #12
 80010ac:	e575      	b.n	8000b9a <__aeabi_ddiv+0xae>
 80010ae:	9900      	ldr	r1, [sp, #0]
 80010b0:	4299      	cmp	r1, r3
 80010b2:	d3ea      	bcc.n	800108a <__aeabi_ddiv+0x59e>
 80010b4:	0015      	movs	r5, r2
 80010b6:	e7d3      	b.n	8001060 <__aeabi_ddiv+0x574>
 80010b8:	000007ff 	.word	0x000007ff
 80010bc:	0000043e 	.word	0x0000043e
 80010c0:	0000041e 	.word	0x0000041e
 80010c4:	000003ff 	.word	0x000003ff

080010c8 <__aeabi_dmul>:
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	4645      	mov	r5, r8
 80010cc:	46de      	mov	lr, fp
 80010ce:	4657      	mov	r7, sl
 80010d0:	464e      	mov	r6, r9
 80010d2:	b5e0      	push	{r5, r6, r7, lr}
 80010d4:	001f      	movs	r7, r3
 80010d6:	030b      	lsls	r3, r1, #12
 80010d8:	0b1b      	lsrs	r3, r3, #12
 80010da:	469b      	mov	fp, r3
 80010dc:	004d      	lsls	r5, r1, #1
 80010de:	0fcb      	lsrs	r3, r1, #31
 80010e0:	0004      	movs	r4, r0
 80010e2:	4691      	mov	r9, r2
 80010e4:	4698      	mov	r8, r3
 80010e6:	b087      	sub	sp, #28
 80010e8:	0d6d      	lsrs	r5, r5, #21
 80010ea:	d100      	bne.n	80010ee <__aeabi_dmul+0x26>
 80010ec:	e1cd      	b.n	800148a <__aeabi_dmul+0x3c2>
 80010ee:	4bce      	ldr	r3, [pc, #824]	; (8001428 <__aeabi_dmul+0x360>)
 80010f0:	429d      	cmp	r5, r3
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dmul+0x2e>
 80010f4:	e1e9      	b.n	80014ca <__aeabi_dmul+0x402>
 80010f6:	465a      	mov	r2, fp
 80010f8:	0f43      	lsrs	r3, r0, #29
 80010fa:	00d2      	lsls	r2, r2, #3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	0412      	lsls	r2, r2, #16
 8001102:	431a      	orrs	r2, r3
 8001104:	00c3      	lsls	r3, r0, #3
 8001106:	469a      	mov	sl, r3
 8001108:	4bc8      	ldr	r3, [pc, #800]	; (800142c <__aeabi_dmul+0x364>)
 800110a:	4693      	mov	fp, r2
 800110c:	469c      	mov	ip, r3
 800110e:	2300      	movs	r3, #0
 8001110:	2600      	movs	r6, #0
 8001112:	4465      	add	r5, ip
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	033c      	lsls	r4, r7, #12
 8001118:	007b      	lsls	r3, r7, #1
 800111a:	4648      	mov	r0, r9
 800111c:	0b24      	lsrs	r4, r4, #12
 800111e:	0d5b      	lsrs	r3, r3, #21
 8001120:	0fff      	lsrs	r7, r7, #31
 8001122:	2b00      	cmp	r3, #0
 8001124:	d100      	bne.n	8001128 <__aeabi_dmul+0x60>
 8001126:	e189      	b.n	800143c <__aeabi_dmul+0x374>
 8001128:	4abf      	ldr	r2, [pc, #764]	; (8001428 <__aeabi_dmul+0x360>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <__aeabi_dmul+0x9a>
 800112e:	0f42      	lsrs	r2, r0, #29
 8001130:	00e4      	lsls	r4, r4, #3
 8001132:	4322      	orrs	r2, r4
 8001134:	2480      	movs	r4, #128	; 0x80
 8001136:	0424      	lsls	r4, r4, #16
 8001138:	4314      	orrs	r4, r2
 800113a:	4abc      	ldr	r2, [pc, #752]	; (800142c <__aeabi_dmul+0x364>)
 800113c:	2100      	movs	r1, #0
 800113e:	4694      	mov	ip, r2
 8001140:	4642      	mov	r2, r8
 8001142:	4463      	add	r3, ip
 8001144:	195b      	adds	r3, r3, r5
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	9b01      	ldr	r3, [sp, #4]
 800114a:	407a      	eors	r2, r7
 800114c:	3301      	adds	r3, #1
 800114e:	00c0      	lsls	r0, r0, #3
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2e0a      	cmp	r6, #10
 8001156:	dd1c      	ble.n	8001192 <__aeabi_dmul+0xca>
 8001158:	003a      	movs	r2, r7
 800115a:	2e0b      	cmp	r6, #11
 800115c:	d05e      	beq.n	800121c <__aeabi_dmul+0x154>
 800115e:	4647      	mov	r7, r8
 8001160:	e056      	b.n	8001210 <__aeabi_dmul+0x148>
 8001162:	4649      	mov	r1, r9
 8001164:	4bb0      	ldr	r3, [pc, #704]	; (8001428 <__aeabi_dmul+0x360>)
 8001166:	4321      	orrs	r1, r4
 8001168:	18eb      	adds	r3, r5, r3
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	2900      	cmp	r1, #0
 800116e:	d12a      	bne.n	80011c6 <__aeabi_dmul+0xfe>
 8001170:	2080      	movs	r0, #128	; 0x80
 8001172:	2202      	movs	r2, #2
 8001174:	0100      	lsls	r0, r0, #4
 8001176:	002b      	movs	r3, r5
 8001178:	4684      	mov	ip, r0
 800117a:	4316      	orrs	r6, r2
 800117c:	4642      	mov	r2, r8
 800117e:	4463      	add	r3, ip
 8001180:	407a      	eors	r2, r7
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2e0a      	cmp	r6, #10
 8001188:	dd00      	ble.n	800118c <__aeabi_dmul+0xc4>
 800118a:	e231      	b.n	80015f0 <__aeabi_dmul+0x528>
 800118c:	2000      	movs	r0, #0
 800118e:	2400      	movs	r4, #0
 8001190:	2102      	movs	r1, #2
 8001192:	2e02      	cmp	r6, #2
 8001194:	dc26      	bgt.n	80011e4 <__aeabi_dmul+0x11c>
 8001196:	3e01      	subs	r6, #1
 8001198:	2e01      	cmp	r6, #1
 800119a:	d852      	bhi.n	8001242 <__aeabi_dmul+0x17a>
 800119c:	2902      	cmp	r1, #2
 800119e:	d04c      	beq.n	800123a <__aeabi_dmul+0x172>
 80011a0:	2901      	cmp	r1, #1
 80011a2:	d000      	beq.n	80011a6 <__aeabi_dmul+0xde>
 80011a4:	e118      	b.n	80013d8 <__aeabi_dmul+0x310>
 80011a6:	2300      	movs	r3, #0
 80011a8:	2400      	movs	r4, #0
 80011aa:	2500      	movs	r5, #0
 80011ac:	051b      	lsls	r3, r3, #20
 80011ae:	4323      	orrs	r3, r4
 80011b0:	07d2      	lsls	r2, r2, #31
 80011b2:	4313      	orrs	r3, r2
 80011b4:	0028      	movs	r0, r5
 80011b6:	0019      	movs	r1, r3
 80011b8:	b007      	add	sp, #28
 80011ba:	bcf0      	pop	{r4, r5, r6, r7}
 80011bc:	46bb      	mov	fp, r7
 80011be:	46b2      	mov	sl, r6
 80011c0:	46a9      	mov	r9, r5
 80011c2:	46a0      	mov	r8, r4
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	2203      	movs	r2, #3
 80011ca:	0109      	lsls	r1, r1, #4
 80011cc:	002b      	movs	r3, r5
 80011ce:	468c      	mov	ip, r1
 80011d0:	4316      	orrs	r6, r2
 80011d2:	4642      	mov	r2, r8
 80011d4:	4463      	add	r3, ip
 80011d6:	407a      	eors	r2, r7
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2e0a      	cmp	r6, #10
 80011de:	dd00      	ble.n	80011e2 <__aeabi_dmul+0x11a>
 80011e0:	e228      	b.n	8001634 <__aeabi_dmul+0x56c>
 80011e2:	2103      	movs	r1, #3
 80011e4:	2501      	movs	r5, #1
 80011e6:	40b5      	lsls	r5, r6
 80011e8:	46ac      	mov	ip, r5
 80011ea:	26a6      	movs	r6, #166	; 0xa6
 80011ec:	4663      	mov	r3, ip
 80011ee:	00f6      	lsls	r6, r6, #3
 80011f0:	4035      	ands	r5, r6
 80011f2:	4233      	tst	r3, r6
 80011f4:	d10b      	bne.n	800120e <__aeabi_dmul+0x146>
 80011f6:	2690      	movs	r6, #144	; 0x90
 80011f8:	00b6      	lsls	r6, r6, #2
 80011fa:	4233      	tst	r3, r6
 80011fc:	d118      	bne.n	8001230 <__aeabi_dmul+0x168>
 80011fe:	3eb9      	subs	r6, #185	; 0xb9
 8001200:	3eff      	subs	r6, #255	; 0xff
 8001202:	421e      	tst	r6, r3
 8001204:	d01d      	beq.n	8001242 <__aeabi_dmul+0x17a>
 8001206:	46a3      	mov	fp, r4
 8001208:	4682      	mov	sl, r0
 800120a:	9100      	str	r1, [sp, #0]
 800120c:	e000      	b.n	8001210 <__aeabi_dmul+0x148>
 800120e:	0017      	movs	r7, r2
 8001210:	9900      	ldr	r1, [sp, #0]
 8001212:	003a      	movs	r2, r7
 8001214:	2902      	cmp	r1, #2
 8001216:	d010      	beq.n	800123a <__aeabi_dmul+0x172>
 8001218:	465c      	mov	r4, fp
 800121a:	4650      	mov	r0, sl
 800121c:	2903      	cmp	r1, #3
 800121e:	d1bf      	bne.n	80011a0 <__aeabi_dmul+0xd8>
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	031b      	lsls	r3, r3, #12
 8001224:	431c      	orrs	r4, r3
 8001226:	0324      	lsls	r4, r4, #12
 8001228:	0005      	movs	r5, r0
 800122a:	4b7f      	ldr	r3, [pc, #508]	; (8001428 <__aeabi_dmul+0x360>)
 800122c:	0b24      	lsrs	r4, r4, #12
 800122e:	e7bd      	b.n	80011ac <__aeabi_dmul+0xe4>
 8001230:	2480      	movs	r4, #128	; 0x80
 8001232:	2200      	movs	r2, #0
 8001234:	4b7c      	ldr	r3, [pc, #496]	; (8001428 <__aeabi_dmul+0x360>)
 8001236:	0324      	lsls	r4, r4, #12
 8001238:	e7b8      	b.n	80011ac <__aeabi_dmul+0xe4>
 800123a:	2400      	movs	r4, #0
 800123c:	2500      	movs	r5, #0
 800123e:	4b7a      	ldr	r3, [pc, #488]	; (8001428 <__aeabi_dmul+0x360>)
 8001240:	e7b4      	b.n	80011ac <__aeabi_dmul+0xe4>
 8001242:	4653      	mov	r3, sl
 8001244:	041e      	lsls	r6, r3, #16
 8001246:	0c36      	lsrs	r6, r6, #16
 8001248:	0c1f      	lsrs	r7, r3, #16
 800124a:	0033      	movs	r3, r6
 800124c:	0c01      	lsrs	r1, r0, #16
 800124e:	0400      	lsls	r0, r0, #16
 8001250:	0c00      	lsrs	r0, r0, #16
 8001252:	4343      	muls	r3, r0
 8001254:	4698      	mov	r8, r3
 8001256:	0003      	movs	r3, r0
 8001258:	437b      	muls	r3, r7
 800125a:	4699      	mov	r9, r3
 800125c:	0033      	movs	r3, r6
 800125e:	434b      	muls	r3, r1
 8001260:	469c      	mov	ip, r3
 8001262:	4643      	mov	r3, r8
 8001264:	000d      	movs	r5, r1
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	469a      	mov	sl, r3
 800126a:	437d      	muls	r5, r7
 800126c:	44cc      	add	ip, r9
 800126e:	44d4      	add	ip, sl
 8001270:	9500      	str	r5, [sp, #0]
 8001272:	45e1      	cmp	r9, ip
 8001274:	d904      	bls.n	8001280 <__aeabi_dmul+0x1b8>
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	025b      	lsls	r3, r3, #9
 800127a:	4699      	mov	r9, r3
 800127c:	444d      	add	r5, r9
 800127e:	9500      	str	r5, [sp, #0]
 8001280:	4663      	mov	r3, ip
 8001282:	0c1b      	lsrs	r3, r3, #16
 8001284:	001d      	movs	r5, r3
 8001286:	4663      	mov	r3, ip
 8001288:	041b      	lsls	r3, r3, #16
 800128a:	469c      	mov	ip, r3
 800128c:	4643      	mov	r3, r8
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	0c1b      	lsrs	r3, r3, #16
 8001292:	4698      	mov	r8, r3
 8001294:	4663      	mov	r3, ip
 8001296:	4443      	add	r3, r8
 8001298:	9303      	str	r3, [sp, #12]
 800129a:	0c23      	lsrs	r3, r4, #16
 800129c:	4698      	mov	r8, r3
 800129e:	0033      	movs	r3, r6
 80012a0:	0424      	lsls	r4, r4, #16
 80012a2:	0c24      	lsrs	r4, r4, #16
 80012a4:	4363      	muls	r3, r4
 80012a6:	469c      	mov	ip, r3
 80012a8:	0023      	movs	r3, r4
 80012aa:	437b      	muls	r3, r7
 80012ac:	4699      	mov	r9, r3
 80012ae:	4643      	mov	r3, r8
 80012b0:	435e      	muls	r6, r3
 80012b2:	435f      	muls	r7, r3
 80012b4:	444e      	add	r6, r9
 80012b6:	4663      	mov	r3, ip
 80012b8:	46b2      	mov	sl, r6
 80012ba:	0c1e      	lsrs	r6, r3, #16
 80012bc:	4456      	add	r6, sl
 80012be:	45b1      	cmp	r9, r6
 80012c0:	d903      	bls.n	80012ca <__aeabi_dmul+0x202>
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	025b      	lsls	r3, r3, #9
 80012c6:	4699      	mov	r9, r3
 80012c8:	444f      	add	r7, r9
 80012ca:	0c33      	lsrs	r3, r6, #16
 80012cc:	4699      	mov	r9, r3
 80012ce:	003b      	movs	r3, r7
 80012d0:	444b      	add	r3, r9
 80012d2:	9305      	str	r3, [sp, #20]
 80012d4:	4663      	mov	r3, ip
 80012d6:	46ac      	mov	ip, r5
 80012d8:	041f      	lsls	r7, r3, #16
 80012da:	0c3f      	lsrs	r7, r7, #16
 80012dc:	0436      	lsls	r6, r6, #16
 80012de:	19f6      	adds	r6, r6, r7
 80012e0:	44b4      	add	ip, r6
 80012e2:	4663      	mov	r3, ip
 80012e4:	9304      	str	r3, [sp, #16]
 80012e6:	465b      	mov	r3, fp
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	469c      	mov	ip, r3
 80012ec:	465b      	mov	r3, fp
 80012ee:	041f      	lsls	r7, r3, #16
 80012f0:	0c3f      	lsrs	r7, r7, #16
 80012f2:	003b      	movs	r3, r7
 80012f4:	4343      	muls	r3, r0
 80012f6:	4699      	mov	r9, r3
 80012f8:	4663      	mov	r3, ip
 80012fa:	4343      	muls	r3, r0
 80012fc:	469a      	mov	sl, r3
 80012fe:	464b      	mov	r3, r9
 8001300:	4660      	mov	r0, ip
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	469b      	mov	fp, r3
 8001306:	4348      	muls	r0, r1
 8001308:	4379      	muls	r1, r7
 800130a:	4451      	add	r1, sl
 800130c:	4459      	add	r1, fp
 800130e:	458a      	cmp	sl, r1
 8001310:	d903      	bls.n	800131a <__aeabi_dmul+0x252>
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	025b      	lsls	r3, r3, #9
 8001316:	469a      	mov	sl, r3
 8001318:	4450      	add	r0, sl
 800131a:	0c0b      	lsrs	r3, r1, #16
 800131c:	469a      	mov	sl, r3
 800131e:	464b      	mov	r3, r9
 8001320:	041b      	lsls	r3, r3, #16
 8001322:	0c1b      	lsrs	r3, r3, #16
 8001324:	4699      	mov	r9, r3
 8001326:	003b      	movs	r3, r7
 8001328:	4363      	muls	r3, r4
 800132a:	0409      	lsls	r1, r1, #16
 800132c:	4645      	mov	r5, r8
 800132e:	4449      	add	r1, r9
 8001330:	4699      	mov	r9, r3
 8001332:	4663      	mov	r3, ip
 8001334:	435c      	muls	r4, r3
 8001336:	436b      	muls	r3, r5
 8001338:	469c      	mov	ip, r3
 800133a:	464b      	mov	r3, r9
 800133c:	0c1b      	lsrs	r3, r3, #16
 800133e:	4698      	mov	r8, r3
 8001340:	436f      	muls	r7, r5
 8001342:	193f      	adds	r7, r7, r4
 8001344:	4447      	add	r7, r8
 8001346:	4450      	add	r0, sl
 8001348:	42bc      	cmp	r4, r7
 800134a:	d903      	bls.n	8001354 <__aeabi_dmul+0x28c>
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	4698      	mov	r8, r3
 8001352:	44c4      	add	ip, r8
 8001354:	9b04      	ldr	r3, [sp, #16]
 8001356:	9d00      	ldr	r5, [sp, #0]
 8001358:	4698      	mov	r8, r3
 800135a:	4445      	add	r5, r8
 800135c:	42b5      	cmp	r5, r6
 800135e:	41b6      	sbcs	r6, r6
 8001360:	4273      	negs	r3, r6
 8001362:	4698      	mov	r8, r3
 8001364:	464b      	mov	r3, r9
 8001366:	041e      	lsls	r6, r3, #16
 8001368:	9b05      	ldr	r3, [sp, #20]
 800136a:	043c      	lsls	r4, r7, #16
 800136c:	4699      	mov	r9, r3
 800136e:	0c36      	lsrs	r6, r6, #16
 8001370:	19a4      	adds	r4, r4, r6
 8001372:	444c      	add	r4, r9
 8001374:	46a1      	mov	r9, r4
 8001376:	4683      	mov	fp, r0
 8001378:	186e      	adds	r6, r5, r1
 800137a:	44c1      	add	r9, r8
 800137c:	428e      	cmp	r6, r1
 800137e:	4189      	sbcs	r1, r1
 8001380:	44cb      	add	fp, r9
 8001382:	465d      	mov	r5, fp
 8001384:	4249      	negs	r1, r1
 8001386:	186d      	adds	r5, r5, r1
 8001388:	429c      	cmp	r4, r3
 800138a:	41a4      	sbcs	r4, r4
 800138c:	45c1      	cmp	r9, r8
 800138e:	419b      	sbcs	r3, r3
 8001390:	4583      	cmp	fp, r0
 8001392:	4180      	sbcs	r0, r0
 8001394:	428d      	cmp	r5, r1
 8001396:	4189      	sbcs	r1, r1
 8001398:	425b      	negs	r3, r3
 800139a:	4264      	negs	r4, r4
 800139c:	431c      	orrs	r4, r3
 800139e:	4240      	negs	r0, r0
 80013a0:	9b03      	ldr	r3, [sp, #12]
 80013a2:	4249      	negs	r1, r1
 80013a4:	4301      	orrs	r1, r0
 80013a6:	0270      	lsls	r0, r6, #9
 80013a8:	0c3f      	lsrs	r7, r7, #16
 80013aa:	4318      	orrs	r0, r3
 80013ac:	19e4      	adds	r4, r4, r7
 80013ae:	1e47      	subs	r7, r0, #1
 80013b0:	41b8      	sbcs	r0, r7
 80013b2:	1864      	adds	r4, r4, r1
 80013b4:	4464      	add	r4, ip
 80013b6:	0df6      	lsrs	r6, r6, #23
 80013b8:	0261      	lsls	r1, r4, #9
 80013ba:	4330      	orrs	r0, r6
 80013bc:	0dec      	lsrs	r4, r5, #23
 80013be:	026e      	lsls	r6, r5, #9
 80013c0:	430c      	orrs	r4, r1
 80013c2:	4330      	orrs	r0, r6
 80013c4:	01c9      	lsls	r1, r1, #7
 80013c6:	d400      	bmi.n	80013ca <__aeabi_dmul+0x302>
 80013c8:	e0f1      	b.n	80015ae <__aeabi_dmul+0x4e6>
 80013ca:	2101      	movs	r1, #1
 80013cc:	0843      	lsrs	r3, r0, #1
 80013ce:	4001      	ands	r1, r0
 80013d0:	430b      	orrs	r3, r1
 80013d2:	07e0      	lsls	r0, r4, #31
 80013d4:	4318      	orrs	r0, r3
 80013d6:	0864      	lsrs	r4, r4, #1
 80013d8:	4915      	ldr	r1, [pc, #84]	; (8001430 <__aeabi_dmul+0x368>)
 80013da:	9b02      	ldr	r3, [sp, #8]
 80013dc:	468c      	mov	ip, r1
 80013de:	4463      	add	r3, ip
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dc00      	bgt.n	80013e6 <__aeabi_dmul+0x31e>
 80013e4:	e097      	b.n	8001516 <__aeabi_dmul+0x44e>
 80013e6:	0741      	lsls	r1, r0, #29
 80013e8:	d009      	beq.n	80013fe <__aeabi_dmul+0x336>
 80013ea:	210f      	movs	r1, #15
 80013ec:	4001      	ands	r1, r0
 80013ee:	2904      	cmp	r1, #4
 80013f0:	d005      	beq.n	80013fe <__aeabi_dmul+0x336>
 80013f2:	1d01      	adds	r1, r0, #4
 80013f4:	4281      	cmp	r1, r0
 80013f6:	4180      	sbcs	r0, r0
 80013f8:	4240      	negs	r0, r0
 80013fa:	1824      	adds	r4, r4, r0
 80013fc:	0008      	movs	r0, r1
 80013fe:	01e1      	lsls	r1, r4, #7
 8001400:	d506      	bpl.n	8001410 <__aeabi_dmul+0x348>
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	00c9      	lsls	r1, r1, #3
 8001406:	468c      	mov	ip, r1
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <__aeabi_dmul+0x36c>)
 800140a:	401c      	ands	r4, r3
 800140c:	9b02      	ldr	r3, [sp, #8]
 800140e:	4463      	add	r3, ip
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <__aeabi_dmul+0x370>)
 8001412:	428b      	cmp	r3, r1
 8001414:	dd00      	ble.n	8001418 <__aeabi_dmul+0x350>
 8001416:	e710      	b.n	800123a <__aeabi_dmul+0x172>
 8001418:	0761      	lsls	r1, r4, #29
 800141a:	08c5      	lsrs	r5, r0, #3
 800141c:	0264      	lsls	r4, r4, #9
 800141e:	055b      	lsls	r3, r3, #21
 8001420:	430d      	orrs	r5, r1
 8001422:	0b24      	lsrs	r4, r4, #12
 8001424:	0d5b      	lsrs	r3, r3, #21
 8001426:	e6c1      	b.n	80011ac <__aeabi_dmul+0xe4>
 8001428:	000007ff 	.word	0x000007ff
 800142c:	fffffc01 	.word	0xfffffc01
 8001430:	000003ff 	.word	0x000003ff
 8001434:	feffffff 	.word	0xfeffffff
 8001438:	000007fe 	.word	0x000007fe
 800143c:	464b      	mov	r3, r9
 800143e:	4323      	orrs	r3, r4
 8001440:	d059      	beq.n	80014f6 <__aeabi_dmul+0x42e>
 8001442:	2c00      	cmp	r4, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_dmul+0x380>
 8001446:	e0a3      	b.n	8001590 <__aeabi_dmul+0x4c8>
 8001448:	0020      	movs	r0, r4
 800144a:	f000 fd4b 	bl	8001ee4 <__clzsi2>
 800144e:	0001      	movs	r1, r0
 8001450:	0003      	movs	r3, r0
 8001452:	390b      	subs	r1, #11
 8001454:	221d      	movs	r2, #29
 8001456:	1a52      	subs	r2, r2, r1
 8001458:	4649      	mov	r1, r9
 800145a:	0018      	movs	r0, r3
 800145c:	40d1      	lsrs	r1, r2
 800145e:	464a      	mov	r2, r9
 8001460:	3808      	subs	r0, #8
 8001462:	4082      	lsls	r2, r0
 8001464:	4084      	lsls	r4, r0
 8001466:	0010      	movs	r0, r2
 8001468:	430c      	orrs	r4, r1
 800146a:	4a74      	ldr	r2, [pc, #464]	; (800163c <__aeabi_dmul+0x574>)
 800146c:	1aeb      	subs	r3, r5, r3
 800146e:	4694      	mov	ip, r2
 8001470:	4642      	mov	r2, r8
 8001472:	4463      	add	r3, ip
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	9b01      	ldr	r3, [sp, #4]
 8001478:	407a      	eors	r2, r7
 800147a:	3301      	adds	r3, #1
 800147c:	2100      	movs	r1, #0
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2e0a      	cmp	r6, #10
 8001484:	dd00      	ble.n	8001488 <__aeabi_dmul+0x3c0>
 8001486:	e667      	b.n	8001158 <__aeabi_dmul+0x90>
 8001488:	e683      	b.n	8001192 <__aeabi_dmul+0xca>
 800148a:	465b      	mov	r3, fp
 800148c:	4303      	orrs	r3, r0
 800148e:	469a      	mov	sl, r3
 8001490:	d02a      	beq.n	80014e8 <__aeabi_dmul+0x420>
 8001492:	465b      	mov	r3, fp
 8001494:	2b00      	cmp	r3, #0
 8001496:	d06d      	beq.n	8001574 <__aeabi_dmul+0x4ac>
 8001498:	4658      	mov	r0, fp
 800149a:	f000 fd23 	bl	8001ee4 <__clzsi2>
 800149e:	0001      	movs	r1, r0
 80014a0:	0003      	movs	r3, r0
 80014a2:	390b      	subs	r1, #11
 80014a4:	221d      	movs	r2, #29
 80014a6:	1a52      	subs	r2, r2, r1
 80014a8:	0021      	movs	r1, r4
 80014aa:	0018      	movs	r0, r3
 80014ac:	465d      	mov	r5, fp
 80014ae:	40d1      	lsrs	r1, r2
 80014b0:	3808      	subs	r0, #8
 80014b2:	4085      	lsls	r5, r0
 80014b4:	000a      	movs	r2, r1
 80014b6:	4084      	lsls	r4, r0
 80014b8:	432a      	orrs	r2, r5
 80014ba:	4693      	mov	fp, r2
 80014bc:	46a2      	mov	sl, r4
 80014be:	4d5f      	ldr	r5, [pc, #380]	; (800163c <__aeabi_dmul+0x574>)
 80014c0:	2600      	movs	r6, #0
 80014c2:	1aed      	subs	r5, r5, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	e625      	b.n	8001116 <__aeabi_dmul+0x4e>
 80014ca:	465b      	mov	r3, fp
 80014cc:	4303      	orrs	r3, r0
 80014ce:	469a      	mov	sl, r3
 80014d0:	d105      	bne.n	80014de <__aeabi_dmul+0x416>
 80014d2:	2300      	movs	r3, #0
 80014d4:	469b      	mov	fp, r3
 80014d6:	3302      	adds	r3, #2
 80014d8:	2608      	movs	r6, #8
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	e61b      	b.n	8001116 <__aeabi_dmul+0x4e>
 80014de:	2303      	movs	r3, #3
 80014e0:	4682      	mov	sl, r0
 80014e2:	260c      	movs	r6, #12
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	e616      	b.n	8001116 <__aeabi_dmul+0x4e>
 80014e8:	2300      	movs	r3, #0
 80014ea:	469b      	mov	fp, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	2604      	movs	r6, #4
 80014f0:	2500      	movs	r5, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	e60f      	b.n	8001116 <__aeabi_dmul+0x4e>
 80014f6:	4642      	mov	r2, r8
 80014f8:	3301      	adds	r3, #1
 80014fa:	9501      	str	r5, [sp, #4]
 80014fc:	431e      	orrs	r6, r3
 80014fe:	9b01      	ldr	r3, [sp, #4]
 8001500:	407a      	eors	r2, r7
 8001502:	3301      	adds	r3, #1
 8001504:	2400      	movs	r4, #0
 8001506:	2000      	movs	r0, #0
 8001508:	2101      	movs	r1, #1
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	2e0a      	cmp	r6, #10
 8001510:	dd00      	ble.n	8001514 <__aeabi_dmul+0x44c>
 8001512:	e621      	b.n	8001158 <__aeabi_dmul+0x90>
 8001514:	e63d      	b.n	8001192 <__aeabi_dmul+0xca>
 8001516:	2101      	movs	r1, #1
 8001518:	1ac9      	subs	r1, r1, r3
 800151a:	2938      	cmp	r1, #56	; 0x38
 800151c:	dd00      	ble.n	8001520 <__aeabi_dmul+0x458>
 800151e:	e642      	b.n	80011a6 <__aeabi_dmul+0xde>
 8001520:	291f      	cmp	r1, #31
 8001522:	dd47      	ble.n	80015b4 <__aeabi_dmul+0x4ec>
 8001524:	261f      	movs	r6, #31
 8001526:	0025      	movs	r5, r4
 8001528:	4276      	negs	r6, r6
 800152a:	1af3      	subs	r3, r6, r3
 800152c:	40dd      	lsrs	r5, r3
 800152e:	002b      	movs	r3, r5
 8001530:	2920      	cmp	r1, #32
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x478>
 8001534:	4942      	ldr	r1, [pc, #264]	; (8001640 <__aeabi_dmul+0x578>)
 8001536:	9d02      	ldr	r5, [sp, #8]
 8001538:	468c      	mov	ip, r1
 800153a:	4465      	add	r5, ip
 800153c:	40ac      	lsls	r4, r5
 800153e:	4320      	orrs	r0, r4
 8001540:	1e41      	subs	r1, r0, #1
 8001542:	4188      	sbcs	r0, r1
 8001544:	4318      	orrs	r0, r3
 8001546:	2307      	movs	r3, #7
 8001548:	001d      	movs	r5, r3
 800154a:	2400      	movs	r4, #0
 800154c:	4005      	ands	r5, r0
 800154e:	4203      	tst	r3, r0
 8001550:	d04a      	beq.n	80015e8 <__aeabi_dmul+0x520>
 8001552:	230f      	movs	r3, #15
 8001554:	2400      	movs	r4, #0
 8001556:	4003      	ands	r3, r0
 8001558:	2b04      	cmp	r3, #4
 800155a:	d042      	beq.n	80015e2 <__aeabi_dmul+0x51a>
 800155c:	1d03      	adds	r3, r0, #4
 800155e:	4283      	cmp	r3, r0
 8001560:	4180      	sbcs	r0, r0
 8001562:	4240      	negs	r0, r0
 8001564:	1824      	adds	r4, r4, r0
 8001566:	0018      	movs	r0, r3
 8001568:	0223      	lsls	r3, r4, #8
 800156a:	d53a      	bpl.n	80015e2 <__aeabi_dmul+0x51a>
 800156c:	2301      	movs	r3, #1
 800156e:	2400      	movs	r4, #0
 8001570:	2500      	movs	r5, #0
 8001572:	e61b      	b.n	80011ac <__aeabi_dmul+0xe4>
 8001574:	f000 fcb6 	bl	8001ee4 <__clzsi2>
 8001578:	0001      	movs	r1, r0
 800157a:	0003      	movs	r3, r0
 800157c:	3115      	adds	r1, #21
 800157e:	3320      	adds	r3, #32
 8001580:	291c      	cmp	r1, #28
 8001582:	dd8f      	ble.n	80014a4 <__aeabi_dmul+0x3dc>
 8001584:	3808      	subs	r0, #8
 8001586:	2200      	movs	r2, #0
 8001588:	4084      	lsls	r4, r0
 800158a:	4692      	mov	sl, r2
 800158c:	46a3      	mov	fp, r4
 800158e:	e796      	b.n	80014be <__aeabi_dmul+0x3f6>
 8001590:	f000 fca8 	bl	8001ee4 <__clzsi2>
 8001594:	0001      	movs	r1, r0
 8001596:	0003      	movs	r3, r0
 8001598:	3115      	adds	r1, #21
 800159a:	3320      	adds	r3, #32
 800159c:	291c      	cmp	r1, #28
 800159e:	dc00      	bgt.n	80015a2 <__aeabi_dmul+0x4da>
 80015a0:	e758      	b.n	8001454 <__aeabi_dmul+0x38c>
 80015a2:	0002      	movs	r2, r0
 80015a4:	464c      	mov	r4, r9
 80015a6:	3a08      	subs	r2, #8
 80015a8:	2000      	movs	r0, #0
 80015aa:	4094      	lsls	r4, r2
 80015ac:	e75d      	b.n	800146a <__aeabi_dmul+0x3a2>
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	e711      	b.n	80013d8 <__aeabi_dmul+0x310>
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <__aeabi_dmul+0x57c>)
 80015b6:	0026      	movs	r6, r4
 80015b8:	469c      	mov	ip, r3
 80015ba:	0003      	movs	r3, r0
 80015bc:	9d02      	ldr	r5, [sp, #8]
 80015be:	40cb      	lsrs	r3, r1
 80015c0:	4465      	add	r5, ip
 80015c2:	40ae      	lsls	r6, r5
 80015c4:	431e      	orrs	r6, r3
 80015c6:	0003      	movs	r3, r0
 80015c8:	40ab      	lsls	r3, r5
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	4183      	sbcs	r3, r0
 80015ce:	0030      	movs	r0, r6
 80015d0:	4318      	orrs	r0, r3
 80015d2:	40cc      	lsrs	r4, r1
 80015d4:	0743      	lsls	r3, r0, #29
 80015d6:	d0c7      	beq.n	8001568 <__aeabi_dmul+0x4a0>
 80015d8:	230f      	movs	r3, #15
 80015da:	4003      	ands	r3, r0
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d1bd      	bne.n	800155c <__aeabi_dmul+0x494>
 80015e0:	e7c2      	b.n	8001568 <__aeabi_dmul+0x4a0>
 80015e2:	0765      	lsls	r5, r4, #29
 80015e4:	0264      	lsls	r4, r4, #9
 80015e6:	0b24      	lsrs	r4, r4, #12
 80015e8:	08c0      	lsrs	r0, r0, #3
 80015ea:	2300      	movs	r3, #0
 80015ec:	4305      	orrs	r5, r0
 80015ee:	e5dd      	b.n	80011ac <__aeabi_dmul+0xe4>
 80015f0:	2500      	movs	r5, #0
 80015f2:	2302      	movs	r3, #2
 80015f4:	2e0f      	cmp	r6, #15
 80015f6:	d10c      	bne.n	8001612 <__aeabi_dmul+0x54a>
 80015f8:	2480      	movs	r4, #128	; 0x80
 80015fa:	465b      	mov	r3, fp
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	4223      	tst	r3, r4
 8001600:	d00e      	beq.n	8001620 <__aeabi_dmul+0x558>
 8001602:	4221      	tst	r1, r4
 8001604:	d10c      	bne.n	8001620 <__aeabi_dmul+0x558>
 8001606:	430c      	orrs	r4, r1
 8001608:	0324      	lsls	r4, r4, #12
 800160a:	003a      	movs	r2, r7
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <__aeabi_dmul+0x580>)
 800160e:	0b24      	lsrs	r4, r4, #12
 8001610:	e5cc      	b.n	80011ac <__aeabi_dmul+0xe4>
 8001612:	2e0b      	cmp	r6, #11
 8001614:	d000      	beq.n	8001618 <__aeabi_dmul+0x550>
 8001616:	e5a2      	b.n	800115e <__aeabi_dmul+0x96>
 8001618:	468b      	mov	fp, r1
 800161a:	46aa      	mov	sl, r5
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	e5f7      	b.n	8001210 <__aeabi_dmul+0x148>
 8001620:	2480      	movs	r4, #128	; 0x80
 8001622:	465b      	mov	r3, fp
 8001624:	0324      	lsls	r4, r4, #12
 8001626:	431c      	orrs	r4, r3
 8001628:	0324      	lsls	r4, r4, #12
 800162a:	4642      	mov	r2, r8
 800162c:	4655      	mov	r5, sl
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <__aeabi_dmul+0x580>)
 8001630:	0b24      	lsrs	r4, r4, #12
 8001632:	e5bb      	b.n	80011ac <__aeabi_dmul+0xe4>
 8001634:	464d      	mov	r5, r9
 8001636:	0021      	movs	r1, r4
 8001638:	2303      	movs	r3, #3
 800163a:	e7db      	b.n	80015f4 <__aeabi_dmul+0x52c>
 800163c:	fffffc0d 	.word	0xfffffc0d
 8001640:	0000043e 	.word	0x0000043e
 8001644:	0000041e 	.word	0x0000041e
 8001648:	000007ff 	.word	0x000007ff

0800164c <__aeabi_dsub>:
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	4657      	mov	r7, sl
 8001650:	464e      	mov	r6, r9
 8001652:	4645      	mov	r5, r8
 8001654:	46de      	mov	lr, fp
 8001656:	b5e0      	push	{r5, r6, r7, lr}
 8001658:	000d      	movs	r5, r1
 800165a:	0004      	movs	r4, r0
 800165c:	0019      	movs	r1, r3
 800165e:	0010      	movs	r0, r2
 8001660:	032b      	lsls	r3, r5, #12
 8001662:	0a5b      	lsrs	r3, r3, #9
 8001664:	0f62      	lsrs	r2, r4, #29
 8001666:	431a      	orrs	r2, r3
 8001668:	00e3      	lsls	r3, r4, #3
 800166a:	030c      	lsls	r4, r1, #12
 800166c:	0a64      	lsrs	r4, r4, #9
 800166e:	0f47      	lsrs	r7, r0, #29
 8001670:	4327      	orrs	r7, r4
 8001672:	4cd0      	ldr	r4, [pc, #832]	; (80019b4 <__aeabi_dsub+0x368>)
 8001674:	006e      	lsls	r6, r5, #1
 8001676:	4691      	mov	r9, r2
 8001678:	b083      	sub	sp, #12
 800167a:	004a      	lsls	r2, r1, #1
 800167c:	00c0      	lsls	r0, r0, #3
 800167e:	4698      	mov	r8, r3
 8001680:	46a2      	mov	sl, r4
 8001682:	0d76      	lsrs	r6, r6, #21
 8001684:	0fed      	lsrs	r5, r5, #31
 8001686:	0d52      	lsrs	r2, r2, #21
 8001688:	0fc9      	lsrs	r1, r1, #31
 800168a:	9001      	str	r0, [sp, #4]
 800168c:	42a2      	cmp	r2, r4
 800168e:	d100      	bne.n	8001692 <__aeabi_dsub+0x46>
 8001690:	e0b9      	b.n	8001806 <__aeabi_dsub+0x1ba>
 8001692:	2401      	movs	r4, #1
 8001694:	4061      	eors	r1, r4
 8001696:	468b      	mov	fp, r1
 8001698:	428d      	cmp	r5, r1
 800169a:	d100      	bne.n	800169e <__aeabi_dsub+0x52>
 800169c:	e08d      	b.n	80017ba <__aeabi_dsub+0x16e>
 800169e:	1ab4      	subs	r4, r6, r2
 80016a0:	46a4      	mov	ip, r4
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dsub+0x5c>
 80016a6:	e0b7      	b.n	8001818 <__aeabi_dsub+0x1cc>
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d100      	bne.n	80016ae <__aeabi_dsub+0x62>
 80016ac:	e0cb      	b.n	8001846 <__aeabi_dsub+0x1fa>
 80016ae:	4ac1      	ldr	r2, [pc, #772]	; (80019b4 <__aeabi_dsub+0x368>)
 80016b0:	4296      	cmp	r6, r2
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dsub+0x6a>
 80016b4:	e186      	b.n	80019c4 <__aeabi_dsub+0x378>
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	0412      	lsls	r2, r2, #16
 80016ba:	4317      	orrs	r7, r2
 80016bc:	4662      	mov	r2, ip
 80016be:	2a38      	cmp	r2, #56	; 0x38
 80016c0:	dd00      	ble.n	80016c4 <__aeabi_dsub+0x78>
 80016c2:	e1a4      	b.n	8001a0e <__aeabi_dsub+0x3c2>
 80016c4:	2a1f      	cmp	r2, #31
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dsub+0x7e>
 80016c8:	e21d      	b.n	8001b06 <__aeabi_dsub+0x4ba>
 80016ca:	4661      	mov	r1, ip
 80016cc:	2220      	movs	r2, #32
 80016ce:	003c      	movs	r4, r7
 80016d0:	1a52      	subs	r2, r2, r1
 80016d2:	0001      	movs	r1, r0
 80016d4:	4090      	lsls	r0, r2
 80016d6:	4094      	lsls	r4, r2
 80016d8:	1e42      	subs	r2, r0, #1
 80016da:	4190      	sbcs	r0, r2
 80016dc:	4662      	mov	r2, ip
 80016de:	46a0      	mov	r8, r4
 80016e0:	4664      	mov	r4, ip
 80016e2:	40d7      	lsrs	r7, r2
 80016e4:	464a      	mov	r2, r9
 80016e6:	40e1      	lsrs	r1, r4
 80016e8:	4644      	mov	r4, r8
 80016ea:	1bd2      	subs	r2, r2, r7
 80016ec:	4691      	mov	r9, r2
 80016ee:	430c      	orrs	r4, r1
 80016f0:	4304      	orrs	r4, r0
 80016f2:	1b1c      	subs	r4, r3, r4
 80016f4:	42a3      	cmp	r3, r4
 80016f6:	4192      	sbcs	r2, r2
 80016f8:	464b      	mov	r3, r9
 80016fa:	4252      	negs	r2, r2
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	469a      	mov	sl, r3
 8001700:	4653      	mov	r3, sl
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	d400      	bmi.n	8001708 <__aeabi_dsub+0xbc>
 8001706:	e12b      	b.n	8001960 <__aeabi_dsub+0x314>
 8001708:	4653      	mov	r3, sl
 800170a:	025a      	lsls	r2, r3, #9
 800170c:	0a53      	lsrs	r3, r2, #9
 800170e:	469a      	mov	sl, r3
 8001710:	4653      	mov	r3, sl
 8001712:	2b00      	cmp	r3, #0
 8001714:	d100      	bne.n	8001718 <__aeabi_dsub+0xcc>
 8001716:	e166      	b.n	80019e6 <__aeabi_dsub+0x39a>
 8001718:	4650      	mov	r0, sl
 800171a:	f000 fbe3 	bl	8001ee4 <__clzsi2>
 800171e:	0003      	movs	r3, r0
 8001720:	3b08      	subs	r3, #8
 8001722:	2220      	movs	r2, #32
 8001724:	0020      	movs	r0, r4
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	4651      	mov	r1, sl
 800172a:	40d0      	lsrs	r0, r2
 800172c:	4099      	lsls	r1, r3
 800172e:	0002      	movs	r2, r0
 8001730:	409c      	lsls	r4, r3
 8001732:	430a      	orrs	r2, r1
 8001734:	429e      	cmp	r6, r3
 8001736:	dd00      	ble.n	800173a <__aeabi_dsub+0xee>
 8001738:	e164      	b.n	8001a04 <__aeabi_dsub+0x3b8>
 800173a:	1b9b      	subs	r3, r3, r6
 800173c:	1c59      	adds	r1, r3, #1
 800173e:	291f      	cmp	r1, #31
 8001740:	dd00      	ble.n	8001744 <__aeabi_dsub+0xf8>
 8001742:	e0fe      	b.n	8001942 <__aeabi_dsub+0x2f6>
 8001744:	2320      	movs	r3, #32
 8001746:	0010      	movs	r0, r2
 8001748:	0026      	movs	r6, r4
 800174a:	1a5b      	subs	r3, r3, r1
 800174c:	409c      	lsls	r4, r3
 800174e:	4098      	lsls	r0, r3
 8001750:	40ce      	lsrs	r6, r1
 8001752:	40ca      	lsrs	r2, r1
 8001754:	1e63      	subs	r3, r4, #1
 8001756:	419c      	sbcs	r4, r3
 8001758:	4330      	orrs	r0, r6
 800175a:	4692      	mov	sl, r2
 800175c:	2600      	movs	r6, #0
 800175e:	4304      	orrs	r4, r0
 8001760:	0763      	lsls	r3, r4, #29
 8001762:	d009      	beq.n	8001778 <__aeabi_dsub+0x12c>
 8001764:	230f      	movs	r3, #15
 8001766:	4023      	ands	r3, r4
 8001768:	2b04      	cmp	r3, #4
 800176a:	d005      	beq.n	8001778 <__aeabi_dsub+0x12c>
 800176c:	1d23      	adds	r3, r4, #4
 800176e:	42a3      	cmp	r3, r4
 8001770:	41a4      	sbcs	r4, r4
 8001772:	4264      	negs	r4, r4
 8001774:	44a2      	add	sl, r4
 8001776:	001c      	movs	r4, r3
 8001778:	4653      	mov	r3, sl
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	d400      	bmi.n	8001780 <__aeabi_dsub+0x134>
 800177e:	e0f2      	b.n	8001966 <__aeabi_dsub+0x31a>
 8001780:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <__aeabi_dsub+0x368>)
 8001782:	3601      	adds	r6, #1
 8001784:	429e      	cmp	r6, r3
 8001786:	d100      	bne.n	800178a <__aeabi_dsub+0x13e>
 8001788:	e10f      	b.n	80019aa <__aeabi_dsub+0x35e>
 800178a:	4653      	mov	r3, sl
 800178c:	498a      	ldr	r1, [pc, #552]	; (80019b8 <__aeabi_dsub+0x36c>)
 800178e:	08e4      	lsrs	r4, r4, #3
 8001790:	400b      	ands	r3, r1
 8001792:	0019      	movs	r1, r3
 8001794:	075b      	lsls	r3, r3, #29
 8001796:	4323      	orrs	r3, r4
 8001798:	0572      	lsls	r2, r6, #21
 800179a:	024c      	lsls	r4, r1, #9
 800179c:	0b24      	lsrs	r4, r4, #12
 800179e:	0d52      	lsrs	r2, r2, #21
 80017a0:	0512      	lsls	r2, r2, #20
 80017a2:	4322      	orrs	r2, r4
 80017a4:	07ed      	lsls	r5, r5, #31
 80017a6:	432a      	orrs	r2, r5
 80017a8:	0018      	movs	r0, r3
 80017aa:	0011      	movs	r1, r2
 80017ac:	b003      	add	sp, #12
 80017ae:	bcf0      	pop	{r4, r5, r6, r7}
 80017b0:	46bb      	mov	fp, r7
 80017b2:	46b2      	mov	sl, r6
 80017b4:	46a9      	mov	r9, r5
 80017b6:	46a0      	mov	r8, r4
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ba:	1ab4      	subs	r4, r6, r2
 80017bc:	46a4      	mov	ip, r4
 80017be:	2c00      	cmp	r4, #0
 80017c0:	dd59      	ble.n	8001876 <__aeabi_dsub+0x22a>
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dsub+0x17c>
 80017c6:	e0b0      	b.n	800192a <__aeabi_dsub+0x2de>
 80017c8:	4556      	cmp	r6, sl
 80017ca:	d100      	bne.n	80017ce <__aeabi_dsub+0x182>
 80017cc:	e0fa      	b.n	80019c4 <__aeabi_dsub+0x378>
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	0412      	lsls	r2, r2, #16
 80017d2:	4317      	orrs	r7, r2
 80017d4:	4662      	mov	r2, ip
 80017d6:	2a38      	cmp	r2, #56	; 0x38
 80017d8:	dd00      	ble.n	80017dc <__aeabi_dsub+0x190>
 80017da:	e0d4      	b.n	8001986 <__aeabi_dsub+0x33a>
 80017dc:	2a1f      	cmp	r2, #31
 80017de:	dc00      	bgt.n	80017e2 <__aeabi_dsub+0x196>
 80017e0:	e1c0      	b.n	8001b64 <__aeabi_dsub+0x518>
 80017e2:	0039      	movs	r1, r7
 80017e4:	3a20      	subs	r2, #32
 80017e6:	40d1      	lsrs	r1, r2
 80017e8:	4662      	mov	r2, ip
 80017ea:	2a20      	cmp	r2, #32
 80017ec:	d006      	beq.n	80017fc <__aeabi_dsub+0x1b0>
 80017ee:	4664      	mov	r4, ip
 80017f0:	2240      	movs	r2, #64	; 0x40
 80017f2:	1b12      	subs	r2, r2, r4
 80017f4:	003c      	movs	r4, r7
 80017f6:	4094      	lsls	r4, r2
 80017f8:	4304      	orrs	r4, r0
 80017fa:	9401      	str	r4, [sp, #4]
 80017fc:	9c01      	ldr	r4, [sp, #4]
 80017fe:	1e62      	subs	r2, r4, #1
 8001800:	4194      	sbcs	r4, r2
 8001802:	430c      	orrs	r4, r1
 8001804:	e0c3      	b.n	800198e <__aeabi_dsub+0x342>
 8001806:	003c      	movs	r4, r7
 8001808:	4304      	orrs	r4, r0
 800180a:	d02b      	beq.n	8001864 <__aeabi_dsub+0x218>
 800180c:	468b      	mov	fp, r1
 800180e:	428d      	cmp	r5, r1
 8001810:	d02e      	beq.n	8001870 <__aeabi_dsub+0x224>
 8001812:	4c6a      	ldr	r4, [pc, #424]	; (80019bc <__aeabi_dsub+0x370>)
 8001814:	46a4      	mov	ip, r4
 8001816:	44b4      	add	ip, r6
 8001818:	4664      	mov	r4, ip
 800181a:	2c00      	cmp	r4, #0
 800181c:	d05f      	beq.n	80018de <__aeabi_dsub+0x292>
 800181e:	1b94      	subs	r4, r2, r6
 8001820:	46a4      	mov	ip, r4
 8001822:	2e00      	cmp	r6, #0
 8001824:	d000      	beq.n	8001828 <__aeabi_dsub+0x1dc>
 8001826:	e120      	b.n	8001a6a <__aeabi_dsub+0x41e>
 8001828:	464c      	mov	r4, r9
 800182a:	431c      	orrs	r4, r3
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x1e4>
 800182e:	e1c7      	b.n	8001bc0 <__aeabi_dsub+0x574>
 8001830:	4661      	mov	r1, ip
 8001832:	1e4c      	subs	r4, r1, #1
 8001834:	2901      	cmp	r1, #1
 8001836:	d100      	bne.n	800183a <__aeabi_dsub+0x1ee>
 8001838:	e223      	b.n	8001c82 <__aeabi_dsub+0x636>
 800183a:	4d5e      	ldr	r5, [pc, #376]	; (80019b4 <__aeabi_dsub+0x368>)
 800183c:	45ac      	cmp	ip, r5
 800183e:	d100      	bne.n	8001842 <__aeabi_dsub+0x1f6>
 8001840:	e1d8      	b.n	8001bf4 <__aeabi_dsub+0x5a8>
 8001842:	46a4      	mov	ip, r4
 8001844:	e11a      	b.n	8001a7c <__aeabi_dsub+0x430>
 8001846:	003a      	movs	r2, r7
 8001848:	4302      	orrs	r2, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dsub+0x202>
 800184c:	e0e4      	b.n	8001a18 <__aeabi_dsub+0x3cc>
 800184e:	0022      	movs	r2, r4
 8001850:	3a01      	subs	r2, #1
 8001852:	2c01      	cmp	r4, #1
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x20c>
 8001856:	e1c3      	b.n	8001be0 <__aeabi_dsub+0x594>
 8001858:	4956      	ldr	r1, [pc, #344]	; (80019b4 <__aeabi_dsub+0x368>)
 800185a:	428c      	cmp	r4, r1
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x214>
 800185e:	e0b1      	b.n	80019c4 <__aeabi_dsub+0x378>
 8001860:	4694      	mov	ip, r2
 8001862:	e72b      	b.n	80016bc <__aeabi_dsub+0x70>
 8001864:	2401      	movs	r4, #1
 8001866:	4061      	eors	r1, r4
 8001868:	468b      	mov	fp, r1
 800186a:	428d      	cmp	r5, r1
 800186c:	d000      	beq.n	8001870 <__aeabi_dsub+0x224>
 800186e:	e716      	b.n	800169e <__aeabi_dsub+0x52>
 8001870:	4952      	ldr	r1, [pc, #328]	; (80019bc <__aeabi_dsub+0x370>)
 8001872:	468c      	mov	ip, r1
 8001874:	44b4      	add	ip, r6
 8001876:	4664      	mov	r4, ip
 8001878:	2c00      	cmp	r4, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dsub+0x232>
 800187c:	e0d3      	b.n	8001a26 <__aeabi_dsub+0x3da>
 800187e:	1b91      	subs	r1, r2, r6
 8001880:	468c      	mov	ip, r1
 8001882:	2e00      	cmp	r6, #0
 8001884:	d100      	bne.n	8001888 <__aeabi_dsub+0x23c>
 8001886:	e15e      	b.n	8001b46 <__aeabi_dsub+0x4fa>
 8001888:	494a      	ldr	r1, [pc, #296]	; (80019b4 <__aeabi_dsub+0x368>)
 800188a:	428a      	cmp	r2, r1
 800188c:	d100      	bne.n	8001890 <__aeabi_dsub+0x244>
 800188e:	e1be      	b.n	8001c0e <__aeabi_dsub+0x5c2>
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	464c      	mov	r4, r9
 8001894:	0409      	lsls	r1, r1, #16
 8001896:	430c      	orrs	r4, r1
 8001898:	46a1      	mov	r9, r4
 800189a:	4661      	mov	r1, ip
 800189c:	2938      	cmp	r1, #56	; 0x38
 800189e:	dd00      	ble.n	80018a2 <__aeabi_dsub+0x256>
 80018a0:	e1ba      	b.n	8001c18 <__aeabi_dsub+0x5cc>
 80018a2:	291f      	cmp	r1, #31
 80018a4:	dd00      	ble.n	80018a8 <__aeabi_dsub+0x25c>
 80018a6:	e227      	b.n	8001cf8 <__aeabi_dsub+0x6ac>
 80018a8:	2420      	movs	r4, #32
 80018aa:	1a64      	subs	r4, r4, r1
 80018ac:	4649      	mov	r1, r9
 80018ae:	40a1      	lsls	r1, r4
 80018b0:	001e      	movs	r6, r3
 80018b2:	4688      	mov	r8, r1
 80018b4:	4661      	mov	r1, ip
 80018b6:	40a3      	lsls	r3, r4
 80018b8:	40ce      	lsrs	r6, r1
 80018ba:	4641      	mov	r1, r8
 80018bc:	1e5c      	subs	r4, r3, #1
 80018be:	41a3      	sbcs	r3, r4
 80018c0:	4331      	orrs	r1, r6
 80018c2:	4319      	orrs	r1, r3
 80018c4:	000c      	movs	r4, r1
 80018c6:	4663      	mov	r3, ip
 80018c8:	4649      	mov	r1, r9
 80018ca:	40d9      	lsrs	r1, r3
 80018cc:	187f      	adds	r7, r7, r1
 80018ce:	1824      	adds	r4, r4, r0
 80018d0:	4284      	cmp	r4, r0
 80018d2:	419b      	sbcs	r3, r3
 80018d4:	425b      	negs	r3, r3
 80018d6:	469a      	mov	sl, r3
 80018d8:	0016      	movs	r6, r2
 80018da:	44ba      	add	sl, r7
 80018dc:	e05d      	b.n	800199a <__aeabi_dsub+0x34e>
 80018de:	4c38      	ldr	r4, [pc, #224]	; (80019c0 <__aeabi_dsub+0x374>)
 80018e0:	1c72      	adds	r2, r6, #1
 80018e2:	4222      	tst	r2, r4
 80018e4:	d000      	beq.n	80018e8 <__aeabi_dsub+0x29c>
 80018e6:	e0df      	b.n	8001aa8 <__aeabi_dsub+0x45c>
 80018e8:	464a      	mov	r2, r9
 80018ea:	431a      	orrs	r2, r3
 80018ec:	2e00      	cmp	r6, #0
 80018ee:	d000      	beq.n	80018f2 <__aeabi_dsub+0x2a6>
 80018f0:	e15c      	b.n	8001bac <__aeabi_dsub+0x560>
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dsub+0x2ac>
 80018f6:	e1cf      	b.n	8001c98 <__aeabi_dsub+0x64c>
 80018f8:	003a      	movs	r2, r7
 80018fa:	4302      	orrs	r2, r0
 80018fc:	d100      	bne.n	8001900 <__aeabi_dsub+0x2b4>
 80018fe:	e17f      	b.n	8001c00 <__aeabi_dsub+0x5b4>
 8001900:	1a1c      	subs	r4, r3, r0
 8001902:	464a      	mov	r2, r9
 8001904:	42a3      	cmp	r3, r4
 8001906:	4189      	sbcs	r1, r1
 8001908:	1bd2      	subs	r2, r2, r7
 800190a:	4249      	negs	r1, r1
 800190c:	1a52      	subs	r2, r2, r1
 800190e:	4692      	mov	sl, r2
 8001910:	0212      	lsls	r2, r2, #8
 8001912:	d400      	bmi.n	8001916 <__aeabi_dsub+0x2ca>
 8001914:	e20a      	b.n	8001d2c <__aeabi_dsub+0x6e0>
 8001916:	1ac4      	subs	r4, r0, r3
 8001918:	42a0      	cmp	r0, r4
 800191a:	4180      	sbcs	r0, r0
 800191c:	464b      	mov	r3, r9
 800191e:	4240      	negs	r0, r0
 8001920:	1aff      	subs	r7, r7, r3
 8001922:	1a3b      	subs	r3, r7, r0
 8001924:	469a      	mov	sl, r3
 8001926:	465d      	mov	r5, fp
 8001928:	e71a      	b.n	8001760 <__aeabi_dsub+0x114>
 800192a:	003a      	movs	r2, r7
 800192c:	4302      	orrs	r2, r0
 800192e:	d073      	beq.n	8001a18 <__aeabi_dsub+0x3cc>
 8001930:	0022      	movs	r2, r4
 8001932:	3a01      	subs	r2, #1
 8001934:	2c01      	cmp	r4, #1
 8001936:	d100      	bne.n	800193a <__aeabi_dsub+0x2ee>
 8001938:	e0cb      	b.n	8001ad2 <__aeabi_dsub+0x486>
 800193a:	4554      	cmp	r4, sl
 800193c:	d042      	beq.n	80019c4 <__aeabi_dsub+0x378>
 800193e:	4694      	mov	ip, r2
 8001940:	e748      	b.n	80017d4 <__aeabi_dsub+0x188>
 8001942:	0010      	movs	r0, r2
 8001944:	3b1f      	subs	r3, #31
 8001946:	40d8      	lsrs	r0, r3
 8001948:	2920      	cmp	r1, #32
 800194a:	d003      	beq.n	8001954 <__aeabi_dsub+0x308>
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	1a5b      	subs	r3, r3, r1
 8001950:	409a      	lsls	r2, r3
 8001952:	4314      	orrs	r4, r2
 8001954:	1e63      	subs	r3, r4, #1
 8001956:	419c      	sbcs	r4, r3
 8001958:	2300      	movs	r3, #0
 800195a:	2600      	movs	r6, #0
 800195c:	469a      	mov	sl, r3
 800195e:	4304      	orrs	r4, r0
 8001960:	0763      	lsls	r3, r4, #29
 8001962:	d000      	beq.n	8001966 <__aeabi_dsub+0x31a>
 8001964:	e6fe      	b.n	8001764 <__aeabi_dsub+0x118>
 8001966:	4652      	mov	r2, sl
 8001968:	08e3      	lsrs	r3, r4, #3
 800196a:	0752      	lsls	r2, r2, #29
 800196c:	4313      	orrs	r3, r2
 800196e:	4652      	mov	r2, sl
 8001970:	46b4      	mov	ip, r6
 8001972:	08d2      	lsrs	r2, r2, #3
 8001974:	490f      	ldr	r1, [pc, #60]	; (80019b4 <__aeabi_dsub+0x368>)
 8001976:	458c      	cmp	ip, r1
 8001978:	d02a      	beq.n	80019d0 <__aeabi_dsub+0x384>
 800197a:	0312      	lsls	r2, r2, #12
 800197c:	0b14      	lsrs	r4, r2, #12
 800197e:	4662      	mov	r2, ip
 8001980:	0552      	lsls	r2, r2, #21
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	e70c      	b.n	80017a0 <__aeabi_dsub+0x154>
 8001986:	003c      	movs	r4, r7
 8001988:	4304      	orrs	r4, r0
 800198a:	1e62      	subs	r2, r4, #1
 800198c:	4194      	sbcs	r4, r2
 800198e:	18e4      	adds	r4, r4, r3
 8001990:	429c      	cmp	r4, r3
 8001992:	4192      	sbcs	r2, r2
 8001994:	4252      	negs	r2, r2
 8001996:	444a      	add	r2, r9
 8001998:	4692      	mov	sl, r2
 800199a:	4653      	mov	r3, sl
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	d5df      	bpl.n	8001960 <__aeabi_dsub+0x314>
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__aeabi_dsub+0x368>)
 80019a2:	3601      	adds	r6, #1
 80019a4:	429e      	cmp	r6, r3
 80019a6:	d000      	beq.n	80019aa <__aeabi_dsub+0x35e>
 80019a8:	e0a0      	b.n	8001aec <__aeabi_dsub+0x4a0>
 80019aa:	0032      	movs	r2, r6
 80019ac:	2400      	movs	r4, #0
 80019ae:	2300      	movs	r3, #0
 80019b0:	e6f6      	b.n	80017a0 <__aeabi_dsub+0x154>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	000007ff 	.word	0x000007ff
 80019b8:	ff7fffff 	.word	0xff7fffff
 80019bc:	fffff801 	.word	0xfffff801
 80019c0:	000007fe 	.word	0x000007fe
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	464a      	mov	r2, r9
 80019c8:	0752      	lsls	r2, r2, #29
 80019ca:	4313      	orrs	r3, r2
 80019cc:	464a      	mov	r2, r9
 80019ce:	08d2      	lsrs	r2, r2, #3
 80019d0:	0019      	movs	r1, r3
 80019d2:	4311      	orrs	r1, r2
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x38c>
 80019d6:	e1b5      	b.n	8001d44 <__aeabi_dsub+0x6f8>
 80019d8:	2480      	movs	r4, #128	; 0x80
 80019da:	0324      	lsls	r4, r4, #12
 80019dc:	4314      	orrs	r4, r2
 80019de:	0324      	lsls	r4, r4, #12
 80019e0:	4ad5      	ldr	r2, [pc, #852]	; (8001d38 <__aeabi_dsub+0x6ec>)
 80019e2:	0b24      	lsrs	r4, r4, #12
 80019e4:	e6dc      	b.n	80017a0 <__aeabi_dsub+0x154>
 80019e6:	0020      	movs	r0, r4
 80019e8:	f000 fa7c 	bl	8001ee4 <__clzsi2>
 80019ec:	0003      	movs	r3, r0
 80019ee:	3318      	adds	r3, #24
 80019f0:	2b1f      	cmp	r3, #31
 80019f2:	dc00      	bgt.n	80019f6 <__aeabi_dsub+0x3aa>
 80019f4:	e695      	b.n	8001722 <__aeabi_dsub+0xd6>
 80019f6:	0022      	movs	r2, r4
 80019f8:	3808      	subs	r0, #8
 80019fa:	4082      	lsls	r2, r0
 80019fc:	2400      	movs	r4, #0
 80019fe:	429e      	cmp	r6, r3
 8001a00:	dc00      	bgt.n	8001a04 <__aeabi_dsub+0x3b8>
 8001a02:	e69a      	b.n	800173a <__aeabi_dsub+0xee>
 8001a04:	1af6      	subs	r6, r6, r3
 8001a06:	4bcd      	ldr	r3, [pc, #820]	; (8001d3c <__aeabi_dsub+0x6f0>)
 8001a08:	401a      	ands	r2, r3
 8001a0a:	4692      	mov	sl, r2
 8001a0c:	e6a8      	b.n	8001760 <__aeabi_dsub+0x114>
 8001a0e:	003c      	movs	r4, r7
 8001a10:	4304      	orrs	r4, r0
 8001a12:	1e62      	subs	r2, r4, #1
 8001a14:	4194      	sbcs	r4, r2
 8001a16:	e66c      	b.n	80016f2 <__aeabi_dsub+0xa6>
 8001a18:	464a      	mov	r2, r9
 8001a1a:	08db      	lsrs	r3, r3, #3
 8001a1c:	0752      	lsls	r2, r2, #29
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	464a      	mov	r2, r9
 8001a22:	08d2      	lsrs	r2, r2, #3
 8001a24:	e7a6      	b.n	8001974 <__aeabi_dsub+0x328>
 8001a26:	4cc6      	ldr	r4, [pc, #792]	; (8001d40 <__aeabi_dsub+0x6f4>)
 8001a28:	1c72      	adds	r2, r6, #1
 8001a2a:	4222      	tst	r2, r4
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_dsub+0x3e4>
 8001a2e:	e0ac      	b.n	8001b8a <__aeabi_dsub+0x53e>
 8001a30:	464a      	mov	r2, r9
 8001a32:	431a      	orrs	r2, r3
 8001a34:	2e00      	cmp	r6, #0
 8001a36:	d000      	beq.n	8001a3a <__aeabi_dsub+0x3ee>
 8001a38:	e105      	b.n	8001c46 <__aeabi_dsub+0x5fa>
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x3f4>
 8001a3e:	e156      	b.n	8001cee <__aeabi_dsub+0x6a2>
 8001a40:	003a      	movs	r2, r7
 8001a42:	4302      	orrs	r2, r0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x3fc>
 8001a46:	e0db      	b.n	8001c00 <__aeabi_dsub+0x5b4>
 8001a48:	181c      	adds	r4, r3, r0
 8001a4a:	429c      	cmp	r4, r3
 8001a4c:	419b      	sbcs	r3, r3
 8001a4e:	444f      	add	r7, r9
 8001a50:	46ba      	mov	sl, r7
 8001a52:	425b      	negs	r3, r3
 8001a54:	449a      	add	sl, r3
 8001a56:	4653      	mov	r3, sl
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	d400      	bmi.n	8001a5e <__aeabi_dsub+0x412>
 8001a5c:	e780      	b.n	8001960 <__aeabi_dsub+0x314>
 8001a5e:	4652      	mov	r2, sl
 8001a60:	4bb6      	ldr	r3, [pc, #728]	; (8001d3c <__aeabi_dsub+0x6f0>)
 8001a62:	2601      	movs	r6, #1
 8001a64:	401a      	ands	r2, r3
 8001a66:	4692      	mov	sl, r2
 8001a68:	e77a      	b.n	8001960 <__aeabi_dsub+0x314>
 8001a6a:	4cb3      	ldr	r4, [pc, #716]	; (8001d38 <__aeabi_dsub+0x6ec>)
 8001a6c:	42a2      	cmp	r2, r4
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x426>
 8001a70:	e0c0      	b.n	8001bf4 <__aeabi_dsub+0x5a8>
 8001a72:	2480      	movs	r4, #128	; 0x80
 8001a74:	464d      	mov	r5, r9
 8001a76:	0424      	lsls	r4, r4, #16
 8001a78:	4325      	orrs	r5, r4
 8001a7a:	46a9      	mov	r9, r5
 8001a7c:	4664      	mov	r4, ip
 8001a7e:	2c38      	cmp	r4, #56	; 0x38
 8001a80:	dc53      	bgt.n	8001b2a <__aeabi_dsub+0x4de>
 8001a82:	4661      	mov	r1, ip
 8001a84:	2c1f      	cmp	r4, #31
 8001a86:	dd00      	ble.n	8001a8a <__aeabi_dsub+0x43e>
 8001a88:	e0cd      	b.n	8001c26 <__aeabi_dsub+0x5da>
 8001a8a:	2520      	movs	r5, #32
 8001a8c:	001e      	movs	r6, r3
 8001a8e:	1b2d      	subs	r5, r5, r4
 8001a90:	464c      	mov	r4, r9
 8001a92:	40ab      	lsls	r3, r5
 8001a94:	40ac      	lsls	r4, r5
 8001a96:	40ce      	lsrs	r6, r1
 8001a98:	1e5d      	subs	r5, r3, #1
 8001a9a:	41ab      	sbcs	r3, r5
 8001a9c:	4334      	orrs	r4, r6
 8001a9e:	4323      	orrs	r3, r4
 8001aa0:	464c      	mov	r4, r9
 8001aa2:	40cc      	lsrs	r4, r1
 8001aa4:	1b3f      	subs	r7, r7, r4
 8001aa6:	e045      	b.n	8001b34 <__aeabi_dsub+0x4e8>
 8001aa8:	464a      	mov	r2, r9
 8001aaa:	1a1c      	subs	r4, r3, r0
 8001aac:	1bd1      	subs	r1, r2, r7
 8001aae:	42a3      	cmp	r3, r4
 8001ab0:	4192      	sbcs	r2, r2
 8001ab2:	4252      	negs	r2, r2
 8001ab4:	4692      	mov	sl, r2
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	4651      	mov	r1, sl
 8001aba:	1a52      	subs	r2, r2, r1
 8001abc:	4692      	mov	sl, r2
 8001abe:	0212      	lsls	r2, r2, #8
 8001ac0:	d500      	bpl.n	8001ac4 <__aeabi_dsub+0x478>
 8001ac2:	e083      	b.n	8001bcc <__aeabi_dsub+0x580>
 8001ac4:	4653      	mov	r3, sl
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	d000      	beq.n	8001acc <__aeabi_dsub+0x480>
 8001aca:	e621      	b.n	8001710 <__aeabi_dsub+0xc4>
 8001acc:	2200      	movs	r2, #0
 8001ace:	2500      	movs	r5, #0
 8001ad0:	e753      	b.n	800197a <__aeabi_dsub+0x32e>
 8001ad2:	181c      	adds	r4, r3, r0
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	419b      	sbcs	r3, r3
 8001ad8:	444f      	add	r7, r9
 8001ada:	46ba      	mov	sl, r7
 8001adc:	425b      	negs	r3, r3
 8001ade:	449a      	add	sl, r3
 8001ae0:	4653      	mov	r3, sl
 8001ae2:	2601      	movs	r6, #1
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	d400      	bmi.n	8001aea <__aeabi_dsub+0x49e>
 8001ae8:	e73a      	b.n	8001960 <__aeabi_dsub+0x314>
 8001aea:	2602      	movs	r6, #2
 8001aec:	4652      	mov	r2, sl
 8001aee:	4b93      	ldr	r3, [pc, #588]	; (8001d3c <__aeabi_dsub+0x6f0>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	401a      	ands	r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	4021      	ands	r1, r4
 8001af8:	0862      	lsrs	r2, r4, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	07dc      	lsls	r4, r3, #31
 8001afe:	085b      	lsrs	r3, r3, #1
 8001b00:	469a      	mov	sl, r3
 8001b02:	4314      	orrs	r4, r2
 8001b04:	e62c      	b.n	8001760 <__aeabi_dsub+0x114>
 8001b06:	0039      	movs	r1, r7
 8001b08:	3a20      	subs	r2, #32
 8001b0a:	40d1      	lsrs	r1, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	2a20      	cmp	r2, #32
 8001b10:	d006      	beq.n	8001b20 <__aeabi_dsub+0x4d4>
 8001b12:	4664      	mov	r4, ip
 8001b14:	2240      	movs	r2, #64	; 0x40
 8001b16:	1b12      	subs	r2, r2, r4
 8001b18:	003c      	movs	r4, r7
 8001b1a:	4094      	lsls	r4, r2
 8001b1c:	4304      	orrs	r4, r0
 8001b1e:	9401      	str	r4, [sp, #4]
 8001b20:	9c01      	ldr	r4, [sp, #4]
 8001b22:	1e62      	subs	r2, r4, #1
 8001b24:	4194      	sbcs	r4, r2
 8001b26:	430c      	orrs	r4, r1
 8001b28:	e5e3      	b.n	80016f2 <__aeabi_dsub+0xa6>
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	4319      	orrs	r1, r3
 8001b2e:	000b      	movs	r3, r1
 8001b30:	1e5c      	subs	r4, r3, #1
 8001b32:	41a3      	sbcs	r3, r4
 8001b34:	1ac4      	subs	r4, r0, r3
 8001b36:	42a0      	cmp	r0, r4
 8001b38:	419b      	sbcs	r3, r3
 8001b3a:	425b      	negs	r3, r3
 8001b3c:	1afb      	subs	r3, r7, r3
 8001b3e:	469a      	mov	sl, r3
 8001b40:	465d      	mov	r5, fp
 8001b42:	0016      	movs	r6, r2
 8001b44:	e5dc      	b.n	8001700 <__aeabi_dsub+0xb4>
 8001b46:	4649      	mov	r1, r9
 8001b48:	4319      	orrs	r1, r3
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x502>
 8001b4c:	e0ae      	b.n	8001cac <__aeabi_dsub+0x660>
 8001b4e:	4661      	mov	r1, ip
 8001b50:	4664      	mov	r4, ip
 8001b52:	3901      	subs	r1, #1
 8001b54:	2c01      	cmp	r4, #1
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dsub+0x50e>
 8001b58:	e0e0      	b.n	8001d1c <__aeabi_dsub+0x6d0>
 8001b5a:	4c77      	ldr	r4, [pc, #476]	; (8001d38 <__aeabi_dsub+0x6ec>)
 8001b5c:	45a4      	cmp	ip, r4
 8001b5e:	d056      	beq.n	8001c0e <__aeabi_dsub+0x5c2>
 8001b60:	468c      	mov	ip, r1
 8001b62:	e69a      	b.n	800189a <__aeabi_dsub+0x24e>
 8001b64:	4661      	mov	r1, ip
 8001b66:	2220      	movs	r2, #32
 8001b68:	003c      	movs	r4, r7
 8001b6a:	1a52      	subs	r2, r2, r1
 8001b6c:	4094      	lsls	r4, r2
 8001b6e:	0001      	movs	r1, r0
 8001b70:	4090      	lsls	r0, r2
 8001b72:	46a0      	mov	r8, r4
 8001b74:	4664      	mov	r4, ip
 8001b76:	1e42      	subs	r2, r0, #1
 8001b78:	4190      	sbcs	r0, r2
 8001b7a:	4662      	mov	r2, ip
 8001b7c:	40e1      	lsrs	r1, r4
 8001b7e:	4644      	mov	r4, r8
 8001b80:	40d7      	lsrs	r7, r2
 8001b82:	430c      	orrs	r4, r1
 8001b84:	4304      	orrs	r4, r0
 8001b86:	44b9      	add	r9, r7
 8001b88:	e701      	b.n	800198e <__aeabi_dsub+0x342>
 8001b8a:	496b      	ldr	r1, [pc, #428]	; (8001d38 <__aeabi_dsub+0x6ec>)
 8001b8c:	428a      	cmp	r2, r1
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0x546>
 8001b90:	e70c      	b.n	80019ac <__aeabi_dsub+0x360>
 8001b92:	1818      	adds	r0, r3, r0
 8001b94:	4298      	cmp	r0, r3
 8001b96:	419b      	sbcs	r3, r3
 8001b98:	444f      	add	r7, r9
 8001b9a:	425b      	negs	r3, r3
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	07dc      	lsls	r4, r3, #31
 8001ba0:	0840      	lsrs	r0, r0, #1
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	469a      	mov	sl, r3
 8001ba6:	0016      	movs	r6, r2
 8001ba8:	4304      	orrs	r4, r0
 8001baa:	e6d9      	b.n	8001960 <__aeabi_dsub+0x314>
 8001bac:	2a00      	cmp	r2, #0
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_dsub+0x566>
 8001bb0:	e081      	b.n	8001cb6 <__aeabi_dsub+0x66a>
 8001bb2:	003b      	movs	r3, r7
 8001bb4:	4303      	orrs	r3, r0
 8001bb6:	d11d      	bne.n	8001bf4 <__aeabi_dsub+0x5a8>
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	2500      	movs	r5, #0
 8001bbc:	0312      	lsls	r2, r2, #12
 8001bbe:	e70b      	b.n	80019d8 <__aeabi_dsub+0x38c>
 8001bc0:	08c0      	lsrs	r0, r0, #3
 8001bc2:	077b      	lsls	r3, r7, #29
 8001bc4:	465d      	mov	r5, fp
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	08fa      	lsrs	r2, r7, #3
 8001bca:	e6d3      	b.n	8001974 <__aeabi_dsub+0x328>
 8001bcc:	1ac4      	subs	r4, r0, r3
 8001bce:	42a0      	cmp	r0, r4
 8001bd0:	4180      	sbcs	r0, r0
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	4240      	negs	r0, r0
 8001bd6:	1aff      	subs	r7, r7, r3
 8001bd8:	1a3b      	subs	r3, r7, r0
 8001bda:	469a      	mov	sl, r3
 8001bdc:	465d      	mov	r5, fp
 8001bde:	e597      	b.n	8001710 <__aeabi_dsub+0xc4>
 8001be0:	1a1c      	subs	r4, r3, r0
 8001be2:	464a      	mov	r2, r9
 8001be4:	42a3      	cmp	r3, r4
 8001be6:	419b      	sbcs	r3, r3
 8001be8:	1bd7      	subs	r7, r2, r7
 8001bea:	425b      	negs	r3, r3
 8001bec:	1afb      	subs	r3, r7, r3
 8001bee:	469a      	mov	sl, r3
 8001bf0:	2601      	movs	r6, #1
 8001bf2:	e585      	b.n	8001700 <__aeabi_dsub+0xb4>
 8001bf4:	08c0      	lsrs	r0, r0, #3
 8001bf6:	077b      	lsls	r3, r7, #29
 8001bf8:	465d      	mov	r5, fp
 8001bfa:	4303      	orrs	r3, r0
 8001bfc:	08fa      	lsrs	r2, r7, #3
 8001bfe:	e6e7      	b.n	80019d0 <__aeabi_dsub+0x384>
 8001c00:	464a      	mov	r2, r9
 8001c02:	08db      	lsrs	r3, r3, #3
 8001c04:	0752      	lsls	r2, r2, #29
 8001c06:	4313      	orrs	r3, r2
 8001c08:	464a      	mov	r2, r9
 8001c0a:	08d2      	lsrs	r2, r2, #3
 8001c0c:	e6b5      	b.n	800197a <__aeabi_dsub+0x32e>
 8001c0e:	08c0      	lsrs	r0, r0, #3
 8001c10:	077b      	lsls	r3, r7, #29
 8001c12:	4303      	orrs	r3, r0
 8001c14:	08fa      	lsrs	r2, r7, #3
 8001c16:	e6db      	b.n	80019d0 <__aeabi_dsub+0x384>
 8001c18:	4649      	mov	r1, r9
 8001c1a:	4319      	orrs	r1, r3
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	1e59      	subs	r1, r3, #1
 8001c20:	418b      	sbcs	r3, r1
 8001c22:	001c      	movs	r4, r3
 8001c24:	e653      	b.n	80018ce <__aeabi_dsub+0x282>
 8001c26:	464d      	mov	r5, r9
 8001c28:	3c20      	subs	r4, #32
 8001c2a:	40e5      	lsrs	r5, r4
 8001c2c:	2920      	cmp	r1, #32
 8001c2e:	d005      	beq.n	8001c3c <__aeabi_dsub+0x5f0>
 8001c30:	2440      	movs	r4, #64	; 0x40
 8001c32:	1a64      	subs	r4, r4, r1
 8001c34:	4649      	mov	r1, r9
 8001c36:	40a1      	lsls	r1, r4
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	1e5c      	subs	r4, r3, #1
 8001c40:	41a3      	sbcs	r3, r4
 8001c42:	432b      	orrs	r3, r5
 8001c44:	e776      	b.n	8001b34 <__aeabi_dsub+0x4e8>
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	d0e1      	beq.n	8001c0e <__aeabi_dsub+0x5c2>
 8001c4a:	003a      	movs	r2, r7
 8001c4c:	08db      	lsrs	r3, r3, #3
 8001c4e:	4302      	orrs	r2, r0
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0x608>
 8001c52:	e6b8      	b.n	80019c6 <__aeabi_dsub+0x37a>
 8001c54:	464a      	mov	r2, r9
 8001c56:	0752      	lsls	r2, r2, #29
 8001c58:	2480      	movs	r4, #128	; 0x80
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	0324      	lsls	r4, r4, #12
 8001c60:	08d2      	lsrs	r2, r2, #3
 8001c62:	4222      	tst	r2, r4
 8001c64:	d007      	beq.n	8001c76 <__aeabi_dsub+0x62a>
 8001c66:	08fe      	lsrs	r6, r7, #3
 8001c68:	4226      	tst	r6, r4
 8001c6a:	d104      	bne.n	8001c76 <__aeabi_dsub+0x62a>
 8001c6c:	465d      	mov	r5, fp
 8001c6e:	0032      	movs	r2, r6
 8001c70:	08c3      	lsrs	r3, r0, #3
 8001c72:	077f      	lsls	r7, r7, #29
 8001c74:	433b      	orrs	r3, r7
 8001c76:	0f59      	lsrs	r1, r3, #29
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	0749      	lsls	r1, r1, #29
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	e6a6      	b.n	80019d0 <__aeabi_dsub+0x384>
 8001c82:	1ac4      	subs	r4, r0, r3
 8001c84:	42a0      	cmp	r0, r4
 8001c86:	4180      	sbcs	r0, r0
 8001c88:	464b      	mov	r3, r9
 8001c8a:	4240      	negs	r0, r0
 8001c8c:	1aff      	subs	r7, r7, r3
 8001c8e:	1a3b      	subs	r3, r7, r0
 8001c90:	469a      	mov	sl, r3
 8001c92:	465d      	mov	r5, fp
 8001c94:	2601      	movs	r6, #1
 8001c96:	e533      	b.n	8001700 <__aeabi_dsub+0xb4>
 8001c98:	003b      	movs	r3, r7
 8001c9a:	4303      	orrs	r3, r0
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x654>
 8001c9e:	e715      	b.n	8001acc <__aeabi_dsub+0x480>
 8001ca0:	08c0      	lsrs	r0, r0, #3
 8001ca2:	077b      	lsls	r3, r7, #29
 8001ca4:	465d      	mov	r5, fp
 8001ca6:	4303      	orrs	r3, r0
 8001ca8:	08fa      	lsrs	r2, r7, #3
 8001caa:	e666      	b.n	800197a <__aeabi_dsub+0x32e>
 8001cac:	08c0      	lsrs	r0, r0, #3
 8001cae:	077b      	lsls	r3, r7, #29
 8001cb0:	4303      	orrs	r3, r0
 8001cb2:	08fa      	lsrs	r2, r7, #3
 8001cb4:	e65e      	b.n	8001974 <__aeabi_dsub+0x328>
 8001cb6:	003a      	movs	r2, r7
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	4302      	orrs	r2, r0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x674>
 8001cbe:	e682      	b.n	80019c6 <__aeabi_dsub+0x37a>
 8001cc0:	464a      	mov	r2, r9
 8001cc2:	0752      	lsls	r2, r2, #29
 8001cc4:	2480      	movs	r4, #128	; 0x80
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	464a      	mov	r2, r9
 8001cca:	0324      	lsls	r4, r4, #12
 8001ccc:	08d2      	lsrs	r2, r2, #3
 8001cce:	4222      	tst	r2, r4
 8001cd0:	d007      	beq.n	8001ce2 <__aeabi_dsub+0x696>
 8001cd2:	08fe      	lsrs	r6, r7, #3
 8001cd4:	4226      	tst	r6, r4
 8001cd6:	d104      	bne.n	8001ce2 <__aeabi_dsub+0x696>
 8001cd8:	465d      	mov	r5, fp
 8001cda:	0032      	movs	r2, r6
 8001cdc:	08c3      	lsrs	r3, r0, #3
 8001cde:	077f      	lsls	r7, r7, #29
 8001ce0:	433b      	orrs	r3, r7
 8001ce2:	0f59      	lsrs	r1, r3, #29
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	0749      	lsls	r1, r1, #29
 8001cea:	430b      	orrs	r3, r1
 8001cec:	e670      	b.n	80019d0 <__aeabi_dsub+0x384>
 8001cee:	08c0      	lsrs	r0, r0, #3
 8001cf0:	077b      	lsls	r3, r7, #29
 8001cf2:	4303      	orrs	r3, r0
 8001cf4:	08fa      	lsrs	r2, r7, #3
 8001cf6:	e640      	b.n	800197a <__aeabi_dsub+0x32e>
 8001cf8:	464c      	mov	r4, r9
 8001cfa:	3920      	subs	r1, #32
 8001cfc:	40cc      	lsrs	r4, r1
 8001cfe:	4661      	mov	r1, ip
 8001d00:	2920      	cmp	r1, #32
 8001d02:	d006      	beq.n	8001d12 <__aeabi_dsub+0x6c6>
 8001d04:	4666      	mov	r6, ip
 8001d06:	2140      	movs	r1, #64	; 0x40
 8001d08:	1b89      	subs	r1, r1, r6
 8001d0a:	464e      	mov	r6, r9
 8001d0c:	408e      	lsls	r6, r1
 8001d0e:	4333      	orrs	r3, r6
 8001d10:	4698      	mov	r8, r3
 8001d12:	4643      	mov	r3, r8
 8001d14:	1e59      	subs	r1, r3, #1
 8001d16:	418b      	sbcs	r3, r1
 8001d18:	431c      	orrs	r4, r3
 8001d1a:	e5d8      	b.n	80018ce <__aeabi_dsub+0x282>
 8001d1c:	181c      	adds	r4, r3, r0
 8001d1e:	4284      	cmp	r4, r0
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	444f      	add	r7, r9
 8001d24:	46ba      	mov	sl, r7
 8001d26:	4240      	negs	r0, r0
 8001d28:	4482      	add	sl, r0
 8001d2a:	e6d9      	b.n	8001ae0 <__aeabi_dsub+0x494>
 8001d2c:	4653      	mov	r3, sl
 8001d2e:	4323      	orrs	r3, r4
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x6e8>
 8001d32:	e6cb      	b.n	8001acc <__aeabi_dsub+0x480>
 8001d34:	e614      	b.n	8001960 <__aeabi_dsub+0x314>
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	000007ff 	.word	0x000007ff
 8001d3c:	ff7fffff 	.word	0xff7fffff
 8001d40:	000007fe 	.word	0x000007fe
 8001d44:	2300      	movs	r3, #0
 8001d46:	4a01      	ldr	r2, [pc, #4]	; (8001d4c <__aeabi_dsub+0x700>)
 8001d48:	001c      	movs	r4, r3
 8001d4a:	e529      	b.n	80017a0 <__aeabi_dsub+0x154>
 8001d4c:	000007ff 	.word	0x000007ff

08001d50 <__aeabi_d2iz>:
 8001d50:	000a      	movs	r2, r1
 8001d52:	b530      	push	{r4, r5, lr}
 8001d54:	4c13      	ldr	r4, [pc, #76]	; (8001da4 <__aeabi_d2iz+0x54>)
 8001d56:	0053      	lsls	r3, r2, #1
 8001d58:	0309      	lsls	r1, r1, #12
 8001d5a:	0005      	movs	r5, r0
 8001d5c:	0b09      	lsrs	r1, r1, #12
 8001d5e:	2000      	movs	r0, #0
 8001d60:	0d5b      	lsrs	r3, r3, #21
 8001d62:	0fd2      	lsrs	r2, r2, #31
 8001d64:	42a3      	cmp	r3, r4
 8001d66:	dd04      	ble.n	8001d72 <__aeabi_d2iz+0x22>
 8001d68:	480f      	ldr	r0, [pc, #60]	; (8001da8 <__aeabi_d2iz+0x58>)
 8001d6a:	4283      	cmp	r3, r0
 8001d6c:	dd02      	ble.n	8001d74 <__aeabi_d2iz+0x24>
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <__aeabi_d2iz+0x5c>)
 8001d70:	18d0      	adds	r0, r2, r3
 8001d72:	bd30      	pop	{r4, r5, pc}
 8001d74:	2080      	movs	r0, #128	; 0x80
 8001d76:	0340      	lsls	r0, r0, #13
 8001d78:	4301      	orrs	r1, r0
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <__aeabi_d2iz+0x60>)
 8001d7c:	1ac0      	subs	r0, r0, r3
 8001d7e:	281f      	cmp	r0, #31
 8001d80:	dd08      	ble.n	8001d94 <__aeabi_d2iz+0x44>
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <__aeabi_d2iz+0x64>)
 8001d84:	1ac3      	subs	r3, r0, r3
 8001d86:	40d9      	lsrs	r1, r3
 8001d88:	000b      	movs	r3, r1
 8001d8a:	4258      	negs	r0, r3
 8001d8c:	2a00      	cmp	r2, #0
 8001d8e:	d1f0      	bne.n	8001d72 <__aeabi_d2iz+0x22>
 8001d90:	0018      	movs	r0, r3
 8001d92:	e7ee      	b.n	8001d72 <__aeabi_d2iz+0x22>
 8001d94:	4c08      	ldr	r4, [pc, #32]	; (8001db8 <__aeabi_d2iz+0x68>)
 8001d96:	40c5      	lsrs	r5, r0
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	4463      	add	r3, ip
 8001d9c:	4099      	lsls	r1, r3
 8001d9e:	000b      	movs	r3, r1
 8001da0:	432b      	orrs	r3, r5
 8001da2:	e7f2      	b.n	8001d8a <__aeabi_d2iz+0x3a>
 8001da4:	000003fe 	.word	0x000003fe
 8001da8:	0000041d 	.word	0x0000041d
 8001dac:	7fffffff 	.word	0x7fffffff
 8001db0:	00000433 	.word	0x00000433
 8001db4:	00000413 	.word	0x00000413
 8001db8:	fffffbed 	.word	0xfffffbed

08001dbc <__aeabi_i2d>:
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d016      	beq.n	8001df0 <__aeabi_i2d+0x34>
 8001dc2:	17c3      	asrs	r3, r0, #31
 8001dc4:	18c5      	adds	r5, r0, r3
 8001dc6:	405d      	eors	r5, r3
 8001dc8:	0fc4      	lsrs	r4, r0, #31
 8001dca:	0028      	movs	r0, r5
 8001dcc:	f000 f88a 	bl	8001ee4 <__clzsi2>
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <__aeabi_i2d+0x5c>)
 8001dd2:	1a1b      	subs	r3, r3, r0
 8001dd4:	280a      	cmp	r0, #10
 8001dd6:	dc16      	bgt.n	8001e06 <__aeabi_i2d+0x4a>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	002e      	movs	r6, r5
 8001ddc:	3215      	adds	r2, #21
 8001dde:	4096      	lsls	r6, r2
 8001de0:	220b      	movs	r2, #11
 8001de2:	1a12      	subs	r2, r2, r0
 8001de4:	40d5      	lsrs	r5, r2
 8001de6:	055b      	lsls	r3, r3, #21
 8001de8:	032d      	lsls	r5, r5, #12
 8001dea:	0b2d      	lsrs	r5, r5, #12
 8001dec:	0d5b      	lsrs	r3, r3, #21
 8001dee:	e003      	b.n	8001df8 <__aeabi_i2d+0x3c>
 8001df0:	2400      	movs	r4, #0
 8001df2:	2300      	movs	r3, #0
 8001df4:	2500      	movs	r5, #0
 8001df6:	2600      	movs	r6, #0
 8001df8:	051b      	lsls	r3, r3, #20
 8001dfa:	432b      	orrs	r3, r5
 8001dfc:	07e4      	lsls	r4, r4, #31
 8001dfe:	4323      	orrs	r3, r4
 8001e00:	0030      	movs	r0, r6
 8001e02:	0019      	movs	r1, r3
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
 8001e06:	380b      	subs	r0, #11
 8001e08:	4085      	lsls	r5, r0
 8001e0a:	055b      	lsls	r3, r3, #21
 8001e0c:	032d      	lsls	r5, r5, #12
 8001e0e:	2600      	movs	r6, #0
 8001e10:	0b2d      	lsrs	r5, r5, #12
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	e7f0      	b.n	8001df8 <__aeabi_i2d+0x3c>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	0000041e 	.word	0x0000041e

08001e1c <__aeabi_ui2d>:
 8001e1c:	b510      	push	{r4, lr}
 8001e1e:	1e04      	subs	r4, r0, #0
 8001e20:	d010      	beq.n	8001e44 <__aeabi_ui2d+0x28>
 8001e22:	f000 f85f 	bl	8001ee4 <__clzsi2>
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <__aeabi_ui2d+0x48>)
 8001e28:	1a1b      	subs	r3, r3, r0
 8001e2a:	280a      	cmp	r0, #10
 8001e2c:	dc11      	bgt.n	8001e52 <__aeabi_ui2d+0x36>
 8001e2e:	220b      	movs	r2, #11
 8001e30:	0021      	movs	r1, r4
 8001e32:	1a12      	subs	r2, r2, r0
 8001e34:	40d1      	lsrs	r1, r2
 8001e36:	3015      	adds	r0, #21
 8001e38:	030a      	lsls	r2, r1, #12
 8001e3a:	055b      	lsls	r3, r3, #21
 8001e3c:	4084      	lsls	r4, r0
 8001e3e:	0b12      	lsrs	r2, r2, #12
 8001e40:	0d5b      	lsrs	r3, r3, #21
 8001e42:	e001      	b.n	8001e48 <__aeabi_ui2d+0x2c>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2200      	movs	r2, #0
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	0020      	movs	r0, r4
 8001e4e:	0019      	movs	r1, r3
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	0022      	movs	r2, r4
 8001e54:	380b      	subs	r0, #11
 8001e56:	4082      	lsls	r2, r0
 8001e58:	055b      	lsls	r3, r3, #21
 8001e5a:	0312      	lsls	r2, r2, #12
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	0b12      	lsrs	r2, r2, #12
 8001e60:	0d5b      	lsrs	r3, r3, #21
 8001e62:	e7f1      	b.n	8001e48 <__aeabi_ui2d+0x2c>
 8001e64:	0000041e 	.word	0x0000041e

08001e68 <__aeabi_cdrcmple>:
 8001e68:	4684      	mov	ip, r0
 8001e6a:	0010      	movs	r0, r2
 8001e6c:	4662      	mov	r2, ip
 8001e6e:	468c      	mov	ip, r1
 8001e70:	0019      	movs	r1, r3
 8001e72:	4663      	mov	r3, ip
 8001e74:	e000      	b.n	8001e78 <__aeabi_cdcmpeq>
 8001e76:	46c0      	nop			; (mov r8, r8)

08001e78 <__aeabi_cdcmpeq>:
 8001e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e7a:	f000 f8f9 	bl	8002070 <__ledf2>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d401      	bmi.n	8001e86 <__aeabi_cdcmpeq+0xe>
 8001e82:	2100      	movs	r1, #0
 8001e84:	42c8      	cmn	r0, r1
 8001e86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001e88 <__aeabi_dcmpeq>:
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	f000 f849 	bl	8001f20 <__eqdf2>
 8001e8e:	4240      	negs	r0, r0
 8001e90:	3001      	adds	r0, #1
 8001e92:	bd10      	pop	{r4, pc}

08001e94 <__aeabi_dcmplt>:
 8001e94:	b510      	push	{r4, lr}
 8001e96:	f000 f8eb 	bl	8002070 <__ledf2>
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	db01      	blt.n	8001ea2 <__aeabi_dcmplt+0xe>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	bd10      	pop	{r4, pc}
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	bd10      	pop	{r4, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)

08001ea8 <__aeabi_dcmple>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	f000 f8e1 	bl	8002070 <__ledf2>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	dd01      	ble.n	8001eb6 <__aeabi_dcmple+0xe>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)

08001ebc <__aeabi_dcmpgt>:
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	f000 f871 	bl	8001fa4 <__gedf2>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	dc01      	bgt.n	8001eca <__aeabi_dcmpgt+0xe>
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	2001      	movs	r0, #1
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)

08001ed0 <__aeabi_dcmpge>:
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	f000 f867 	bl	8001fa4 <__gedf2>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	da01      	bge.n	8001ede <__aeabi_dcmpge+0xe>
 8001eda:	2000      	movs	r0, #0
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	2001      	movs	r0, #1
 8001ee0:	bd10      	pop	{r4, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)

08001ee4 <__clzsi2>:
 8001ee4:	211c      	movs	r1, #28
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	4298      	cmp	r0, r3
 8001eec:	d301      	bcc.n	8001ef2 <__clzsi2+0xe>
 8001eee:	0c00      	lsrs	r0, r0, #16
 8001ef0:	3910      	subs	r1, #16
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	4298      	cmp	r0, r3
 8001ef6:	d301      	bcc.n	8001efc <__clzsi2+0x18>
 8001ef8:	0a00      	lsrs	r0, r0, #8
 8001efa:	3908      	subs	r1, #8
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	4298      	cmp	r0, r3
 8001f00:	d301      	bcc.n	8001f06 <__clzsi2+0x22>
 8001f02:	0900      	lsrs	r0, r0, #4
 8001f04:	3904      	subs	r1, #4
 8001f06:	a202      	add	r2, pc, #8	; (adr r2, 8001f10 <__clzsi2+0x2c>)
 8001f08:	5c10      	ldrb	r0, [r2, r0]
 8001f0a:	1840      	adds	r0, r0, r1
 8001f0c:	4770      	bx	lr
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	02020304 	.word	0x02020304
 8001f14:	01010101 	.word	0x01010101
	...

08001f20 <__eqdf2>:
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	464e      	mov	r6, r9
 8001f24:	4645      	mov	r5, r8
 8001f26:	46de      	mov	lr, fp
 8001f28:	4657      	mov	r7, sl
 8001f2a:	4690      	mov	r8, r2
 8001f2c:	b5e0      	push	{r5, r6, r7, lr}
 8001f2e:	0017      	movs	r7, r2
 8001f30:	031a      	lsls	r2, r3, #12
 8001f32:	0b12      	lsrs	r2, r2, #12
 8001f34:	0005      	movs	r5, r0
 8001f36:	4684      	mov	ip, r0
 8001f38:	4819      	ldr	r0, [pc, #100]	; (8001fa0 <__eqdf2+0x80>)
 8001f3a:	030e      	lsls	r6, r1, #12
 8001f3c:	004c      	lsls	r4, r1, #1
 8001f3e:	4691      	mov	r9, r2
 8001f40:	005a      	lsls	r2, r3, #1
 8001f42:	0fdb      	lsrs	r3, r3, #31
 8001f44:	469b      	mov	fp, r3
 8001f46:	0b36      	lsrs	r6, r6, #12
 8001f48:	0d64      	lsrs	r4, r4, #21
 8001f4a:	0fc9      	lsrs	r1, r1, #31
 8001f4c:	0d52      	lsrs	r2, r2, #21
 8001f4e:	4284      	cmp	r4, r0
 8001f50:	d019      	beq.n	8001f86 <__eqdf2+0x66>
 8001f52:	4282      	cmp	r2, r0
 8001f54:	d010      	beq.n	8001f78 <__eqdf2+0x58>
 8001f56:	2001      	movs	r0, #1
 8001f58:	4294      	cmp	r4, r2
 8001f5a:	d10e      	bne.n	8001f7a <__eqdf2+0x5a>
 8001f5c:	454e      	cmp	r6, r9
 8001f5e:	d10c      	bne.n	8001f7a <__eqdf2+0x5a>
 8001f60:	2001      	movs	r0, #1
 8001f62:	45c4      	cmp	ip, r8
 8001f64:	d109      	bne.n	8001f7a <__eqdf2+0x5a>
 8001f66:	4559      	cmp	r1, fp
 8001f68:	d017      	beq.n	8001f9a <__eqdf2+0x7a>
 8001f6a:	2c00      	cmp	r4, #0
 8001f6c:	d105      	bne.n	8001f7a <__eqdf2+0x5a>
 8001f6e:	0030      	movs	r0, r6
 8001f70:	4328      	orrs	r0, r5
 8001f72:	1e43      	subs	r3, r0, #1
 8001f74:	4198      	sbcs	r0, r3
 8001f76:	e000      	b.n	8001f7a <__eqdf2+0x5a>
 8001f78:	2001      	movs	r0, #1
 8001f7a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f7c:	46bb      	mov	fp, r7
 8001f7e:	46b2      	mov	sl, r6
 8001f80:	46a9      	mov	r9, r5
 8001f82:	46a0      	mov	r8, r4
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	0033      	movs	r3, r6
 8001f88:	2001      	movs	r0, #1
 8001f8a:	432b      	orrs	r3, r5
 8001f8c:	d1f5      	bne.n	8001f7a <__eqdf2+0x5a>
 8001f8e:	42a2      	cmp	r2, r4
 8001f90:	d1f3      	bne.n	8001f7a <__eqdf2+0x5a>
 8001f92:	464b      	mov	r3, r9
 8001f94:	433b      	orrs	r3, r7
 8001f96:	d1f0      	bne.n	8001f7a <__eqdf2+0x5a>
 8001f98:	e7e2      	b.n	8001f60 <__eqdf2+0x40>
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	e7ed      	b.n	8001f7a <__eqdf2+0x5a>
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	000007ff 	.word	0x000007ff

08001fa4 <__gedf2>:
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa6:	4647      	mov	r7, r8
 8001fa8:	46ce      	mov	lr, r9
 8001faa:	0004      	movs	r4, r0
 8001fac:	0018      	movs	r0, r3
 8001fae:	0016      	movs	r6, r2
 8001fb0:	031b      	lsls	r3, r3, #12
 8001fb2:	0b1b      	lsrs	r3, r3, #12
 8001fb4:	4d2d      	ldr	r5, [pc, #180]	; (800206c <__gedf2+0xc8>)
 8001fb6:	004a      	lsls	r2, r1, #1
 8001fb8:	4699      	mov	r9, r3
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	0043      	lsls	r3, r0, #1
 8001fbe:	030f      	lsls	r7, r1, #12
 8001fc0:	46a4      	mov	ip, r4
 8001fc2:	46b0      	mov	r8, r6
 8001fc4:	0b3f      	lsrs	r7, r7, #12
 8001fc6:	0d52      	lsrs	r2, r2, #21
 8001fc8:	0fc9      	lsrs	r1, r1, #31
 8001fca:	0d5b      	lsrs	r3, r3, #21
 8001fcc:	0fc0      	lsrs	r0, r0, #31
 8001fce:	42aa      	cmp	r2, r5
 8001fd0:	d021      	beq.n	8002016 <__gedf2+0x72>
 8001fd2:	42ab      	cmp	r3, r5
 8001fd4:	d013      	beq.n	8001ffe <__gedf2+0x5a>
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d122      	bne.n	8002020 <__gedf2+0x7c>
 8001fda:	433c      	orrs	r4, r7
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <__gedf2+0x42>
 8001fe0:	464d      	mov	r5, r9
 8001fe2:	432e      	orrs	r6, r5
 8001fe4:	d022      	beq.n	800202c <__gedf2+0x88>
 8001fe6:	2c00      	cmp	r4, #0
 8001fe8:	d010      	beq.n	800200c <__gedf2+0x68>
 8001fea:	4281      	cmp	r1, r0
 8001fec:	d022      	beq.n	8002034 <__gedf2+0x90>
 8001fee:	2002      	movs	r0, #2
 8001ff0:	3901      	subs	r1, #1
 8001ff2:	4008      	ands	r0, r1
 8001ff4:	3801      	subs	r0, #1
 8001ff6:	bcc0      	pop	{r6, r7}
 8001ff8:	46b9      	mov	r9, r7
 8001ffa:	46b0      	mov	r8, r6
 8001ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffe:	464d      	mov	r5, r9
 8002000:	432e      	orrs	r6, r5
 8002002:	d129      	bne.n	8002058 <__gedf2+0xb4>
 8002004:	2a00      	cmp	r2, #0
 8002006:	d1f0      	bne.n	8001fea <__gedf2+0x46>
 8002008:	433c      	orrs	r4, r7
 800200a:	d1ee      	bne.n	8001fea <__gedf2+0x46>
 800200c:	2800      	cmp	r0, #0
 800200e:	d1f2      	bne.n	8001ff6 <__gedf2+0x52>
 8002010:	2001      	movs	r0, #1
 8002012:	4240      	negs	r0, r0
 8002014:	e7ef      	b.n	8001ff6 <__gedf2+0x52>
 8002016:	003d      	movs	r5, r7
 8002018:	4325      	orrs	r5, r4
 800201a:	d11d      	bne.n	8002058 <__gedf2+0xb4>
 800201c:	4293      	cmp	r3, r2
 800201e:	d0ee      	beq.n	8001ffe <__gedf2+0x5a>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e2      	bne.n	8001fea <__gedf2+0x46>
 8002024:	464c      	mov	r4, r9
 8002026:	4326      	orrs	r6, r4
 8002028:	d1df      	bne.n	8001fea <__gedf2+0x46>
 800202a:	e7e0      	b.n	8001fee <__gedf2+0x4a>
 800202c:	2000      	movs	r0, #0
 800202e:	2c00      	cmp	r4, #0
 8002030:	d0e1      	beq.n	8001ff6 <__gedf2+0x52>
 8002032:	e7dc      	b.n	8001fee <__gedf2+0x4a>
 8002034:	429a      	cmp	r2, r3
 8002036:	dc0a      	bgt.n	800204e <__gedf2+0xaa>
 8002038:	dbe8      	blt.n	800200c <__gedf2+0x68>
 800203a:	454f      	cmp	r7, r9
 800203c:	d8d7      	bhi.n	8001fee <__gedf2+0x4a>
 800203e:	d00e      	beq.n	800205e <__gedf2+0xba>
 8002040:	2000      	movs	r0, #0
 8002042:	454f      	cmp	r7, r9
 8002044:	d2d7      	bcs.n	8001ff6 <__gedf2+0x52>
 8002046:	2900      	cmp	r1, #0
 8002048:	d0e2      	beq.n	8002010 <__gedf2+0x6c>
 800204a:	0008      	movs	r0, r1
 800204c:	e7d3      	b.n	8001ff6 <__gedf2+0x52>
 800204e:	4243      	negs	r3, r0
 8002050:	4158      	adcs	r0, r3
 8002052:	0040      	lsls	r0, r0, #1
 8002054:	3801      	subs	r0, #1
 8002056:	e7ce      	b.n	8001ff6 <__gedf2+0x52>
 8002058:	2002      	movs	r0, #2
 800205a:	4240      	negs	r0, r0
 800205c:	e7cb      	b.n	8001ff6 <__gedf2+0x52>
 800205e:	45c4      	cmp	ip, r8
 8002060:	d8c5      	bhi.n	8001fee <__gedf2+0x4a>
 8002062:	2000      	movs	r0, #0
 8002064:	45c4      	cmp	ip, r8
 8002066:	d2c6      	bcs.n	8001ff6 <__gedf2+0x52>
 8002068:	e7ed      	b.n	8002046 <__gedf2+0xa2>
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	000007ff 	.word	0x000007ff

08002070 <__ledf2>:
 8002070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002072:	4647      	mov	r7, r8
 8002074:	46ce      	mov	lr, r9
 8002076:	0004      	movs	r4, r0
 8002078:	0018      	movs	r0, r3
 800207a:	0016      	movs	r6, r2
 800207c:	031b      	lsls	r3, r3, #12
 800207e:	0b1b      	lsrs	r3, r3, #12
 8002080:	4d2c      	ldr	r5, [pc, #176]	; (8002134 <__ledf2+0xc4>)
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	4699      	mov	r9, r3
 8002086:	b580      	push	{r7, lr}
 8002088:	0043      	lsls	r3, r0, #1
 800208a:	030f      	lsls	r7, r1, #12
 800208c:	46a4      	mov	ip, r4
 800208e:	46b0      	mov	r8, r6
 8002090:	0b3f      	lsrs	r7, r7, #12
 8002092:	0d52      	lsrs	r2, r2, #21
 8002094:	0fc9      	lsrs	r1, r1, #31
 8002096:	0d5b      	lsrs	r3, r3, #21
 8002098:	0fc0      	lsrs	r0, r0, #31
 800209a:	42aa      	cmp	r2, r5
 800209c:	d00d      	beq.n	80020ba <__ledf2+0x4a>
 800209e:	42ab      	cmp	r3, r5
 80020a0:	d010      	beq.n	80020c4 <__ledf2+0x54>
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d127      	bne.n	80020f6 <__ledf2+0x86>
 80020a6:	433c      	orrs	r4, r7
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d111      	bne.n	80020d0 <__ledf2+0x60>
 80020ac:	464d      	mov	r5, r9
 80020ae:	432e      	orrs	r6, r5
 80020b0:	d10e      	bne.n	80020d0 <__ledf2+0x60>
 80020b2:	2000      	movs	r0, #0
 80020b4:	2c00      	cmp	r4, #0
 80020b6:	d015      	beq.n	80020e4 <__ledf2+0x74>
 80020b8:	e00e      	b.n	80020d8 <__ledf2+0x68>
 80020ba:	003d      	movs	r5, r7
 80020bc:	4325      	orrs	r5, r4
 80020be:	d110      	bne.n	80020e2 <__ledf2+0x72>
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d118      	bne.n	80020f6 <__ledf2+0x86>
 80020c4:	464d      	mov	r5, r9
 80020c6:	432e      	orrs	r6, r5
 80020c8:	d10b      	bne.n	80020e2 <__ledf2+0x72>
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d102      	bne.n	80020d4 <__ledf2+0x64>
 80020ce:	433c      	orrs	r4, r7
 80020d0:	2c00      	cmp	r4, #0
 80020d2:	d00b      	beq.n	80020ec <__ledf2+0x7c>
 80020d4:	4281      	cmp	r1, r0
 80020d6:	d014      	beq.n	8002102 <__ledf2+0x92>
 80020d8:	2002      	movs	r0, #2
 80020da:	3901      	subs	r1, #1
 80020dc:	4008      	ands	r0, r1
 80020de:	3801      	subs	r0, #1
 80020e0:	e000      	b.n	80020e4 <__ledf2+0x74>
 80020e2:	2002      	movs	r0, #2
 80020e4:	bcc0      	pop	{r6, r7}
 80020e6:	46b9      	mov	r9, r7
 80020e8:	46b0      	mov	r8, r6
 80020ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d1f9      	bne.n	80020e4 <__ledf2+0x74>
 80020f0:	2001      	movs	r0, #1
 80020f2:	4240      	negs	r0, r0
 80020f4:	e7f6      	b.n	80020e4 <__ledf2+0x74>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ec      	bne.n	80020d4 <__ledf2+0x64>
 80020fa:	464c      	mov	r4, r9
 80020fc:	4326      	orrs	r6, r4
 80020fe:	d1e9      	bne.n	80020d4 <__ledf2+0x64>
 8002100:	e7ea      	b.n	80020d8 <__ledf2+0x68>
 8002102:	429a      	cmp	r2, r3
 8002104:	dd04      	ble.n	8002110 <__ledf2+0xa0>
 8002106:	4243      	negs	r3, r0
 8002108:	4158      	adcs	r0, r3
 800210a:	0040      	lsls	r0, r0, #1
 800210c:	3801      	subs	r0, #1
 800210e:	e7e9      	b.n	80020e4 <__ledf2+0x74>
 8002110:	429a      	cmp	r2, r3
 8002112:	dbeb      	blt.n	80020ec <__ledf2+0x7c>
 8002114:	454f      	cmp	r7, r9
 8002116:	d8df      	bhi.n	80020d8 <__ledf2+0x68>
 8002118:	d006      	beq.n	8002128 <__ledf2+0xb8>
 800211a:	2000      	movs	r0, #0
 800211c:	454f      	cmp	r7, r9
 800211e:	d2e1      	bcs.n	80020e4 <__ledf2+0x74>
 8002120:	2900      	cmp	r1, #0
 8002122:	d0e5      	beq.n	80020f0 <__ledf2+0x80>
 8002124:	0008      	movs	r0, r1
 8002126:	e7dd      	b.n	80020e4 <__ledf2+0x74>
 8002128:	45c4      	cmp	ip, r8
 800212a:	d8d5      	bhi.n	80020d8 <__ledf2+0x68>
 800212c:	2000      	movs	r0, #0
 800212e:	45c4      	cmp	ip, r8
 8002130:	d2d8      	bcs.n	80020e4 <__ledf2+0x74>
 8002132:	e7f5      	b.n	8002120 <__ledf2+0xb0>
 8002134:	000007ff 	.word	0x000007ff

08002138 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	0018      	movs	r0, r3
 8002142:	230c      	movs	r3, #12
 8002144:	001a      	movs	r2, r3
 8002146:	2100      	movs	r1, #0
 8002148:	f006 fa48 	bl	80085dc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <MX_ADC_Init+0xc8>)
 800214e:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <MX_ADC_Init+0xcc>)
 8002150:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <MX_ADC_Init+0xc8>)
 8002154:	2200      	movs	r2, #0
 8002156:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <MX_ADC_Init+0xc8>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <MX_ADC_Init+0xc8>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <MX_ADC_Init+0xc8>)
 8002166:	2201      	movs	r2, #1
 8002168:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <MX_ADC_Init+0xc8>)
 800216c:	2208      	movs	r2, #8
 800216e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <MX_ADC_Init+0xc8>)
 8002172:	2200      	movs	r2, #0
 8002174:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <MX_ADC_Init+0xc8>)
 8002178:	2200      	movs	r2, #0
 800217a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800217c:	4b20      	ldr	r3, [pc, #128]	; (8002200 <MX_ADC_Init+0xc8>)
 800217e:	2200      	movs	r2, #0
 8002180:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <MX_ADC_Init+0xc8>)
 8002184:	2201      	movs	r2, #1
 8002186:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_ADC_Init+0xc8>)
 800218a:	22c2      	movs	r2, #194	; 0xc2
 800218c:	32ff      	adds	r2, #255	; 0xff
 800218e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_ADC_Init+0xc8>)
 8002192:	2200      	movs	r2, #0
 8002194:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_ADC_Init+0xc8>)
 8002198:	2224      	movs	r2, #36	; 0x24
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_ADC_Init+0xc8>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_ADC_Init+0xc8>)
 80021a6:	0018      	movs	r0, r3
 80021a8:	f001 fef6 	bl	8003f98 <HAL_ADC_Init>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d001      	beq.n	80021b4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80021b0:	f000 fb77 	bl	80028a2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	0152      	lsls	r2, r2, #5
 80021c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2203      	movs	r2, #3
 80021c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021c8:	1d3a      	adds	r2, r7, #4
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <MX_ADC_Init+0xc8>)
 80021cc:	0011      	movs	r1, r2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f002 f91a 	bl	8004408 <HAL_ADC_ConfigChannel>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d001      	beq.n	80021dc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80021d8:	f000 fb63 	bl	80028a2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021e2:	1d3a      	adds	r2, r7, #4
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_ADC_Init+0xc8>)
 80021e6:	0011      	movs	r1, r2
 80021e8:	0018      	movs	r0, r3
 80021ea:	f002 f90d 	bl	8004408 <HAL_ADC_ConfigChannel>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80021f2:	f000 fb56 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	20000058 	.word	0x20000058
 8002204:	40012400 	.word	0x40012400

08002208 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b08b      	sub	sp, #44	; 0x2c
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	2414      	movs	r4, #20
 8002212:	193b      	adds	r3, r7, r4
 8002214:	0018      	movs	r0, r3
 8002216:	2314      	movs	r3, #20
 8002218:	001a      	movs	r2, r3
 800221a:	2100      	movs	r1, #0
 800221c:	f006 f9de 	bl	80085dc <memset>
  if(adcHandle->Instance==ADC1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_ADC_MspInit+0x84>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d12b      	bne.n	8002282 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_ADC_MspInit+0x88>)
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_ADC_MspInit+0x88>)
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0089      	lsls	r1, r1, #2
 8002234:	430a      	orrs	r2, r1
 8002236:	619a      	str	r2, [r3, #24]
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_ADC_MspInit+0x88>)
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_ADC_MspInit+0x88>)
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_ADC_MspInit+0x88>)
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	0289      	lsls	r1, r1, #10
 8002250:	430a      	orrs	r2, r1
 8002252:	615a      	str	r2, [r3, #20]
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_ADC_MspInit+0x88>)
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	029b      	lsls	r3, r3, #10
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002262:	193b      	adds	r3, r7, r4
 8002264:	2203      	movs	r2, #3
 8002266:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002268:	193b      	adds	r3, r7, r4
 800226a:	2203      	movs	r2, #3
 800226c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	193b      	adds	r3, r7, r4
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	193a      	adds	r2, r7, r4
 8002276:	2390      	movs	r3, #144	; 0x90
 8002278:	05db      	lsls	r3, r3, #23
 800227a:	0011      	movs	r1, r2
 800227c:	0018      	movs	r0, r3
 800227e:	f002 fbb1 	bl	80049e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b00b      	add	sp, #44	; 0x2c
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	40012400 	.word	0x40012400
 8002290:	40021000 	.word	0x40021000

08002294 <ADC_read>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC_read(uint32_t *adc_val, uint8_t channels) {
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	000a      	movs	r2, r1
 800229e:	1cfb      	adds	r3, r7, #3
 80022a0:	701a      	strb	r2, [r3, #0]
for (int i=0; i<channels; ++i) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e015      	b.n	80022d4 <ADC_read+0x40>
HAL_ADC_Start(&hadc);
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <ADC_read+0x54>)
 80022aa:	0018      	movs	r0, r3
 80022ac:	f001 ffb4 	bl	8004218 <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc, 1);
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <ADC_read+0x54>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	0018      	movs	r0, r3
 80022b6:	f002 f803 	bl	80042c0 <HAL_ADC_PollForConversion>
adc_val[i] = HAL_ADC_GetValue(&hadc);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	18d4      	adds	r4, r2, r3
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <ADC_read+0x54>)
 80022c4:	0018      	movs	r0, r3
 80022c6:	f002 f893 	bl	80043f0 <HAL_ADC_GetValue>
 80022ca:	0003      	movs	r3, r0
 80022cc:	6023      	str	r3, [r4, #0]
for (int i=0; i<channels; ++i) {
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3301      	adds	r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	1cfb      	adds	r3, r7, #3
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	429a      	cmp	r2, r3
 80022dc:	dbe4      	blt.n	80022a8 <ADC_read+0x14>
}
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b005      	add	sp, #20
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	20000058 	.word	0x20000058

080022ec <ReadButton>:
ButtonState AirAuto;
/* VARIABLES END */


void ReadButton()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	JoyStick.cur = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <ReadButton+0xc0>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	0018      	movs	r0, r3
 80022f6:	f002 fced 	bl	8004cd4 <HAL_GPIO_ReadPin>
 80022fa:	0003      	movs	r3, r0
 80022fc:	001a      	movs	r2, r3
 80022fe:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <ReadButton+0xc4>)
 8002300:	701a      	strb	r2, [r3, #0]
	SeatTurn.cur = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002302:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <ReadButton+0xc0>)
 8002304:	2102      	movs	r1, #2
 8002306:	0018      	movs	r0, r3
 8002308:	f002 fce4 	bl	8004cd4 <HAL_GPIO_ReadPin>
 800230c:	0003      	movs	r3, r0
 800230e:	001a      	movs	r2, r3
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <ReadButton+0xc8>)
 8002312:	701a      	strb	r2, [r3, #0]
	AirAuto.cur = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <ReadButton+0xc0>)
 8002316:	2104      	movs	r1, #4
 8002318:	0018      	movs	r0, r3
 800231a:	f002 fcdb 	bl	8004cd4 <HAL_GPIO_ReadPin>
 800231e:	0003      	movs	r3, r0
 8002320:	001a      	movs	r2, r3
 8002322:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <ReadButton+0xcc>)
 8002324:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0 && JoyStick.bef == 1)
 8002326:	4b21      	ldr	r3, [pc, #132]	; (80023ac <ReadButton+0xc0>)
 8002328:	2101      	movs	r1, #1
 800232a:	0018      	movs	r0, r3
 800232c:	f002 fcd2 	bl	8004cd4 <HAL_GPIO_ReadPin>
 8002330:	1e03      	subs	r3, r0, #0
 8002332:	d10a      	bne.n	800234a <ReadButton+0x5e>
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <ReadButton+0xc4>)
 8002336:	785b      	ldrb	r3, [r3, #1]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d106      	bne.n	800234a <ReadButton+0x5e>
	{
		JoyStick.Pushflag ^= 1;
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <ReadButton+0xc4>)
 800233e:	789b      	ldrb	r3, [r3, #2]
 8002340:	2201      	movs	r2, #1
 8002342:	4053      	eors	r3, r2
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <ReadButton+0xc4>)
 8002348:	709a      	strb	r2, [r3, #2]
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1 && SeatTurn.bef == 0)
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <ReadButton+0xc0>)
 800234c:	2102      	movs	r1, #2
 800234e:	0018      	movs	r0, r3
 8002350:	f002 fcc0 	bl	8004cd4 <HAL_GPIO_ReadPin>
 8002354:	0003      	movs	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d106      	bne.n	8002368 <ReadButton+0x7c>
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <ReadButton+0xc8>)
 800235c:	785b      	ldrb	r3, [r3, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <ReadButton+0x7c>
	{
		SeatTurn.Pushflag = 1;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <ReadButton+0xc8>)
 8002364:	2201      	movs	r2, #1
 8002366:	709a      	strb	r2, [r3, #2]
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1 && AirAuto.bef == 0)
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <ReadButton+0xc0>)
 800236a:	2104      	movs	r1, #4
 800236c:	0018      	movs	r0, r3
 800236e:	f002 fcb1 	bl	8004cd4 <HAL_GPIO_ReadPin>
 8002372:	0003      	movs	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	d10a      	bne.n	800238e <ReadButton+0xa2>
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <ReadButton+0xcc>)
 800237a:	785b      	ldrb	r3, [r3, #1]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <ReadButton+0xa2>
	{
		AirAuto.Pushflag ^= 1;
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <ReadButton+0xcc>)
 8002382:	789b      	ldrb	r3, [r3, #2]
 8002384:	2201      	movs	r2, #1
 8002386:	4053      	eors	r3, r2
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <ReadButton+0xcc>)
 800238c:	709a      	strb	r2, [r3, #2]
	}
	JoyStick.bef = JoyStick.cur;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <ReadButton+0xc4>)
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <ReadButton+0xc4>)
 8002394:	705a      	strb	r2, [r3, #1]
	SeatTurn.bef = SeatTurn.cur;
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <ReadButton+0xc8>)
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <ReadButton+0xc8>)
 800239c:	705a      	strb	r2, [r3, #1]
	AirAuto.bef = AirAuto.cur;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <ReadButton+0xcc>)
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <ReadButton+0xcc>)
 80023a4:	705a      	strb	r2, [r3, #1]
}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	48000400 	.word	0x48000400
 80023b0:	20000098 	.word	0x20000098
 80023b4:	2000009c 	.word	0x2000009c
 80023b8:	200000a0 	.word	0x200000a0

080023bc <ShowFND>:
//uint32_t num[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f};
uint32_t num[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x58, 0x00, 0x10};
/* VARIABLES END */

void ShowFND(uint32_t data)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	if((data/100) == 0 && ((data%100)/10) == 0)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b63      	cmp	r3, #99	; 0x63
 80023c8:	d816      	bhi.n	80023f8 <ShowFND+0x3c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2164      	movs	r1, #100	; 0x64
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7fd ff1e 	bl	8000210 <__aeabi_uidivmod>
 80023d4:	000b      	movs	r3, r1
 80023d6:	2b09      	cmp	r3, #9
 80023d8:	d80e      	bhi.n	80023f8 <ShowFND+0x3c>
	{
		GPIOC -> ODR = (num[(data%10)] | DIGIT_1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	210a      	movs	r1, #10
 80023de:	0018      	movs	r0, r3
 80023e0:	f7fd ff16 	bl	8000210 <__aeabi_uidivmod>
 80023e4:	000b      	movs	r3, r1
 80023e6:	001a      	movs	r2, r3
 80023e8:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <ShowFND+0xf4>)
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	58d2      	ldr	r2, [r2, r3]
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <ShowFND+0xf8>)
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	430a      	orrs	r2, r1
 80023f4:	615a      	str	r2, [r3, #20]
		GPIOC -> ODR = (num[(data/100)] | DIGIT_3);
	}
	//GPIOC -> ODR = (num[(data%10)] | DIGIT_1);
	//GPIOC -> ODR = (num[((data%100)/10)] | DIGIT_2);
	//GPIOC -> ODR = (num[(data/100)] | DIGIT_3);
}
 80023f6:	e056      	b.n	80024a6 <ShowFND+0xea>
	else if((data/100) == 0)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b63      	cmp	r3, #99	; 0x63
 80023fc:	d822      	bhi.n	8002444 <ShowFND+0x88>
		GPIOC -> ODR = (num[(data%10)] | DIGIT_1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	210a      	movs	r1, #10
 8002402:	0018      	movs	r0, r3
 8002404:	f7fd ff04 	bl	8000210 <__aeabi_uidivmod>
 8002408:	000b      	movs	r3, r1
 800240a:	001a      	movs	r2, r3
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <ShowFND+0xf4>)
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	58d2      	ldr	r2, [r2, r3]
 8002412:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <ShowFND+0xf8>)
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	430a      	orrs	r2, r1
 8002418:	615a      	str	r2, [r3, #20]
		GPIOC -> ODR = (num[((data%100)/10)] | DIGIT_2);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2164      	movs	r1, #100	; 0x64
 800241e:	0018      	movs	r0, r3
 8002420:	f7fd fef6 	bl	8000210 <__aeabi_uidivmod>
 8002424:	000b      	movs	r3, r1
 8002426:	210a      	movs	r1, #10
 8002428:	0018      	movs	r0, r3
 800242a:	f7fd fe6b 	bl	8000104 <__udivsi3>
 800242e:	0003      	movs	r3, r0
 8002430:	001a      	movs	r2, r3
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <ShowFND+0xf4>)
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	58d2      	ldr	r2, [r2, r3]
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <ShowFND+0xf8>)
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0049      	lsls	r1, r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	615a      	str	r2, [r3, #20]
}
 8002442:	e030      	b.n	80024a6 <ShowFND+0xea>
		GPIOC -> ODR = (num[(data%10)] | DIGIT_1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	210a      	movs	r1, #10
 8002448:	0018      	movs	r0, r3
 800244a:	f7fd fee1 	bl	8000210 <__aeabi_uidivmod>
 800244e:	000b      	movs	r3, r1
 8002450:	001a      	movs	r2, r3
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <ShowFND+0xf4>)
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	58d2      	ldr	r2, [r2, r3]
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <ShowFND+0xf8>)
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	430a      	orrs	r2, r1
 800245e:	615a      	str	r2, [r3, #20]
		GPIOC -> ODR = (num[((data%100)/10)] | DIGIT_2);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2164      	movs	r1, #100	; 0x64
 8002464:	0018      	movs	r0, r3
 8002466:	f7fd fed3 	bl	8000210 <__aeabi_uidivmod>
 800246a:	000b      	movs	r3, r1
 800246c:	210a      	movs	r1, #10
 800246e:	0018      	movs	r0, r3
 8002470:	f7fd fe48 	bl	8000104 <__udivsi3>
 8002474:	0003      	movs	r3, r0
 8002476:	001a      	movs	r2, r3
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <ShowFND+0xf4>)
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	58d2      	ldr	r2, [r2, r3]
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <ShowFND+0xf8>)
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	0049      	lsls	r1, r1, #1
 8002484:	430a      	orrs	r2, r1
 8002486:	615a      	str	r2, [r3, #20]
		GPIOC -> ODR = (num[(data/100)] | DIGIT_3);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2164      	movs	r1, #100	; 0x64
 800248c:	0018      	movs	r0, r3
 800248e:	f7fd fe39 	bl	8000104 <__udivsi3>
 8002492:	0003      	movs	r3, r0
 8002494:	001a      	movs	r2, r3
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <ShowFND+0xf4>)
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	58d2      	ldr	r2, [r2, r3]
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <ShowFND+0xf8>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0089      	lsls	r1, r1, #2
 80024a2:	430a      	orrs	r2, r1
 80024a4:	615a      	str	r2, [r3, #20]
}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b002      	add	sp, #8
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	20000000 	.word	0x20000000
 80024b4:	48000800 	.word	0x48000800

080024b8 <OffFND>:

void OffFND()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	GPIOC -> ODR = 0x0000;
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <OffFND+0x10>)
 80024be:	2200      	movs	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	48000800 	.word	0x48000800

080024cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d2:	240c      	movs	r4, #12
 80024d4:	193b      	adds	r3, r7, r4
 80024d6:	0018      	movs	r0, r3
 80024d8:	2314      	movs	r3, #20
 80024da:	001a      	movs	r2, r3
 80024dc:	2100      	movs	r1, #0
 80024de:	f006 f87d 	bl	80085dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <MX_GPIO_Init+0x114>)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <MX_GPIO_Init+0x114>)
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	0309      	lsls	r1, r1, #12
 80024ec:	430a      	orrs	r2, r1
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <MX_GPIO_Init+0x114>)
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	031b      	lsls	r3, r3, #12
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <MX_GPIO_Init+0x114>)
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <MX_GPIO_Init+0x114>)
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	0289      	lsls	r1, r1, #10
 8002508:	430a      	orrs	r2, r1
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <MX_GPIO_Init+0x114>)
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	4013      	ands	r3, r2
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <MX_GPIO_Init+0x114>)
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <MX_GPIO_Init+0x114>)
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	02c9      	lsls	r1, r1, #11
 8002524:	430a      	orrs	r2, r1
 8002526:	615a      	str	r2, [r3, #20]
 8002528:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <MX_GPIO_Init+0x114>)
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	02db      	lsls	r3, r3, #11
 8002530:	4013      	ands	r3, r2
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002536:	492b      	ldr	r1, [pc, #172]	; (80025e4 <MX_GPIO_Init+0x118>)
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <MX_GPIO_Init+0x11c>)
 800253a:	2200      	movs	r2, #0
 800253c:	0018      	movs	r0, r3
 800253e:	f002 fbe6 	bl	8004d0e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	4829      	ldr	r0, [pc, #164]	; (80025ec <MX_GPIO_Init+0x120>)
 8002548:	2200      	movs	r2, #0
 800254a:	0019      	movs	r1, r3
 800254c:	f002 fbdf 	bl	8004d0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002550:	193b      	adds	r3, r7, r4
 8002552:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <MX_GPIO_Init+0x118>)
 8002554:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002556:	193b      	adds	r3, r7, r4
 8002558:	2201      	movs	r2, #1
 800255a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	193b      	adds	r3, r7, r4
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	193b      	adds	r3, r7, r4
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002568:	193b      	adds	r3, r7, r4
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <MX_GPIO_Init+0x11c>)
 800256c:	0019      	movs	r1, r3
 800256e:	0010      	movs	r0, r2
 8002570:	f002 fa38 	bl	80049e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002574:	193b      	adds	r3, r7, r4
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257a:	193b      	adds	r3, r7, r4
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002580:	193b      	adds	r3, r7, r4
 8002582:	2201      	movs	r2, #1
 8002584:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	193b      	adds	r3, r7, r4
 8002588:	4a18      	ldr	r2, [pc, #96]	; (80025ec <MX_GPIO_Init+0x120>)
 800258a:	0019      	movs	r1, r3
 800258c:	0010      	movs	r0, r2
 800258e:	f002 fa29 	bl	80049e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002592:	193b      	adds	r3, r7, r4
 8002594:	2206      	movs	r2, #6
 8002596:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002598:	193b      	adds	r3, r7, r4
 800259a:	2200      	movs	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800259e:	193b      	adds	r3, r7, r4
 80025a0:	2202      	movs	r2, #2
 80025a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	4a11      	ldr	r2, [pc, #68]	; (80025ec <MX_GPIO_Init+0x120>)
 80025a8:	0019      	movs	r1, r3
 80025aa:	0010      	movs	r0, r2
 80025ac:	f002 fa1a 	bl	80049e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025b0:	0021      	movs	r1, r4
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0192      	lsls	r2, r2, #6
 80025b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2201      	movs	r2, #1
 80025be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <MX_GPIO_Init+0x120>)
 80025d0:	0019      	movs	r1, r3
 80025d2:	0010      	movs	r0, r2
 80025d4:	f002 fa06 	bl	80049e4 <HAL_GPIO_Init>

}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b009      	add	sp, #36	; 0x24
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	000003ff 	.word	0x000003ff
 80025e8:	48000800 	.word	0x48000800
 80025ec:	48000400 	.word	0x48000400

080025f0 <CheckJoystick>:
uint32_t ADC_Val[2] = {0,};
/* VARIABLES END */


void CheckJoystick()
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	if((ADC_Val[1] == 0) && (ADC_Val[0] > 0))
 80025f4:	4b3c      	ldr	r3, [pc, #240]	; (80026e8 <CheckJoystick+0xf8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d113      	bne.n	8002624 <CheckJoystick+0x34>
 80025fc:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <CheckJoystick+0xf8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <CheckJoystick+0x34>
	{
		JoystickInfo.Leftflag =  1;
 8002604:	4b39      	ldr	r3, [pc, #228]	; (80026ec <CheckJoystick+0xfc>)
 8002606:	2201      	movs	r2, #1
 8002608:	70da      	strb	r2, [r3, #3]
		JoystickInfo.Rightflag = 0;
 800260a:	4b38      	ldr	r3, [pc, #224]	; (80026ec <CheckJoystick+0xfc>)
 800260c:	2200      	movs	r2, #0
 800260e:	709a      	strb	r2, [r3, #2]
		JoystickInfo.Upflag = 	 0;
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <CheckJoystick+0xfc>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
		JoystickInfo.Downflag =  0;
 8002616:	4b35      	ldr	r3, [pc, #212]	; (80026ec <CheckJoystick+0xfc>)
 8002618:	2200      	movs	r2, #0
 800261a:	705a      	strb	r2, [r3, #1]
		JoystickInfo.Centerflag =0;
 800261c:	4b33      	ldr	r3, [pc, #204]	; (80026ec <CheckJoystick+0xfc>)
 800261e:	2200      	movs	r2, #0
 8002620:	711a      	strb	r2, [r3, #4]
 8002622:	e05d      	b.n	80026e0 <CheckJoystick+0xf0>
	}
	else if((ADC_Val[0] == 0) && (ADC_Val[1] > 0))
 8002624:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <CheckJoystick+0xf8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d113      	bne.n	8002654 <CheckJoystick+0x64>
 800262c:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <CheckJoystick+0xf8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00f      	beq.n	8002654 <CheckJoystick+0x64>
	{
		JoystickInfo.Leftflag =  0;
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <CheckJoystick+0xfc>)
 8002636:	2200      	movs	r2, #0
 8002638:	70da      	strb	r2, [r3, #3]
		JoystickInfo.Rightflag = 0;
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <CheckJoystick+0xfc>)
 800263c:	2200      	movs	r2, #0
 800263e:	709a      	strb	r2, [r3, #2]
		JoystickInfo.Upflag = 	 0;
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <CheckJoystick+0xfc>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
		JoystickInfo.Downflag =  1;
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <CheckJoystick+0xfc>)
 8002648:	2201      	movs	r2, #1
 800264a:	705a      	strb	r2, [r3, #1]
		JoystickInfo.Centerflag =0;
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <CheckJoystick+0xfc>)
 800264e:	2200      	movs	r2, #0
 8002650:	711a      	strb	r2, [r3, #4]
 8002652:	e045      	b.n	80026e0 <CheckJoystick+0xf0>
	}
	else if((ADC_Val[0] > 1000) && (ADC_Val[1] > 4090))
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <CheckJoystick+0xf8>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	23fa      	movs	r3, #250	; 0xfa
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d914      	bls.n	800268a <CheckJoystick+0x9a>
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <CheckJoystick+0xf8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <CheckJoystick+0x100>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d90f      	bls.n	800268a <CheckJoystick+0x9a>
	{
		JoystickInfo.Leftflag =  0;
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <CheckJoystick+0xfc>)
 800266c:	2200      	movs	r2, #0
 800266e:	70da      	strb	r2, [r3, #3]
		JoystickInfo.Rightflag = 1;
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <CheckJoystick+0xfc>)
 8002672:	2201      	movs	r2, #1
 8002674:	709a      	strb	r2, [r3, #2]
		JoystickInfo.Upflag = 	 0;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <CheckJoystick+0xfc>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
		JoystickInfo.Downflag =  0;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <CheckJoystick+0xfc>)
 800267e:	2200      	movs	r2, #0
 8002680:	705a      	strb	r2, [r3, #1]
		JoystickInfo.Centerflag =0;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <CheckJoystick+0xfc>)
 8002684:	2200      	movs	r2, #0
 8002686:	711a      	strb	r2, [r3, #4]
 8002688:	e02a      	b.n	80026e0 <CheckJoystick+0xf0>
	}
	else if((ADC_Val[0] > 4090) && (ADC_Val[1] > 1000))
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <CheckJoystick+0xf8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <CheckJoystick+0x100>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d915      	bls.n	80026c0 <CheckJoystick+0xd0>
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <CheckJoystick+0xf8>)
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	23fa      	movs	r3, #250	; 0xfa
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d90f      	bls.n	80026c0 <CheckJoystick+0xd0>
	{
		JoystickInfo.Leftflag =  0;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <CheckJoystick+0xfc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	70da      	strb	r2, [r3, #3]
		JoystickInfo.Rightflag = 0;
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <CheckJoystick+0xfc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	709a      	strb	r2, [r3, #2]
		JoystickInfo.Upflag = 	 1;
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <CheckJoystick+0xfc>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
		JoystickInfo.Downflag =  0;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <CheckJoystick+0xfc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	705a      	strb	r2, [r3, #1]
		JoystickInfo.Centerflag =0;
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <CheckJoystick+0xfc>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	711a      	strb	r2, [r3, #4]
 80026be:	e00f      	b.n	80026e0 <CheckJoystick+0xf0>
	}
	else
	{
		JoystickInfo.Leftflag =  0;
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <CheckJoystick+0xfc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	70da      	strb	r2, [r3, #3]
		JoystickInfo.Rightflag = 0;
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <CheckJoystick+0xfc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	709a      	strb	r2, [r3, #2]
		JoystickInfo.Upflag = 	 0;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <CheckJoystick+0xfc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
		JoystickInfo.Downflag =  0;
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <CheckJoystick+0xfc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	705a      	strb	r2, [r3, #1]
		JoystickInfo.Centerflag =  1;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <CheckJoystick+0xfc>)
 80026da:	2201      	movs	r2, #1
 80026dc:	711a      	strb	r2, [r3, #4]
	}
}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	200000ac 	.word	0x200000ac
 80026ec:	200000a4 	.word	0x200000a4
 80026f0:	00000ffa 	.word	0x00000ffa

080026f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026fa:	f001 fbc5 	bl	8003e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fe:	f000 f869 	bl	80027d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002702:	f7ff fee3 	bl	80024cc <MX_GPIO_Init>
  MX_TIM1_Init();
 8002706:	f000 ffd5 	bl	80036b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800270a:	f001 f8af 	bl	800386c <MX_TIM2_Init>
  MX_TIM15_Init();
 800270e:	f001 f983 	bl	8003a18 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8002712:	f001 fb09 	bl	8003d28 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002716:	f001 f929 	bl	800396c <MX_TIM3_Init>
  MX_ADC_Init();
 800271a:	f7ff fd0d 	bl	8002138 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */


  //protocol
  Uart1_Init();
 800271e:	f000 f8c5 	bl	80028ac <Uart1_Init>

  //servo
  Servo_Init(&htim1, TIM_CHANNEL_1);
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <main+0xc8>)
 8002724:	2100      	movs	r1, #0
 8002726:	0018      	movs	r0, r3
 8002728:	f000 fd9c 	bl	8003264 <Servo_Init>
  Servo_Init(&htim1, TIM_CHANNEL_2);
 800272c:	4b23      	ldr	r3, [pc, #140]	; (80027bc <main+0xc8>)
 800272e:	2104      	movs	r1, #4
 8002730:	0018      	movs	r0, r3
 8002732:	f000 fd97 	bl	8003264 <Servo_Init>
  Servo_Init(&htim1, TIM_CHANNEL_3);
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <main+0xc8>)
 8002738:	2108      	movs	r1, #8
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fd92 	bl	8003264 <Servo_Init>
  Servo_Init(&htim1, TIM_CHANNEL_4);
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <main+0xc8>)
 8002742:	210c      	movs	r1, #12
 8002744:	0018      	movs	r0, r3
 8002746:	f000 fd8d 	bl	8003264 <Servo_Init>
  Servo_Init(&htim2, TIM_CHANNEL_1);
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <main+0xcc>)
 800274c:	2100      	movs	r1, #0
 800274e:	0018      	movs	r0, r3
 8002750:	f000 fd88 	bl	8003264 <Servo_Init>

  //sonic
  Sonic_Init(&htim15, TIM_CHANNEL_1);
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <main+0xd0>)
 8002756:	2100      	movs	r1, #0
 8002758:	0018      	movs	r0, r3
 800275a:	f000 ff33 	bl	80035c4 <Sonic_Init>

  //task
  Scheduling_Init(&htim3);
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <main+0xd4>)
 8002760:	0018      	movs	r0, r3
 8002762:	f000 fa89 	bl	8002c78 <Scheduling_Init>

  //defalt setting
  DataInfo.Air_Dir_Data 		= AIRDIR;
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <main+0xd8>)
 8002768:	225a      	movs	r2, #90	; 0x5a
 800276a:	701a      	strb	r2, [r3, #0]
  DataInfo.Air_Speed_Data		= AIRSPEED;	//
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <main+0xd8>)
 800276e:	225a      	movs	r2, #90	; 0x5a
 8002770:	705a      	strb	r2, [r3, #1]
  DataInfo.Seat_UpDown_Data		= SEATUPDOWN;	//감소할수록 위로
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <main+0xd8>)
 8002774:	2200      	movs	r2, #0
 8002776:	709a      	strb	r2, [r3, #2]
  DataInfo.Seat_RightLeft_Data	= SEATRIGHTLEFT;	//증가할수록 뒤로
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <main+0xd8>)
 800277a:	225a      	movs	r2, #90	; 0x5a
 800277c:	70da      	strb	r2, [r3, #3]
  DataInfo.Seat_Rotate_Data 	= SEATROTATE;
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <main+0xd8>)
 8002780:	220a      	movs	r2, #10
 8002782:	719a      	strb	r2, [r3, #6]

  FlagInfo.Key_Off_Flag			= 1; // 초기 키 오프 상태
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <main+0xdc>)
 8002786:	2201      	movs	r2, #1
 8002788:	721a      	strb	r2, [r3, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(FlagInfo.Run_Flag == 1)
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <main+0xdc>)
 800278c:	7adb      	ldrb	r3, [r3, #11]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d110      	bne.n	80027b4 <main+0xc0>
	  {
		  uint32_t percent = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
		  percent = ((DataInfo.Air_Speed_Data - 10)*100)/80;
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <main+0xd8>)
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	3b0a      	subs	r3, #10
 800279c:	2264      	movs	r2, #100	; 0x64
 800279e:	4353      	muls	r3, r2
 80027a0:	2150      	movs	r1, #80	; 0x50
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fd fd38 	bl	8000218 <__divsi3>
 80027a8:	0003      	movs	r3, r0
 80027aa:	607b      	str	r3, [r7, #4]
		  ShowFND(percent);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7ff fe04 	bl	80023bc <ShowFND>
	  }

	  TaskScheduling();
 80027b4:	f000 fab4 	bl	8002d20 <TaskScheduling>
	  if(FlagInfo.Run_Flag == 1)
 80027b8:	e7e7      	b.n	800278a <main+0x96>
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	200000f8 	.word	0x200000f8
 80027c0:	20000140 	.word	0x20000140
 80027c4:	200001d0 	.word	0x200001d0
 80027c8:	20000188 	.word	0x20000188
 80027cc:	200000c0 	.word	0x200000c0
 80027d0:	200000b4 	.word	0x200000b4

080027d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b099      	sub	sp, #100	; 0x64
 80027d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027da:	242c      	movs	r4, #44	; 0x2c
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	0018      	movs	r0, r3
 80027e0:	2334      	movs	r3, #52	; 0x34
 80027e2:	001a      	movs	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f005 fef9 	bl	80085dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ea:	231c      	movs	r3, #28
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	0018      	movs	r0, r3
 80027f0:	2310      	movs	r3, #16
 80027f2:	001a      	movs	r2, r3
 80027f4:	2100      	movs	r1, #0
 80027f6:	f005 fef1 	bl	80085dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027fa:	003b      	movs	r3, r7
 80027fc:	0018      	movs	r0, r3
 80027fe:	231c      	movs	r3, #28
 8002800:	001a      	movs	r2, r3
 8002802:	2100      	movs	r1, #0
 8002804:	f005 feea 	bl	80085dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002808:	0021      	movs	r1, r4
 800280a:	187b      	adds	r3, r7, r1
 800280c:	2212      	movs	r2, #18
 800280e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002810:	187b      	adds	r3, r7, r1
 8002812:	2201      	movs	r2, #1
 8002814:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002816:	187b      	adds	r3, r7, r1
 8002818:	2201      	movs	r2, #1
 800281a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800281c:	187b      	adds	r3, r7, r1
 800281e:	2210      	movs	r2, #16
 8002820:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002822:	187b      	adds	r3, r7, r1
 8002824:	2210      	movs	r2, #16
 8002826:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2202      	movs	r2, #2
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	0212      	lsls	r2, r2, #8
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8002836:	187b      	adds	r3, r7, r1
 8002838:	2200      	movs	r2, #0
 800283a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800283c:	187b      	adds	r3, r7, r1
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002842:	187b      	adds	r3, r7, r1
 8002844:	0018      	movs	r0, r3
 8002846:	f002 fa7f 	bl	8004d48 <HAL_RCC_OscConfig>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d001      	beq.n	8002852 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800284e:	f000 f828 	bl	80028a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002852:	211c      	movs	r1, #28
 8002854:	187b      	adds	r3, r7, r1
 8002856:	2207      	movs	r2, #7
 8002858:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800285a:	187b      	adds	r3, r7, r1
 800285c:	2202      	movs	r2, #2
 800285e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002860:	187b      	adds	r3, r7, r1
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002866:	187b      	adds	r3, r7, r1
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2100      	movs	r1, #0
 8002870:	0018      	movs	r0, r3
 8002872:	f002 fdef 	bl	8005454 <HAL_RCC_ClockConfig>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d001      	beq.n	800287e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800287a:	f000 f812 	bl	80028a2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800287e:	003b      	movs	r3, r7
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002884:	003b      	movs	r3, r7
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288a:	003b      	movs	r3, r7
 800288c:	0018      	movs	r0, r3
 800288e:	f002 ff4d 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d001      	beq.n	800289a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002896:	f000 f804 	bl	80028a2 <Error_Handler>
  }
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b019      	add	sp, #100	; 0x64
 80028a0:	bd90      	pop	{r4, r7, pc}

080028a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a6:	b672      	cpsid	i
}
 80028a8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028aa:	e7fe      	b.n	80028aa <Error_Handler+0x8>

080028ac <Uart1_Init>:
uint8_t data = 0;
uint8_t index_rx = 0;
/* VARIABLES END */

void Uart1_Init()
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
   HAL_UART_Receive_IT(&huart1, (uint8_t*)RX_Data, DATALENGTH);
 80028b0:	4904      	ldr	r1, [pc, #16]	; (80028c4 <Uart1_Init+0x18>)
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <Uart1_Init+0x1c>)
 80028b4:	2208      	movs	r2, #8
 80028b6:	0018      	movs	r0, r3
 80028b8:	f004 fc56 	bl	8007168 <HAL_UART_Receive_IT>
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	200000c8 	.word	0x200000c8
 80028c8:	20000218 	.word	0x20000218

080028cc <Comm_UartWrite>:

void Comm_UartWrite(uint8_t function1, uint8_t function2, uint32_t data)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	603a      	str	r2, [r7, #0]
 80028d4:	1dfb      	adds	r3, r7, #7
 80028d6:	1c02      	adds	r2, r0, #0
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	1dbb      	adds	r3, r7, #6
 80028dc:	1c0a      	adds	r2, r1, #0
 80028de:	701a      	strb	r2, [r3, #0]
   uint8_t TX_Data[8] = {0,};
 80028e0:	2408      	movs	r4, #8
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
   TX_Data[0] = '<';
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	223c      	movs	r2, #60	; 0x3c
 80028f0:	701a      	strb	r2, [r3, #0]
   TX_Data[1] = 'R';
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	2252      	movs	r2, #82	; 0x52
 80028f6:	705a      	strb	r2, [r3, #1]
   TX_Data[2] = function1;
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	1dfa      	adds	r2, r7, #7
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	709a      	strb	r2, [r3, #2]
   TX_Data[3] = function2;
 8002900:	193b      	adds	r3, r7, r4
 8002902:	1dba      	adds	r2, r7, #6
 8002904:	7812      	ldrb	r2, [r2, #0]
 8002906:	70da      	strb	r2, [r3, #3]
   TX_Data[4] = (data / 100) + '0';
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2164      	movs	r1, #100	; 0x64
 800290c:	0018      	movs	r0, r3
 800290e:	f7fd fbf9 	bl	8000104 <__udivsi3>
 8002912:	0003      	movs	r3, r0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3330      	adds	r3, #48	; 0x30
 8002918:	b2da      	uxtb	r2, r3
 800291a:	193b      	adds	r3, r7, r4
 800291c:	711a      	strb	r2, [r3, #4]
   TX_Data[5] = ((data % 100) / 10) + '0';
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2164      	movs	r1, #100	; 0x64
 8002922:	0018      	movs	r0, r3
 8002924:	f7fd fc74 	bl	8000210 <__aeabi_uidivmod>
 8002928:	000b      	movs	r3, r1
 800292a:	210a      	movs	r1, #10
 800292c:	0018      	movs	r0, r3
 800292e:	f7fd fbe9 	bl	8000104 <__udivsi3>
 8002932:	0003      	movs	r3, r0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3330      	adds	r3, #48	; 0x30
 8002938:	b2da      	uxtb	r2, r3
 800293a:	193b      	adds	r3, r7, r4
 800293c:	715a      	strb	r2, [r3, #5]
   TX_Data[6] = (data % 10) + '0';
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	210a      	movs	r1, #10
 8002942:	0018      	movs	r0, r3
 8002944:	f7fd fc64 	bl	8000210 <__aeabi_uidivmod>
 8002948:	000b      	movs	r3, r1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3330      	adds	r3, #48	; 0x30
 800294e:	b2da      	uxtb	r2, r3
 8002950:	193b      	adds	r3, r7, r4
 8002952:	719a      	strb	r2, [r3, #6]
   TX_Data[7] = '>';
 8002954:	193b      	adds	r3, r7, r4
 8002956:	223e      	movs	r2, #62	; 0x3e
 8002958:	71da      	strb	r2, [r3, #7]
   HAL_UART_Transmit(&huart1,(uint8_t*)TX_Data, DATALENGTH, 10);
 800295a:	1939      	adds	r1, r7, r4
 800295c:	4804      	ldr	r0, [pc, #16]	; (8002970 <Comm_UartWrite+0xa4>)
 800295e:	230a      	movs	r3, #10
 8002960:	2208      	movs	r2, #8
 8002962:	f004 fb61 	bl	8007028 <HAL_UART_Transmit>
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b005      	add	sp, #20
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	20000218 	.word	0x20000218

08002974 <Uart1_Handler>:

void Uart1_Handler()
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	Rx_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 8002978:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <Uart1_Handler+0x84>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2220      	movs	r2, #32
 8002980:	4013      	ands	r3, r2
 8002982:	3b20      	subs	r3, #32
 8002984:	425a      	negs	r2, r3
 8002986:	4153      	adcs	r3, r2
 8002988:	b2db      	uxtb	r3, r3
 800298a:	001a      	movs	r2, r3
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <Uart1_Handler+0x88>)
 800298e:	601a      	str	r2, [r3, #0]
	Rx_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <Uart1_Handler+0x84>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	1e5a      	subs	r2, r3, #1
 800299c:	4193      	sbcs	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	001a      	movs	r2, r3
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <Uart1_Handler+0x8c>)
 80029a4:	601a      	str	r2, [r3, #0]

	if ((Rx_flag != RESET) && (Rx_it_source != RESET)) {
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <Uart1_Handler+0x88>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d017      	beq.n	80029de <Uart1_Handler+0x6a>
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <Uart1_Handler+0x8c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d013      	beq.n	80029de <Uart1_Handler+0x6a>
		 /* 1Byte copy */
		 data = (uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <Uart1_Handler+0x84>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <Uart1_Handler+0x90>)
 80029c2:	701a      	strb	r2, [r3, #0]
		 RX_Data[index_rx] = data;
 80029c4:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <Uart1_Handler+0x94>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	001a      	movs	r2, r3
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <Uart1_Handler+0x90>)
 80029cc:	7819      	ldrb	r1, [r3, #0]
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <Uart1_Handler+0x98>)
 80029d0:	5499      	strb	r1, [r3, r2]
		 index_rx++;
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <Uart1_Handler+0x94>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <Uart1_Handler+0x94>)
 80029dc:	701a      	strb	r2, [r3, #0]
	}
	else;

	if(index_rx >= 8)
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <Uart1_Handler+0x94>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b07      	cmp	r3, #7
 80029e4:	d904      	bls.n	80029f0 <Uart1_Handler+0x7c>
	{
		Check_Protocol();
 80029e6:	f000 f813 	bl	8002a10 <Check_Protocol>

		index_rx = 0;
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <Uart1_Handler+0x94>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
	}
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	20000218 	.word	0x20000218
 80029fc:	200000d0 	.word	0x200000d0
 8002a00:	200000d4 	.word	0x200000d4
 8002a04:	200000d8 	.word	0x200000d8
 8002a08:	200000d9 	.word	0x200000d9
 8002a0c:	200000c8 	.word	0x200000c8

08002a10 <Check_Protocol>:

void Check_Protocol()
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	if(strncmp(RX_Data, "<WAH--->", 4) == 0 && RX_Data[7] == '>')
 8002a14:	498b      	ldr	r1, [pc, #556]	; (8002c44 <Check_Protocol+0x234>)
 8002a16:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <Check_Protocol+0x238>)
 8002a18:	2204      	movs	r2, #4
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f005 fde6 	bl	80085ec <strncmp>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d11d      	bne.n	8002a60 <Check_Protocol+0x50>
 8002a24:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <Check_Protocol+0x238>)
 8002a26:	79db      	ldrb	r3, [r3, #7]
 8002a28:	2b3e      	cmp	r3, #62	; 0x3e
 8002a2a:	d119      	bne.n	8002a60 <Check_Protocol+0x50>
	{
		FlagInfo.Air_Dir_Flag = 1;
 8002a2c:	4b87      	ldr	r3, [pc, #540]	; (8002c4c <Check_Protocol+0x23c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
		DataInfo.Air_Dir_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8002a32:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <Check_Protocol+0x238>)
 8002a34:	791b      	ldrb	r3, [r3, #4]
 8002a36:	2264      	movs	r2, #100	; 0x64
 8002a38:	4353      	muls	r3, r2
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <Check_Protocol+0x238>)
 8002a3e:	795b      	ldrb	r3, [r3, #5]
 8002a40:	1c19      	adds	r1, r3, #0
 8002a42:	0089      	lsls	r1, r1, #2
 8002a44:	18cb      	adds	r3, r1, r3
 8002a46:	18db      	adds	r3, r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	18d3      	adds	r3, r2, r3
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <Check_Protocol+0x238>)
 8002a50:	799b      	ldrb	r3, [r3, #6]
 8002a52:	18d3      	adds	r3, r2, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	3330      	adds	r3, #48	; 0x30
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b7d      	ldr	r3, [pc, #500]	; (8002c50 <Check_Protocol+0x240>)
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e0ed      	b.n	8002c3c <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WAL--->", 4) == 0 && RX_Data[7] == '>')
 8002a60:	497c      	ldr	r1, [pc, #496]	; (8002c54 <Check_Protocol+0x244>)
 8002a62:	4b79      	ldr	r3, [pc, #484]	; (8002c48 <Check_Protocol+0x238>)
 8002a64:	2204      	movs	r2, #4
 8002a66:	0018      	movs	r0, r3
 8002a68:	f005 fdc0 	bl	80085ec <strncmp>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d11d      	bne.n	8002aac <Check_Protocol+0x9c>
 8002a70:	4b75      	ldr	r3, [pc, #468]	; (8002c48 <Check_Protocol+0x238>)
 8002a72:	79db      	ldrb	r3, [r3, #7]
 8002a74:	2b3e      	cmp	r3, #62	; 0x3e
 8002a76:	d119      	bne.n	8002aac <Check_Protocol+0x9c>
	{
		FlagInfo.Air_Speed_Flag = 1;
 8002a78:	4b74      	ldr	r3, [pc, #464]	; (8002c4c <Check_Protocol+0x23c>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	705a      	strb	r2, [r3, #1]
		DataInfo.Air_Speed_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8002a7e:	4b72      	ldr	r3, [pc, #456]	; (8002c48 <Check_Protocol+0x238>)
 8002a80:	791b      	ldrb	r3, [r3, #4]
 8002a82:	2264      	movs	r2, #100	; 0x64
 8002a84:	4353      	muls	r3, r2
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <Check_Protocol+0x238>)
 8002a8a:	795b      	ldrb	r3, [r3, #5]
 8002a8c:	1c19      	adds	r1, r3, #0
 8002a8e:	0089      	lsls	r1, r1, #2
 8002a90:	18cb      	adds	r3, r1, r3
 8002a92:	18db      	adds	r3, r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	18d3      	adds	r3, r2, r3
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b6b      	ldr	r3, [pc, #428]	; (8002c48 <Check_Protocol+0x238>)
 8002a9c:	799b      	ldrb	r3, [r3, #6]
 8002a9e:	18d3      	adds	r3, r2, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3330      	adds	r3, #48	; 0x30
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <Check_Protocol+0x240>)
 8002aa8:	705a      	strb	r2, [r3, #1]
 8002aaa:	e0c7      	b.n	8002c3c <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WCH--->", 4) == 0 && RX_Data[7] == '>')
 8002aac:	496a      	ldr	r1, [pc, #424]	; (8002c58 <Check_Protocol+0x248>)
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <Check_Protocol+0x238>)
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f005 fd9a 	bl	80085ec <strncmp>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d11d      	bne.n	8002af8 <Check_Protocol+0xe8>
 8002abc:	4b62      	ldr	r3, [pc, #392]	; (8002c48 <Check_Protocol+0x238>)
 8002abe:	79db      	ldrb	r3, [r3, #7]
 8002ac0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ac2:	d119      	bne.n	8002af8 <Check_Protocol+0xe8>
	{
		FlagInfo.Seat_UpDown_Flag = 1;
 8002ac4:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <Check_Protocol+0x23c>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	709a      	strb	r2, [r3, #2]
		DataInfo.Seat_UpDown_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8002aca:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <Check_Protocol+0x238>)
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	2264      	movs	r2, #100	; 0x64
 8002ad0:	4353      	muls	r3, r2
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <Check_Protocol+0x238>)
 8002ad6:	795b      	ldrb	r3, [r3, #5]
 8002ad8:	1c19      	adds	r1, r3, #0
 8002ada:	0089      	lsls	r1, r1, #2
 8002adc:	18cb      	adds	r3, r1, r3
 8002ade:	18db      	adds	r3, r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	18d3      	adds	r3, r2, r3
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <Check_Protocol+0x238>)
 8002ae8:	799b      	ldrb	r3, [r3, #6]
 8002aea:	18d3      	adds	r3, r2, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3330      	adds	r3, #48	; 0x30
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b57      	ldr	r3, [pc, #348]	; (8002c50 <Check_Protocol+0x240>)
 8002af4:	709a      	strb	r2, [r3, #2]
 8002af6:	e0a1      	b.n	8002c3c <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WCL--->", 4) == 0 && RX_Data[7] == '>')
 8002af8:	4958      	ldr	r1, [pc, #352]	; (8002c5c <Check_Protocol+0x24c>)
 8002afa:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <Check_Protocol+0x238>)
 8002afc:	2204      	movs	r2, #4
 8002afe:	0018      	movs	r0, r3
 8002b00:	f005 fd74 	bl	80085ec <strncmp>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d11d      	bne.n	8002b44 <Check_Protocol+0x134>
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <Check_Protocol+0x238>)
 8002b0a:	79db      	ldrb	r3, [r3, #7]
 8002b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b0e:	d119      	bne.n	8002b44 <Check_Protocol+0x134>
	{
		FlagInfo.Seat_RightLeft_Flag = 1;
 8002b10:	4b4e      	ldr	r3, [pc, #312]	; (8002c4c <Check_Protocol+0x23c>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	70da      	strb	r2, [r3, #3]
		DataInfo.Seat_RightLeft_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8002b16:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <Check_Protocol+0x238>)
 8002b18:	791b      	ldrb	r3, [r3, #4]
 8002b1a:	2264      	movs	r2, #100	; 0x64
 8002b1c:	4353      	muls	r3, r2
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <Check_Protocol+0x238>)
 8002b22:	795b      	ldrb	r3, [r3, #5]
 8002b24:	1c19      	adds	r1, r3, #0
 8002b26:	0089      	lsls	r1, r1, #2
 8002b28:	18cb      	adds	r3, r1, r3
 8002b2a:	18db      	adds	r3, r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	18d3      	adds	r3, r2, r3
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b45      	ldr	r3, [pc, #276]	; (8002c48 <Check_Protocol+0x238>)
 8002b34:	799b      	ldrb	r3, [r3, #6]
 8002b36:	18d3      	adds	r3, r2, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	3330      	adds	r3, #48	; 0x30
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <Check_Protocol+0x240>)
 8002b40:	70da      	strb	r2, [r3, #3]
 8002b42:	e07b      	b.n	8002c3c <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WSH--->", 4) == 0 && RX_Data[7] == '>')
 8002b44:	4946      	ldr	r1, [pc, #280]	; (8002c60 <Check_Protocol+0x250>)
 8002b46:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <Check_Protocol+0x238>)
 8002b48:	2204      	movs	r2, #4
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f005 fd4e 	bl	80085ec <strncmp>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d11d      	bne.n	8002b90 <Check_Protocol+0x180>
 8002b54:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <Check_Protocol+0x238>)
 8002b56:	79db      	ldrb	r3, [r3, #7]
 8002b58:	2b3e      	cmp	r3, #62	; 0x3e
 8002b5a:	d119      	bne.n	8002b90 <Check_Protocol+0x180>
	{
		FlagInfo.Side_UpDown_Flag = 1;
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <Check_Protocol+0x23c>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	711a      	strb	r2, [r3, #4]
		DataInfo.Side_UpDown_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <Check_Protocol+0x238>)
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	2264      	movs	r2, #100	; 0x64
 8002b68:	4353      	muls	r3, r2
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <Check_Protocol+0x238>)
 8002b6e:	795b      	ldrb	r3, [r3, #5]
 8002b70:	1c19      	adds	r1, r3, #0
 8002b72:	0089      	lsls	r1, r1, #2
 8002b74:	18cb      	adds	r3, r1, r3
 8002b76:	18db      	adds	r3, r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	18d3      	adds	r3, r2, r3
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <Check_Protocol+0x238>)
 8002b80:	799b      	ldrb	r3, [r3, #6]
 8002b82:	18d3      	adds	r3, r2, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3330      	adds	r3, #48	; 0x30
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <Check_Protocol+0x240>)
 8002b8c:	711a      	strb	r2, [r3, #4]
 8002b8e:	e055      	b.n	8002c3c <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WSL--->", 4) == 0 && RX_Data[7] == '>')
 8002b90:	4934      	ldr	r1, [pc, #208]	; (8002c64 <Check_Protocol+0x254>)
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <Check_Protocol+0x238>)
 8002b94:	2204      	movs	r2, #4
 8002b96:	0018      	movs	r0, r3
 8002b98:	f005 fd28 	bl	80085ec <strncmp>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d11d      	bne.n	8002bdc <Check_Protocol+0x1cc>
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <Check_Protocol+0x238>)
 8002ba2:	79db      	ldrb	r3, [r3, #7]
 8002ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ba6:	d119      	bne.n	8002bdc <Check_Protocol+0x1cc>
	{
		FlagInfo.Side_RightLeft_Flag = 1;
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <Check_Protocol+0x23c>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	715a      	strb	r2, [r3, #5]
		DataInfo.Side_RightLeft_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <Check_Protocol+0x238>)
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	2264      	movs	r2, #100	; 0x64
 8002bb4:	4353      	muls	r3, r2
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <Check_Protocol+0x238>)
 8002bba:	795b      	ldrb	r3, [r3, #5]
 8002bbc:	1c19      	adds	r1, r3, #0
 8002bbe:	0089      	lsls	r1, r1, #2
 8002bc0:	18cb      	adds	r3, r1, r3
 8002bc2:	18db      	adds	r3, r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	18d3      	adds	r3, r2, r3
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <Check_Protocol+0x238>)
 8002bcc:	799b      	ldrb	r3, [r3, #6]
 8002bce:	18d3      	adds	r3, r2, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3330      	adds	r3, #48	; 0x30
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <Check_Protocol+0x240>)
 8002bd8:	715a      	strb	r2, [r3, #5]
 8002bda:	e02f      	b.n	8002c3c <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WK0001>", 8) == 0)
 8002bdc:	4922      	ldr	r1, [pc, #136]	; (8002c68 <Check_Protocol+0x258>)
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <Check_Protocol+0x238>)
 8002be0:	2208      	movs	r2, #8
 8002be2:	0018      	movs	r0, r3
 8002be4:	f005 fd02 	bl	80085ec <strncmp>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d103      	bne.n	8002bf4 <Check_Protocol+0x1e4>
	{
		FlagInfo.Key_Close_Flag = 1;
 8002bec:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <Check_Protocol+0x23c>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	719a      	strb	r2, [r3, #6]
	else if(strncmp(RX_Data, "<WK0011>", 8) == 0)
	{
		FlagInfo.Key_On_Flag = 1;
	}
	else;
}
 8002bf2:	e023      	b.n	8002c3c <Check_Protocol+0x22c>
	else if(strncmp(RX_Data, "<WK0000>", 8) == 0)
 8002bf4:	491d      	ldr	r1, [pc, #116]	; (8002c6c <Check_Protocol+0x25c>)
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <Check_Protocol+0x238>)
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f005 fcf6 	bl	80085ec <strncmp>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d103      	bne.n	8002c0c <Check_Protocol+0x1fc>
		FlagInfo.Key_Far_Flag = 1;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <Check_Protocol+0x23c>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	71da      	strb	r2, [r3, #7]
}
 8002c0a:	e017      	b.n	8002c3c <Check_Protocol+0x22c>
	else if(strncmp(RX_Data, "<WK0010>", 8) == 0)
 8002c0c:	4918      	ldr	r1, [pc, #96]	; (8002c70 <Check_Protocol+0x260>)
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <Check_Protocol+0x238>)
 8002c10:	2208      	movs	r2, #8
 8002c12:	0018      	movs	r0, r3
 8002c14:	f005 fcea 	bl	80085ec <strncmp>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d103      	bne.n	8002c24 <Check_Protocol+0x214>
		FlagInfo.Key_Off_Flag = 1;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <Check_Protocol+0x23c>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	721a      	strb	r2, [r3, #8]
}
 8002c22:	e00b      	b.n	8002c3c <Check_Protocol+0x22c>
	else if(strncmp(RX_Data, "<WK0011>", 8) == 0)
 8002c24:	4913      	ldr	r1, [pc, #76]	; (8002c74 <Check_Protocol+0x264>)
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <Check_Protocol+0x238>)
 8002c28:	2208      	movs	r2, #8
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f005 fcde 	bl	80085ec <strncmp>
 8002c30:	1e03      	subs	r3, r0, #0
 8002c32:	d103      	bne.n	8002c3c <Check_Protocol+0x22c>
		FlagInfo.Key_On_Flag = 1;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <Check_Protocol+0x23c>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	725a      	strb	r2, [r3, #9]
}
 8002c3a:	e7ff      	b.n	8002c3c <Check_Protocol+0x22c>
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	08008670 	.word	0x08008670
 8002c48:	200000c8 	.word	0x200000c8
 8002c4c:	200000b4 	.word	0x200000b4
 8002c50:	200000c0 	.word	0x200000c0
 8002c54:	0800867c 	.word	0x0800867c
 8002c58:	08008688 	.word	0x08008688
 8002c5c:	08008694 	.word	0x08008694
 8002c60:	080086a0 	.word	0x080086a0
 8002c64:	080086ac 	.word	0x080086ac
 8002c68:	080086b8 	.word	0x080086b8
 8002c6c:	080086c4 	.word	0x080086c4
 8002c70:	080086d0 	.word	0x080086d0
 8002c74:	080086dc 	.word	0x080086dc

08002c78 <Scheduling_Init>:
uint32_t cnt1ms = 0;
int32_t airAutoDir = 1;
/* VARIABLES END */

void Scheduling_Init(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f002 fea2 	bl	80059cc <HAL_TIM_Base_Start_IT>
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) /* 1s */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d134      	bne.n	8002d0c <HAL_TIM_PeriodElapsedCallback+0x7c>
  {
	  cnt1ms++;
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002caa:	601a      	str	r2, [r3, #0]

	  if((cnt1ms % 1) == 0)
	  {
		  SchedulInfo.ms1Flag = 1;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
	  }
	  if((cnt1ms % 10) == 0)
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	210a      	movs	r1, #10
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7fd faa9 	bl	8000210 <__aeabi_uidivmod>
 8002cbe:	1e0b      	subs	r3, r1, #0
 8002cc0:	d102      	bne.n	8002cc8 <HAL_TIM_PeriodElapsedCallback+0x38>
	  {
		  SchedulInfo.ms10Flag = 1;
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	705a      	strb	r2, [r3, #1]
	  }
	  if((cnt1ms % 100) == 0)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2164      	movs	r1, #100	; 0x64
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7fd fa9e 	bl	8000210 <__aeabi_uidivmod>
 8002cd4:	1e0b      	subs	r3, r1, #0
 8002cd6:	d102      	bne.n	8002cde <HAL_TIM_PeriodElapsedCallback+0x4e>
	  {
		  SchedulInfo.ms100Flag = 1;
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	709a      	strb	r2, [r3, #2]
	  }
	  if((cnt1ms % 150) == 0)
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2196      	movs	r1, #150	; 0x96
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fd fa93 	bl	8000210 <__aeabi_uidivmod>
 8002cea:	1e0b      	subs	r3, r1, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x64>
	  {
		  SchedulInfo.ms150Flag = 1;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	70da      	strb	r2, [r3, #3]
	  }
	  if((cnt1ms % 1000) == 0)
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	22fa      	movs	r2, #250	; 0xfa
 8002cfa:	0091      	lsls	r1, r2, #2
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fd fa87 	bl	8000210 <__aeabi_uidivmod>
 8002d02:	1e0b      	subs	r3, r1, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_TIM_PeriodElapsedCallback+0x7c>
	  {
		  SchedulInfo.ms1000Flag = 1;
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	711a      	strb	r2, [r3, #4]
	  }
  }
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40000400 	.word	0x40000400
 8002d18:	200000e4 	.word	0x200000e4
 8002d1c:	200000dc 	.word	0x200000dc

08002d20 <TaskScheduling>:

void TaskScheduling()
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	if(SchedulInfo.ms1Flag)
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <TaskScheduling+0x64>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <TaskScheduling+0x16>
	{
		Task1ms();
 8002d2c:	f000 f82c 	bl	8002d88 <Task1ms>
		SchedulInfo.ms1Flag = 0;
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <TaskScheduling+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
	}
	if(SchedulInfo.ms10Flag)
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <TaskScheduling+0x64>)
 8002d38:	785b      	ldrb	r3, [r3, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <TaskScheduling+0x28>
	{
		Task10ms();
 8002d3e:	f000 f915 	bl	8002f6c <Task10ms>
		SchedulInfo.ms10Flag = 0;
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <TaskScheduling+0x64>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	705a      	strb	r2, [r3, #1]
	}
	if(SchedulInfo.ms100Flag)
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <TaskScheduling+0x64>)
 8002d4a:	789b      	ldrb	r3, [r3, #2]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <TaskScheduling+0x3a>
	{
		Task100ms();
 8002d50:	f000 f940 	bl	8002fd4 <Task100ms>
		SchedulInfo.ms100Flag = 0;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <TaskScheduling+0x64>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	709a      	strb	r2, [r3, #2]
	}
	if(SchedulInfo.ms150Flag)
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <TaskScheduling+0x64>)
 8002d5c:	78db      	ldrb	r3, [r3, #3]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <TaskScheduling+0x4c>
	{
		Task150ms();
 8002d62:	f000 f981 	bl	8003068 <Task150ms>
		SchedulInfo.ms150Flag = 0;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <TaskScheduling+0x64>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	70da      	strb	r2, [r3, #3]
	}
	if(SchedulInfo.ms1000Flag)
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <TaskScheduling+0x64>)
 8002d6e:	791b      	ldrb	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <TaskScheduling+0x5e>
	{
		Task1000ms();
 8002d74:	f000 fa2c 	bl	80031d0 <Task1000ms>
		SchedulInfo.ms1000Flag = 0;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <TaskScheduling+0x64>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	711a      	strb	r2, [r3, #4]
	}
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200000dc 	.word	0x200000dc

08002d88 <Task1ms>:

void Task1ms()
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	if(FlagInfo.Key_On_Flag == 1)
 8002d8c:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <Task1ms+0x1c8>)
 8002d8e:	7a5b      	ldrb	r3, [r3, #9]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d166      	bne.n	8002e62 <Task1ms+0xda>
	{
		if(FlagInfo.Air_Dir_Flag && FlagInfo.Air_Speed_Flag && FlagInfo.Seat_RightLeft_Flag && FlagInfo.Seat_UpDown_Flag)
 8002d94:	4b6e      	ldr	r3, [pc, #440]	; (8002f50 <Task1ms+0x1c8>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d062      	beq.n	8002e62 <Task1ms+0xda>
 8002d9c:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <Task1ms+0x1c8>)
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d05e      	beq.n	8002e62 <Task1ms+0xda>
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <Task1ms+0x1c8>)
 8002da6:	78db      	ldrb	r3, [r3, #3]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05a      	beq.n	8002e62 <Task1ms+0xda>
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <Task1ms+0x1c8>)
 8002dae:	789b      	ldrb	r3, [r3, #2]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d056      	beq.n	8002e62 <Task1ms+0xda>
		{
			if(DataInfo.Air_Speed_Data == 0 && DataInfo.Air_Dir_Data == 0 && DataInfo.Seat_UpDown_Data == 0 && DataInfo.Seat_RightLeft_Data == 0)
 8002db4:	4b67      	ldr	r3, [pc, #412]	; (8002f54 <Task1ms+0x1cc>)
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11a      	bne.n	8002df2 <Task1ms+0x6a>
 8002dbc:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <Task1ms+0x1cc>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d116      	bne.n	8002df2 <Task1ms+0x6a>
 8002dc4:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <Task1ms+0x1cc>)
 8002dc6:	789b      	ldrb	r3, [r3, #2]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d112      	bne.n	8002df2 <Task1ms+0x6a>
 8002dcc:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <Task1ms+0x1cc>)
 8002dce:	78db      	ldrb	r3, [r3, #3]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10e      	bne.n	8002df2 <Task1ms+0x6a>
			{
				DataInfo.Air_Dir_Data 			= AIRDIR;
 8002dd4:	4b5f      	ldr	r3, [pc, #380]	; (8002f54 <Task1ms+0x1cc>)
 8002dd6:	225a      	movs	r2, #90	; 0x5a
 8002dd8:	701a      	strb	r2, [r3, #0]
				DataInfo.Air_Speed_Data			= AIRSPEED;
 8002dda:	4b5e      	ldr	r3, [pc, #376]	; (8002f54 <Task1ms+0x1cc>)
 8002ddc:	225a      	movs	r2, #90	; 0x5a
 8002dde:	705a      	strb	r2, [r3, #1]
				DataInfo.Seat_UpDown_Data		= SEATUPDOWN;
 8002de0:	4b5c      	ldr	r3, [pc, #368]	; (8002f54 <Task1ms+0x1cc>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	709a      	strb	r2, [r3, #2]
				DataInfo.Seat_RightLeft_Data	= SEATRIGHTLEFT;
 8002de6:	4b5b      	ldr	r3, [pc, #364]	; (8002f54 <Task1ms+0x1cc>)
 8002de8:	225a      	movs	r2, #90	; 0x5a
 8002dea:	70da      	strb	r2, [r3, #3]
				DataInfo.Seat_Rotate_Data 		= SEATROTATE;
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <Task1ms+0x1cc>)
 8002dee:	220a      	movs	r2, #10
 8002df0:	719a      	strb	r2, [r3, #6]
			}
			DataInfo.Seat_Rotate_Data = 45;
 8002df2:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <Task1ms+0x1cc>)
 8002df4:	222d      	movs	r2, #45	; 0x2d
 8002df6:	719a      	strb	r2, [r3, #6]
			ServoAngleChange(&htim2, TIM_CHANNEL_1, DataInfo.Air_Speed_Data);
 8002df8:	4b56      	ldr	r3, [pc, #344]	; (8002f54 <Task1ms+0x1cc>)
 8002dfa:	785a      	ldrb	r2, [r3, #1]
 8002dfc:	4b56      	ldr	r3, [pc, #344]	; (8002f58 <Task1ms+0x1d0>)
 8002dfe:	2100      	movs	r1, #0
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 fa8d 	bl	8003320 <ServoAngleChange>
			ServoAngleChange(&htim1, TIM_CHANNEL_4, DataInfo.Air_Dir_Data);
 8002e06:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <Task1ms+0x1cc>)
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	4b54      	ldr	r3, [pc, #336]	; (8002f5c <Task1ms+0x1d4>)
 8002e0c:	210c      	movs	r1, #12
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 fa86 	bl	8003320 <ServoAngleChange>
			ServoAngleChange(&htim1, TIM_CHANNEL_1, DataInfo.Seat_UpDown_Data);
 8002e14:	4b4f      	ldr	r3, [pc, #316]	; (8002f54 <Task1ms+0x1cc>)
 8002e16:	789a      	ldrb	r2, [r3, #2]
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <Task1ms+0x1d4>)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 fa7f 	bl	8003320 <ServoAngleChange>
			ServoAngleChange(&htim1, TIM_CHANNEL_3, DataInfo.Seat_RightLeft_Data);
 8002e22:	4b4c      	ldr	r3, [pc, #304]	; (8002f54 <Task1ms+0x1cc>)
 8002e24:	78da      	ldrb	r2, [r3, #3]
 8002e26:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <Task1ms+0x1d4>)
 8002e28:	2108      	movs	r1, #8
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fa78 	bl	8003320 <ServoAngleChange>
			ServoAngleChange(&htim1, TIM_CHANNEL_2, DataInfo.Seat_Rotate_Data); // seat rotate
 8002e30:	4b48      	ldr	r3, [pc, #288]	; (8002f54 <Task1ms+0x1cc>)
 8002e32:	799a      	ldrb	r2, [r3, #6]
 8002e34:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <Task1ms+0x1d4>)
 8002e36:	2104      	movs	r1, #4
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 fa71 	bl	8003320 <ServoAngleChange>

			//clear flag
			FlagInfo.Air_Dir_Flag = 0;
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <Task1ms+0x1c8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
			FlagInfo.Air_Speed_Flag = 0;
 8002e44:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <Task1ms+0x1c8>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	705a      	strb	r2, [r3, #1]
			FlagInfo.Seat_RightLeft_Flag = 0;
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <Task1ms+0x1c8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	70da      	strb	r2, [r3, #3]
			FlagInfo.Seat_UpDown_Flag = 0;
 8002e50:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <Task1ms+0x1c8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	709a      	strb	r2, [r3, #2]


			FlagInfo.SeatWatting_Flag = 1;
 8002e56:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <Task1ms+0x1c8>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	729a      	strb	r2, [r3, #10]
			FlagInfo.Key_On_Flag = 0;
 8002e5c:	4b3c      	ldr	r3, [pc, #240]	; (8002f50 <Task1ms+0x1c8>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	725a      	strb	r2, [r3, #9]
		}
	}

	if(FlagInfo.Key_Off_Flag == 1)
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <Task1ms+0x1c8>)
 8002e64:	7a1b      	ldrb	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d16e      	bne.n	8002f48 <Task1ms+0x1c0>
	{
		if(FlagInfo.Run_Flag == 1)
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <Task1ms+0x1c8>)
 8002e6c:	7adb      	ldrb	r3, [r3, #11]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d124      	bne.n	8002ebc <Task1ms+0x134>
		{
			Comm_UartWrite('A', 'H', DataInfo.Air_Dir_Data);
 8002e72:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <Task1ms+0x1cc>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	001a      	movs	r2, r3
 8002e78:	2148      	movs	r1, #72	; 0x48
 8002e7a:	2041      	movs	r0, #65	; 0x41
 8002e7c:	f7ff fd26 	bl	80028cc <Comm_UartWrite>
			HAL_Delay(100);
 8002e80:	2064      	movs	r0, #100	; 0x64
 8002e82:	f001 f865 	bl	8003f50 <HAL_Delay>
			Comm_UartWrite('A', 'L', DataInfo.Air_Speed_Data);
 8002e86:	4b33      	ldr	r3, [pc, #204]	; (8002f54 <Task1ms+0x1cc>)
 8002e88:	785b      	ldrb	r3, [r3, #1]
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	214c      	movs	r1, #76	; 0x4c
 8002e8e:	2041      	movs	r0, #65	; 0x41
 8002e90:	f7ff fd1c 	bl	80028cc <Comm_UartWrite>
			HAL_Delay(100);
 8002e94:	2064      	movs	r0, #100	; 0x64
 8002e96:	f001 f85b 	bl	8003f50 <HAL_Delay>
			Comm_UartWrite('C', 'H', DataInfo.Seat_UpDown_Data);
 8002e9a:	4b2e      	ldr	r3, [pc, #184]	; (8002f54 <Task1ms+0x1cc>)
 8002e9c:	789b      	ldrb	r3, [r3, #2]
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	2148      	movs	r1, #72	; 0x48
 8002ea2:	2043      	movs	r0, #67	; 0x43
 8002ea4:	f7ff fd12 	bl	80028cc <Comm_UartWrite>
			HAL_Delay(100);
 8002ea8:	2064      	movs	r0, #100	; 0x64
 8002eaa:	f001 f851 	bl	8003f50 <HAL_Delay>
			Comm_UartWrite('C', 'L', DataInfo.Seat_RightLeft_Data);
 8002eae:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <Task1ms+0x1cc>)
 8002eb0:	78db      	ldrb	r3, [r3, #3]
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	214c      	movs	r1, #76	; 0x4c
 8002eb6:	2043      	movs	r0, #67	; 0x43
 8002eb8:	f7ff fd08 	bl	80028cc <Comm_UartWrite>
		}

		OffFND();
 8002ebc:	f7ff fafc 	bl	80024b8 <OffFND>

		DataInfo.Air_Dir_Data 			= AIRDIR;
 8002ec0:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <Task1ms+0x1cc>)
 8002ec2:	225a      	movs	r2, #90	; 0x5a
 8002ec4:	701a      	strb	r2, [r3, #0]
		DataInfo.Air_Speed_Data			= AIRSPEED;
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <Task1ms+0x1cc>)
 8002ec8:	225a      	movs	r2, #90	; 0x5a
 8002eca:	705a      	strb	r2, [r3, #1]
		DataInfo.Seat_UpDown_Data		= SEATUPDOWN;
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <Task1ms+0x1cc>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	709a      	strb	r2, [r3, #2]
		DataInfo.Seat_RightLeft_Data	= SEATRIGHTLEFT;
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <Task1ms+0x1cc>)
 8002ed4:	225a      	movs	r2, #90	; 0x5a
 8002ed6:	70da      	strb	r2, [r3, #3]
		DataInfo.Seat_Rotate_Data 		= SEATROTATE;
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <Task1ms+0x1cc>)
 8002eda:	220a      	movs	r2, #10
 8002edc:	719a      	strb	r2, [r3, #6]

		ServoAngleChange(&htim2, TIM_CHANNEL_1, DataInfo.Air_Speed_Data);
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <Task1ms+0x1cc>)
 8002ee0:	785a      	ldrb	r2, [r3, #1]
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <Task1ms+0x1d0>)
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fa1a 	bl	8003320 <ServoAngleChange>
		ServoAngleChange(&htim1, TIM_CHANNEL_4, DataInfo.Air_Dir_Data);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <Task1ms+0x1cc>)
 8002eee:	781a      	ldrb	r2, [r3, #0]
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <Task1ms+0x1d4>)
 8002ef2:	210c      	movs	r1, #12
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 fa13 	bl	8003320 <ServoAngleChange>
		ServoAngleChange(&htim1, TIM_CHANNEL_1, DataInfo.Seat_UpDown_Data);
 8002efa:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <Task1ms+0x1cc>)
 8002efc:	789a      	ldrb	r2, [r3, #2]
 8002efe:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <Task1ms+0x1d4>)
 8002f00:	2100      	movs	r1, #0
 8002f02:	0018      	movs	r0, r3
 8002f04:	f000 fa0c 	bl	8003320 <ServoAngleChange>
		ServoAngleChange(&htim1, TIM_CHANNEL_3, DataInfo.Seat_RightLeft_Data);
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <Task1ms+0x1cc>)
 8002f0a:	78da      	ldrb	r2, [r3, #3]
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <Task1ms+0x1d4>)
 8002f0e:	2108      	movs	r1, #8
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 fa05 	bl	8003320 <ServoAngleChange>
		ServoAngleChange(&htim1, TIM_CHANNEL_2, DataInfo.Seat_Rotate_Data);
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <Task1ms+0x1cc>)
 8002f18:	799a      	ldrb	r2, [r3, #6]
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <Task1ms+0x1d4>)
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 f9fe 	bl	8003320 <ServoAngleChange>

		FlagInfo.Key_Off_Flag = 0;
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <Task1ms+0x1c8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	721a      	strb	r2, [r3, #8]
		FlagInfo.SeatWatting_Flag = 0;
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <Task1ms+0x1c8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	729a      	strb	r2, [r3, #10]
		FlagInfo.Run_Flag = 0;
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <Task1ms+0x1c8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	72da      	strb	r2, [r3, #11]

		SeatTurn.Pushflag = 0;
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <Task1ms+0x1d8>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	709a      	strb	r2, [r3, #2]
		JoyStick.Pushflag = 0;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <Task1ms+0x1dc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	709a      	strb	r2, [r3, #2]
		AirAuto.Pushflag  = 0;
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <Task1ms+0x1e0>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	709a      	strb	r2, [r3, #2]
	}

}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	200000b4 	.word	0x200000b4
 8002f54:	200000c0 	.word	0x200000c0
 8002f58:	20000140 	.word	0x20000140
 8002f5c:	200000f8 	.word	0x200000f8
 8002f60:	2000009c 	.word	0x2000009c
 8002f64:	20000098 	.word	0x20000098
 8002f68:	200000a0 	.word	0x200000a0

08002f6c <Task10ms>:

void Task10ms()
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
	if(FlagInfo.Run_Flag == 1)
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <Task10ms+0x54>)
 8002f72:	7adb      	ldrb	r3, [r3, #11]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <Task10ms+0x10>
	{
		ReadButton();
 8002f78:	f7ff f9b8 	bl	80022ec <ReadButton>
	}

	if(FlagInfo.SeatWatting_Flag == 1)
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <Task10ms+0x54>)
 8002f7e:	7a9b      	ldrb	r3, [r3, #10]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10b      	bne.n	8002f9c <Task10ms+0x30>
	{
		Sonic_Read();
 8002f84:	f000 faea 	bl	800355c <Sonic_Read>
		SonicData += CheckSonicClose();
 8002f88:	f000 fb0a 	bl	80035a0 <CheckSonicClose>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	001a      	movs	r2, r3
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <Task10ms+0x58>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	18d3      	adds	r3, r2, r3
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <Task10ms+0x58>)
 8002f9a:	701a      	strb	r2, [r3, #0]
	}

	if((JoystickInfo.Upflag == 1 || JoystickInfo.Downflag == 1) && JoyStick.Pushflag == 1)
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <Task10ms+0x5c>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d003      	beq.n	8002fac <Task10ms+0x40>
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <Task10ms+0x5c>)
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <Task10ms+0x4e>
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <Task10ms+0x60>)
 8002fae:	789b      	ldrb	r3, [r3, #2]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <Task10ms+0x4e>
	{
		AirAuto.Pushflag = 0;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <Task10ms+0x64>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	709a      	strb	r2, [r3, #2]
	}
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	200000b4 	.word	0x200000b4
 8002fc4:	200000f5 	.word	0x200000f5
 8002fc8:	200000a4 	.word	0x200000a4
 8002fcc:	20000098 	.word	0x20000098
 8002fd0:	200000a0 	.word	0x200000a0

08002fd4 <Task100ms>:

void Task100ms()
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	//TestProtocol();

	if(FlagInfo.Run_Flag == 1)
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <Task100ms+0x7c>)
 8002fda:	7adb      	ldrb	r3, [r3, #11]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <Task100ms+0x1a>
	{
		ADC_read(ADC_Val, 2);
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <Task100ms+0x80>)
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff f955 	bl	8002294 <ADC_read>
		CheckJoystick();
 8002fea:	f7ff fb01 	bl	80025f0 <CheckJoystick>
	}

	if(FlagInfo.Run_Flag == 1)
 8002fee:	4b18      	ldr	r3, [pc, #96]	; (8003050 <Task100ms+0x7c>)
 8002ff0:	7adb      	ldrb	r3, [r3, #11]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d128      	bne.n	8003048 <Task100ms+0x74>
	{
		if(AirAuto.Pushflag == 1)
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <Task100ms+0x84>)
 8002ff8:	789b      	ldrb	r3, [r3, #2]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d124      	bne.n	8003048 <Task100ms+0x74>
		{
			if(DataInfo.Air_Dir_Data <= 40)
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <Task100ms+0x88>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b28      	cmp	r3, #40	; 0x28
 8003004:	d803      	bhi.n	800300e <Task100ms+0x3a>
			{
				airAutoDir = +1;
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <Task100ms+0x8c>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e007      	b.n	800301e <Task100ms+0x4a>
			}
			else if(DataInfo.Air_Dir_Data >= 140)
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <Task100ms+0x88>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b8b      	cmp	r3, #139	; 0x8b
 8003014:	d903      	bls.n	800301e <Task100ms+0x4a>
			{
				airAutoDir = -1;
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <Task100ms+0x8c>)
 8003018:	2201      	movs	r2, #1
 800301a:	4252      	negs	r2, r2
 800301c:	601a      	str	r2, [r3, #0]
			}

			DataInfo.Air_Dir_Data += 10 * airAutoDir;
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <Task100ms+0x88>)
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <Task100ms+0x8c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	1c19      	adds	r1, r3, #0
 800302a:	0089      	lsls	r1, r1, #2
 800302c:	18cb      	adds	r3, r1, r3
 800302e:	18db      	adds	r3, r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	18d3      	adds	r3, r2, r3
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <Task100ms+0x88>)
 8003038:	701a      	strb	r2, [r3, #0]
			ServoAngleChange(&htim1, TIM_CHANNEL_4, DataInfo.Air_Dir_Data);
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <Task100ms+0x88>)
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <Task100ms+0x90>)
 8003040:	210c      	movs	r1, #12
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f96c 	bl	8003320 <ServoAngleChange>
		}
	}

}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	200000b4 	.word	0x200000b4
 8003054:	200000ac 	.word	0x200000ac
 8003058:	200000a0 	.word	0x200000a0
 800305c:	200000c0 	.word	0x200000c0
 8003060:	20000028 	.word	0x20000028
 8003064:	200000f8 	.word	0x200000f8

08003068 <Task150ms>:

void Task150ms()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	if(FlagInfo.Run_Flag == 1)
 800306c:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <Task150ms+0x150>)
 800306e:	7adb      	ldrb	r3, [r3, #11]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d000      	beq.n	8003076 <Task150ms+0xe>
 8003074:	e09c      	b.n	80031b0 <Task150ms+0x148>
	{
		if(JoyStick.Pushflag == 0) //note : 0 is seat control mode
 8003076:	4b51      	ldr	r3, [pc, #324]	; (80031bc <Task150ms+0x154>)
 8003078:	789b      	ldrb	r3, [r3, #2]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d13d      	bne.n	80030fa <Task150ms+0x92>
		{
			if(JoystickInfo.Upflag)
 800307e:	4b50      	ldr	r3, [pc, #320]	; (80031c0 <Task150ms+0x158>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <Task150ms+0x36>
			{
				if(DataInfo.Seat_UpDown_Data >= 180);
 8003086:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <Task150ms+0x15c>)
 8003088:	789b      	ldrb	r3, [r3, #2]
 800308a:	2bb3      	cmp	r3, #179	; 0xb3
 800308c:	d900      	bls.n	8003090 <Task150ms+0x28>
 800308e:	e073      	b.n	8003178 <Task150ms+0x110>
				else
				{
					DataInfo.Seat_UpDown_Data		+= 10;
 8003090:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <Task150ms+0x15c>)
 8003092:	789b      	ldrb	r3, [r3, #2]
 8003094:	330a      	adds	r3, #10
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <Task150ms+0x15c>)
 800309a:	709a      	strb	r2, [r3, #2]
 800309c:	e06c      	b.n	8003178 <Task150ms+0x110>
				}
			}
			else if(JoystickInfo.Downflag)
 800309e:	4b48      	ldr	r3, [pc, #288]	; (80031c0 <Task150ms+0x158>)
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <Task150ms+0x56>
			{
				if(DataInfo.Seat_UpDown_Data <= 0);
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <Task150ms+0x15c>)
 80030a8:	789b      	ldrb	r3, [r3, #2]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d100      	bne.n	80030b0 <Task150ms+0x48>
 80030ae:	e063      	b.n	8003178 <Task150ms+0x110>
				else
				{
					DataInfo.Seat_UpDown_Data		-= 10;
 80030b0:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <Task150ms+0x15c>)
 80030b2:	789b      	ldrb	r3, [r3, #2]
 80030b4:	3b0a      	subs	r3, #10
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <Task150ms+0x15c>)
 80030ba:	709a      	strb	r2, [r3, #2]
 80030bc:	e05c      	b.n	8003178 <Task150ms+0x110>
				}
			}
			else if(JoystickInfo.Rightflag)
 80030be:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <Task150ms+0x158>)
 80030c0:	789b      	ldrb	r3, [r3, #2]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <Task150ms+0x74>
			{
				if(DataInfo.Seat_RightLeft_Data <= 30);
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <Task150ms+0x15c>)
 80030c8:	78db      	ldrb	r3, [r3, #3]
 80030ca:	2b1e      	cmp	r3, #30
 80030cc:	d954      	bls.n	8003178 <Task150ms+0x110>
				else
				{
					DataInfo.Seat_RightLeft_Data	-= 10;
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <Task150ms+0x15c>)
 80030d0:	78db      	ldrb	r3, [r3, #3]
 80030d2:	3b0a      	subs	r3, #10
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <Task150ms+0x15c>)
 80030d8:	70da      	strb	r2, [r3, #3]
 80030da:	e04d      	b.n	8003178 <Task150ms+0x110>
				}
			}
			else if(JoystickInfo.Leftflag)
 80030dc:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <Task150ms+0x158>)
 80030de:	78db      	ldrb	r3, [r3, #3]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d049      	beq.n	8003178 <Task150ms+0x110>
			{
				if(DataInfo.Seat_RightLeft_Data >= 100);
 80030e4:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <Task150ms+0x15c>)
 80030e6:	78db      	ldrb	r3, [r3, #3]
 80030e8:	2b63      	cmp	r3, #99	; 0x63
 80030ea:	d845      	bhi.n	8003178 <Task150ms+0x110>
				else
				{
					DataInfo.Seat_RightLeft_Data	+= 10;
 80030ec:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <Task150ms+0x15c>)
 80030ee:	78db      	ldrb	r3, [r3, #3]
 80030f0:	330a      	adds	r3, #10
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <Task150ms+0x15c>)
 80030f6:	70da      	strb	r2, [r3, #3]
 80030f8:	e03e      	b.n	8003178 <Task150ms+0x110>
				}
			}
			else;
		}
		else if(JoyStick.Pushflag == 1)
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <Task150ms+0x154>)
 80030fc:	789b      	ldrb	r3, [r3, #2]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d13a      	bne.n	8003178 <Task150ms+0x110>
		{
			if(JoystickInfo.Downflag)
 8003102:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <Task150ms+0x158>)
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <Task150ms+0xb8>
			{
				if(DataInfo.Air_Dir_Data <= 40);
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <Task150ms+0x15c>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b28      	cmp	r3, #40	; 0x28
 8003110:	d932      	bls.n	8003178 <Task150ms+0x110>
				else
				{
					DataInfo.Air_Dir_Data		-= 10;
 8003112:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <Task150ms+0x15c>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	3b0a      	subs	r3, #10
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <Task150ms+0x15c>)
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e02b      	b.n	8003178 <Task150ms+0x110>
				}
			}
			else if(JoystickInfo.Upflag)
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <Task150ms+0x158>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <Task150ms+0xd6>
			{
				if(DataInfo.Air_Dir_Data >= 140);
 8003128:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <Task150ms+0x15c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b8b      	cmp	r3, #139	; 0x8b
 800312e:	d823      	bhi.n	8003178 <Task150ms+0x110>
				else
				{
					DataInfo.Air_Dir_Data		+= 10;
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <Task150ms+0x15c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	330a      	adds	r3, #10
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <Task150ms+0x15c>)
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e01c      	b.n	8003178 <Task150ms+0x110>
				}
			}
			else if(JoystickInfo.Leftflag)
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <Task150ms+0x158>)
 8003140:	78db      	ldrb	r3, [r3, #3]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <Task150ms+0xf4>
			{
				if(DataInfo.Air_Speed_Data <= 10);
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <Task150ms+0x15c>)
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b0a      	cmp	r3, #10
 800314c:	d914      	bls.n	8003178 <Task150ms+0x110>
				else
				{
					DataInfo.Air_Speed_Data	-= 10;
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <Task150ms+0x15c>)
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	3b0a      	subs	r3, #10
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <Task150ms+0x15c>)
 8003158:	705a      	strb	r2, [r3, #1]
 800315a:	e00d      	b.n	8003178 <Task150ms+0x110>
				}
			}
			else if(JoystickInfo.Rightflag)
 800315c:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <Task150ms+0x158>)
 800315e:	789b      	ldrb	r3, [r3, #2]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <Task150ms+0x110>
			{
				if(DataInfo.Air_Speed_Data >= 90);
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <Task150ms+0x15c>)
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	2b59      	cmp	r3, #89	; 0x59
 800316a:	d805      	bhi.n	8003178 <Task150ms+0x110>
				else
				{
					DataInfo.Air_Speed_Data	+= 10;
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <Task150ms+0x15c>)
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	330a      	adds	r3, #10
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <Task150ms+0x15c>)
 8003176:	705a      	strb	r2, [r3, #1]
			}
			else;
		}

		//set motor
		ServoAngleChange(&htim2, TIM_CHANNEL_1, DataInfo.Air_Speed_Data);
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <Task150ms+0x15c>)
 800317a:	785a      	ldrb	r2, [r3, #1]
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <Task150ms+0x160>)
 800317e:	2100      	movs	r1, #0
 8003180:	0018      	movs	r0, r3
 8003182:	f000 f8cd 	bl	8003320 <ServoAngleChange>
		ServoAngleChange(&htim1, TIM_CHANNEL_4, DataInfo.Air_Dir_Data);
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <Task150ms+0x15c>)
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <Task150ms+0x164>)
 800318c:	210c      	movs	r1, #12
 800318e:	0018      	movs	r0, r3
 8003190:	f000 f8c6 	bl	8003320 <ServoAngleChange>
		ServoAngleChange(&htim1, TIM_CHANNEL_1, DataInfo.Seat_UpDown_Data);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <Task150ms+0x15c>)
 8003196:	789a      	ldrb	r2, [r3, #2]
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <Task150ms+0x164>)
 800319a:	2100      	movs	r1, #0
 800319c:	0018      	movs	r0, r3
 800319e:	f000 f8bf 	bl	8003320 <ServoAngleChange>
		ServoAngleChange(&htim1, TIM_CHANNEL_3, DataInfo.Seat_RightLeft_Data);
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <Task150ms+0x15c>)
 80031a4:	78da      	ldrb	r2, [r3, #3]
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <Task150ms+0x164>)
 80031a8:	2108      	movs	r1, #8
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 f8b8 	bl	8003320 <ServoAngleChange>
	}

}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	200000b4 	.word	0x200000b4
 80031bc:	20000098 	.word	0x20000098
 80031c0:	200000a4 	.word	0x200000a4
 80031c4:	200000c0 	.word	0x200000c0
 80031c8:	20000140 	.word	0x20000140
 80031cc:	200000f8 	.word	0x200000f8

080031d0 <Task1000ms>:

void Task1000ms()
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
	if(FlagInfo.SeatWatting_Flag == 1)
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <Task1000ms+0x80>)
 80031d6:	7a9b      	ldrb	r3, [r3, #10]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d116      	bne.n	800320a <Task1000ms+0x3a>
	{
		if(SonicData > 80)
 80031dc:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <Task1000ms+0x84>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b50      	cmp	r3, #80	; 0x50
 80031e2:	d90f      	bls.n	8003204 <Task1000ms+0x34>
		{
			FlagInfo.SeatWatting_Flag = 0;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <Task1000ms+0x80>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	729a      	strb	r2, [r3, #10]
			FlagInfo.Run_Flag = 1;
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <Task1000ms+0x80>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	72da      	strb	r2, [r3, #11]

			DataInfo.Seat_Rotate_Data = SEATROTATE;
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <Task1000ms+0x88>)
 80031f2:	220a      	movs	r2, #10
 80031f4:	719a      	strb	r2, [r3, #6]
			ServoAngleChange(&htim1, TIM_CHANNEL_2, DataInfo.Seat_Rotate_Data); // seat rotate
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <Task1000ms+0x88>)
 80031f8:	799a      	ldrb	r2, [r3, #6]
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <Task1000ms+0x8c>)
 80031fc:	2104      	movs	r1, #4
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 f88e 	bl	8003320 <ServoAngleChange>
		}
		SonicData = 0;
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <Task1000ms+0x84>)
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
	}

	if(SeatTurn.Pushflag == 1)
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <Task1000ms+0x90>)
 800320c:	789b      	ldrb	r3, [r3, #2]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d11b      	bne.n	800324a <Task1000ms+0x7a>
	{
		if(DataInfo.Seat_Rotate_Data == 180)
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <Task1000ms+0x88>)
 8003214:	799b      	ldrb	r3, [r3, #6]
 8003216:	2bb4      	cmp	r3, #180	; 0xb4
 8003218:	d10a      	bne.n	8003230 <Task1000ms+0x60>
		{
			DataInfo.Seat_Rotate_Data 		= SEATROTATE;
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <Task1000ms+0x88>)
 800321c:	220a      	movs	r2, #10
 800321e:	719a      	strb	r2, [r3, #6]
			ServoAngleChange(&htim1, TIM_CHANNEL_2, DataInfo.Seat_Rotate_Data);
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <Task1000ms+0x88>)
 8003222:	799a      	ldrb	r2, [r3, #6]
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <Task1000ms+0x8c>)
 8003226:	2104      	movs	r1, #4
 8003228:	0018      	movs	r0, r3
 800322a:	f000 f879 	bl	8003320 <ServoAngleChange>
 800322e:	e009      	b.n	8003244 <Task1000ms+0x74>
		}
		else
		{
			DataInfo.Seat_Rotate_Data 		= 180;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <Task1000ms+0x88>)
 8003232:	22b4      	movs	r2, #180	; 0xb4
 8003234:	719a      	strb	r2, [r3, #6]
			ServoAngleChange(&htim1, TIM_CHANNEL_2, DataInfo.Seat_Rotate_Data);
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <Task1000ms+0x88>)
 8003238:	799a      	ldrb	r2, [r3, #6]
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <Task1000ms+0x8c>)
 800323c:	2104      	movs	r1, #4
 800323e:	0018      	movs	r0, r3
 8003240:	f000 f86e 	bl	8003320 <ServoAngleChange>
		}

		SeatTurn.Pushflag = 0;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <Task1000ms+0x90>)
 8003246:	2200      	movs	r2, #0
 8003248:	709a      	strb	r2, [r3, #2]


	//uint8_t buffer[256];
	//sprintf((char *)buffer, "%d		%d	     \n", ADC_Val[0], ADC_Val[1]);
	//HAL_UART_Transmit(&huart1, buffer, strlen((char *)buffer), 100);
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200000b4 	.word	0x200000b4
 8003254:	200000f5 	.word	0x200000f5
 8003258:	200000c0 	.word	0x200000c0
 800325c:	200000f8 	.word	0x200000f8
 8003260:	2000009c 	.word	0x2000009c

08003264 <Servo_Init>:

/* VARIABLES END */


void Servo_Init(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  //note : Check the parameters
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  //note : Set the TIM channel state
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <Servo_Init+0x1a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	223e      	movs	r2, #62	; 0x3e
 8003278:	2102      	movs	r1, #2
 800327a:	5499      	strb	r1, [r3, r2]
 800327c:	e013      	b.n	80032a6 <Servo_Init+0x42>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d104      	bne.n	800328e <Servo_Init+0x2a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	223f      	movs	r2, #63	; 0x3f
 8003288:	2102      	movs	r1, #2
 800328a:	5499      	strb	r1, [r3, r2]
 800328c:	e00b      	b.n	80032a6 <Servo_Init+0x42>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <Servo_Init+0x3a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2240      	movs	r2, #64	; 0x40
 8003298:	2102      	movs	r1, #2
 800329a:	5499      	strb	r1, [r3, r2]
 800329c:	e003      	b.n	80032a6 <Servo_Init+0x42>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2241      	movs	r2, #65	; 0x41
 80032a2:	2102      	movs	r1, #2
 80032a4:	5499      	strb	r1, [r3, r2]

  //note : Enable the Capture compare channel
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	0018      	movs	r0, r3
 80032b0:	f003 fd76 	bl	8006da0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a15      	ldr	r2, [pc, #84]	; (8003310 <Servo_Init+0xac>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00e      	beq.n	80032dc <Servo_Init+0x78>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <Servo_Init+0xb0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d009      	beq.n	80032dc <Servo_Init+0x78>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a12      	ldr	r2, [pc, #72]	; (8003318 <Servo_Init+0xb4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <Servo_Init+0x78>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a11      	ldr	r2, [pc, #68]	; (800331c <Servo_Init+0xb8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d101      	bne.n	80032e0 <Servo_Init+0x7c>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <Servo_Init+0x7e>
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <Servo_Init+0x94>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	0209      	lsls	r1, r1, #8
 80032f4:	430a      	orrs	r2, r1
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  __HAL_TIM_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2101      	movs	r1, #1
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
}
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	b002      	add	sp, #8
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40012c00 	.word	0x40012c00
 8003314:	40014000 	.word	0x40014000
 8003318:	40014400 	.word	0x40014400
 800331c:	40014800 	.word	0x40014800

08003320 <ServoAngleChange>:

void ServoAngleChange(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t angle)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	701a      	strb	r2, [r3, #0]
	uint32_t ccr = ServoAngleToCCR(angle);
 800332e:	1dfb      	adds	r3, r7, #7
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f826 	bl	8003384 <ServoAngleToCCR>
 8003338:	0003      	movs	r3, r0
 800333a:	617b      	str	r3, [r7, #20]

	if(Channel == TIM_CHANNEL_1)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d104      	bne.n	800334c <ServoAngleChange+0x2c>
	{
		htim->Instance->CCR1 = ccr;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	635a      	str	r2, [r3, #52]	; 0x34
	else if(Channel == TIM_CHANNEL_4)
	{
		htim->Instance->CCR4 = ccr;
	}
	else;
}
 800334a:	e016      	b.n	800337a <ServoAngleChange+0x5a>
	else if(Channel == TIM_CHANNEL_2)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b04      	cmp	r3, #4
 8003350:	d104      	bne.n	800335c <ServoAngleChange+0x3c>
		htim->Instance->CCR2 = ccr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
}
 800335a:	e00e      	b.n	800337a <ServoAngleChange+0x5a>
	else if(Channel == TIM_CHANNEL_3)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b08      	cmp	r3, #8
 8003360:	d104      	bne.n	800336c <ServoAngleChange+0x4c>
		htim->Instance->CCR3 = ccr;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800336a:	e006      	b.n	800337a <ServoAngleChange+0x5a>
	else if(Channel == TIM_CHANNEL_4)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d103      	bne.n	800337a <ServoAngleChange+0x5a>
		htim->Instance->CCR4 = ccr;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b006      	add	sp, #24
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <ServoAngleToCCR>:

uint32_t ServoAngleToCCR(uint8_t angle)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	0002      	movs	r2, r0
 800338c:	1dfb      	adds	r3, r7, #7
 800338e:	701a      	strb	r2, [r3, #0]
	//note : 0~180 angle -> 20~120 CCR, convert
	if(angle > 180)
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2bb4      	cmp	r3, #180	; 0xb4
 8003396:	d902      	bls.n	800339e <ServoAngleToCCR+0x1a>
	{
		angle = 180;
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	22b4      	movs	r2, #180	; 0xb4
 800339c:	701a      	strb	r2, [r3, #0]
	}
	return (uint32_t)(DEG0TOCCR + (angle * DEGGAIN));
 800339e:	1dfb      	adds	r3, r7, #7
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7fe fd0a 	bl	8001dbc <__aeabi_i2d>
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <ServoAngleToCCR+0x54>)
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <ServoAngleToCCR+0x58>)
 80033ac:	f7fd fe8c 	bl	80010c8 <__aeabi_dmul>
 80033b0:	0002      	movs	r2, r0
 80033b2:	000b      	movs	r3, r1
 80033b4:	0010      	movs	r0, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	2200      	movs	r2, #0
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <ServoAngleToCCR+0x5c>)
 80033bc:	f7fd f836 	bl	800042c <__aeabi_dadd>
 80033c0:	0002      	movs	r2, r0
 80033c2:	000b      	movs	r3, r1
 80033c4:	0010      	movs	r0, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	f7fd f812 	bl	80003f0 <__aeabi_d2uiz>
 80033cc:	0003      	movs	r3, r0
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b002      	add	sp, #8
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	1eb851ec 	.word	0x1eb851ec
 80033dc:	3fe1eb85 	.word	0x3fe1eb85
 80033e0:	40340000 	.word	0x40340000

080033e4 <delay>:
uint8_t SonicData = 0;
/* VARIABLES END */


void delay (uint16_t time)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	0002      	movs	r2, r0
 80033ec:	1dbb      	adds	r3, r7, #6
 80033ee:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim15, 0);
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <delay+0x30>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2200      	movs	r2, #0
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim15) < time);
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <delay+0x30>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003400:	1dbb      	adds	r3, r7, #6
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d3f8      	bcc.n	80033fa <delay+0x16>
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	200001d0 	.word	0x200001d0

08003418 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7f1b      	ldrb	r3, [r3, #28]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d000      	beq.n	800342a <HAL_TIM_IC_CaptureCallback+0x12>
 8003428:	e081      	b.n	800352e <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800342a:	4b43      	ldr	r3, [pc, #268]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x120>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11b      	bne.n	800346a <HAL_TIM_IC_CaptureCallback+0x52>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2100      	movs	r1, #0
 8003436:	0018      	movs	r0, r3
 8003438:	f003 f82c 	bl	8006494 <HAL_TIM_ReadCapturedValue>
 800343c:	0002      	movs	r2, r0
 800343e:	4b3f      	ldr	r3, [pc, #252]	; (800353c <HAL_TIM_IC_CaptureCallback+0x124>)
 8003440:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8003442:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x120>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6a1a      	ldr	r2, [r3, #32]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	210a      	movs	r1, #10
 8003454:	438a      	bics	r2, r1
 8003456:	621a      	str	r2, [r3, #32]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2102      	movs	r1, #2
 8003464:	430a      	orrs	r2, r1
 8003466:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim15, TIM_IT_CC1);
		}
	}
}
 8003468:	e061      	b.n	800352e <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 800346a:	4b33      	ldr	r3, [pc, #204]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x120>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d15d      	bne.n	800352e <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2100      	movs	r1, #0
 8003476:	0018      	movs	r0, r3
 8003478:	f003 f80c 	bl	8006494 <HAL_TIM_ReadCapturedValue>
 800347c:	0002      	movs	r2, r0
 800347e:	4b30      	ldr	r3, [pc, #192]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x128>)
 8003480:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x128>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b2b      	ldr	r3, [pc, #172]	; (800353c <HAL_TIM_IC_CaptureCallback+0x124>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d907      	bls.n	80034a6 <HAL_TIM_IC_CaptureCallback+0x8e>
				Difference = IC_Val2-IC_Val1;
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x128>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_TIM_IC_CaptureCallback+0x124>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1ad2      	subs	r2, r2, r3
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e00e      	b.n	80034c4 <HAL_TIM_IC_CaptureCallback+0xac>
			else if (IC_Val1 > IC_Val2)
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_TIM_IC_CaptureCallback+0x124>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x128>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d908      	bls.n	80034c4 <HAL_TIM_IC_CaptureCallback+0xac>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x128>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_TIM_IC_CaptureCallback+0x124>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_TIM_IC_CaptureCallback+0x130>)
 80034be:	189a      	adds	r2, r3, r2
 80034c0:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80034c2:	601a      	str	r2, [r3, #0]
			Distance = Difference * .034/2;
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fe fca7 	bl	8001e1c <__aeabi_ui2d>
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <HAL_TIM_IC_CaptureCallback+0x134>)
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_TIM_IC_CaptureCallback+0x138>)
 80034d2:	f7fd fdf9 	bl	80010c8 <__aeabi_dmul>
 80034d6:	0002      	movs	r2, r0
 80034d8:	000b      	movs	r3, r1
 80034da:	0010      	movs	r0, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	2200      	movs	r2, #0
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	05db      	lsls	r3, r3, #23
 80034e4:	f7fd fb02 	bl	8000aec <__aeabi_ddiv>
 80034e8:	0002      	movs	r2, r0
 80034ea:	000b      	movs	r3, r1
 80034ec:	0010      	movs	r0, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	f7fc ff7e 	bl	80003f0 <__aeabi_d2uiz>
 80034f4:	0003      	movs	r3, r0
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80034fa:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x120>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1a      	ldr	r2, [r3, #32]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	210a      	movs	r1, #10
 800350e:	438a      	bics	r2, r1
 8003510:	621a      	str	r2, [r3, #32]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a12      	ldr	r2, [r2, #32]
 800351c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim15, TIM_IT_CC1);
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_TIM_IC_CaptureCallback+0x140>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_TIM_IC_CaptureCallback+0x140>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2102      	movs	r1, #2
 800352a:	438a      	bics	r2, r1
 800352c:	60da      	str	r2, [r3, #12]
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b002      	add	sp, #8
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	200000f4 	.word	0x200000f4
 800353c:	200000e8 	.word	0x200000e8
 8003540:	200000ec 	.word	0x200000ec
 8003544:	200000f0 	.word	0x200000f0
 8003548:	0000ffff 	.word	0x0000ffff
 800354c:	b020c49c 	.word	0xb020c49c
 8003550:	3fa16872 	.word	0x3fa16872
 8003554:	2000002c 	.word	0x2000002c
 8003558:	200001d0 	.word	0x200001d0

0800355c <Sonic_Read>:

void Sonic_Read (void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	019b      	lsls	r3, r3, #6
 8003564:	480c      	ldr	r0, [pc, #48]	; (8003598 <Sonic_Read+0x3c>)
 8003566:	2201      	movs	r2, #1
 8003568:	0019      	movs	r1, r3
 800356a:	f001 fbd0 	bl	8004d0e <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 800356e:	200a      	movs	r0, #10
 8003570:	f7ff ff38 	bl	80033e4 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	019b      	lsls	r3, r3, #6
 8003578:	4807      	ldr	r0, [pc, #28]	; (8003598 <Sonic_Read+0x3c>)
 800357a:	2200      	movs	r2, #0
 800357c:	0019      	movs	r1, r3
 800357e:	f001 fbc6 	bl	8004d0e <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim15, TIM_IT_CC1);
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <Sonic_Read+0x40>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <Sonic_Read+0x40>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2102      	movs	r1, #2
 800358e:	430a      	orrs	r2, r1
 8003590:	60da      	str	r2, [r3, #12]
}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	48000400 	.word	0x48000400
 800359c:	200001d0 	.word	0x200001d0

080035a0 <CheckSonicClose>:

uint8_t CheckSonicClose()
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
	if(DeadZone >= Distance)
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <CheckSonicClose+0x1c>)
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <CheckSonicClose+0x20>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d301      	bcc.n	80035b4 <CheckSonicClose+0x14>
	{
		return 1;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <CheckSonicClose+0x16>
	}
	else
	{
		return 0;
 80035b4:	2300      	movs	r3, #0
	}
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	2000002d 	.word	0x2000002d
 80035c0:	2000002c 	.word	0x2000002c

080035c4 <Sonic_Init>:

void Sonic_Init(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	HAL_TIM_IC_Start_IT(htim, Channel);
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0011      	movs	r1, r2
 80035d4:	0018      	movs	r0, r3
 80035d6:	f002 fafb 	bl	8005bd0 <HAL_TIM_IC_Start_IT>
}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b002      	add	sp, #8
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_MspInit+0x44>)
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_MspInit+0x44>)
 80035f0:	2101      	movs	r1, #1
 80035f2:	430a      	orrs	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <HAL_MspInit+0x44>)
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2201      	movs	r2, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_MspInit+0x44>)
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_MspInit+0x44>)
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	0549      	lsls	r1, r1, #21
 800360c:	430a      	orrs	r2, r1
 800360e:	61da      	str	r2, [r3, #28]
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_MspInit+0x44>)
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	055b      	lsls	r3, r3, #21
 8003618:	4013      	ands	r3, r2
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b002      	add	sp, #8
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	40021000 	.word	0x40021000

0800362c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003630:	e7fe      	b.n	8003630 <NMI_Handler+0x4>

08003632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003636:	e7fe      	b.n	8003636 <HardFault_Handler+0x4>

08003638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003650:	f000 fc62 	bl	8003f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <TIM3_IRQHandler+0x14>)
 8003662:	0018      	movs	r0, r3
 8003664:	f002 fbc2 	bl	8005dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000188 	.word	0x20000188

08003674 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <TIM15_IRQHandler+0x14>)
 800367a:	0018      	movs	r0, r3
 800367c:	f002 fbb6 	bl	8005dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	200001d0 	.word	0x200001d0

0800368c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart1_Handler();
 8003690:	f7ff f970 	bl	8002974 <Uart1_Handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <USART1_IRQHandler+0x18>)
 8003696:	0018      	movs	r0, r3
 8003698:	f003 fdbe 	bl	8007218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	20000218 	.word	0x20000218

080036a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b096      	sub	sp, #88	; 0x58
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ba:	2348      	movs	r3, #72	; 0x48
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	0018      	movs	r0, r3
 80036c0:	2310      	movs	r3, #16
 80036c2:	001a      	movs	r2, r3
 80036c4:	2100      	movs	r1, #0
 80036c6:	f004 ff89 	bl	80085dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ca:	2340      	movs	r3, #64	; 0x40
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	0018      	movs	r0, r3
 80036d0:	2308      	movs	r3, #8
 80036d2:	001a      	movs	r2, r3
 80036d4:	2100      	movs	r1, #0
 80036d6:	f004 ff81 	bl	80085dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036da:	2324      	movs	r3, #36	; 0x24
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	0018      	movs	r0, r3
 80036e0:	231c      	movs	r3, #28
 80036e2:	001a      	movs	r2, r3
 80036e4:	2100      	movs	r1, #0
 80036e6:	f004 ff79 	bl	80085dc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	0018      	movs	r0, r3
 80036ee:	2320      	movs	r3, #32
 80036f0:	001a      	movs	r2, r3
 80036f2:	2100      	movs	r1, #0
 80036f4:	f004 ff72 	bl	80085dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <MX_TIM1_Init+0x1ac>)
 80036fa:	4a5a      	ldr	r2, [pc, #360]	; (8003864 <MX_TIM1_Init+0x1b0>)
 80036fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 80036fe:	4b58      	ldr	r3, [pc, #352]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003700:	2240      	movs	r2, #64	; 0x40
 8003702:	32ff      	adds	r2, #255	; 0xff
 8003704:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003706:	4b56      	ldr	r3, [pc, #344]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800370c:	4b54      	ldr	r3, [pc, #336]	; (8003860 <MX_TIM1_Init+0x1ac>)
 800370e:	4a56      	ldr	r2, [pc, #344]	; (8003868 <MX_TIM1_Init+0x1b4>)
 8003710:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003712:	4b53      	ldr	r3, [pc, #332]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003718:	4b51      	ldr	r3, [pc, #324]	; (8003860 <MX_TIM1_Init+0x1ac>)
 800371a:	2200      	movs	r2, #0
 800371c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800371e:	4b50      	ldr	r3, [pc, #320]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003724:	4b4e      	ldr	r3, [pc, #312]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003726:	0018      	movs	r0, r3
 8003728:	f002 f900 	bl	800592c <HAL_TIM_Base_Init>
 800372c:	1e03      	subs	r3, r0, #0
 800372e:	d001      	beq.n	8003734 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8003730:	f7ff f8b7 	bl	80028a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003734:	2148      	movs	r1, #72	; 0x48
 8003736:	187b      	adds	r3, r7, r1
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	0152      	lsls	r2, r2, #5
 800373c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800373e:	187a      	adds	r2, r7, r1
 8003740:	4b47      	ldr	r3, [pc, #284]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003742:	0011      	movs	r1, r2
 8003744:	0018      	movs	r0, r3
 8003746:	f002 fdd1 	bl	80062ec <HAL_TIM_ConfigClockSource>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800374e:	f7ff f8a8 	bl	80028a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003754:	0018      	movs	r0, r3
 8003756:	f002 f98b 	bl	8005a70 <HAL_TIM_PWM_Init>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800375e:	f7ff f8a0 	bl	80028a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	187b      	adds	r3, r7, r1
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376a:	187b      	adds	r3, r7, r1
 800376c:	2200      	movs	r2, #0
 800376e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003770:	187a      	adds	r2, r7, r1
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003774:	0011      	movs	r1, r2
 8003776:	0018      	movs	r0, r3
 8003778:	f003 fb36 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 800377c:	1e03      	subs	r3, r0, #0
 800377e:	d001      	beq.n	8003784 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8003780:	f7ff f88f 	bl	80028a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003784:	2124      	movs	r1, #36	; 0x24
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2260      	movs	r2, #96	; 0x60
 800378a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500-1;
 800378c:	187b      	adds	r3, r7, r1
 800378e:	22f4      	movs	r2, #244	; 0xf4
 8003790:	32ff      	adds	r2, #255	; 0xff
 8003792:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003794:	187b      	adds	r3, r7, r1
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2200      	movs	r2, #0
 800379e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2200      	movs	r2, #0
 80037b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037b2:	1879      	adds	r1, r7, r1
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <MX_TIM1_Init+0x1ac>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	0018      	movs	r0, r3
 80037ba:	f002 fcd1 	bl	8006160 <HAL_TIM_PWM_ConfigChannel>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d001      	beq.n	80037c6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80037c2:	f7ff f86e 	bl	80028a2 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80037c6:	2124      	movs	r1, #36	; 0x24
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	2200      	movs	r2, #0
 80037cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037ce:	1879      	adds	r1, r7, r1
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <MX_TIM1_Init+0x1ac>)
 80037d2:	2204      	movs	r2, #4
 80037d4:	0018      	movs	r0, r3
 80037d6:	f002 fcc3 	bl	8006160 <HAL_TIM_PWM_ConfigChannel>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d001      	beq.n	80037e2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80037de:	f7ff f860 	bl	80028a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037e2:	2324      	movs	r3, #36	; 0x24
 80037e4:	18f9      	adds	r1, r7, r3
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <MX_TIM1_Init+0x1ac>)
 80037e8:	2208      	movs	r2, #8
 80037ea:	0018      	movs	r0, r3
 80037ec:	f002 fcb8 	bl	8006160 <HAL_TIM_PWM_ConfigChannel>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80037f4:	f7ff f855 	bl	80028a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037f8:	2324      	movs	r3, #36	; 0x24
 80037fa:	18f9      	adds	r1, r7, r3
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <MX_TIM1_Init+0x1ac>)
 80037fe:	220c      	movs	r2, #12
 8003800:	0018      	movs	r0, r3
 8003802:	f002 fcad 	bl	8006160 <HAL_TIM_PWM_ConfigChannel>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d001      	beq.n	800380e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800380a:	f7ff f84a 	bl	80028a2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	2200      	movs	r2, #0
 8003818:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	2200      	movs	r2, #0
 800381e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	2200      	movs	r2, #0
 8003824:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	2200      	movs	r2, #0
 800382a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	0192      	lsls	r2, r2, #6
 8003832:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800383a:	1d3a      	adds	r2, r7, #4
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <MX_TIM1_Init+0x1ac>)
 800383e:	0011      	movs	r1, r2
 8003840:	0018      	movs	r0, r3
 8003842:	f003 fb2f 	bl	8006ea4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 800384a:	f7ff f82a 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800384e:	4b04      	ldr	r3, [pc, #16]	; (8003860 <MX_TIM1_Init+0x1ac>)
 8003850:	0018      	movs	r0, r3
 8003852:	f000 f9fd 	bl	8003c50 <HAL_TIM_MspPostInit>

}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b016      	add	sp, #88	; 0x58
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	200000f8 	.word	0x200000f8
 8003864:	40012c00 	.word	0x40012c00
 8003868:	000003e7 	.word	0x000003e7

0800386c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	; 0x38
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003872:	2328      	movs	r3, #40	; 0x28
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	0018      	movs	r0, r3
 8003878:	2310      	movs	r3, #16
 800387a:	001a      	movs	r2, r3
 800387c:	2100      	movs	r1, #0
 800387e:	f004 fead 	bl	80085dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003882:	2320      	movs	r3, #32
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	0018      	movs	r0, r3
 8003888:	2308      	movs	r3, #8
 800388a:	001a      	movs	r2, r3
 800388c:	2100      	movs	r1, #0
 800388e:	f004 fea5 	bl	80085dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	0018      	movs	r0, r3
 8003896:	231c      	movs	r3, #28
 8003898:	001a      	movs	r2, r3
 800389a:	2100      	movs	r1, #0
 800389c:	f004 fe9e 	bl	80085dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038a0:	4b30      	ldr	r3, [pc, #192]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	05d2      	lsls	r2, r2, #23
 80038a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 80038a8:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	32ff      	adds	r2, #255	; 0xff
 80038ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b0:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80038b6:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038b8:	4a2b      	ldr	r2, [pc, #172]	; (8003968 <MX_TIM2_Init+0xfc>)
 80038ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038bc:	4b29      	ldr	r3, [pc, #164]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038c8:	4b26      	ldr	r3, [pc, #152]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038ca:	0018      	movs	r0, r3
 80038cc:	f002 f82e 	bl	800592c <HAL_TIM_Base_Init>
 80038d0:	1e03      	subs	r3, r0, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80038d4:	f7fe ffe5 	bl	80028a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038d8:	2128      	movs	r1, #40	; 0x28
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	2280      	movs	r2, #128	; 0x80
 80038de:	0152      	lsls	r2, r2, #5
 80038e0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038e2:	187a      	adds	r2, r7, r1
 80038e4:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f002 fcff 	bl	80062ec <HAL_TIM_ConfigClockSource>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80038f2:	f7fe ffd6 	bl	80028a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038f6:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <MX_TIM2_Init+0xf8>)
 80038f8:	0018      	movs	r0, r3
 80038fa:	f002 f8b9 	bl	8005a70 <HAL_TIM_PWM_Init>
 80038fe:	1e03      	subs	r3, r0, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003902:	f7fe ffce 	bl	80028a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003906:	2120      	movs	r1, #32
 8003908:	187b      	adds	r3, r7, r1
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390e:	187b      	adds	r3, r7, r1
 8003910:	2200      	movs	r2, #0
 8003912:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003914:	187a      	adds	r2, r7, r1
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <MX_TIM2_Init+0xf8>)
 8003918:	0011      	movs	r1, r2
 800391a:	0018      	movs	r0, r3
 800391c:	f003 fa64 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8003920:	1e03      	subs	r3, r0, #0
 8003922:	d001      	beq.n	8003928 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003924:	f7fe ffbd 	bl	80028a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	2260      	movs	r2, #96	; 0x60
 800392c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	2200      	movs	r2, #0
 8003932:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	2200      	movs	r2, #0
 800393e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003940:	1d39      	adds	r1, r7, #4
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <MX_TIM2_Init+0xf8>)
 8003944:	2200      	movs	r2, #0
 8003946:	0018      	movs	r0, r3
 8003948:	f002 fc0a 	bl	8006160 <HAL_TIM_PWM_ConfigChannel>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8003950:	f7fe ffa7 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <MX_TIM2_Init+0xf8>)
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f97a 	bl	8003c50 <HAL_TIM_MspPostInit>

}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b00e      	add	sp, #56	; 0x38
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000140 	.word	0x20000140
 8003968:	000003e7 	.word	0x000003e7

0800396c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003972:	2308      	movs	r3, #8
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	0018      	movs	r0, r3
 8003978:	2310      	movs	r3, #16
 800397a:	001a      	movs	r2, r3
 800397c:	2100      	movs	r1, #0
 800397e:	f004 fe2d 	bl	80085dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003982:	003b      	movs	r3, r7
 8003984:	0018      	movs	r0, r3
 8003986:	2308      	movs	r3, #8
 8003988:	001a      	movs	r2, r3
 800398a:	2100      	movs	r1, #0
 800398c:	f004 fe26 	bl	80085dc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003990:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <MX_TIM3_Init+0xa0>)
 8003992:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <MX_TIM3_Init+0xa4>)
 8003994:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <MX_TIM3_Init+0xa0>)
 8003998:	220f      	movs	r2, #15
 800399a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <MX_TIM3_Init+0xa0>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <MX_TIM3_Init+0xa0>)
 80039a4:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <MX_TIM3_Init+0xa8>)
 80039a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a8:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <MX_TIM3_Init+0xa0>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <MX_TIM3_Init+0xa0>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <MX_TIM3_Init+0xa0>)
 80039b6:	0018      	movs	r0, r3
 80039b8:	f001 ffb8 	bl	800592c <HAL_TIM_Base_Init>
 80039bc:	1e03      	subs	r3, r0, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80039c0:	f7fe ff6f 	bl	80028a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c4:	2108      	movs	r1, #8
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0152      	lsls	r2, r2, #5
 80039cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039ce:	187a      	adds	r2, r7, r1
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <MX_TIM3_Init+0xa0>)
 80039d2:	0011      	movs	r1, r2
 80039d4:	0018      	movs	r0, r3
 80039d6:	f002 fc89 	bl	80062ec <HAL_TIM_ConfigClockSource>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80039de:	f7fe ff60 	bl	80028a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e2:	003b      	movs	r3, r7
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e8:	003b      	movs	r3, r7
 80039ea:	2200      	movs	r2, #0
 80039ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039ee:	003a      	movs	r2, r7
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <MX_TIM3_Init+0xa0>)
 80039f2:	0011      	movs	r1, r2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f003 f9f7 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80039fe:	f7fe ff50 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b006      	add	sp, #24
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20000188 	.word	0x20000188
 8003a10:	40000400 	.word	0x40000400
 8003a14:	000003e7 	.word	0x000003e7

08003a18 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a1e:	2318      	movs	r3, #24
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	0018      	movs	r0, r3
 8003a24:	2310      	movs	r3, #16
 8003a26:	001a      	movs	r2, r3
 8003a28:	2100      	movs	r1, #0
 8003a2a:	f004 fdd7 	bl	80085dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a2e:	2310      	movs	r3, #16
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	0018      	movs	r0, r3
 8003a34:	2308      	movs	r3, #8
 8003a36:	001a      	movs	r2, r3
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f004 fdcf 	bl	80085dc <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003a3e:	003b      	movs	r3, r7
 8003a40:	0018      	movs	r0, r3
 8003a42:	2310      	movs	r3, #16
 8003a44:	001a      	movs	r2, r3
 8003a46:	2100      	movs	r1, #0
 8003a48:	f004 fdc8 	bl	80085dc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a4e:	4a30      	ldr	r2, [pc, #192]	; (8003b10 <MX_TIM15_Init+0xf8>)
 8003a50:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16-1;
 8003a52:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a54:	220f      	movs	r2, #15
 8003a56:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a58:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a60:	4a2c      	ldr	r2, [pc, #176]	; (8003b14 <MX_TIM15_Init+0xfc>)
 8003a62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003a6a:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a70:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f001 ff57 	bl	800592c <HAL_TIM_Base_Init>
 8003a7e:	1e03      	subs	r3, r0, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8003a82:	f7fe ff0e 	bl	80028a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a86:	2118      	movs	r1, #24
 8003a88:	187b      	adds	r3, r7, r1
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	0152      	lsls	r2, r2, #5
 8003a8e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003a90:	187a      	adds	r2, r7, r1
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003a94:	0011      	movs	r1, r2
 8003a96:	0018      	movs	r0, r3
 8003a98:	f002 fc28 	bl	80062ec <HAL_TIM_ConfigClockSource>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8003aa0:	f7fe feff 	bl	80028a2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f002 f83a 	bl	8005b20 <HAL_TIM_IC_Init>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003ab0:	f7fe fef7 	bl	80028a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab4:	2110      	movs	r1, #16
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003ac2:	187a      	adds	r2, r7, r1
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f003 f98d 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 8003ad2:	f7fe fee6 	bl	80028a2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ad6:	003b      	movs	r3, r7
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003adc:	003b      	movs	r3, r7
 8003ade:	2201      	movs	r2, #1
 8003ae0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003ae2:	003b      	movs	r3, r7
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003ae8:	003b      	movs	r3, r7
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003aee:	0039      	movs	r1, r7
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <MX_TIM15_Init+0xf4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	0018      	movs	r0, r3
 8003af6:	f002 fa8f 	bl	8006018 <HAL_TIM_IC_ConfigChannel>
 8003afa:	1e03      	subs	r3, r0, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM15_Init+0xea>
  {
    Error_Handler();
 8003afe:	f7fe fed0 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b00a      	add	sp, #40	; 0x28
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	200001d0 	.word	0x200001d0
 8003b10:	40014000 	.word	0x40014000
 8003b14:	0000ffff 	.word	0x0000ffff

08003b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	231c      	movs	r3, #28
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	0018      	movs	r0, r3
 8003b26:	2314      	movs	r3, #20
 8003b28:	001a      	movs	r2, r3
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f004 fd56 	bl	80085dc <memset>
  if(tim_baseHandle->Instance==TIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a41      	ldr	r2, [pc, #260]	; (8003c3c <HAL_TIM_Base_MspInit+0x124>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	0109      	lsls	r1, r1, #4
 8003b44:	430a      	orrs	r2, r1
 8003b46:	619a      	str	r2, [r3, #24]
 8003b48:	4b3d      	ldr	r3, [pc, #244]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003b56:	e06c      	b.n	8003c32 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	05db      	lsls	r3, r3, #23
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d10c      	bne.n	8003b7e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	61da      	str	r2, [r3, #28]
 8003b70:	4b33      	ldr	r3, [pc, #204]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2201      	movs	r2, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	697b      	ldr	r3, [r7, #20]
}
 8003b7c:	e059      	b.n	8003c32 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a30      	ldr	r2, [pc, #192]	; (8003c44 <HAL_TIM_Base_MspInit+0x12c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d114      	bne.n	8003bb2 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b88:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b8e:	2102      	movs	r1, #2
 8003b90:	430a      	orrs	r2, r1
 8003b92:	61da      	str	r2, [r3, #28]
 8003b94:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	2010      	movs	r0, #16
 8003ba6:	f000 fe6d 	bl	8004884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003baa:	2010      	movs	r0, #16
 8003bac:	f000 fe7f 	bl	80048ae <HAL_NVIC_EnableIRQ>
}
 8003bb0:	e03f      	b.n	8003c32 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM15)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <HAL_TIM_Base_MspInit+0x130>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d13a      	bne.n	8003c32 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003bbe:	699a      	ldr	r2, [r3, #24]
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	0249      	lsls	r1, r1, #9
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	619a      	str	r2, [r3, #24]
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	025b      	lsls	r3, r3, #9
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	02c9      	lsls	r1, r1, #11
 8003be2:	430a      	orrs	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_TIM_Base_MspInit+0x128>)
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	02db      	lsls	r3, r3, #11
 8003bee:	4013      	ands	r3, r2
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bf4:	211c      	movs	r1, #28
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	01d2      	lsls	r2, r2, #7
 8003bfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2202      	movs	r2, #2
 8003c02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	2201      	movs	r2, #1
 8003c14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <HAL_TIM_Base_MspInit+0x134>)
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	0010      	movs	r0, r2
 8003c1e:	f000 fee1 	bl	80049e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2100      	movs	r1, #0
 8003c26:	2014      	movs	r0, #20
 8003c28:	f000 fe2c 	bl	8004884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003c2c:	2014      	movs	r0, #20
 8003c2e:	f000 fe3e 	bl	80048ae <HAL_NVIC_EnableIRQ>
}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b00c      	add	sp, #48	; 0x30
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	48000400 	.word	0x48000400

08003c50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b08b      	sub	sp, #44	; 0x2c
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	2414      	movs	r4, #20
 8003c5a:	193b      	adds	r3, r7, r4
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	2314      	movs	r3, #20
 8003c60:	001a      	movs	r2, r3
 8003c62:	2100      	movs	r1, #0
 8003c64:	f004 fcba 	bl	80085dc <memset>
  if(timHandle->Instance==TIM1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <HAL_TIM_MspPostInit+0xd0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d126      	bne.n	8003cc0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c72:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <HAL_TIM_MspPostInit+0xd4>)
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_TIM_MspPostInit+0xd4>)
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	0289      	lsls	r1, r1, #10
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	615a      	str	r2, [r3, #20]
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <HAL_TIM_MspPostInit+0xd4>)
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	029b      	lsls	r3, r3, #10
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003c8e:	193b      	adds	r3, r7, r4
 8003c90:	22f0      	movs	r2, #240	; 0xf0
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	0021      	movs	r1, r4
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	2202      	movs	r2, #2
 8003cae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb0:	187a      	adds	r2, r7, r1
 8003cb2:	2390      	movs	r3, #144	; 0x90
 8003cb4:	05db      	lsls	r3, r3, #23
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 fe93 	bl	80049e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003cbe:	e02a      	b.n	8003d16 <HAL_TIM_MspPostInit+0xc6>
  else if(timHandle->Instance==TIM2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	05db      	lsls	r3, r3, #23
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d124      	bne.n	8003d16 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ccc:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_TIM_MspPostInit+0xd4>)
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <HAL_TIM_MspPostInit+0xd4>)
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	0289      	lsls	r1, r1, #10
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	615a      	str	r2, [r3, #20]
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_TIM_MspPostInit+0xd4>)
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	029b      	lsls	r3, r3, #10
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ce8:	2114      	movs	r1, #20
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	2220      	movs	r2, #32
 8003cee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	2202      	movs	r2, #2
 8003d06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d08:	187a      	adds	r2, r7, r1
 8003d0a:	2390      	movs	r3, #144	; 0x90
 8003d0c:	05db      	lsls	r3, r3, #23
 8003d0e:	0011      	movs	r1, r2
 8003d10:	0018      	movs	r0, r3
 8003d12:	f000 fe67 	bl	80049e4 <HAL_GPIO_Init>
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b00b      	add	sp, #44	; 0x2c
 8003d1c:	bd90      	pop	{r4, r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40021000 	.word	0x40021000

08003d28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d2e:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <MX_USART1_UART_Init+0x5c>)
 8003d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d34:	22e1      	movs	r2, #225	; 0xe1
 8003d36:	0252      	lsls	r2, r2, #9
 8003d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d46:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d4e:	220c      	movs	r2, #12
 8003d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <MX_USART1_UART_Init+0x58>)
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f003 f907 	bl	8006f80 <HAL_UART_Init>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d001      	beq.n	8003d7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003d76:	f7fe fd94 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000218 	.word	0x20000218
 8003d84:	40013800 	.word	0x40013800

08003d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b08b      	sub	sp, #44	; 0x2c
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	2414      	movs	r4, #20
 8003d92:	193b      	adds	r3, r7, r4
 8003d94:	0018      	movs	r0, r3
 8003d96:	2314      	movs	r3, #20
 8003d98:	001a      	movs	r2, r3
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f004 fc1e 	bl	80085dc <memset>
  if(uartHandle->Instance==USART1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <HAL_UART_MspInit+0xa0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d139      	bne.n	8003e1e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_UART_MspInit+0xa4>)
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <HAL_UART_MspInit+0xa4>)
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	01c9      	lsls	r1, r1, #7
 8003db4:	430a      	orrs	r2, r1
 8003db6:	619a      	str	r2, [r3, #24]
 8003db8:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <HAL_UART_MspInit+0xa4>)
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	01db      	lsls	r3, r3, #7
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_UART_MspInit+0xa4>)
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <HAL_UART_MspInit+0xa4>)
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	02c9      	lsls	r1, r1, #11
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	615a      	str	r2, [r3, #20]
 8003dd4:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_UART_MspInit+0xa4>)
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	02db      	lsls	r3, r3, #11
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003de2:	0021      	movs	r1, r4
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	22c0      	movs	r2, #192	; 0xc0
 8003de8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dea:	187b      	adds	r3, r7, r1
 8003dec:	2202      	movs	r2, #2
 8003dee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	2200      	movs	r2, #0
 8003df4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <HAL_UART_MspInit+0xa8>)
 8003e06:	0019      	movs	r1, r3
 8003e08:	0010      	movs	r0, r2
 8003e0a:	f000 fdeb 	bl	80049e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2100      	movs	r1, #0
 8003e12:	201b      	movs	r0, #27
 8003e14:	f000 fd36 	bl	8004884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e18:	201b      	movs	r0, #27
 8003e1a:	f000 fd48 	bl	80048ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b00b      	add	sp, #44	; 0x2c
 8003e24:	bd90      	pop	{r4, r7, pc}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	48000400 	.word	0x48000400

08003e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e34:	480d      	ldr	r0, [pc, #52]	; (8003e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e38:	f7ff fc36 	bl	80036a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e3c:	480c      	ldr	r0, [pc, #48]	; (8003e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e3e:	490d      	ldr	r1, [pc, #52]	; (8003e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <LoopForever+0xe>)
  movs r3, #0
 8003e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e44:	e002      	b.n	8003e4c <LoopCopyDataInit>

08003e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e4a:	3304      	adds	r3, #4

08003e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e50:	d3f9      	bcc.n	8003e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e54:	4c0a      	ldr	r4, [pc, #40]	; (8003e80 <LoopForever+0x16>)
  movs r3, #0
 8003e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e58:	e001      	b.n	8003e5e <LoopFillZerobss>

08003e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e5c:	3204      	adds	r2, #4

08003e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e60:	d3fb      	bcc.n	8003e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e62:	f004 fbd5 	bl	8008610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e66:	f7fe fc45 	bl	80026f4 <main>

08003e6a <LoopForever>:

LoopForever:
    b LoopForever
 8003e6a:	e7fe      	b.n	8003e6a <LoopForever>
  ldr   r0, =_estack
 8003e6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e74:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8003e78:	08008768 	.word	0x08008768
  ldr r2, =_sbss
 8003e7c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8003e80:	200002a4 	.word	0x200002a4

08003e84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e84:	e7fe      	b.n	8003e84 <ADC1_COMP_IRQHandler>
	...

08003e88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_Init+0x24>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_Init+0x24>)
 8003e92:	2110      	movs	r1, #16
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003e98:	2003      	movs	r0, #3
 8003e9a:	f000 f809 	bl	8003eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e9e:	f7ff fba1 	bl	80035e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	40022000 	.word	0x40022000

08003eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eb8:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_InitTick+0x5c>)
 8003eba:	681c      	ldr	r4, [r3, #0]
 8003ebc:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_InitTick+0x60>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	23fa      	movs	r3, #250	; 0xfa
 8003ec4:	0098      	lsls	r0, r3, #2
 8003ec6:	f7fc f91d 	bl	8000104 <__udivsi3>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	0019      	movs	r1, r3
 8003ece:	0020      	movs	r0, r4
 8003ed0:	f7fc f918 	bl	8000104 <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fcf9 	bl	80048ce <HAL_SYSTICK_Config>
 8003edc:	1e03      	subs	r3, r0, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e00f      	b.n	8003f04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d80b      	bhi.n	8003f02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	2301      	movs	r3, #1
 8003eee:	425b      	negs	r3, r3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 fcc6 	bl	8004884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_InitTick+0x64>)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b003      	add	sp, #12
 8003f0a:	bd90      	pop	{r4, r7, pc}
 8003f0c:	20000030 	.word	0x20000030
 8003f10:	20000038 	.word	0x20000038
 8003f14:	20000034 	.word	0x20000034

08003f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_IncTick+0x1c>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	001a      	movs	r2, r3
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_IncTick+0x20>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	18d2      	adds	r2, r2, r3
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_IncTick+0x20>)
 8003f2a:	601a      	str	r2, [r3, #0]
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	20000038 	.word	0x20000038
 8003f38:	200002a0 	.word	0x200002a0

08003f3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <HAL_GetTick+0x10>)
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	200002a0 	.word	0x200002a0

08003f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f58:	f7ff fff0 	bl	8003f3c <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3301      	adds	r3, #1
 8003f68:	d005      	beq.n	8003f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_Delay+0x44>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	001a      	movs	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	f7ff ffe0 	bl	8003f3c <HAL_GetTick>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d8f7      	bhi.n	8003f78 <HAL_Delay+0x28>
  {
  }
}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	20000038 	.word	0x20000038

08003f98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa0:	230f      	movs	r3, #15
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e125      	b.n	8004202 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2234      	movs	r2, #52	; 0x34
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7fe f91a 	bl	8002208 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	2210      	movs	r2, #16
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d000      	beq.n	8003fe0 <HAL_ADC_Init+0x48>
 8003fde:	e103      	b.n	80041e8 <HAL_ADC_Init+0x250>
 8003fe0:	230f      	movs	r3, #15
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d000      	beq.n	8003fec <HAL_ADC_Init+0x54>
 8003fea:	e0fd      	b.n	80041e8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003ff6:	d000      	beq.n	8003ffa <HAL_ADC_Init+0x62>
 8003ff8:	e0f6      	b.n	80041e8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	4a83      	ldr	r2, [pc, #524]	; (800420c <HAL_ADC_Init+0x274>)
 8004000:	4013      	ands	r3, r2
 8004002:	2202      	movs	r2, #2
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2203      	movs	r2, #3
 8004012:	4013      	ands	r3, r2
 8004014:	2b01      	cmp	r3, #1
 8004016:	d112      	bne.n	800403e <HAL_ADC_Init+0xa6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	4013      	ands	r3, r2
 8004022:	2b01      	cmp	r3, #1
 8004024:	d009      	beq.n	800403a <HAL_ADC_Init+0xa2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	401a      	ands	r2, r3
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	429a      	cmp	r2, r3
 8004038:	d101      	bne.n	800403e <HAL_ADC_Init+0xa6>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_ADC_Init+0xa8>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d116      	bne.n	8004072 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2218      	movs	r2, #24
 800404c:	4393      	bics	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	0899      	lsrs	r1, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4964      	ldr	r1, [pc, #400]	; (8004210 <HAL_ADC_Init+0x278>)
 800407e:	400a      	ands	r2, r1
 8004080:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7e1b      	ldrb	r3, [r3, #24]
 8004086:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	7e5b      	ldrb	r3, [r3, #25]
 800408c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800408e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7e9b      	ldrb	r3, [r3, #26]
 8004094:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004096:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	2b01      	cmp	r3, #1
 800409e:	d002      	beq.n	80040a6 <HAL_ADC_Init+0x10e>
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	015b      	lsls	r3, r3, #5
 80040a4:	e000      	b.n	80040a8 <HAL_ADC_Init+0x110>
 80040a6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040a8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80040ae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d101      	bne.n	80040bc <HAL_ADC_Init+0x124>
 80040b8:	2304      	movs	r3, #4
 80040ba:	e000      	b.n	80040be <HAL_ADC_Init+0x126>
 80040bc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80040be:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2124      	movs	r1, #36	; 0x24
 80040c4:	5c5b      	ldrb	r3, [r3, r1]
 80040c6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80040c8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	7edb      	ldrb	r3, [r3, #27]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d115      	bne.n	8004104 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7e9b      	ldrb	r3, [r3, #26]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2280      	movs	r2, #128	; 0x80
 80040e4:	0252      	lsls	r2, r2, #9
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	e00b      	b.n	8004104 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	2220      	movs	r2, #32
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	2201      	movs	r2, #1
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	23c2      	movs	r3, #194	; 0xc2
 800410a:	33ff      	adds	r3, #255	; 0xff
 800410c:	429a      	cmp	r2, r3
 800410e:	d007      	beq.n	8004120 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004118:	4313      	orrs	r3, r2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4313      	orrs	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68d9      	ldr	r1, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	055b      	lsls	r3, r3, #21
 8004138:	429a      	cmp	r2, r3
 800413a:	d01b      	beq.n	8004174 <HAL_ADC_Init+0x1dc>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d017      	beq.n	8004174 <HAL_ADC_Init+0x1dc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	2b02      	cmp	r3, #2
 800414a:	d013      	beq.n	8004174 <HAL_ADC_Init+0x1dc>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	2b03      	cmp	r3, #3
 8004152:	d00f      	beq.n	8004174 <HAL_ADC_Init+0x1dc>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	2b04      	cmp	r3, #4
 800415a:	d00b      	beq.n	8004174 <HAL_ADC_Init+0x1dc>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	2b05      	cmp	r3, #5
 8004162:	d007      	beq.n	8004174 <HAL_ADC_Init+0x1dc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	2b06      	cmp	r3, #6
 800416a:	d003      	beq.n	8004174 <HAL_ADC_Init+0x1dc>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	2b07      	cmp	r3, #7
 8004172:	d112      	bne.n	800419a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2107      	movs	r1, #7
 8004180:	438a      	bics	r2, r1
 8004182:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6959      	ldr	r1, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	2207      	movs	r2, #7
 8004190:	401a      	ands	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <HAL_ADC_Init+0x27c>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d10b      	bne.n	80041c2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	2203      	movs	r2, #3
 80041b6:	4393      	bics	r3, r2
 80041b8:	2201      	movs	r2, #1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80041c0:	e01c      	b.n	80041fc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	2212      	movs	r2, #18
 80041c8:	4393      	bics	r3, r2
 80041ca:	2210      	movs	r2, #16
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	2201      	movs	r2, #1
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80041de:	230f      	movs	r3, #15
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80041e6:	e009      	b.n	80041fc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	2210      	movs	r2, #16
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80041f4:	230f      	movs	r3, #15
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80041fc:	230f      	movs	r3, #15
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	781b      	ldrb	r3, [r3, #0]
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b004      	add	sp, #16
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	fffffefd 	.word	0xfffffefd
 8004210:	fffe0219 	.word	0xfffe0219
 8004214:	833fffe7 	.word	0x833fffe7

08004218 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004220:	230f      	movs	r3, #15
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2204      	movs	r2, #4
 8004230:	4013      	ands	r3, r2
 8004232:	d138      	bne.n	80042a6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2234      	movs	r2, #52	; 0x34
 8004238:	5c9b      	ldrb	r3, [r3, r2]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_ADC_Start+0x2a>
 800423e:	2302      	movs	r3, #2
 8004240:	e038      	b.n	80042b4 <HAL_ADC_Start+0x9c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2234      	movs	r2, #52	; 0x34
 8004246:	2101      	movs	r1, #1
 8004248:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7e5b      	ldrb	r3, [r3, #25]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d007      	beq.n	8004262 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004252:	230f      	movs	r3, #15
 8004254:	18fc      	adds	r4, r7, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 f9e3 	bl	8004624 <ADC_Enable>
 800425e:	0003      	movs	r3, r0
 8004260:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004262:	230f      	movs	r3, #15
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d120      	bne.n	80042ae <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	4a12      	ldr	r2, [pc, #72]	; (80042bc <HAL_ADC_Start+0xa4>)
 8004272:	4013      	ands	r3, r2
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	0052      	lsls	r2, r2, #1
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2234      	movs	r2, #52	; 0x34
 8004288:	2100      	movs	r1, #0
 800428a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	221c      	movs	r2, #28
 8004292:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2104      	movs	r1, #4
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	e003      	b.n	80042ae <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042a6:	230f      	movs	r3, #15
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	2202      	movs	r2, #2
 80042ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80042ae:	230f      	movs	r3, #15
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	781b      	ldrb	r3, [r3, #0]
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b005      	add	sp, #20
 80042ba:	bd90      	pop	{r4, r7, pc}
 80042bc:	fffff0fe 	.word	0xfffff0fe

080042c0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d102      	bne.n	80042d8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80042d2:	2308      	movs	r3, #8
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e014      	b.n	8004302 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10b      	bne.n	80042fe <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	2220      	movs	r2, #32
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2234      	movs	r2, #52	; 0x34
 80042f6:	2100      	movs	r1, #0
 80042f8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e071      	b.n	80043e2 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80042fe:	230c      	movs	r3, #12
 8004300:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004302:	f7ff fe1b 	bl	8003f3c <HAL_GetTick>
 8004306:	0003      	movs	r3, r0
 8004308:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800430a:	e01f      	b.n	800434c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	d01c      	beq.n	800434c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_ADC_PollForConversion+0x68>
 8004318:	f7ff fe10 	bl	8003f3c <HAL_GetTick>
 800431c:	0002      	movs	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d211      	bcs.n	800434c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	d10b      	bne.n	800434c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	2204      	movs	r2, #4
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2234      	movs	r2, #52	; 0x34
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e04a      	b.n	80043e2 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4013      	ands	r3, r2
 8004356:	d0d9      	beq.n	800430c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	2280      	movs	r2, #128	; 0x80
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	23c0      	movs	r3, #192	; 0xc0
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	4013      	ands	r3, r2
 8004372:	d12d      	bne.n	80043d0 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004378:	2b00      	cmp	r3, #0
 800437a:	d129      	bne.n	80043d0 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2208      	movs	r2, #8
 8004384:	4013      	ands	r3, r2
 8004386:	2b08      	cmp	r3, #8
 8004388:	d122      	bne.n	80043d0 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2204      	movs	r2, #4
 8004392:	4013      	ands	r3, r2
 8004394:	d110      	bne.n	80043b8 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	210c      	movs	r1, #12
 80043a2:	438a      	bics	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	4a10      	ldr	r2, [pc, #64]	; (80043ec <HAL_ADC_PollForConversion+0x12c>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	2201      	movs	r2, #1
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
 80043b6:	e00b      	b.n	80043d0 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	2220      	movs	r2, #32
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	2201      	movs	r2, #1
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7e1b      	ldrb	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	220c      	movs	r2, #12
 80043de:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b004      	add	sp, #16
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	fffffefe 	.word	0xfffffefe

080043f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004412:	230f      	movs	r3, #15
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	055b      	lsls	r3, r3, #21
 8004426:	429a      	cmp	r2, r3
 8004428:	d011      	beq.n	800444e <HAL_ADC_ConfigChannel+0x46>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d00d      	beq.n	800444e <HAL_ADC_ConfigChannel+0x46>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2b02      	cmp	r3, #2
 8004438:	d009      	beq.n	800444e <HAL_ADC_ConfigChannel+0x46>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	2b03      	cmp	r3, #3
 8004440:	d005      	beq.n	800444e <HAL_ADC_ConfigChannel+0x46>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	2b04      	cmp	r3, #4
 8004448:	d001      	beq.n	800444e <HAL_ADC_ConfigChannel+0x46>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2234      	movs	r2, #52	; 0x34
 8004452:	5c9b      	ldrb	r3, [r3, r2]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x54>
 8004458:	2302      	movs	r3, #2
 800445a:	e0d0      	b.n	80045fe <HAL_ADC_ConfigChannel+0x1f6>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2234      	movs	r2, #52	; 0x34
 8004460:	2101      	movs	r1, #1
 8004462:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2204      	movs	r2, #4
 800446c:	4013      	ands	r3, r2
 800446e:	d000      	beq.n	8004472 <HAL_ADC_ConfigChannel+0x6a>
 8004470:	e0b4      	b.n	80045dc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4a64      	ldr	r2, [pc, #400]	; (8004608 <HAL_ADC_ConfigChannel+0x200>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d100      	bne.n	800447e <HAL_ADC_ConfigChannel+0x76>
 800447c:	e082      	b.n	8004584 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	409a      	lsls	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	055b      	lsls	r3, r3, #21
 800449c:	429a      	cmp	r2, r3
 800449e:	d037      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d033      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d02f      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d02b      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d027      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d023      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	d01f      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2b07      	cmp	r3, #7
 80044d6:	d01b      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2107      	movs	r1, #7
 80044e4:	400b      	ands	r3, r1
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d012      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2107      	movs	r1, #7
 80044f6:	438a      	bics	r2, r1
 80044f8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6959      	ldr	r1, [r3, #20]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2207      	movs	r2, #7
 8004506:	401a      	ands	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b10      	cmp	r3, #16
 8004516:	d007      	beq.n	8004528 <HAL_ADC_ConfigChannel+0x120>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b11      	cmp	r3, #17
 800451e:	d003      	beq.n	8004528 <HAL_ADC_ConfigChannel+0x120>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b12      	cmp	r3, #18
 8004526:	d163      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004528:	4b38      	ldr	r3, [pc, #224]	; (800460c <HAL_ADC_ConfigChannel+0x204>)
 800452a:	6819      	ldr	r1, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b10      	cmp	r3, #16
 8004532:	d009      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x140>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b11      	cmp	r3, #17
 800453a:	d102      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x13a>
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	03db      	lsls	r3, r3, #15
 8004540:	e004      	b.n	800454c <HAL_ADC_ConfigChannel+0x144>
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	045b      	lsls	r3, r3, #17
 8004546:	e001      	b.n	800454c <HAL_ADC_ConfigChannel+0x144>
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	4a2f      	ldr	r2, [pc, #188]	; (800460c <HAL_ADC_ConfigChannel+0x204>)
 800454e:	430b      	orrs	r3, r1
 8004550:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b10      	cmp	r3, #16
 8004558:	d14a      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800455a:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_ADC_ConfigChannel+0x208>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	492d      	ldr	r1, [pc, #180]	; (8004614 <HAL_ADC_ConfigChannel+0x20c>)
 8004560:	0018      	movs	r0, r3
 8004562:	f7fb fdcf 	bl	8000104 <__udivsi3>
 8004566:	0003      	movs	r3, r0
 8004568:	001a      	movs	r2, r3
 800456a:	0013      	movs	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	189b      	adds	r3, r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004574:	e002      	b.n	800457c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3b01      	subs	r3, #1
 800457a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f9      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x16e>
 8004582:	e035      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2101      	movs	r1, #1
 8004590:	4099      	lsls	r1, r3
 8004592:	000b      	movs	r3, r1
 8004594:	43d9      	mvns	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	400a      	ands	r2, r1
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d007      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x1ae>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b11      	cmp	r3, #17
 80045ac:	d003      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x1ae>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b12      	cmp	r3, #18
 80045b4:	d11c      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_ADC_ConfigChannel+0x204>)
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d007      	beq.n	80045d2 <HAL_ADC_ConfigChannel+0x1ca>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b11      	cmp	r3, #17
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x1c6>
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_ADC_ConfigChannel+0x210>)
 80045cc:	e002      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x1cc>
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <HAL_ADC_ConfigChannel+0x214>)
 80045d0:	e000      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x1cc>
 80045d2:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_ADC_ConfigChannel+0x218>)
 80045d4:	4a0d      	ldr	r2, [pc, #52]	; (800460c <HAL_ADC_ConfigChannel+0x204>)
 80045d6:	400b      	ands	r3, r1
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e009      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	2220      	movs	r2, #32
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80045e8:	230f      	movs	r3, #15
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2234      	movs	r2, #52	; 0x34
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	781b      	ldrb	r3, [r3, #0]
}
 80045fe:	0018      	movs	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	b004      	add	sp, #16
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	00001001 	.word	0x00001001
 800460c:	40012708 	.word	0x40012708
 8004610:	20000030 	.word	0x20000030
 8004614:	000f4240 	.word	0x000f4240
 8004618:	ffbfffff 	.word	0xffbfffff
 800461c:	feffffff 	.word	0xfeffffff
 8004620:	ff7fffff 	.word	0xff7fffff

08004624 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2203      	movs	r2, #3
 800463c:	4013      	ands	r3, r2
 800463e:	2b01      	cmp	r3, #1
 8004640:	d112      	bne.n	8004668 <ADC_Enable+0x44>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2201      	movs	r2, #1
 800464a:	4013      	ands	r3, r2
 800464c:	2b01      	cmp	r3, #1
 800464e:	d009      	beq.n	8004664 <ADC_Enable+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	401a      	ands	r2, r3
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	429a      	cmp	r2, r3
 8004662:	d101      	bne.n	8004668 <ADC_Enable+0x44>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <ADC_Enable+0x46>
 8004668:	2300      	movs	r3, #0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d152      	bne.n	8004714 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <ADC_Enable+0xfc>)
 8004676:	4013      	ands	r3, r2
 8004678:	d00d      	beq.n	8004696 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	2210      	movs	r2, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	2201      	movs	r2, #1
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e03f      	b.n	8004716 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046a6:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <ADC_Enable+0x100>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	491f      	ldr	r1, [pc, #124]	; (8004728 <ADC_Enable+0x104>)
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7fb fd29 	bl	8000104 <__udivsi3>
 80046b2:	0003      	movs	r3, r0
 80046b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046b6:	e002      	b.n	80046be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f9      	bne.n	80046b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80046c4:	f7ff fc3a 	bl	8003f3c <HAL_GetTick>
 80046c8:	0003      	movs	r3, r0
 80046ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80046cc:	e01b      	b.n	8004706 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046ce:	f7ff fc35 	bl	8003f3c <HAL_GetTick>
 80046d2:	0002      	movs	r2, r0
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d914      	bls.n	8004706 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d00d      	beq.n	8004706 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	2210      	movs	r2, #16
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	2201      	movs	r2, #1
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e007      	b.n	8004716 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2201      	movs	r2, #1
 800470e:	4013      	ands	r3, r2
 8004710:	2b01      	cmp	r3, #1
 8004712:	d1dc      	bne.n	80046ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	0018      	movs	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	b004      	add	sp, #16
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	80000017 	.word	0x80000017
 8004724:	20000030 	.word	0x20000030
 8004728:	000f4240 	.word	0x000f4240

0800472c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	0002      	movs	r2, r0
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004738:	1dfb      	adds	r3, r7, #7
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b7f      	cmp	r3, #127	; 0x7f
 800473e:	d809      	bhi.n	8004754 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004740:	1dfb      	adds	r3, r7, #7
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	001a      	movs	r2, r3
 8004746:	231f      	movs	r3, #31
 8004748:	401a      	ands	r2, r3
 800474a:	4b04      	ldr	r3, [pc, #16]	; (800475c <__NVIC_EnableIRQ+0x30>)
 800474c:	2101      	movs	r1, #1
 800474e:	4091      	lsls	r1, r2
 8004750:	000a      	movs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]
  }
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b002      	add	sp, #8
 800475a:	bd80      	pop	{r7, pc}
 800475c:	e000e100 	.word	0xe000e100

08004760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	0002      	movs	r2, r0
 8004768:	6039      	str	r1, [r7, #0]
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800476e:	1dfb      	adds	r3, r7, #7
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b7f      	cmp	r3, #127	; 0x7f
 8004774:	d828      	bhi.n	80047c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004776:	4a2f      	ldr	r2, [pc, #188]	; (8004834 <__NVIC_SetPriority+0xd4>)
 8004778:	1dfb      	adds	r3, r7, #7
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	b25b      	sxtb	r3, r3
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	33c0      	adds	r3, #192	; 0xc0
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	589b      	ldr	r3, [r3, r2]
 8004786:	1dfa      	adds	r2, r7, #7
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	0011      	movs	r1, r2
 800478c:	2203      	movs	r2, #3
 800478e:	400a      	ands	r2, r1
 8004790:	00d2      	lsls	r2, r2, #3
 8004792:	21ff      	movs	r1, #255	; 0xff
 8004794:	4091      	lsls	r1, r2
 8004796:	000a      	movs	r2, r1
 8004798:	43d2      	mvns	r2, r2
 800479a:	401a      	ands	r2, r3
 800479c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	019b      	lsls	r3, r3, #6
 80047a2:	22ff      	movs	r2, #255	; 0xff
 80047a4:	401a      	ands	r2, r3
 80047a6:	1dfb      	adds	r3, r7, #7
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	0018      	movs	r0, r3
 80047ac:	2303      	movs	r3, #3
 80047ae:	4003      	ands	r3, r0
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047b4:	481f      	ldr	r0, [pc, #124]	; (8004834 <__NVIC_SetPriority+0xd4>)
 80047b6:	1dfb      	adds	r3, r7, #7
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	430a      	orrs	r2, r1
 80047c0:	33c0      	adds	r3, #192	; 0xc0
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80047c6:	e031      	b.n	800482c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047c8:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <__NVIC_SetPriority+0xd8>)
 80047ca:	1dfb      	adds	r3, r7, #7
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	0019      	movs	r1, r3
 80047d0:	230f      	movs	r3, #15
 80047d2:	400b      	ands	r3, r1
 80047d4:	3b08      	subs	r3, #8
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	3306      	adds	r3, #6
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	3304      	adds	r3, #4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	1dfa      	adds	r2, r7, #7
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	0011      	movs	r1, r2
 80047e8:	2203      	movs	r2, #3
 80047ea:	400a      	ands	r2, r1
 80047ec:	00d2      	lsls	r2, r2, #3
 80047ee:	21ff      	movs	r1, #255	; 0xff
 80047f0:	4091      	lsls	r1, r2
 80047f2:	000a      	movs	r2, r1
 80047f4:	43d2      	mvns	r2, r2
 80047f6:	401a      	ands	r2, r3
 80047f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	22ff      	movs	r2, #255	; 0xff
 8004800:	401a      	ands	r2, r3
 8004802:	1dfb      	adds	r3, r7, #7
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	0018      	movs	r0, r3
 8004808:	2303      	movs	r3, #3
 800480a:	4003      	ands	r3, r0
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004810:	4809      	ldr	r0, [pc, #36]	; (8004838 <__NVIC_SetPriority+0xd8>)
 8004812:	1dfb      	adds	r3, r7, #7
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	001c      	movs	r4, r3
 8004818:	230f      	movs	r3, #15
 800481a:	4023      	ands	r3, r4
 800481c:	3b08      	subs	r3, #8
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	430a      	orrs	r2, r1
 8004822:	3306      	adds	r3, #6
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	18c3      	adds	r3, r0, r3
 8004828:	3304      	adds	r3, #4
 800482a:	601a      	str	r2, [r3, #0]
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b003      	add	sp, #12
 8004832:	bd90      	pop	{r4, r7, pc}
 8004834:	e000e100 	.word	0xe000e100
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	1e5a      	subs	r2, r3, #1
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	045b      	lsls	r3, r3, #17
 800484c:	429a      	cmp	r2, r3
 800484e:	d301      	bcc.n	8004854 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004850:	2301      	movs	r3, #1
 8004852:	e010      	b.n	8004876 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <SysTick_Config+0x44>)
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	3a01      	subs	r2, #1
 800485a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800485c:	2301      	movs	r3, #1
 800485e:	425b      	negs	r3, r3
 8004860:	2103      	movs	r1, #3
 8004862:	0018      	movs	r0, r3
 8004864:	f7ff ff7c 	bl	8004760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <SysTick_Config+0x44>)
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800486e:	4b04      	ldr	r3, [pc, #16]	; (8004880 <SysTick_Config+0x44>)
 8004870:	2207      	movs	r2, #7
 8004872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004874:	2300      	movs	r3, #0
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	e000e010 	.word	0xe000e010

08004884 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	210f      	movs	r1, #15
 8004890:	187b      	adds	r3, r7, r1
 8004892:	1c02      	adds	r2, r0, #0
 8004894:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	187b      	adds	r3, r7, r1
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b25b      	sxtb	r3, r3
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7ff ff5d 	bl	8004760 <__NVIC_SetPriority>
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b004      	add	sp, #16
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	0002      	movs	r2, r0
 80048b6:	1dfb      	adds	r3, r7, #7
 80048b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048ba:	1dfb      	adds	r3, r7, #7
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b25b      	sxtb	r3, r3
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7ff ff33 	bl	800472c <__NVIC_EnableIRQ>
}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b002      	add	sp, #8
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0018      	movs	r0, r3
 80048da:	f7ff ffaf 	bl	800483c <SysTick_Config>
 80048de:	0003      	movs	r3, r0
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2221      	movs	r2, #33	; 0x21
 80048f4:	5c9b      	ldrb	r3, [r3, r2]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d008      	beq.n	800490e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2204      	movs	r2, #4
 8004900:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	2100      	movs	r1, #0
 8004908:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e020      	b.n	8004950 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	210e      	movs	r1, #14
 800491a:	438a      	bics	r2, r1
 800491c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2101      	movs	r1, #1
 800492a:	438a      	bics	r2, r1
 800492c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	2101      	movs	r1, #1
 8004938:	4091      	lsls	r1, r2
 800493a:	000a      	movs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2221      	movs	r2, #33	; 0x21
 8004942:	2101      	movs	r1, #1
 8004944:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004960:	210f      	movs	r1, #15
 8004962:	187b      	adds	r3, r7, r1
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2221      	movs	r2, #33	; 0x21
 800496c:	5c9b      	ldrb	r3, [r3, r2]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d006      	beq.n	8004982 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2204      	movs	r2, #4
 8004978:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800497a:	187b      	adds	r3, r7, r1
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	e028      	b.n	80049d4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	210e      	movs	r1, #14
 800498e:	438a      	bics	r2, r1
 8004990:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	438a      	bics	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	2101      	movs	r1, #1
 80049ac:	4091      	lsls	r1, r2
 80049ae:	000a      	movs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2221      	movs	r2, #33	; 0x21
 80049b6:	2101      	movs	r1, #1
 80049b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	2100      	movs	r1, #0
 80049c0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d004      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	0010      	movs	r0, r2
 80049d2:	4798      	blx	r3
    }
  }
  return status;
 80049d4:	230f      	movs	r3, #15
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	781b      	ldrb	r3, [r3, #0]
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b004      	add	sp, #16
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f2:	e155      	b.n	8004ca0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2101      	movs	r1, #1
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4091      	lsls	r1, r2
 80049fe:	000a      	movs	r2, r1
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d100      	bne.n	8004a0c <HAL_GPIO_Init+0x28>
 8004a0a:	e146      	b.n	8004c9a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2203      	movs	r2, #3
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d005      	beq.n	8004a24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d130      	bne.n	8004a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	2203      	movs	r2, #3
 8004a30:	409a      	lsls	r2, r3
 8004a32:	0013      	movs	r3, r2
 8004a34:	43da      	mvns	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	409a      	lsls	r2, r3
 8004a46:	0013      	movs	r3, r2
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	0013      	movs	r3, r2
 8004a62:	43da      	mvns	r2, r3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4013      	ands	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	2201      	movs	r2, #1
 8004a72:	401a      	ands	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	409a      	lsls	r2, r3
 8004a78:	0013      	movs	r3, r2
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d017      	beq.n	8004ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	0013      	movs	r3, r2
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	0013      	movs	r3, r2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d123      	bne.n	8004b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	08da      	lsrs	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3208      	adds	r2, #8
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	58d3      	ldr	r3, [r2, r3]
 8004ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2207      	movs	r2, #7
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	220f      	movs	r2, #15
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	0013      	movs	r3, r2
 8004aea:	43da      	mvns	r2, r3
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4013      	ands	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2107      	movs	r1, #7
 8004afa:	400b      	ands	r3, r1
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	409a      	lsls	r2, r3
 8004b00:	0013      	movs	r3, r2
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	08da      	lsrs	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3208      	adds	r2, #8
 8004b10:	0092      	lsls	r2, r2, #2
 8004b12:	6939      	ldr	r1, [r7, #16]
 8004b14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	2203      	movs	r2, #3
 8004b22:	409a      	lsls	r2, r3
 8004b24:	0013      	movs	r3, r2
 8004b26:	43da      	mvns	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2203      	movs	r2, #3
 8004b34:	401a      	ands	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	0013      	movs	r3, r2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	23c0      	movs	r3, #192	; 0xc0
 8004b50:	029b      	lsls	r3, r3, #10
 8004b52:	4013      	ands	r3, r2
 8004b54:	d100      	bne.n	8004b58 <HAL_GPIO_Init+0x174>
 8004b56:	e0a0      	b.n	8004c9a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b58:	4b57      	ldr	r3, [pc, #348]	; (8004cb8 <HAL_GPIO_Init+0x2d4>)
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	4b56      	ldr	r3, [pc, #344]	; (8004cb8 <HAL_GPIO_Init+0x2d4>)
 8004b5e:	2101      	movs	r1, #1
 8004b60:	430a      	orrs	r2, r1
 8004b62:	619a      	str	r2, [r3, #24]
 8004b64:	4b54      	ldr	r3, [pc, #336]	; (8004cb8 <HAL_GPIO_Init+0x2d4>)
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b70:	4a52      	ldr	r2, [pc, #328]	; (8004cbc <HAL_GPIO_Init+0x2d8>)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	3302      	adds	r3, #2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	589b      	ldr	r3, [r3, r2]
 8004b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2203      	movs	r2, #3
 8004b82:	4013      	ands	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	220f      	movs	r2, #15
 8004b88:	409a      	lsls	r2, r3
 8004b8a:	0013      	movs	r3, r2
 8004b8c:	43da      	mvns	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	2390      	movs	r3, #144	; 0x90
 8004b98:	05db      	lsls	r3, r3, #23
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d019      	beq.n	8004bd2 <HAL_GPIO_Init+0x1ee>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a47      	ldr	r2, [pc, #284]	; (8004cc0 <HAL_GPIO_Init+0x2dc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_GPIO_Init+0x1ea>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a46      	ldr	r2, [pc, #280]	; (8004cc4 <HAL_GPIO_Init+0x2e0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00d      	beq.n	8004bca <HAL_GPIO_Init+0x1e6>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a45      	ldr	r2, [pc, #276]	; (8004cc8 <HAL_GPIO_Init+0x2e4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <HAL_GPIO_Init+0x1e2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a44      	ldr	r2, [pc, #272]	; (8004ccc <HAL_GPIO_Init+0x2e8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <HAL_GPIO_Init+0x1de>
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	e008      	b.n	8004bd4 <HAL_GPIO_Init+0x1f0>
 8004bc2:	2305      	movs	r3, #5
 8004bc4:	e006      	b.n	8004bd4 <HAL_GPIO_Init+0x1f0>
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e004      	b.n	8004bd4 <HAL_GPIO_Init+0x1f0>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e002      	b.n	8004bd4 <HAL_GPIO_Init+0x1f0>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <HAL_GPIO_Init+0x1f0>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	2103      	movs	r1, #3
 8004bd8:	400a      	ands	r2, r1
 8004bda:	0092      	lsls	r2, r2, #2
 8004bdc:	4093      	lsls	r3, r2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004be4:	4935      	ldr	r1, [pc, #212]	; (8004cbc <HAL_GPIO_Init+0x2d8>)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	3302      	adds	r3, #2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bf2:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <HAL_GPIO_Init+0x2ec>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	035b      	lsls	r3, r3, #13
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c16:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_GPIO_Init+0x2ec>)
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004c1c:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <HAL_GPIO_Init+0x2ec>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	039b      	lsls	r3, r3, #14
 8004c34:	4013      	ands	r3, r2
 8004c36:	d003      	beq.n	8004c40 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004c40:	4b23      	ldr	r3, [pc, #140]	; (8004cd0 <HAL_GPIO_Init+0x2ec>)
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004c46:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_GPIO_Init+0x2ec>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c6a:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <HAL_GPIO_Init+0x2ec>)
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_GPIO_Init+0x2ec>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	025b      	lsls	r3, r3, #9
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <HAL_GPIO_Init+0x2ec>)
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	40da      	lsrs	r2, r3
 8004ca8:	1e13      	subs	r3, r2, #0
 8004caa:	d000      	beq.n	8004cae <HAL_GPIO_Init+0x2ca>
 8004cac:	e6a2      	b.n	80049f4 <HAL_GPIO_Init+0x10>
  } 
}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b006      	add	sp, #24
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	48000400 	.word	0x48000400
 8004cc4:	48000800 	.word	0x48000800
 8004cc8:	48000c00 	.word	0x48000c00
 8004ccc:	48001000 	.word	0x48001000
 8004cd0:	40010400 	.word	0x40010400

08004cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	000a      	movs	r2, r1
 8004cde:	1cbb      	adds	r3, r7, #2
 8004ce0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	1cba      	adds	r2, r7, #2
 8004ce8:	8812      	ldrh	r2, [r2, #0]
 8004cea:	4013      	ands	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004cee:	230f      	movs	r3, #15
 8004cf0:	18fb      	adds	r3, r7, r3
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	e003      	b.n	8004d00 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004d00:	230f      	movs	r3, #15
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	781b      	ldrb	r3, [r3, #0]
  }
 8004d06:	0018      	movs	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b004      	add	sp, #16
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	0008      	movs	r0, r1
 8004d18:	0011      	movs	r1, r2
 8004d1a:	1cbb      	adds	r3, r7, #2
 8004d1c:	1c02      	adds	r2, r0, #0
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	1c7b      	adds	r3, r7, #1
 8004d22:	1c0a      	adds	r2, r1, #0
 8004d24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d26:	1c7b      	adds	r3, r7, #1
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d2e:	1cbb      	adds	r3, r7, #2
 8004d30:	881a      	ldrh	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d36:	e003      	b.n	8004d40 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d38:	1cbb      	adds	r3, r7, #2
 8004d3a:	881a      	ldrh	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b002      	add	sp, #8
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f000 fb76 	bl	8005448 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	d100      	bne.n	8004d68 <HAL_RCC_OscConfig+0x20>
 8004d66:	e08e      	b.n	8004e86 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d68:	4bc5      	ldr	r3, [pc, #788]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	220c      	movs	r2, #12
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d00e      	beq.n	8004d92 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d74:	4bc2      	ldr	r3, [pc, #776]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	220c      	movs	r2, #12
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d117      	bne.n	8004db0 <HAL_RCC_OscConfig+0x68>
 8004d80:	4bbf      	ldr	r3, [pc, #764]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	23c0      	movs	r3, #192	; 0xc0
 8004d86:	025b      	lsls	r3, r3, #9
 8004d88:	401a      	ands	r2, r3
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	025b      	lsls	r3, r3, #9
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d10e      	bne.n	8004db0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d92:	4bbb      	ldr	r3, [pc, #748]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	029b      	lsls	r3, r3, #10
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d100      	bne.n	8004da0 <HAL_RCC_OscConfig+0x58>
 8004d9e:	e071      	b.n	8004e84 <HAL_RCC_OscConfig+0x13c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d000      	beq.n	8004daa <HAL_RCC_OscConfig+0x62>
 8004da8:	e06c      	b.n	8004e84 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f000 fb4c 	bl	8005448 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x80>
 8004db8:	4bb1      	ldr	r3, [pc, #708]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4bb0      	ldr	r3, [pc, #704]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	0249      	lsls	r1, r1, #9
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e02f      	b.n	8004e28 <HAL_RCC_OscConfig+0xe0>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10c      	bne.n	8004dea <HAL_RCC_OscConfig+0xa2>
 8004dd0:	4bab      	ldr	r3, [pc, #684]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4baa      	ldr	r3, [pc, #680]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004dd6:	49ab      	ldr	r1, [pc, #684]	; (8005084 <HAL_RCC_OscConfig+0x33c>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	4ba8      	ldr	r3, [pc, #672]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4ba7      	ldr	r3, [pc, #668]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004de2:	49a9      	ldr	r1, [pc, #676]	; (8005088 <HAL_RCC_OscConfig+0x340>)
 8004de4:	400a      	ands	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e01e      	b.n	8004e28 <HAL_RCC_OscConfig+0xe0>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10e      	bne.n	8004e10 <HAL_RCC_OscConfig+0xc8>
 8004df2:	4ba3      	ldr	r3, [pc, #652]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4ba2      	ldr	r3, [pc, #648]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	02c9      	lsls	r1, r1, #11
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	4b9f      	ldr	r3, [pc, #636]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4b9e      	ldr	r3, [pc, #632]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e06:	2180      	movs	r1, #128	; 0x80
 8004e08:	0249      	lsls	r1, r1, #9
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0xe0>
 8004e10:	4b9b      	ldr	r3, [pc, #620]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b9a      	ldr	r3, [pc, #616]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e16:	499b      	ldr	r1, [pc, #620]	; (8005084 <HAL_RCC_OscConfig+0x33c>)
 8004e18:	400a      	ands	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	4b98      	ldr	r3, [pc, #608]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b97      	ldr	r3, [pc, #604]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e22:	4999      	ldr	r1, [pc, #612]	; (8005088 <HAL_RCC_OscConfig+0x340>)
 8004e24:	400a      	ands	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d014      	beq.n	8004e5a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7ff f884 	bl	8003f3c <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e3a:	f7ff f87f 	bl	8003f3c <HAL_GetTick>
 8004e3e:	0002      	movs	r2, r0
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b64      	cmp	r3, #100	; 0x64
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e2fd      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4c:	4b8c      	ldr	r3, [pc, #560]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	029b      	lsls	r3, r3, #10
 8004e54:	4013      	ands	r3, r2
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0xf2>
 8004e58:	e015      	b.n	8004e86 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7ff f86f 	bl	8003f3c <HAL_GetTick>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e64:	f7ff f86a 	bl	8003f3c <HAL_GetTick>
 8004e68:	0002      	movs	r2, r0
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	; 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e2e8      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e76:	4b82      	ldr	r3, [pc, #520]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x11c>
 8004e82:	e000      	b.n	8004e86 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d100      	bne.n	8004e92 <HAL_RCC_OscConfig+0x14a>
 8004e90:	e06c      	b.n	8004f6c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e92:	4b7b      	ldr	r3, [pc, #492]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	220c      	movs	r2, #12
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d00e      	beq.n	8004eba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e9c:	4b78      	ldr	r3, [pc, #480]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	220c      	movs	r2, #12
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d11f      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x1a0>
 8004ea8:	4b75      	ldr	r3, [pc, #468]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	23c0      	movs	r3, #192	; 0xc0
 8004eae:	025b      	lsls	r3, r3, #9
 8004eb0:	401a      	ands	r2, r3
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d116      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eba:	4b71      	ldr	r3, [pc, #452]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x188>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e2bb      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed0:	4b6b      	ldr	r3, [pc, #428]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	22f8      	movs	r2, #248	; 0xf8
 8004ed6:	4393      	bics	r3, r2
 8004ed8:	0019      	movs	r1, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00da      	lsls	r2, r3, #3
 8004ee0:	4b67      	ldr	r3, [pc, #412]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	e041      	b.n	8004f6c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d024      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef0:	4b63      	ldr	r3, [pc, #396]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b62      	ldr	r3, [pc, #392]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7ff f81e 	bl	8003f3c <HAL_GetTick>
 8004f00:	0003      	movs	r3, r0
 8004f02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f06:	f7ff f819 	bl	8003f3c <HAL_GetTick>
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e297      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f18:	4b59      	ldr	r3, [pc, #356]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d0f1      	beq.n	8004f06 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f22:	4b57      	ldr	r3, [pc, #348]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	22f8      	movs	r2, #248	; 0xf8
 8004f28:	4393      	bics	r3, r2
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	00da      	lsls	r2, r3, #3
 8004f32:	4b53      	ldr	r3, [pc, #332]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e018      	b.n	8004f6c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b51      	ldr	r3, [pc, #324]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b50      	ldr	r3, [pc, #320]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004f40:	2101      	movs	r1, #1
 8004f42:	438a      	bics	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f46:	f7fe fff9 	bl	8003f3c <HAL_GetTick>
 8004f4a:	0003      	movs	r3, r0
 8004f4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fe fff4 	bl	8003f3c <HAL_GetTick>
 8004f54:	0002      	movs	r2, r0
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e272      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2202      	movs	r2, #2
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d1f1      	bne.n	8004f50 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	4013      	ands	r3, r2
 8004f74:	d036      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d019      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7e:	4b40      	ldr	r3, [pc, #256]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f82:	4b3f      	ldr	r3, [pc, #252]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004f84:	2101      	movs	r1, #1
 8004f86:	430a      	orrs	r2, r1
 8004f88:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8a:	f7fe ffd7 	bl	8003f3c <HAL_GetTick>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f94:	f7fe ffd2 	bl	8003f3c <HAL_GetTick>
 8004f98:	0002      	movs	r2, r0
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e250      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa6:	4b36      	ldr	r3, [pc, #216]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2202      	movs	r2, #2
 8004fac:	4013      	ands	r3, r2
 8004fae:	d0f1      	beq.n	8004f94 <HAL_RCC_OscConfig+0x24c>
 8004fb0:	e018      	b.n	8004fe4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb2:	4b33      	ldr	r3, [pc, #204]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb6:	4b32      	ldr	r3, [pc, #200]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004fb8:	2101      	movs	r1, #1
 8004fba:	438a      	bics	r2, r1
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbe:	f7fe ffbd 	bl	8003f3c <HAL_GetTick>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc8:	f7fe ffb8 	bl	8003f3c <HAL_GetTick>
 8004fcc:	0002      	movs	r2, r0
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e236      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fda:	4b29      	ldr	r3, [pc, #164]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2202      	movs	r2, #2
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d1f1      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2204      	movs	r2, #4
 8004fea:	4013      	ands	r3, r2
 8004fec:	d100      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2a8>
 8004fee:	e0b5      	b.n	800515c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff0:	201f      	movs	r0, #31
 8004ff2:	183b      	adds	r3, r7, r0
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff8:	4b21      	ldr	r3, [pc, #132]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	055b      	lsls	r3, r3, #21
 8005000:	4013      	ands	r3, r2
 8005002:	d110      	bne.n	8005026 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 800500a:	2180      	movs	r1, #128	; 0x80
 800500c:	0549      	lsls	r1, r1, #21
 800500e:	430a      	orrs	r2, r1
 8005010:	61da      	str	r2, [r3, #28]
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8005014:	69da      	ldr	r2, [r3, #28]
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	055b      	lsls	r3, r3, #21
 800501a:	4013      	ands	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005020:	183b      	adds	r3, r7, r0
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005026:	4b19      	ldr	r3, [pc, #100]	; (800508c <HAL_RCC_OscConfig+0x344>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4013      	ands	r3, r2
 8005030:	d11a      	bne.n	8005068 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005032:	4b16      	ldr	r3, [pc, #88]	; (800508c <HAL_RCC_OscConfig+0x344>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <HAL_RCC_OscConfig+0x344>)
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	0049      	lsls	r1, r1, #1
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005040:	f7fe ff7c 	bl	8003f3c <HAL_GetTick>
 8005044:	0003      	movs	r3, r0
 8005046:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7fe ff77 	bl	8003f3c <HAL_GetTick>
 800504e:	0002      	movs	r2, r0
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b64      	cmp	r3, #100	; 0x64
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e1f5      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_OscConfig+0x344>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4013      	ands	r3, r2
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10f      	bne.n	8005090 <HAL_RCC_OscConfig+0x348>
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	4b02      	ldr	r3, [pc, #8]	; (8005080 <HAL_RCC_OscConfig+0x338>)
 8005076:	2101      	movs	r1, #1
 8005078:	430a      	orrs	r2, r1
 800507a:	621a      	str	r2, [r3, #32]
 800507c:	e036      	b.n	80050ec <HAL_RCC_OscConfig+0x3a4>
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	40021000 	.word	0x40021000
 8005084:	fffeffff 	.word	0xfffeffff
 8005088:	fffbffff 	.word	0xfffbffff
 800508c:	40007000 	.word	0x40007000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10c      	bne.n	80050b2 <HAL_RCC_OscConfig+0x36a>
 8005098:	4bca      	ldr	r3, [pc, #808]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	4bc9      	ldr	r3, [pc, #804]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 800509e:	2101      	movs	r1, #1
 80050a0:	438a      	bics	r2, r1
 80050a2:	621a      	str	r2, [r3, #32]
 80050a4:	4bc7      	ldr	r3, [pc, #796]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050a6:	6a1a      	ldr	r2, [r3, #32]
 80050a8:	4bc6      	ldr	r3, [pc, #792]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050aa:	2104      	movs	r1, #4
 80050ac:	438a      	bics	r2, r1
 80050ae:	621a      	str	r2, [r3, #32]
 80050b0:	e01c      	b.n	80050ec <HAL_RCC_OscConfig+0x3a4>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x38c>
 80050ba:	4bc2      	ldr	r3, [pc, #776]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	4bc1      	ldr	r3, [pc, #772]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050c0:	2104      	movs	r1, #4
 80050c2:	430a      	orrs	r2, r1
 80050c4:	621a      	str	r2, [r3, #32]
 80050c6:	4bbf      	ldr	r3, [pc, #764]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050c8:	6a1a      	ldr	r2, [r3, #32]
 80050ca:	4bbe      	ldr	r3, [pc, #760]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050cc:	2101      	movs	r1, #1
 80050ce:	430a      	orrs	r2, r1
 80050d0:	621a      	str	r2, [r3, #32]
 80050d2:	e00b      	b.n	80050ec <HAL_RCC_OscConfig+0x3a4>
 80050d4:	4bbb      	ldr	r3, [pc, #748]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050d6:	6a1a      	ldr	r2, [r3, #32]
 80050d8:	4bba      	ldr	r3, [pc, #744]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050da:	2101      	movs	r1, #1
 80050dc:	438a      	bics	r2, r1
 80050de:	621a      	str	r2, [r3, #32]
 80050e0:	4bb8      	ldr	r3, [pc, #736]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050e2:	6a1a      	ldr	r2, [r3, #32]
 80050e4:	4bb7      	ldr	r3, [pc, #732]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80050e6:	2104      	movs	r1, #4
 80050e8:	438a      	bics	r2, r1
 80050ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d014      	beq.n	800511e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f4:	f7fe ff22 	bl	8003f3c <HAL_GetTick>
 80050f8:	0003      	movs	r3, r0
 80050fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	e009      	b.n	8005112 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fe ff1d 	bl	8003f3c <HAL_GetTick>
 8005102:	0002      	movs	r2, r0
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	4aaf      	ldr	r2, [pc, #700]	; (80053c8 <HAL_RCC_OscConfig+0x680>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e19a      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005112:	4bac      	ldr	r3, [pc, #688]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	2202      	movs	r2, #2
 8005118:	4013      	ands	r3, r2
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x3b6>
 800511c:	e013      	b.n	8005146 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800511e:	f7fe ff0d 	bl	8003f3c <HAL_GetTick>
 8005122:	0003      	movs	r3, r0
 8005124:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005126:	e009      	b.n	800513c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fe ff08 	bl	8003f3c <HAL_GetTick>
 800512c:	0002      	movs	r2, r0
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	4aa5      	ldr	r2, [pc, #660]	; (80053c8 <HAL_RCC_OscConfig+0x680>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e185      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800513c:	4ba1      	ldr	r3, [pc, #644]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	2202      	movs	r2, #2
 8005142:	4013      	ands	r3, r2
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005146:	231f      	movs	r3, #31
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005150:	4b9c      	ldr	r3, [pc, #624]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	4b9b      	ldr	r3, [pc, #620]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005156:	499d      	ldr	r1, [pc, #628]	; (80053cc <HAL_RCC_OscConfig+0x684>)
 8005158:	400a      	ands	r2, r1
 800515a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2210      	movs	r2, #16
 8005162:	4013      	ands	r3, r2
 8005164:	d063      	beq.n	800522e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d12a      	bne.n	80051c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800516e:	4b95      	ldr	r3, [pc, #596]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005172:	4b94      	ldr	r3, [pc, #592]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005174:	2104      	movs	r1, #4
 8005176:	430a      	orrs	r2, r1
 8005178:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800517a:	4b92      	ldr	r3, [pc, #584]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 800517c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800517e:	4b91      	ldr	r3, [pc, #580]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005180:	2101      	movs	r1, #1
 8005182:	430a      	orrs	r2, r1
 8005184:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005186:	f7fe fed9 	bl	8003f3c <HAL_GetTick>
 800518a:	0003      	movs	r3, r0
 800518c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005190:	f7fe fed4 	bl	8003f3c <HAL_GetTick>
 8005194:	0002      	movs	r2, r0
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e152      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80051a2:	4b88      	ldr	r3, [pc, #544]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	2202      	movs	r2, #2
 80051a8:	4013      	ands	r3, r2
 80051aa:	d0f1      	beq.n	8005190 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80051ac:	4b85      	ldr	r3, [pc, #532]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b0:	22f8      	movs	r2, #248	; 0xf8
 80051b2:	4393      	bics	r3, r2
 80051b4:	0019      	movs	r1, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	00da      	lsls	r2, r3, #3
 80051bc:	4b81      	ldr	r3, [pc, #516]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051be:	430a      	orrs	r2, r1
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34
 80051c2:	e034      	b.n	800522e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	3305      	adds	r3, #5
 80051ca:	d111      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80051cc:	4b7d      	ldr	r3, [pc, #500]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d0:	4b7c      	ldr	r3, [pc, #496]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051d2:	2104      	movs	r1, #4
 80051d4:	438a      	bics	r2, r1
 80051d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80051d8:	4b7a      	ldr	r3, [pc, #488]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	22f8      	movs	r2, #248	; 0xf8
 80051de:	4393      	bics	r3, r2
 80051e0:	0019      	movs	r1, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	00da      	lsls	r2, r3, #3
 80051e8:	4b76      	ldr	r3, [pc, #472]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051ea:	430a      	orrs	r2, r1
 80051ec:	635a      	str	r2, [r3, #52]	; 0x34
 80051ee:	e01e      	b.n	800522e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80051f0:	4b74      	ldr	r3, [pc, #464]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f4:	4b73      	ldr	r3, [pc, #460]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051f6:	2104      	movs	r1, #4
 80051f8:	430a      	orrs	r2, r1
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80051fc:	4b71      	ldr	r3, [pc, #452]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80051fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005200:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005202:	2101      	movs	r1, #1
 8005204:	438a      	bics	r2, r1
 8005206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005208:	f7fe fe98 	bl	8003f3c <HAL_GetTick>
 800520c:	0003      	movs	r3, r0
 800520e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005212:	f7fe fe93 	bl	8003f3c <HAL_GetTick>
 8005216:	0002      	movs	r2, r0
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e111      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005224:	4b67      	ldr	r3, [pc, #412]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	2202      	movs	r2, #2
 800522a:	4013      	ands	r3, r2
 800522c:	d1f1      	bne.n	8005212 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2220      	movs	r2, #32
 8005234:	4013      	ands	r3, r2
 8005236:	d05c      	beq.n	80052f2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005238:	4b62      	ldr	r3, [pc, #392]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	220c      	movs	r2, #12
 800523e:	4013      	ands	r3, r2
 8005240:	2b0c      	cmp	r3, #12
 8005242:	d00e      	beq.n	8005262 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005244:	4b5f      	ldr	r3, [pc, #380]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	220c      	movs	r2, #12
 800524a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800524c:	2b08      	cmp	r3, #8
 800524e:	d114      	bne.n	800527a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005250:	4b5c      	ldr	r3, [pc, #368]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	23c0      	movs	r3, #192	; 0xc0
 8005256:	025b      	lsls	r3, r3, #9
 8005258:	401a      	ands	r2, r3
 800525a:	23c0      	movs	r3, #192	; 0xc0
 800525c:	025b      	lsls	r3, r3, #9
 800525e:	429a      	cmp	r2, r3
 8005260:	d10b      	bne.n	800527a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005262:	4b58      	ldr	r3, [pc, #352]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	4013      	ands	r3, r2
 800526c:	d040      	beq.n	80052f0 <HAL_RCC_OscConfig+0x5a8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d03c      	beq.n	80052f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e0e6      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01b      	beq.n	80052ba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005282:	4b50      	ldr	r3, [pc, #320]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005286:	4b4f      	ldr	r3, [pc, #316]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005288:	2180      	movs	r1, #128	; 0x80
 800528a:	0249      	lsls	r1, r1, #9
 800528c:	430a      	orrs	r2, r1
 800528e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fe fe54 	bl	8003f3c <HAL_GetTick>
 8005294:	0003      	movs	r3, r0
 8005296:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800529a:	f7fe fe4f 	bl	8003f3c <HAL_GetTick>
 800529e:	0002      	movs	r2, r0
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e0cd      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80052ac:	4b45      	ldr	r3, [pc, #276]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80052ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b0:	2380      	movs	r3, #128	; 0x80
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	4013      	ands	r3, r2
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x552>
 80052b8:	e01b      	b.n	80052f2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80052ba:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80052bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80052c0:	4943      	ldr	r1, [pc, #268]	; (80053d0 <HAL_RCC_OscConfig+0x688>)
 80052c2:	400a      	ands	r2, r1
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c6:	f7fe fe39 	bl	8003f3c <HAL_GetTick>
 80052ca:	0003      	movs	r3, r0
 80052cc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052d0:	f7fe fe34 	bl	8003f3c <HAL_GetTick>
 80052d4:	0002      	movs	r2, r0
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0b2      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80052e2:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80052e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	4013      	ands	r3, r2
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x588>
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80052f0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d100      	bne.n	80052fc <HAL_RCC_OscConfig+0x5b4>
 80052fa:	e0a4      	b.n	8005446 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052fc:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	220c      	movs	r2, #12
 8005302:	4013      	ands	r3, r2
 8005304:	2b08      	cmp	r3, #8
 8005306:	d100      	bne.n	800530a <HAL_RCC_OscConfig+0x5c2>
 8005308:	e078      	b.n	80053fc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	2b02      	cmp	r3, #2
 8005310:	d14c      	bne.n	80053ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005312:	4b2c      	ldr	r3, [pc, #176]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b2b      	ldr	r3, [pc, #172]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005318:	492e      	ldr	r1, [pc, #184]	; (80053d4 <HAL_RCC_OscConfig+0x68c>)
 800531a:	400a      	ands	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531e:	f7fe fe0d 	bl	8003f3c <HAL_GetTick>
 8005322:	0003      	movs	r3, r0
 8005324:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005328:	f7fe fe08 	bl	8003f3c <HAL_GetTick>
 800532c:	0002      	movs	r2, r0
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e086      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800533a:	4b22      	ldr	r3, [pc, #136]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	049b      	lsls	r3, r3, #18
 8005342:	4013      	ands	r3, r2
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005346:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	220f      	movs	r2, #15
 800534c:	4393      	bics	r3, r2
 800534e:	0019      	movs	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005354:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005356:	430a      	orrs	r2, r1
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c
 800535a:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <HAL_RCC_OscConfig+0x690>)
 8005360:	4013      	ands	r3, r2
 8005362:	0019      	movs	r1, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	431a      	orrs	r2, r3
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005374:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	0449      	lsls	r1, r1, #17
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005382:	f7fe fddb 	bl	8003f3c <HAL_GetTick>
 8005386:	0003      	movs	r3, r0
 8005388:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538c:	f7fe fdd6 	bl	8003f3c <HAL_GetTick>
 8005390:	0002      	movs	r2, r0
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e054      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	049b      	lsls	r3, r3, #18
 80053a6:	4013      	ands	r3, r2
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0x644>
 80053aa:	e04c      	b.n	8005446 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <HAL_RCC_OscConfig+0x67c>)
 80053b2:	4908      	ldr	r1, [pc, #32]	; (80053d4 <HAL_RCC_OscConfig+0x68c>)
 80053b4:	400a      	ands	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b8:	f7fe fdc0 	bl	8003f3c <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c0:	e015      	b.n	80053ee <HAL_RCC_OscConfig+0x6a6>
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	40021000 	.word	0x40021000
 80053c8:	00001388 	.word	0x00001388
 80053cc:	efffffff 	.word	0xefffffff
 80053d0:	fffeffff 	.word	0xfffeffff
 80053d4:	feffffff 	.word	0xfeffffff
 80053d8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fe fdae 	bl	8003f3c <HAL_GetTick>
 80053e0:	0002      	movs	r2, r0
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e02c      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ee:	4b18      	ldr	r3, [pc, #96]	; (8005450 <HAL_RCC_OscConfig+0x708>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	049b      	lsls	r3, r3, #18
 80053f6:	4013      	ands	r3, r2
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x694>
 80053fa:	e024      	b.n	8005446 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e01f      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005408:	4b11      	ldr	r3, [pc, #68]	; (8005450 <HAL_RCC_OscConfig+0x708>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <HAL_RCC_OscConfig+0x708>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	23c0      	movs	r3, #192	; 0xc0
 8005418:	025b      	lsls	r3, r3, #9
 800541a:	401a      	ands	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	429a      	cmp	r2, r3
 8005422:	d10e      	bne.n	8005442 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	220f      	movs	r2, #15
 8005428:	401a      	ands	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d107      	bne.n	8005442 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	23f0      	movs	r3, #240	; 0xf0
 8005436:	039b      	lsls	r3, r3, #14
 8005438:	401a      	ands	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d001      	beq.n	8005446 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b008      	add	sp, #32
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021000 	.word	0x40021000

08005454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0bf      	b.n	80055e8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005468:	4b61      	ldr	r3, [pc, #388]	; (80055f0 <HAL_RCC_ClockConfig+0x19c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2201      	movs	r2, #1
 800546e:	4013      	ands	r3, r2
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d911      	bls.n	800549a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b5e      	ldr	r3, [pc, #376]	; (80055f0 <HAL_RCC_ClockConfig+0x19c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2201      	movs	r2, #1
 800547c:	4393      	bics	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	4b5b      	ldr	r3, [pc, #364]	; (80055f0 <HAL_RCC_ClockConfig+0x19c>)
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005488:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_RCC_ClockConfig+0x19c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2201      	movs	r2, #1
 800548e:	4013      	ands	r3, r2
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d001      	beq.n	800549a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e0a6      	b.n	80055e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2202      	movs	r2, #2
 80054a0:	4013      	ands	r3, r2
 80054a2:	d015      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2204      	movs	r2, #4
 80054aa:	4013      	ands	r3, r2
 80054ac:	d006      	beq.n	80054bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054ae:	4b51      	ldr	r3, [pc, #324]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4b50      	ldr	r3, [pc, #320]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80054b4:	21e0      	movs	r1, #224	; 0xe0
 80054b6:	00c9      	lsls	r1, r1, #3
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054bc:	4b4d      	ldr	r3, [pc, #308]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	22f0      	movs	r2, #240	; 0xf0
 80054c2:	4393      	bics	r3, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	4013      	ands	r3, r2
 80054d8:	d04c      	beq.n	8005574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d107      	bne.n	80054f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	4b44      	ldr	r3, [pc, #272]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	4013      	ands	r3, r2
 80054ec:	d120      	bne.n	8005530 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e07a      	b.n	80055e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d107      	bne.n	800550a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fa:	4b3e      	ldr	r3, [pc, #248]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	049b      	lsls	r3, r3, #18
 8005502:	4013      	ands	r3, r2
 8005504:	d114      	bne.n	8005530 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e06e      	b.n	80055e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b03      	cmp	r3, #3
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005512:	4b38      	ldr	r3, [pc, #224]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 8005514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	029b      	lsls	r3, r3, #10
 800551a:	4013      	ands	r3, r2
 800551c:	d108      	bne.n	8005530 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e062      	b.n	80055e8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005522:	4b34      	ldr	r3, [pc, #208]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2202      	movs	r2, #2
 8005528:	4013      	ands	r3, r2
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e05b      	b.n	80055e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005530:	4b30      	ldr	r3, [pc, #192]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2203      	movs	r2, #3
 8005536:	4393      	bics	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	4b2d      	ldr	r3, [pc, #180]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005544:	f7fe fcfa 	bl	8003f3c <HAL_GetTick>
 8005548:	0003      	movs	r3, r0
 800554a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554c:	e009      	b.n	8005562 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554e:	f7fe fcf5 	bl	8003f3c <HAL_GetTick>
 8005552:	0002      	movs	r2, r0
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	4a27      	ldr	r2, [pc, #156]	; (80055f8 <HAL_RCC_ClockConfig+0x1a4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e042      	b.n	80055e8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005562:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	220c      	movs	r2, #12
 8005568:	401a      	ands	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	429a      	cmp	r2, r3
 8005572:	d1ec      	bne.n	800554e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005574:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <HAL_RCC_ClockConfig+0x19c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	4013      	ands	r3, r2
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d211      	bcs.n	80055a6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005582:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <HAL_RCC_ClockConfig+0x19c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2201      	movs	r2, #1
 8005588:	4393      	bics	r3, r2
 800558a:	0019      	movs	r1, r3
 800558c:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_RCC_ClockConfig+0x19c>)
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005594:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <HAL_RCC_ClockConfig+0x19c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2201      	movs	r2, #1
 800559a:	4013      	ands	r3, r2
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d001      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e020      	b.n	80055e8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2204      	movs	r2, #4
 80055ac:	4013      	ands	r3, r2
 80055ae:	d009      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80055b0:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4a11      	ldr	r2, [pc, #68]	; (80055fc <HAL_RCC_ClockConfig+0x1a8>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	0019      	movs	r1, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055c4:	f000 f820 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80055c8:	0001      	movs	r1, r0
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <HAL_RCC_ClockConfig+0x1a0>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	091b      	lsrs	r3, r3, #4
 80055d0:	220f      	movs	r2, #15
 80055d2:	4013      	ands	r3, r2
 80055d4:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <HAL_RCC_ClockConfig+0x1ac>)
 80055d6:	5cd3      	ldrb	r3, [r2, r3]
 80055d8:	000a      	movs	r2, r1
 80055da:	40da      	lsrs	r2, r3
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_RCC_ClockConfig+0x1b0>)
 80055de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80055e0:	2003      	movs	r0, #3
 80055e2:	f7fe fc65 	bl	8003eb0 <HAL_InitTick>
  
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b004      	add	sp, #16
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40022000 	.word	0x40022000
 80055f4:	40021000 	.word	0x40021000
 80055f8:	00001388 	.word	0x00001388
 80055fc:	fffff8ff 	.word	0xfffff8ff
 8005600:	08008728 	.word	0x08008728
 8005604:	20000030 	.word	0x20000030

08005608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005622:	4b2d      	ldr	r3, [pc, #180]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	220c      	movs	r2, #12
 800562c:	4013      	ands	r3, r2
 800562e:	2b0c      	cmp	r3, #12
 8005630:	d046      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0xb8>
 8005632:	d848      	bhi.n	80056c6 <HAL_RCC_GetSysClockFreq+0xbe>
 8005634:	2b04      	cmp	r3, #4
 8005636:	d002      	beq.n	800563e <HAL_RCC_GetSysClockFreq+0x36>
 8005638:	2b08      	cmp	r3, #8
 800563a:	d003      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0x3c>
 800563c:	e043      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800563e:	4b27      	ldr	r3, [pc, #156]	; (80056dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005640:	613b      	str	r3, [r7, #16]
      break;
 8005642:	e043      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	0c9b      	lsrs	r3, r3, #18
 8005648:	220f      	movs	r2, #15
 800564a:	4013      	ands	r3, r2
 800564c:	4a24      	ldr	r2, [pc, #144]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005652:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	220f      	movs	r2, #15
 8005658:	4013      	ands	r3, r2
 800565a:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800565c:	5cd3      	ldrb	r3, [r2, r3]
 800565e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	23c0      	movs	r3, #192	; 0xc0
 8005664:	025b      	lsls	r3, r3, #9
 8005666:	401a      	ands	r2, r3
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	025b      	lsls	r3, r3, #9
 800566c:	429a      	cmp	r2, r3
 800566e:	d109      	bne.n	8005684 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	481a      	ldr	r0, [pc, #104]	; (80056dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005674:	f7fa fd46 	bl	8000104 <__udivsi3>
 8005678:	0003      	movs	r3, r0
 800567a:	001a      	movs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4353      	muls	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e01a      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	23c0      	movs	r3, #192	; 0xc0
 8005688:	025b      	lsls	r3, r3, #9
 800568a:	401a      	ands	r2, r3
 800568c:	23c0      	movs	r3, #192	; 0xc0
 800568e:	025b      	lsls	r3, r3, #9
 8005690:	429a      	cmp	r2, r3
 8005692:	d109      	bne.n	80056a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4814      	ldr	r0, [pc, #80]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005698:	f7fa fd34 	bl	8000104 <__udivsi3>
 800569c:	0003      	movs	r3, r0
 800569e:	001a      	movs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4353      	muls	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e008      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	480c      	ldr	r0, [pc, #48]	; (80056dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80056ac:	f7fa fd2a 	bl	8000104 <__udivsi3>
 80056b0:	0003      	movs	r3, r0
 80056b2:	001a      	movs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4353      	muls	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	613b      	str	r3, [r7, #16]
      break;
 80056be:	e005      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80056c2:	613b      	str	r3, [r7, #16]
      break;
 80056c4:	e002      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80056c8:	613b      	str	r3, [r7, #16]
      break;
 80056ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80056cc:	693b      	ldr	r3, [r7, #16]
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b006      	add	sp, #24
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	40021000 	.word	0x40021000
 80056dc:	007a1200 	.word	0x007a1200
 80056e0:	08008740 	.word	0x08008740
 80056e4:	08008750 	.word	0x08008750
 80056e8:	02dc6c00 	.word	0x02dc6c00

080056ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <HAL_RCC_GetHCLKFreq+0x10>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	20000030 	.word	0x20000030

08005700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005704:	f7ff fff2 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 8005708:	0001      	movs	r1, r0
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCC_GetPCLK1Freq+0x24>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	2207      	movs	r2, #7
 8005712:	4013      	ands	r3, r2
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005716:	5cd3      	ldrb	r3, [r2, r3]
 8005718:	40d9      	lsrs	r1, r3
 800571a:	000b      	movs	r3, r1
}    
 800571c:	0018      	movs	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	40021000 	.word	0x40021000
 8005728:	08008738 	.word	0x08008738

0800572c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	2380      	movs	r3, #128	; 0x80
 8005742:	025b      	lsls	r3, r3, #9
 8005744:	4013      	ands	r3, r2
 8005746:	d100      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005748:	e08e      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800574a:	2017      	movs	r0, #23
 800574c:	183b      	adds	r3, r7, r0
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005752:	4b6e      	ldr	r3, [pc, #440]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	055b      	lsls	r3, r3, #21
 800575a:	4013      	ands	r3, r2
 800575c:	d110      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800575e:	4b6b      	ldr	r3, [pc, #428]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	4b6a      	ldr	r3, [pc, #424]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	0549      	lsls	r1, r1, #21
 8005768:	430a      	orrs	r2, r1
 800576a:	61da      	str	r2, [r3, #28]
 800576c:	4b67      	ldr	r3, [pc, #412]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	055b      	lsls	r3, r3, #21
 8005774:	4013      	ands	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800577a:	183b      	adds	r3, r7, r0
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	4b63      	ldr	r3, [pc, #396]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4013      	ands	r3, r2
 800578a:	d11a      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800578c:	4b60      	ldr	r3, [pc, #384]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b5f      	ldr	r3, [pc, #380]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	0049      	lsls	r1, r1, #1
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800579a:	f7fe fbcf 	bl	8003f3c <HAL_GetTick>
 800579e:	0003      	movs	r3, r0
 80057a0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a2:	e008      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a4:	f7fe fbca 	bl	8003f3c <HAL_GetTick>
 80057a8:	0002      	movs	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b64      	cmp	r3, #100	; 0x64
 80057b0:	d901      	bls.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e0a6      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b6:	4b56      	ldr	r3, [pc, #344]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	2380      	movs	r3, #128	; 0x80
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	4013      	ands	r3, r2
 80057c0:	d0f0      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057c2:	4b52      	ldr	r3, [pc, #328]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057c4:	6a1a      	ldr	r2, [r3, #32]
 80057c6:	23c0      	movs	r3, #192	; 0xc0
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4013      	ands	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d034      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	23c0      	movs	r3, #192	; 0xc0
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4013      	ands	r3, r2
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d02c      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057e4:	4b49      	ldr	r3, [pc, #292]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	4a4a      	ldr	r2, [pc, #296]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057ee:	4b47      	ldr	r3, [pc, #284]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	4b46      	ldr	r3, [pc, #280]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057f4:	2180      	movs	r1, #128	; 0x80
 80057f6:	0249      	lsls	r1, r1, #9
 80057f8:	430a      	orrs	r2, r1
 80057fa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057fc:	4b43      	ldr	r3, [pc, #268]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057fe:	6a1a      	ldr	r2, [r3, #32]
 8005800:	4b42      	ldr	r3, [pc, #264]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005802:	4945      	ldr	r1, [pc, #276]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005804:	400a      	ands	r2, r1
 8005806:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005808:	4b40      	ldr	r3, [pc, #256]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	4013      	ands	r3, r2
 8005814:	d013      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005816:	f7fe fb91 	bl	8003f3c <HAL_GetTick>
 800581a:	0003      	movs	r3, r0
 800581c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581e:	e009      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005820:	f7fe fb8c 	bl	8003f3c <HAL_GetTick>
 8005824:	0002      	movs	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	4a3c      	ldr	r2, [pc, #240]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e067      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005834:	4b35      	ldr	r3, [pc, #212]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	2202      	movs	r2, #2
 800583a:	4013      	ands	r3, r2
 800583c:	d0f0      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800583e:	4b33      	ldr	r3, [pc, #204]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	4a34      	ldr	r2, [pc, #208]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005844:	4013      	ands	r3, r2
 8005846:	0019      	movs	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4b2f      	ldr	r3, [pc, #188]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800584e:	430a      	orrs	r2, r1
 8005850:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005852:	2317      	movs	r3, #23
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d105      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	4b2a      	ldr	r3, [pc, #168]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005862:	492f      	ldr	r1, [pc, #188]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005864:	400a      	ands	r2, r1
 8005866:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2201      	movs	r2, #1
 800586e:	4013      	ands	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005872:	4b26      	ldr	r3, [pc, #152]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	2203      	movs	r2, #3
 8005878:	4393      	bics	r3, r2
 800587a:	0019      	movs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005882:	430a      	orrs	r2, r1
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2202      	movs	r2, #2
 800588c:	4013      	ands	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005890:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	4a23      	ldr	r2, [pc, #140]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005896:	4013      	ands	r3, r2
 8005898:	0019      	movs	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	4b1b      	ldr	r3, [pc, #108]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058a0:	430a      	orrs	r2, r1
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	02db      	lsls	r3, r3, #11
 80058ac:	4013      	ands	r3, r2
 80058ae:	d009      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b4:	4a1c      	ldr	r2, [pc, #112]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	0019      	movs	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058c0:	430a      	orrs	r2, r1
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2220      	movs	r2, #32
 80058ca:	4013      	ands	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	2210      	movs	r2, #16
 80058d4:	4393      	bics	r3, r2
 80058d6:	0019      	movs	r1, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058de:	430a      	orrs	r2, r1
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4013      	ands	r3, r2
 80058ec:	d009      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058ee:	4b07      	ldr	r3, [pc, #28]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	2240      	movs	r2, #64	; 0x40
 80058f4:	4393      	bics	r3, r2
 80058f6:	0019      	movs	r1, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	4b03      	ldr	r3, [pc, #12]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058fe:	430a      	orrs	r2, r1
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	0018      	movs	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	b006      	add	sp, #24
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000
 8005910:	40007000 	.word	0x40007000
 8005914:	fffffcff 	.word	0xfffffcff
 8005918:	fffeffff 	.word	0xfffeffff
 800591c:	00001388 	.word	0x00001388
 8005920:	efffffff 	.word	0xefffffff
 8005924:	fffcffff 	.word	0xfffcffff
 8005928:	fff3ffff 	.word	0xfff3ffff

0800592c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e042      	b.n	80059c4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	223d      	movs	r2, #61	; 0x3d
 8005942:	5c9b      	ldrb	r3, [r3, r2]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	223c      	movs	r2, #60	; 0x3c
 800594e:	2100      	movs	r1, #0
 8005950:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0018      	movs	r0, r3
 8005956:	f7fe f8df 	bl	8003b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	223d      	movs	r2, #61	; 0x3d
 800595e:	2102      	movs	r1, #2
 8005960:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3304      	adds	r3, #4
 800596a:	0019      	movs	r1, r3
 800596c:	0010      	movs	r0, r2
 800596e:	f000 fddd 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2246      	movs	r2, #70	; 0x46
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	223e      	movs	r2, #62	; 0x3e
 800597e:	2101      	movs	r1, #1
 8005980:	5499      	strb	r1, [r3, r2]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	223f      	movs	r2, #63	; 0x3f
 8005986:	2101      	movs	r1, #1
 8005988:	5499      	strb	r1, [r3, r2]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2241      	movs	r2, #65	; 0x41
 8005996:	2101      	movs	r1, #1
 8005998:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2242      	movs	r2, #66	; 0x42
 800599e:	2101      	movs	r1, #1
 80059a0:	5499      	strb	r1, [r3, r2]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2243      	movs	r2, #67	; 0x43
 80059a6:	2101      	movs	r1, #1
 80059a8:	5499      	strb	r1, [r3, r2]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2244      	movs	r2, #68	; 0x44
 80059ae:	2101      	movs	r1, #1
 80059b0:	5499      	strb	r1, [r3, r2]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2245      	movs	r2, #69	; 0x45
 80059b6:	2101      	movs	r1, #1
 80059b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	223d      	movs	r2, #61	; 0x3d
 80059be:	2101      	movs	r1, #1
 80059c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	0018      	movs	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b002      	add	sp, #8
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	223d      	movs	r2, #61	; 0x3d
 80059d8:	5c9b      	ldrb	r3, [r3, r2]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d001      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e03b      	b.n	8005a5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	223d      	movs	r2, #61	; 0x3d
 80059e8:	2102      	movs	r1, #2
 80059ea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2101      	movs	r1, #1
 80059f8:	430a      	orrs	r2, r1
 80059fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_TIM_Base_Start_IT+0x98>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <HAL_TIM_Base_Start_IT+0x5a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	05db      	lsls	r3, r3, #23
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d009      	beq.n	8005a26 <HAL_TIM_Base_Start_IT+0x5a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_TIM_Base_Start_IT+0x5a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <HAL_TIM_Base_Start_IT+0xa0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d111      	bne.n	8005a4a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d010      	beq.n	8005a5a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2101      	movs	r1, #1
 8005a44:	430a      	orrs	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	e007      	b.n	8005a5a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2101      	movs	r1, #1
 8005a56:	430a      	orrs	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b004      	add	sp, #16
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40014000 	.word	0x40014000

08005a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e042      	b.n	8005b08 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	223d      	movs	r2, #61	; 0x3d
 8005a86:	5c9b      	ldrb	r3, [r3, r2]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d107      	bne.n	8005a9e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	223c      	movs	r2, #60	; 0x3c
 8005a92:	2100      	movs	r1, #0
 8005a94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f000 f839 	bl	8005b10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	223d      	movs	r2, #61	; 0x3d
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3304      	adds	r3, #4
 8005aae:	0019      	movs	r1, r3
 8005ab0:	0010      	movs	r0, r2
 8005ab2:	f000 fd3b 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2246      	movs	r2, #70	; 0x46
 8005aba:	2101      	movs	r1, #1
 8005abc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	223e      	movs	r2, #62	; 0x3e
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	5499      	strb	r1, [r3, r2]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	223f      	movs	r2, #63	; 0x3f
 8005aca:	2101      	movs	r1, #1
 8005acc:	5499      	strb	r1, [r3, r2]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2240      	movs	r2, #64	; 0x40
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	5499      	strb	r1, [r3, r2]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2241      	movs	r2, #65	; 0x41
 8005ada:	2101      	movs	r1, #1
 8005adc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2242      	movs	r2, #66	; 0x42
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	5499      	strb	r1, [r3, r2]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2243      	movs	r2, #67	; 0x43
 8005aea:	2101      	movs	r1, #1
 8005aec:	5499      	strb	r1, [r3, r2]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2244      	movs	r2, #68	; 0x44
 8005af2:	2101      	movs	r1, #1
 8005af4:	5499      	strb	r1, [r3, r2]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2245      	movs	r2, #69	; 0x45
 8005afa:	2101      	movs	r1, #1
 8005afc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	223d      	movs	r2, #61	; 0x3d
 8005b02:	2101      	movs	r1, #1
 8005b04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e042      	b.n	8005bb8 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	223d      	movs	r2, #61	; 0x3d
 8005b36:	5c9b      	ldrb	r3, [r3, r2]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	223c      	movs	r2, #60	; 0x3c
 8005b42:	2100      	movs	r1, #0
 8005b44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 f839 	bl	8005bc0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	223d      	movs	r2, #61	; 0x3d
 8005b52:	2102      	movs	r1, #2
 8005b54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	0019      	movs	r1, r3
 8005b60:	0010      	movs	r0, r2
 8005b62:	f000 fce3 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2246      	movs	r2, #70	; 0x46
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	223e      	movs	r2, #62	; 0x3e
 8005b72:	2101      	movs	r1, #1
 8005b74:	5499      	strb	r1, [r3, r2]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	223f      	movs	r2, #63	; 0x3f
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	5499      	strb	r1, [r3, r2]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2240      	movs	r2, #64	; 0x40
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2241      	movs	r2, #65	; 0x41
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2242      	movs	r2, #66	; 0x42
 8005b92:	2101      	movs	r1, #1
 8005b94:	5499      	strb	r1, [r3, r2]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2243      	movs	r2, #67	; 0x43
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	5499      	strb	r1, [r3, r2]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2244      	movs	r2, #68	; 0x44
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	5499      	strb	r1, [r3, r2]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2245      	movs	r2, #69	; 0x45
 8005baa:	2101      	movs	r1, #1
 8005bac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	223d      	movs	r2, #61	; 0x3d
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b002      	add	sp, #8
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005bc8:	46c0      	nop			; (mov r8, r8)
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	230f      	movs	r3, #15
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	2200      	movs	r2, #0
 8005be0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_IC_Start_IT+0x22>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	223e      	movs	r2, #62	; 0x3e
 8005bec:	5c9b      	ldrb	r3, [r3, r2]
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	e013      	b.n	8005c1a <HAL_TIM_IC_Start_IT+0x4a>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_IC_Start_IT+0x32>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	223f      	movs	r2, #63	; 0x3f
 8005bfc:	5c9b      	ldrb	r3, [r3, r2]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	e00b      	b.n	8005c1a <HAL_TIM_IC_Start_IT+0x4a>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_IC_Start_IT+0x42>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2240      	movs	r2, #64	; 0x40
 8005c0c:	5c9b      	ldrb	r3, [r3, r2]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	e003      	b.n	8005c1a <HAL_TIM_IC_Start_IT+0x4a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2241      	movs	r2, #65	; 0x41
 8005c16:	5c9b      	ldrb	r3, [r3, r2]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	220e      	movs	r2, #14
 8005c1c:	18ba      	adds	r2, r7, r2
 8005c1e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_TIM_IC_Start_IT+0x60>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2242      	movs	r2, #66	; 0x42
 8005c2a:	5c9b      	ldrb	r3, [r3, r2]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e013      	b.n	8005c58 <HAL_TIM_IC_Start_IT+0x88>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d104      	bne.n	8005c40 <HAL_TIM_IC_Start_IT+0x70>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2243      	movs	r2, #67	; 0x43
 8005c3a:	5c9b      	ldrb	r3, [r3, r2]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	e00b      	b.n	8005c58 <HAL_TIM_IC_Start_IT+0x88>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d104      	bne.n	8005c50 <HAL_TIM_IC_Start_IT+0x80>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2244      	movs	r2, #68	; 0x44
 8005c4a:	5c9b      	ldrb	r3, [r3, r2]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	e003      	b.n	8005c58 <HAL_TIM_IC_Start_IT+0x88>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2245      	movs	r2, #69	; 0x45
 8005c54:	5c9b      	ldrb	r3, [r3, r2]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	210d      	movs	r1, #13
 8005c5a:	187a      	adds	r2, r7, r1
 8005c5c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c5e:	230e      	movs	r3, #14
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d103      	bne.n	8005c70 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c68:	187b      	adds	r3, r7, r1
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d001      	beq.n	8005c74 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0b1      	b.n	8005dd8 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d104      	bne.n	8005c84 <HAL_TIM_IC_Start_IT+0xb4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	223e      	movs	r2, #62	; 0x3e
 8005c7e:	2102      	movs	r1, #2
 8005c80:	5499      	strb	r1, [r3, r2]
 8005c82:	e013      	b.n	8005cac <HAL_TIM_IC_Start_IT+0xdc>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d104      	bne.n	8005c94 <HAL_TIM_IC_Start_IT+0xc4>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	223f      	movs	r2, #63	; 0x3f
 8005c8e:	2102      	movs	r1, #2
 8005c90:	5499      	strb	r1, [r3, r2]
 8005c92:	e00b      	b.n	8005cac <HAL_TIM_IC_Start_IT+0xdc>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d104      	bne.n	8005ca4 <HAL_TIM_IC_Start_IT+0xd4>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2240      	movs	r2, #64	; 0x40
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	5499      	strb	r1, [r3, r2]
 8005ca2:	e003      	b.n	8005cac <HAL_TIM_IC_Start_IT+0xdc>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2241      	movs	r2, #65	; 0x41
 8005ca8:	2102      	movs	r1, #2
 8005caa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <HAL_TIM_IC_Start_IT+0xec>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2242      	movs	r2, #66	; 0x42
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	5499      	strb	r1, [r3, r2]
 8005cba:	e013      	b.n	8005ce4 <HAL_TIM_IC_Start_IT+0x114>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d104      	bne.n	8005ccc <HAL_TIM_IC_Start_IT+0xfc>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2243      	movs	r2, #67	; 0x43
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	5499      	strb	r1, [r3, r2]
 8005cca:	e00b      	b.n	8005ce4 <HAL_TIM_IC_Start_IT+0x114>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d104      	bne.n	8005cdc <HAL_TIM_IC_Start_IT+0x10c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2244      	movs	r2, #68	; 0x44
 8005cd6:	2102      	movs	r1, #2
 8005cd8:	5499      	strb	r1, [r3, r2]
 8005cda:	e003      	b.n	8005ce4 <HAL_TIM_IC_Start_IT+0x114>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2245      	movs	r2, #69	; 0x45
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b0c      	cmp	r3, #12
 8005ce8:	d02a      	beq.n	8005d40 <HAL_TIM_IC_Start_IT+0x170>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b0c      	cmp	r3, #12
 8005cee:	d830      	bhi.n	8005d52 <HAL_TIM_IC_Start_IT+0x182>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d01b      	beq.n	8005d2e <HAL_TIM_IC_Start_IT+0x15e>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d82a      	bhi.n	8005d52 <HAL_TIM_IC_Start_IT+0x182>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_TIM_IC_Start_IT+0x13a>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d009      	beq.n	8005d1c <HAL_TIM_IC_Start_IT+0x14c>
 8005d08:	e023      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2102      	movs	r1, #2
 8005d16:	430a      	orrs	r2, r1
 8005d18:	60da      	str	r2, [r3, #12]
      break;
 8005d1a:	e01f      	b.n	8005d5c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2104      	movs	r1, #4
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]
      break;
 8005d2c:	e016      	b.n	8005d5c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2108      	movs	r1, #8
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	60da      	str	r2, [r3, #12]
      break;
 8005d3e:	e00d      	b.n	8005d5c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	60da      	str	r2, [r3, #12]
      break;
 8005d50:	e004      	b.n	8005d5c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8005d52:	230f      	movs	r3, #15
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	2201      	movs	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]
      break;
 8005d5a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005d5c:	230f      	movs	r3, #15
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d135      	bne.n	8005dd2 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f001 f816 	bl	8006da0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <HAL_TIM_IC_Start_IT+0x210>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00f      	beq.n	8005d9e <HAL_TIM_IC_Start_IT+0x1ce>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	2380      	movs	r3, #128	; 0x80
 8005d84:	05db      	lsls	r3, r3, #23
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d009      	beq.n	8005d9e <HAL_TIM_IC_Start_IT+0x1ce>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a15      	ldr	r2, [pc, #84]	; (8005de4 <HAL_TIM_IC_Start_IT+0x214>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_TIM_IC_Start_IT+0x1ce>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <HAL_TIM_IC_Start_IT+0x218>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d111      	bne.n	8005dc2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2207      	movs	r2, #7
 8005da6:	4013      	ands	r3, r2
 8005da8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b06      	cmp	r3, #6
 8005dae:	d010      	beq.n	8005dd2 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2101      	movs	r1, #1
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc0:	e007      	b.n	8005dd2 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2101      	movs	r1, #1
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005dd2:	230f      	movs	r3, #15
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	781b      	ldrb	r3, [r3, #0]
}
 8005dd8:	0018      	movs	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b004      	add	sp, #16
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40014000 	.word	0x40014000

08005dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d124      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d11d      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2203      	movs	r2, #3
 8005e16:	4252      	negs	r2, r2
 8005e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2203      	movs	r2, #3
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f7fd faf2 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 8005e34:	e007      	b.n	8005e46 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f000 fb5f 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 fb63 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2204      	movs	r2, #4
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d125      	bne.n	8005ea6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2204      	movs	r2, #4
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d11e      	bne.n	8005ea6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2205      	movs	r2, #5
 8005e6e:	4252      	negs	r2, r2
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	23c0      	movs	r3, #192	; 0xc0
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4013      	ands	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7fd fac5 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 8005e8e:	e007      	b.n	8005ea0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	0018      	movs	r0, r3
 8005e94:	f000 fb32 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f000 fb36 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2208      	movs	r2, #8
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d124      	bne.n	8005efe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2208      	movs	r2, #8
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d11d      	bne.n	8005efe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2209      	movs	r2, #9
 8005ec8:	4252      	negs	r2, r2
 8005eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	4013      	ands	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f7fd fa99 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 8005ee6:	e007      	b.n	8005ef8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f000 fb06 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 fb0a 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2210      	movs	r2, #16
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d125      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2210      	movs	r2, #16
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d11e      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2211      	movs	r2, #17
 8005f20:	4252      	negs	r2, r2
 8005f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2208      	movs	r2, #8
 8005f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	23c0      	movs	r3, #192	; 0xc0
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4013      	ands	r3, r2
 8005f36:	d004      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7fd fa6c 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e007      	b.n	8005f52 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0018      	movs	r0, r3
 8005f46:	f000 fad9 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f000 fadd 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d10f      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d108      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	4252      	negs	r2, r2
 8005f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f7fc fe85 	bl	8002c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2280      	movs	r2, #128	; 0x80
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b80      	cmp	r3, #128	; 0x80
 8005f92:	d10f      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b80      	cmp	r3, #128	; 0x80
 8005fa0:	d108      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2281      	movs	r2, #129	; 0x81
 8005fa8:	4252      	negs	r2, r2
 8005faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f000 ffde 	bl	8006f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2240      	movs	r2, #64	; 0x40
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d10f      	bne.n	8005fe2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2240      	movs	r2, #64	; 0x40
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	d108      	bne.n	8005fe2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2241      	movs	r2, #65	; 0x41
 8005fd6:	4252      	negs	r2, r2
 8005fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f000 fa9d 	bl	800651c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d10f      	bne.n	8006010 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d108      	bne.n	8006010 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2221      	movs	r2, #33	; 0x21
 8006004:	4252      	negs	r2, r2
 8006006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 ffa8 	bl	8006f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	b002      	add	sp, #8
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006024:	2317      	movs	r3, #23
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	223c      	movs	r2, #60	; 0x3c
 8006030:	5c9b      	ldrb	r3, [r3, r2]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_TIM_IC_ConfigChannel+0x22>
 8006036:	2302      	movs	r3, #2
 8006038:	e08c      	b.n	8006154 <HAL_TIM_IC_ConfigChannel+0x13c>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	223c      	movs	r2, #60	; 0x3c
 800603e:	2101      	movs	r1, #1
 8006040:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d11b      	bne.n	8006080 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006058:	f000 fce4 	bl	8006a24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	210c      	movs	r1, #12
 8006068:	438a      	bics	r2, r1
 800606a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6999      	ldr	r1, [r3, #24]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	619a      	str	r2, [r3, #24]
 800607e:	e062      	b.n	8006146 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d11c      	bne.n	80060c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006096:	f000 fd4f 	bl	8006b38 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	492d      	ldr	r1, [pc, #180]	; (800615c <HAL_TIM_IC_ConfigChannel+0x144>)
 80060a6:	400a      	ands	r2, r1
 80060a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6999      	ldr	r1, [r3, #24]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	021a      	lsls	r2, r3, #8
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	619a      	str	r2, [r3, #24]
 80060be:	e042      	b.n	8006146 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d11b      	bne.n	80060fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80060d6:	f000 fda3 	bl	8006c20 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	210c      	movs	r1, #12
 80060e6:	438a      	bics	r2, r1
 80060e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69d9      	ldr	r1, [r3, #28]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	61da      	str	r2, [r3, #28]
 80060fc:	e023      	b.n	8006146 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d11c      	bne.n	800613e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006114:	f000 fdc4 	bl	8006ca0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	490e      	ldr	r1, [pc, #56]	; (800615c <HAL_TIM_IC_ConfigChannel+0x144>)
 8006124:	400a      	ands	r2, r1
 8006126:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69d9      	ldr	r1, [r3, #28]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	61da      	str	r2, [r3, #28]
 800613c:	e003      	b.n	8006146 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800613e:	2317      	movs	r3, #23
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	223c      	movs	r2, #60	; 0x3c
 800614a:	2100      	movs	r1, #0
 800614c:	5499      	strb	r1, [r3, r2]

  return status;
 800614e:	2317      	movs	r3, #23
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	781b      	ldrb	r3, [r3, #0]
}
 8006154:	0018      	movs	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	b006      	add	sp, #24
 800615a:	bd80      	pop	{r7, pc}
 800615c:	fffff3ff 	.word	0xfffff3ff

08006160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800616c:	2317      	movs	r3, #23
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	223c      	movs	r2, #60	; 0x3c
 8006178:	5c9b      	ldrb	r3, [r3, r2]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_TIM_PWM_ConfigChannel+0x22>
 800617e:	2302      	movs	r3, #2
 8006180:	e0ad      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	223c      	movs	r2, #60	; 0x3c
 8006186:	2101      	movs	r1, #1
 8006188:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	d100      	bne.n	8006192 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006190:	e076      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b0c      	cmp	r3, #12
 8006196:	d900      	bls.n	800619a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006198:	e095      	b.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b08      	cmp	r3, #8
 800619e:	d04e      	beq.n	800623e <HAL_TIM_PWM_ConfigChannel+0xde>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d900      	bls.n	80061a8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80061a6:	e08e      	b.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d021      	beq.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80061b4:	e087      	b.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	0011      	movs	r1, r2
 80061be:	0018      	movs	r0, r3
 80061c0:	f000 fa34 	bl	800662c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2108      	movs	r1, #8
 80061d0:	430a      	orrs	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2104      	movs	r1, #4
 80061e0:	438a      	bics	r2, r1
 80061e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6999      	ldr	r1, [r3, #24]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	619a      	str	r2, [r3, #24]
      break;
 80061f6:	e06b      	b.n	80062d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	0011      	movs	r1, r2
 8006200:	0018      	movs	r0, r3
 8006202:	f000 fa9b 	bl	800673c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699a      	ldr	r2, [r3, #24]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	0109      	lsls	r1, r1, #4
 8006214:	430a      	orrs	r2, r1
 8006216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4931      	ldr	r1, [pc, #196]	; (80062e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006224:	400a      	ands	r2, r1
 8006226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	619a      	str	r2, [r3, #24]
      break;
 800623c:	e048      	b.n	80062d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	0011      	movs	r1, r2
 8006246:	0018      	movs	r0, r3
 8006248:	f000 fafc 	bl	8006844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69da      	ldr	r2, [r3, #28]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2108      	movs	r1, #8
 8006258:	430a      	orrs	r2, r1
 800625a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69da      	ldr	r2, [r3, #28]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2104      	movs	r1, #4
 8006268:	438a      	bics	r2, r1
 800626a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69d9      	ldr	r1, [r3, #28]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	61da      	str	r2, [r3, #28]
      break;
 800627e:	e027      	b.n	80062d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	0011      	movs	r1, r2
 8006288:	0018      	movs	r0, r3
 800628a:	f000 fb61 	bl	8006950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	0109      	lsls	r1, r1, #4
 800629c:	430a      	orrs	r2, r1
 800629e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	490f      	ldr	r1, [pc, #60]	; (80062e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80062ac:	400a      	ands	r2, r1
 80062ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69d9      	ldr	r1, [r3, #28]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	61da      	str	r2, [r3, #28]
      break;
 80062c4:	e004      	b.n	80062d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80062c6:	2317      	movs	r3, #23
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
      break;
 80062ce:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	223c      	movs	r2, #60	; 0x3c
 80062d4:	2100      	movs	r1, #0
 80062d6:	5499      	strb	r1, [r3, r2]

  return status;
 80062d8:	2317      	movs	r3, #23
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b006      	add	sp, #24
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	fffffbff 	.word	0xfffffbff

080062ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	230f      	movs	r3, #15
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	223c      	movs	r2, #60	; 0x3c
 8006302:	5c9b      	ldrb	r3, [r3, r2]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_TIM_ConfigClockSource+0x20>
 8006308:	2302      	movs	r3, #2
 800630a:	e0bc      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x19a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	223c      	movs	r2, #60	; 0x3c
 8006310:	2101      	movs	r1, #1
 8006312:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	223d      	movs	r2, #61	; 0x3d
 8006318:	2102      	movs	r1, #2
 800631a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2277      	movs	r2, #119	; 0x77
 8006328:	4393      	bics	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a58      	ldr	r2, [pc, #352]	; (8006490 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006330:	4013      	ands	r3, r2
 8006332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2280      	movs	r2, #128	; 0x80
 8006342:	0192      	lsls	r2, r2, #6
 8006344:	4293      	cmp	r3, r2
 8006346:	d040      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0xde>
 8006348:	2280      	movs	r2, #128	; 0x80
 800634a:	0192      	lsls	r2, r2, #6
 800634c:	4293      	cmp	r3, r2
 800634e:	d900      	bls.n	8006352 <HAL_TIM_ConfigClockSource+0x66>
 8006350:	e088      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	0152      	lsls	r2, r2, #5
 8006356:	4293      	cmp	r3, r2
 8006358:	d100      	bne.n	800635c <HAL_TIM_ConfigClockSource+0x70>
 800635a:	e088      	b.n	800646e <HAL_TIM_ConfigClockSource+0x182>
 800635c:	2280      	movs	r2, #128	; 0x80
 800635e:	0152      	lsls	r2, r2, #5
 8006360:	4293      	cmp	r3, r2
 8006362:	d900      	bls.n	8006366 <HAL_TIM_ConfigClockSource+0x7a>
 8006364:	e07e      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
 8006366:	2b70      	cmp	r3, #112	; 0x70
 8006368:	d018      	beq.n	800639c <HAL_TIM_ConfigClockSource+0xb0>
 800636a:	d900      	bls.n	800636e <HAL_TIM_ConfigClockSource+0x82>
 800636c:	e07a      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
 800636e:	2b60      	cmp	r3, #96	; 0x60
 8006370:	d04f      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x126>
 8006372:	d900      	bls.n	8006376 <HAL_TIM_ConfigClockSource+0x8a>
 8006374:	e076      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
 8006376:	2b50      	cmp	r3, #80	; 0x50
 8006378:	d03b      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0x106>
 800637a:	d900      	bls.n	800637e <HAL_TIM_ConfigClockSource+0x92>
 800637c:	e072      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
 800637e:	2b40      	cmp	r3, #64	; 0x40
 8006380:	d057      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x146>
 8006382:	d900      	bls.n	8006386 <HAL_TIM_ConfigClockSource+0x9a>
 8006384:	e06e      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
 8006386:	2b30      	cmp	r3, #48	; 0x30
 8006388:	d063      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x166>
 800638a:	d86b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d060      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x166>
 8006390:	d868      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d05d      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x166>
 8006396:	2b10      	cmp	r3, #16
 8006398:	d05b      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x166>
 800639a:	e063      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ac:	f000 fcd8 	bl	8006d60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2277      	movs	r2, #119	; 0x77
 80063bc:	4313      	orrs	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]
      break;
 80063c8:	e052      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063da:	f000 fcc1 	bl	8006d60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2180      	movs	r1, #128	; 0x80
 80063ea:	01c9      	lsls	r1, r1, #7
 80063ec:	430a      	orrs	r2, r1
 80063ee:	609a      	str	r2, [r3, #8]
      break;
 80063f0:	e03e      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fe:	001a      	movs	r2, r3
 8006400:	f000 fb6c 	bl	8006adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2150      	movs	r1, #80	; 0x50
 800640a:	0018      	movs	r0, r3
 800640c:	f000 fc8e 	bl	8006d2c <TIM_ITRx_SetConfig>
      break;
 8006410:	e02e      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800641e:	001a      	movs	r2, r3
 8006420:	f000 fbcc 	bl	8006bbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2160      	movs	r1, #96	; 0x60
 800642a:	0018      	movs	r0, r3
 800642c:	f000 fc7e 	bl	8006d2c <TIM_ITRx_SetConfig>
      break;
 8006430:	e01e      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643e:	001a      	movs	r2, r3
 8006440:	f000 fb4c 	bl	8006adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	0018      	movs	r0, r3
 800644c:	f000 fc6e 	bl	8006d2c <TIM_ITRx_SetConfig>
      break;
 8006450:	e00e      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	0019      	movs	r1, r3
 800645c:	0010      	movs	r0, r2
 800645e:	f000 fc65 	bl	8006d2c <TIM_ITRx_SetConfig>
      break;
 8006462:	e005      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006464:	230f      	movs	r3, #15
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2201      	movs	r2, #1
 800646a:	701a      	strb	r2, [r3, #0]
      break;
 800646c:	e000      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800646e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	223d      	movs	r2, #61	; 0x3d
 8006474:	2101      	movs	r1, #1
 8006476:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	223c      	movs	r2, #60	; 0x3c
 800647c:	2100      	movs	r1, #0
 800647e:	5499      	strb	r1, [r3, r2]

  return status;
 8006480:	230f      	movs	r3, #15
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	781b      	ldrb	r3, [r3, #0]
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	b004      	add	sp, #16
 800648c:	bd80      	pop	{r7, pc}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	ffff00ff 	.word	0xffff00ff

08006494 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d01e      	beq.n	80064e6 <HAL_TIM_ReadCapturedValue+0x52>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b0c      	cmp	r3, #12
 80064ac:	d820      	bhi.n	80064f0 <HAL_TIM_ReadCapturedValue+0x5c>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d013      	beq.n	80064dc <HAL_TIM_ReadCapturedValue+0x48>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d81a      	bhi.n	80064f0 <HAL_TIM_ReadCapturedValue+0x5c>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_TIM_ReadCapturedValue+0x34>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d005      	beq.n	80064d2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80064c6:	e013      	b.n	80064f0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ce:	60fb      	str	r3, [r7, #12]
      break;
 80064d0:	e00f      	b.n	80064f2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	60fb      	str	r3, [r7, #12]
      break;
 80064da:	e00a      	b.n	80064f2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	60fb      	str	r3, [r7, #12]
      break;
 80064e4:	e005      	b.n	80064f2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	60fb      	str	r3, [r7, #12]
      break;
 80064ee:	e000      	b.n	80064f2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80064f0:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80064f2:	68fb      	ldr	r3, [r7, #12]
}
 80064f4:	0018      	movs	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b004      	add	sp, #16
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006504:	46c0      	nop			; (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	b002      	add	sp, #8
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006514:	46c0      	nop			; (mov r8, r8)
 8006516:	46bd      	mov	sp, r7
 8006518:	b002      	add	sp, #8
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b002      	add	sp, #8
 800652a:	bd80      	pop	{r7, pc}

0800652c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a34      	ldr	r2, [pc, #208]	; (8006610 <TIM_Base_SetConfig+0xe4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d008      	beq.n	8006556 <TIM_Base_SetConfig+0x2a>
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	2380      	movs	r3, #128	; 0x80
 8006548:	05db      	lsls	r3, r3, #23
 800654a:	429a      	cmp	r2, r3
 800654c:	d003      	beq.n	8006556 <TIM_Base_SetConfig+0x2a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a30      	ldr	r2, [pc, #192]	; (8006614 <TIM_Base_SetConfig+0xe8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d108      	bne.n	8006568 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2270      	movs	r2, #112	; 0x70
 800655a:	4393      	bics	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a29      	ldr	r2, [pc, #164]	; (8006610 <TIM_Base_SetConfig+0xe4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d018      	beq.n	80065a2 <TIM_Base_SetConfig+0x76>
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	2380      	movs	r3, #128	; 0x80
 8006574:	05db      	lsls	r3, r3, #23
 8006576:	429a      	cmp	r2, r3
 8006578:	d013      	beq.n	80065a2 <TIM_Base_SetConfig+0x76>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a25      	ldr	r2, [pc, #148]	; (8006614 <TIM_Base_SetConfig+0xe8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00f      	beq.n	80065a2 <TIM_Base_SetConfig+0x76>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a24      	ldr	r2, [pc, #144]	; (8006618 <TIM_Base_SetConfig+0xec>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_Base_SetConfig+0x76>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a23      	ldr	r2, [pc, #140]	; (800661c <TIM_Base_SetConfig+0xf0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_Base_SetConfig+0x76>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a22      	ldr	r2, [pc, #136]	; (8006620 <TIM_Base_SetConfig+0xf4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_Base_SetConfig+0x76>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a21      	ldr	r2, [pc, #132]	; (8006624 <TIM_Base_SetConfig+0xf8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d108      	bne.n	80065b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a20      	ldr	r2, [pc, #128]	; (8006628 <TIM_Base_SetConfig+0xfc>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2280      	movs	r2, #128	; 0x80
 80065b8:	4393      	bics	r3, r2
 80065ba:	001a      	movs	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <TIM_Base_SetConfig+0xe4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00b      	beq.n	80065fa <TIM_Base_SetConfig+0xce>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a0d      	ldr	r2, [pc, #52]	; (800661c <TIM_Base_SetConfig+0xf0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <TIM_Base_SetConfig+0xce>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a0c      	ldr	r2, [pc, #48]	; (8006620 <TIM_Base_SetConfig+0xf4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_Base_SetConfig+0xce>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a0b      	ldr	r2, [pc, #44]	; (8006624 <TIM_Base_SetConfig+0xf8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d103      	bne.n	8006602 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	615a      	str	r2, [r3, #20]
}
 8006608:	46c0      	nop			; (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b004      	add	sp, #16
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40000400 	.word	0x40000400
 8006618:	40002000 	.word	0x40002000
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800
 8006628:	fffffcff 	.word	0xfffffcff

0800662c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	2201      	movs	r2, #1
 800663c:	4393      	bics	r3, r2
 800663e:	001a      	movs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2270      	movs	r2, #112	; 0x70
 800665a:	4393      	bics	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2203      	movs	r2, #3
 8006662:	4393      	bics	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2202      	movs	r2, #2
 8006674:	4393      	bics	r3, r2
 8006676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a27      	ldr	r2, [pc, #156]	; (8006724 <TIM_OC1_SetConfig+0xf8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00b      	beq.n	80066a2 <TIM_OC1_SetConfig+0x76>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a26      	ldr	r2, [pc, #152]	; (8006728 <TIM_OC1_SetConfig+0xfc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d007      	beq.n	80066a2 <TIM_OC1_SetConfig+0x76>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a25      	ldr	r2, [pc, #148]	; (800672c <TIM_OC1_SetConfig+0x100>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC1_SetConfig+0x76>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a24      	ldr	r2, [pc, #144]	; (8006730 <TIM_OC1_SetConfig+0x104>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d10c      	bne.n	80066bc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2208      	movs	r2, #8
 80066a6:	4393      	bics	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2204      	movs	r2, #4
 80066b8:	4393      	bics	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a19      	ldr	r2, [pc, #100]	; (8006724 <TIM_OC1_SetConfig+0xf8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00b      	beq.n	80066dc <TIM_OC1_SetConfig+0xb0>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <TIM_OC1_SetConfig+0xfc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d007      	beq.n	80066dc <TIM_OC1_SetConfig+0xb0>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a17      	ldr	r2, [pc, #92]	; (800672c <TIM_OC1_SetConfig+0x100>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d003      	beq.n	80066dc <TIM_OC1_SetConfig+0xb0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a16      	ldr	r2, [pc, #88]	; (8006730 <TIM_OC1_SetConfig+0x104>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d111      	bne.n	8006700 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4a15      	ldr	r2, [pc, #84]	; (8006734 <TIM_OC1_SetConfig+0x108>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	4a14      	ldr	r2, [pc, #80]	; (8006738 <TIM_OC1_SetConfig+0x10c>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	46bd      	mov	sp, r7
 800671e:	b006      	add	sp, #24
 8006720:	bd80      	pop	{r7, pc}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	40012c00 	.word	0x40012c00
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800
 8006734:	fffffeff 	.word	0xfffffeff
 8006738:	fffffdff 	.word	0xfffffdff

0800673c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	2210      	movs	r2, #16
 800674c:	4393      	bics	r3, r2
 800674e:	001a      	movs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a2e      	ldr	r2, [pc, #184]	; (8006824 <TIM_OC2_SetConfig+0xe8>)
 800676a:	4013      	ands	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a2d      	ldr	r2, [pc, #180]	; (8006828 <TIM_OC2_SetConfig+0xec>)
 8006772:	4013      	ands	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2220      	movs	r2, #32
 8006786:	4393      	bics	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a24      	ldr	r2, [pc, #144]	; (800682c <TIM_OC2_SetConfig+0xf0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10d      	bne.n	80067ba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2280      	movs	r2, #128	; 0x80
 80067a2:	4393      	bics	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2240      	movs	r2, #64	; 0x40
 80067b6:	4393      	bics	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <TIM_OC2_SetConfig+0xf0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_OC2_SetConfig+0x9e>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <TIM_OC2_SetConfig+0xf4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_OC2_SetConfig+0x9e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <TIM_OC2_SetConfig+0xf8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC2_SetConfig+0x9e>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a18      	ldr	r2, [pc, #96]	; (8006838 <TIM_OC2_SetConfig+0xfc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d113      	bne.n	8006802 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4a17      	ldr	r2, [pc, #92]	; (800683c <TIM_OC2_SetConfig+0x100>)
 80067de:	4013      	ands	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4a16      	ldr	r2, [pc, #88]	; (8006840 <TIM_OC2_SetConfig+0x104>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	46c0      	nop			; (mov r8, r8)
 800681e:	46bd      	mov	sp, r7
 8006820:	b006      	add	sp, #24
 8006822:	bd80      	pop	{r7, pc}
 8006824:	ffff8fff 	.word	0xffff8fff
 8006828:	fffffcff 	.word	0xfffffcff
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800
 800683c:	fffffbff 	.word	0xfffffbff
 8006840:	fffff7ff 	.word	0xfffff7ff

08006844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	4a35      	ldr	r2, [pc, #212]	; (8006928 <TIM_OC3_SetConfig+0xe4>)
 8006854:	401a      	ands	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2270      	movs	r2, #112	; 0x70
 8006870:	4393      	bics	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2203      	movs	r2, #3
 8006878:	4393      	bics	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	4a28      	ldr	r2, [pc, #160]	; (800692c <TIM_OC3_SetConfig+0xe8>)
 800688a:	4013      	ands	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a24      	ldr	r2, [pc, #144]	; (8006930 <TIM_OC3_SetConfig+0xec>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10d      	bne.n	80068be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4a23      	ldr	r2, [pc, #140]	; (8006934 <TIM_OC3_SetConfig+0xf0>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	021b      	lsls	r3, r3, #8
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4a1f      	ldr	r2, [pc, #124]	; (8006938 <TIM_OC3_SetConfig+0xf4>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <TIM_OC3_SetConfig+0xec>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00b      	beq.n	80068de <TIM_OC3_SetConfig+0x9a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1c      	ldr	r2, [pc, #112]	; (800693c <TIM_OC3_SetConfig+0xf8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <TIM_OC3_SetConfig+0x9a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <TIM_OC3_SetConfig+0xfc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_OC3_SetConfig+0x9a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1a      	ldr	r2, [pc, #104]	; (8006944 <TIM_OC3_SetConfig+0x100>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d113      	bne.n	8006906 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4a19      	ldr	r2, [pc, #100]	; (8006948 <TIM_OC3_SetConfig+0x104>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4a18      	ldr	r2, [pc, #96]	; (800694c <TIM_OC3_SetConfig+0x108>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	46c0      	nop			; (mov r8, r8)
 8006922:	46bd      	mov	sp, r7
 8006924:	b006      	add	sp, #24
 8006926:	bd80      	pop	{r7, pc}
 8006928:	fffffeff 	.word	0xfffffeff
 800692c:	fffffdff 	.word	0xfffffdff
 8006930:	40012c00 	.word	0x40012c00
 8006934:	fffff7ff 	.word	0xfffff7ff
 8006938:	fffffbff 	.word	0xfffffbff
 800693c:	40014000 	.word	0x40014000
 8006940:	40014400 	.word	0x40014400
 8006944:	40014800 	.word	0x40014800
 8006948:	ffffefff 	.word	0xffffefff
 800694c:	ffffdfff 	.word	0xffffdfff

08006950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <TIM_OC4_SetConfig+0xb0>)
 8006960:	401a      	ands	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a22      	ldr	r2, [pc, #136]	; (8006a04 <TIM_OC4_SetConfig+0xb4>)
 800697c:	4013      	ands	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4a21      	ldr	r2, [pc, #132]	; (8006a08 <TIM_OC4_SetConfig+0xb8>)
 8006984:	4013      	ands	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <TIM_OC4_SetConfig+0xbc>)
 8006998:	4013      	ands	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	031b      	lsls	r3, r3, #12
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a19      	ldr	r2, [pc, #100]	; (8006a10 <TIM_OC4_SetConfig+0xc0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_OC4_SetConfig+0x78>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <TIM_OC4_SetConfig+0xc4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_OC4_SetConfig+0x78>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <TIM_OC4_SetConfig+0xc8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC4_SetConfig+0x78>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a16      	ldr	r2, [pc, #88]	; (8006a1c <TIM_OC4_SetConfig+0xcc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d109      	bne.n	80069dc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <TIM_OC4_SetConfig+0xd0>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	019b      	lsls	r3, r3, #6
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b006      	add	sp, #24
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	ffffefff 	.word	0xffffefff
 8006a04:	ffff8fff 	.word	0xffff8fff
 8006a08:	fffffcff 	.word	0xfffffcff
 8006a0c:	ffffdfff 	.word	0xffffdfff
 8006a10:	40012c00 	.word	0x40012c00
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800
 8006a20:	ffffbfff 	.word	0xffffbfff

08006a24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	2201      	movs	r2, #1
 8006a38:	4393      	bics	r3, r2
 8006a3a:	001a      	movs	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <TIM_TI1_SetConfig+0xac>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00c      	beq.n	8006a6e <TIM_TI1_SetConfig+0x4a>
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	05db      	lsls	r3, r3, #23
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d007      	beq.n	8006a6e <TIM_TI1_SetConfig+0x4a>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a1c      	ldr	r2, [pc, #112]	; (8006ad4 <TIM_TI1_SetConfig+0xb0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_TI1_SetConfig+0x4a>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a1b      	ldr	r2, [pc, #108]	; (8006ad8 <TIM_TI1_SetConfig+0xb4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d101      	bne.n	8006a72 <TIM_TI1_SetConfig+0x4e>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <TIM_TI1_SetConfig+0x50>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	4393      	bics	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e003      	b.n	8006a92 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	22f0      	movs	r2, #240	; 0xf0
 8006a96:	4393      	bics	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	22ff      	movs	r2, #255	; 0xff
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	220a      	movs	r2, #10
 8006aac:	4393      	bics	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	220a      	movs	r2, #10
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	46c0      	nop			; (mov r8, r8)
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b006      	add	sp, #24
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40014000 	.word	0x40014000

08006adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	2201      	movs	r2, #1
 8006af4:	4393      	bics	r3, r2
 8006af6:	001a      	movs	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	22f0      	movs	r2, #240	; 0xf0
 8006b06:	4393      	bics	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	220a      	movs	r2, #10
 8006b18:	4393      	bics	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b006      	add	sp, #24
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	4393      	bics	r3, r2
 8006b4e:	001a      	movs	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <TIM_TI2_SetConfig+0x7c>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4a10      	ldr	r2, [pc, #64]	; (8006bb8 <TIM_TI2_SetConfig+0x80>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	031b      	lsls	r3, r3, #12
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	0c1b      	lsrs	r3, r3, #16
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	22a0      	movs	r2, #160	; 0xa0
 8006b8c:	4393      	bics	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	22a0      	movs	r2, #160	; 0xa0
 8006b96:	4013      	ands	r3, r2
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	621a      	str	r2, [r3, #32]
}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b006      	add	sp, #24
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	fffffcff 	.word	0xfffffcff
 8006bb8:	ffff0fff 	.word	0xffff0fff

08006bbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	2210      	movs	r2, #16
 8006bce:	4393      	bics	r3, r2
 8006bd0:	001a      	movs	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <TIM_TI2_ConfigInputStage+0x60>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	031b      	lsls	r3, r3, #12
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	22a0      	movs	r2, #160	; 0xa0
 8006bf8:	4393      	bics	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	621a      	str	r2, [r3, #32]
}
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b006      	add	sp, #24
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	ffff0fff 	.word	0xffff0fff

08006c20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <TIM_TI3_SetConfig+0x78>)
 8006c34:	401a      	ands	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	4393      	bics	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	22f0      	movs	r2, #240	; 0xf0
 8006c5a:	4393      	bics	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	22ff      	movs	r2, #255	; 0xff
 8006c64:	4013      	ands	r3, r2
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4a0b      	ldr	r2, [pc, #44]	; (8006c9c <TIM_TI3_SetConfig+0x7c>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	021a      	lsls	r2, r3, #8
 8006c78:	23a0      	movs	r3, #160	; 0xa0
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	46c0      	nop			; (mov r8, r8)
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b006      	add	sp, #24
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	fffffeff 	.word	0xfffffeff
 8006c9c:	fffff5ff 	.word	0xfffff5ff

08006ca0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	4a1a      	ldr	r2, [pc, #104]	; (8006d1c <TIM_TI4_SetConfig+0x7c>)
 8006cb4:	401a      	ands	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <TIM_TI4_SetConfig+0x80>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	4a12      	ldr	r2, [pc, #72]	; (8006d24 <TIM_TI4_SetConfig+0x84>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	031b      	lsls	r3, r3, #12
 8006ce4:	041b      	lsls	r3, r3, #16
 8006ce6:	0c1b      	lsrs	r3, r3, #16
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4a0d      	ldr	r2, [pc, #52]	; (8006d28 <TIM_TI4_SetConfig+0x88>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	031a      	lsls	r2, r3, #12
 8006cfa:	23a0      	movs	r3, #160	; 0xa0
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	4013      	ands	r3, r2
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b006      	add	sp, #24
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	ffffefff 	.word	0xffffefff
 8006d20:	fffffcff 	.word	0xfffffcff
 8006d24:	ffff0fff 	.word	0xffff0fff
 8006d28:	ffff5fff 	.word	0xffff5fff

08006d2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2270      	movs	r2, #112	; 0x70
 8006d40:	4393      	bics	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	2207      	movs	r2, #7
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	609a      	str	r2, [r3, #8]
}
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b004      	add	sp, #16
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <TIM_ETR_SetConfig+0x3c>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b006      	add	sp, #24
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	ffff00ff 	.word	0xffff00ff

08006da0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	221f      	movs	r2, #31
 8006db0:	4013      	ands	r3, r2
 8006db2:	2201      	movs	r2, #1
 8006db4:	409a      	lsls	r2, r3
 8006db6:	0013      	movs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	43d2      	mvns	r2, r2
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1a      	ldr	r2, [r3, #32]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	211f      	movs	r1, #31
 8006dd0:	400b      	ands	r3, r1
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	4099      	lsls	r1, r3
 8006dd6:	000b      	movs	r3, r1
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	46bd      	mov	sp, r7
 8006de2:	b006      	add	sp, #24
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	223c      	movs	r2, #60	; 0x3c
 8006df6:	5c9b      	ldrb	r3, [r3, r2]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e047      	b.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	223c      	movs	r2, #60	; 0x3c
 8006e04:	2101      	movs	r1, #1
 8006e06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	223d      	movs	r2, #61	; 0x3d
 8006e0c:	2102      	movs	r1, #2
 8006e0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2270      	movs	r2, #112	; 0x70
 8006e24:	4393      	bics	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00f      	beq.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	2380      	movs	r3, #128	; 0x80
 8006e4a:	05db      	lsls	r3, r3, #23
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d009      	beq.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a11      	ldr	r2, [pc, #68]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d004      	beq.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a10      	ldr	r2, [pc, #64]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d10c      	bne.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2280      	movs	r2, #128	; 0x80
 8006e68:	4393      	bics	r3, r2
 8006e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	223d      	movs	r2, #61	; 0x3d
 8006e82:	2101      	movs	r1, #1
 8006e84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	223c      	movs	r2, #60	; 0x3c
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	0018      	movs	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b004      	add	sp, #16
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40014000 	.word	0x40014000

08006ea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	223c      	movs	r2, #60	; 0x3c
 8006eb6:	5c9b      	ldrb	r3, [r3, r2]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e03e      	b.n	8006f3e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	223c      	movs	r2, #60	; 0x3c
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	22ff      	movs	r2, #255	; 0xff
 8006ecc:	4393      	bics	r3, r2
 8006ece:	001a      	movs	r2, r3
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4a1b      	ldr	r2, [pc, #108]	; (8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006edc:	401a      	ands	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006eea:	401a      	ands	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006ef8:	401a      	ands	r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006f06:	401a      	ands	r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4a11      	ldr	r2, [pc, #68]	; (8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006f14:	401a      	ands	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4a0e      	ldr	r2, [pc, #56]	; (8006f5c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006f22:	401a      	ands	r2, r3
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	223c      	movs	r2, #60	; 0x3c
 8006f38:	2100      	movs	r1, #0
 8006f3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	0018      	movs	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	b004      	add	sp, #16
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	46c0      	nop			; (mov r8, r8)
 8006f48:	fffffcff 	.word	0xfffffcff
 8006f4c:	fffffbff 	.word	0xfffffbff
 8006f50:	fffff7ff 	.word	0xfffff7ff
 8006f54:	ffffefff 	.word	0xffffefff
 8006f58:	ffffdfff 	.word	0xffffdfff
 8006f5c:	ffffbfff 	.word	0xffffbfff

08006f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f68:	46c0      	nop			; (mov r8, r8)
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	b002      	add	sp, #8
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b002      	add	sp, #8
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e044      	b.n	800701c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d107      	bne.n	8006faa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2278      	movs	r2, #120	; 0x78
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f7fc feef 	bl	8003d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2224      	movs	r2, #36	; 0x24
 8006fae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2101      	movs	r1, #1
 8006fbc:	438a      	bics	r2, r1
 8006fbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 fc2c 	bl	8007820 <UART_SetConfig>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d101      	bne.n	8006fd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e024      	b.n	800701c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f000 fe07 	bl	8007bf0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	490d      	ldr	r1, [pc, #52]	; (8007024 <HAL_UART_Init+0xa4>)
 8006fee:	400a      	ands	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	212a      	movs	r1, #42	; 0x2a
 8006ffe:	438a      	bics	r2, r1
 8007000:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2101      	movs	r1, #1
 800700e:	430a      	orrs	r2, r1
 8007010:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	0018      	movs	r0, r3
 8007016:	f000 fe9f 	bl	8007d58 <UART_CheckIdleState>
 800701a:	0003      	movs	r3, r0
}
 800701c:	0018      	movs	r0, r3
 800701e:	46bd      	mov	sp, r7
 8007020:	b002      	add	sp, #8
 8007022:	bd80      	pop	{r7, pc}
 8007024:	ffffb7ff 	.word	0xffffb7ff

08007028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af02      	add	r7, sp, #8
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	1dbb      	adds	r3, r7, #6
 8007036:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703c:	2b20      	cmp	r3, #32
 800703e:	d000      	beq.n	8007042 <HAL_UART_Transmit+0x1a>
 8007040:	e08d      	b.n	800715e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_UART_Transmit+0x28>
 8007048:	1dbb      	adds	r3, r7, #6
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e085      	b.n	8007160 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	015b      	lsls	r3, r3, #5
 800705c:	429a      	cmp	r2, r3
 800705e:	d109      	bne.n	8007074 <HAL_UART_Transmit+0x4c>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d105      	bne.n	8007074 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2201      	movs	r2, #1
 800706c:	4013      	ands	r3, r2
 800706e:	d001      	beq.n	8007074 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e075      	b.n	8007160 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2284      	movs	r2, #132	; 0x84
 8007078:	2100      	movs	r1, #0
 800707a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2221      	movs	r2, #33	; 0x21
 8007080:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007082:	f7fc ff5b 	bl	8003f3c <HAL_GetTick>
 8007086:	0003      	movs	r3, r0
 8007088:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	1dba      	adds	r2, r7, #6
 800708e:	2150      	movs	r1, #80	; 0x50
 8007090:	8812      	ldrh	r2, [r2, #0]
 8007092:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	1dba      	adds	r2, r7, #6
 8007098:	2152      	movs	r1, #82	; 0x52
 800709a:	8812      	ldrh	r2, [r2, #0]
 800709c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	015b      	lsls	r3, r3, #5
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d108      	bne.n	80070bc <HAL_UART_Transmit+0x94>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d104      	bne.n	80070bc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	e003      	b.n	80070c4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070c4:	e030      	b.n	8007128 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	0013      	movs	r3, r2
 80070d0:	2200      	movs	r2, #0
 80070d2:	2180      	movs	r1, #128	; 0x80
 80070d4:	f000 fee8 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 80070d8:	1e03      	subs	r3, r0, #0
 80070da:	d004      	beq.n	80070e6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e03c      	b.n	8007160 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	881a      	ldrh	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	05d2      	lsls	r2, r2, #23
 80070f6:	0dd2      	lsrs	r2, r2, #23
 80070f8:	b292      	uxth	r2, r2
 80070fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	3302      	adds	r3, #2
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	e008      	b.n	8007116 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	781a      	ldrb	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	b292      	uxth	r2, r2
 800710e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	3301      	adds	r3, #1
 8007114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2252      	movs	r2, #82	; 0x52
 800711a:	5a9b      	ldrh	r3, [r3, r2]
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b299      	uxth	r1, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2252      	movs	r2, #82	; 0x52
 8007126:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2252      	movs	r2, #82	; 0x52
 800712c:	5a9b      	ldrh	r3, [r3, r2]
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1c8      	bne.n	80070c6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	0013      	movs	r3, r2
 800713e:	2200      	movs	r2, #0
 8007140:	2140      	movs	r1, #64	; 0x40
 8007142:	f000 feb1 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007146:	1e03      	subs	r3, r0, #0
 8007148:	d004      	beq.n	8007154 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e005      	b.n	8007160 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	e000      	b.n	8007160 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800715e:	2302      	movs	r3, #2
  }
}
 8007160:	0018      	movs	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	b008      	add	sp, #32
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	1dbb      	adds	r3, r7, #6
 8007174:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2280      	movs	r2, #128	; 0x80
 800717a:	589b      	ldr	r3, [r3, r2]
 800717c:	2b20      	cmp	r3, #32
 800717e:	d145      	bne.n	800720c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_UART_Receive_IT+0x26>
 8007186:	1dbb      	adds	r3, r7, #6
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e03d      	b.n	800720e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	2380      	movs	r3, #128	; 0x80
 8007198:	015b      	lsls	r3, r3, #5
 800719a:	429a      	cmp	r2, r3
 800719c:	d109      	bne.n	80071b2 <HAL_UART_Receive_IT+0x4a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d105      	bne.n	80071b2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2201      	movs	r2, #1
 80071aa:	4013      	ands	r3, r2
 80071ac:	d001      	beq.n	80071b2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e02d      	b.n	800720e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	2380      	movs	r3, #128	; 0x80
 80071c0:	041b      	lsls	r3, r3, #16
 80071c2:	4013      	ands	r3, r2
 80071c4:	d019      	beq.n	80071fa <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c6:	f3ef 8310 	mrs	r3, PRIMASK
 80071ca:	613b      	str	r3, [r7, #16]
  return(result);
 80071cc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	2301      	movs	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f383 8810 	msr	PRIMASK, r3
}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2180      	movs	r1, #128	; 0x80
 80071e8:	04c9      	lsls	r1, r1, #19
 80071ea:	430a      	orrs	r2, r1
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f383 8810 	msr	PRIMASK, r3
}
 80071f8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071fa:	1dbb      	adds	r3, r7, #6
 80071fc:	881a      	ldrh	r2, [r3, #0]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	0018      	movs	r0, r3
 8007204:	f000 feba 	bl	8007f7c <UART_Start_Receive_IT>
 8007208:	0003      	movs	r3, r0
 800720a:	e000      	b.n	800720e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800720c:	2302      	movs	r3, #2
  }
}
 800720e:	0018      	movs	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	b008      	add	sp, #32
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007218:	b590      	push	{r4, r7, lr}
 800721a:	b0ab      	sub	sp, #172	; 0xac
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	22a4      	movs	r2, #164	; 0xa4
 8007228:	18b9      	adds	r1, r7, r2
 800722a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	20a0      	movs	r0, #160	; 0xa0
 8007234:	1839      	adds	r1, r7, r0
 8007236:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	219c      	movs	r1, #156	; 0x9c
 8007240:	1879      	adds	r1, r7, r1
 8007242:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007244:	0011      	movs	r1, r2
 8007246:	18bb      	adds	r3, r7, r2
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a99      	ldr	r2, [pc, #612]	; (80074b0 <HAL_UART_IRQHandler+0x298>)
 800724c:	4013      	ands	r3, r2
 800724e:	2298      	movs	r2, #152	; 0x98
 8007250:	18bc      	adds	r4, r7, r2
 8007252:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007254:	18bb      	adds	r3, r7, r2
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d114      	bne.n	8007286 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800725c:	187b      	adds	r3, r7, r1
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2220      	movs	r2, #32
 8007262:	4013      	ands	r3, r2
 8007264:	d00f      	beq.n	8007286 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007266:	183b      	adds	r3, r7, r0
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2220      	movs	r2, #32
 800726c:	4013      	ands	r3, r2
 800726e:	d00a      	beq.n	8007286 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007274:	2b00      	cmp	r3, #0
 8007276:	d100      	bne.n	800727a <HAL_UART_IRQHandler+0x62>
 8007278:	e29e      	b.n	80077b8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	0010      	movs	r0, r2
 8007282:	4798      	blx	r3
      }
      return;
 8007284:	e298      	b.n	80077b8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007286:	2398      	movs	r3, #152	; 0x98
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d100      	bne.n	8007292 <HAL_UART_IRQHandler+0x7a>
 8007290:	e114      	b.n	80074bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007292:	239c      	movs	r3, #156	; 0x9c
 8007294:	18fb      	adds	r3, r7, r3
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2201      	movs	r2, #1
 800729a:	4013      	ands	r3, r2
 800729c:	d106      	bne.n	80072ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800729e:	23a0      	movs	r3, #160	; 0xa0
 80072a0:	18fb      	adds	r3, r7, r3
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a83      	ldr	r2, [pc, #524]	; (80074b4 <HAL_UART_IRQHandler+0x29c>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	d100      	bne.n	80072ac <HAL_UART_IRQHandler+0x94>
 80072aa:	e107      	b.n	80074bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072ac:	23a4      	movs	r3, #164	; 0xa4
 80072ae:	18fb      	adds	r3, r7, r3
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2201      	movs	r2, #1
 80072b4:	4013      	ands	r3, r2
 80072b6:	d012      	beq.n	80072de <HAL_UART_IRQHandler+0xc6>
 80072b8:	23a0      	movs	r3, #160	; 0xa0
 80072ba:	18fb      	adds	r3, r7, r3
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	2380      	movs	r3, #128	; 0x80
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4013      	ands	r3, r2
 80072c4:	d00b      	beq.n	80072de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2201      	movs	r2, #1
 80072cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2284      	movs	r2, #132	; 0x84
 80072d2:	589b      	ldr	r3, [r3, r2]
 80072d4:	2201      	movs	r2, #1
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2184      	movs	r1, #132	; 0x84
 80072dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072de:	23a4      	movs	r3, #164	; 0xa4
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2202      	movs	r2, #2
 80072e6:	4013      	ands	r3, r2
 80072e8:	d011      	beq.n	800730e <HAL_UART_IRQHandler+0xf6>
 80072ea:	239c      	movs	r3, #156	; 0x9c
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2201      	movs	r2, #1
 80072f2:	4013      	ands	r3, r2
 80072f4:	d00b      	beq.n	800730e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2202      	movs	r2, #2
 80072fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2284      	movs	r2, #132	; 0x84
 8007302:	589b      	ldr	r3, [r3, r2]
 8007304:	2204      	movs	r2, #4
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2184      	movs	r1, #132	; 0x84
 800730c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800730e:	23a4      	movs	r3, #164	; 0xa4
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2204      	movs	r2, #4
 8007316:	4013      	ands	r3, r2
 8007318:	d011      	beq.n	800733e <HAL_UART_IRQHandler+0x126>
 800731a:	239c      	movs	r3, #156	; 0x9c
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2201      	movs	r2, #1
 8007322:	4013      	ands	r3, r2
 8007324:	d00b      	beq.n	800733e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2204      	movs	r2, #4
 800732c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2284      	movs	r2, #132	; 0x84
 8007332:	589b      	ldr	r3, [r3, r2]
 8007334:	2202      	movs	r2, #2
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2184      	movs	r1, #132	; 0x84
 800733c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800733e:	23a4      	movs	r3, #164	; 0xa4
 8007340:	18fb      	adds	r3, r7, r3
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2208      	movs	r2, #8
 8007346:	4013      	ands	r3, r2
 8007348:	d017      	beq.n	800737a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800734a:	23a0      	movs	r3, #160	; 0xa0
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2220      	movs	r2, #32
 8007352:	4013      	ands	r3, r2
 8007354:	d105      	bne.n	8007362 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007356:	239c      	movs	r3, #156	; 0x9c
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2201      	movs	r2, #1
 800735e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007360:	d00b      	beq.n	800737a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2208      	movs	r2, #8
 8007368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2284      	movs	r2, #132	; 0x84
 800736e:	589b      	ldr	r3, [r3, r2]
 8007370:	2208      	movs	r2, #8
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2184      	movs	r1, #132	; 0x84
 8007378:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800737a:	23a4      	movs	r3, #164	; 0xa4
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	2380      	movs	r3, #128	; 0x80
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	4013      	ands	r3, r2
 8007386:	d013      	beq.n	80073b0 <HAL_UART_IRQHandler+0x198>
 8007388:	23a0      	movs	r3, #160	; 0xa0
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	2380      	movs	r3, #128	; 0x80
 8007390:	04db      	lsls	r3, r3, #19
 8007392:	4013      	ands	r3, r2
 8007394:	d00c      	beq.n	80073b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2280      	movs	r2, #128	; 0x80
 800739c:	0112      	lsls	r2, r2, #4
 800739e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2284      	movs	r2, #132	; 0x84
 80073a4:	589b      	ldr	r3, [r3, r2]
 80073a6:	2220      	movs	r2, #32
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2184      	movs	r1, #132	; 0x84
 80073ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2284      	movs	r2, #132	; 0x84
 80073b4:	589b      	ldr	r3, [r3, r2]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d100      	bne.n	80073bc <HAL_UART_IRQHandler+0x1a4>
 80073ba:	e1ff      	b.n	80077bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80073bc:	23a4      	movs	r3, #164	; 0xa4
 80073be:	18fb      	adds	r3, r7, r3
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2220      	movs	r2, #32
 80073c4:	4013      	ands	r3, r2
 80073c6:	d00e      	beq.n	80073e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073c8:	23a0      	movs	r3, #160	; 0xa0
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2220      	movs	r2, #32
 80073d0:	4013      	ands	r3, r2
 80073d2:	d008      	beq.n	80073e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	0010      	movs	r0, r2
 80073e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2284      	movs	r2, #132	; 0x84
 80073ea:	589b      	ldr	r3, [r3, r2]
 80073ec:	2194      	movs	r1, #148	; 0x94
 80073ee:	187a      	adds	r2, r7, r1
 80073f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2240      	movs	r2, #64	; 0x40
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d004      	beq.n	800740a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007400:	187b      	adds	r3, r7, r1
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2228      	movs	r2, #40	; 0x28
 8007406:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007408:	d047      	beq.n	800749a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	0018      	movs	r0, r3
 800740e:	f000 fe7f 	bl	8008110 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2240      	movs	r2, #64	; 0x40
 800741a:	4013      	ands	r3, r2
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d137      	bne.n	8007490 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007420:	f3ef 8310 	mrs	r3, PRIMASK
 8007424:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007428:	2090      	movs	r0, #144	; 0x90
 800742a:	183a      	adds	r2, r7, r0
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	2301      	movs	r3, #1
 8007430:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007434:	f383 8810 	msr	PRIMASK, r3
}
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	438a      	bics	r2, r1
 8007448:	609a      	str	r2, [r3, #8]
 800744a:	183b      	adds	r3, r7, r0
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007452:	f383 8810 	msr	PRIMASK, r3
}
 8007456:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745c:	2b00      	cmp	r3, #0
 800745e:	d012      	beq.n	8007486 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007464:	4a14      	ldr	r2, [pc, #80]	; (80074b8 <HAL_UART_IRQHandler+0x2a0>)
 8007466:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746c:	0018      	movs	r0, r3
 800746e:	f7fd fa73 	bl	8004958 <HAL_DMA_Abort_IT>
 8007472:	1e03      	subs	r3, r0, #0
 8007474:	d01a      	beq.n	80074ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007480:	0018      	movs	r0, r3
 8007482:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	e012      	b.n	80074ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	0018      	movs	r0, r3
 800748a:	f000 f9b5 	bl	80077f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748e:	e00d      	b.n	80074ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	0018      	movs	r0, r3
 8007494:	f000 f9b0 	bl	80077f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	e008      	b.n	80074ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	0018      	movs	r0, r3
 800749e:	f000 f9ab 	bl	80077f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2284      	movs	r2, #132	; 0x84
 80074a6:	2100      	movs	r1, #0
 80074a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80074aa:	e187      	b.n	80077bc <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ac:	46c0      	nop			; (mov r8, r8)
    return;
 80074ae:	e185      	b.n	80077bc <HAL_UART_IRQHandler+0x5a4>
 80074b0:	0000080f 	.word	0x0000080f
 80074b4:	04000120 	.word	0x04000120
 80074b8:	080081d9 	.word	0x080081d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d000      	beq.n	80074c6 <HAL_UART_IRQHandler+0x2ae>
 80074c4:	e139      	b.n	800773a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074c6:	23a4      	movs	r3, #164	; 0xa4
 80074c8:	18fb      	adds	r3, r7, r3
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2210      	movs	r2, #16
 80074ce:	4013      	ands	r3, r2
 80074d0:	d100      	bne.n	80074d4 <HAL_UART_IRQHandler+0x2bc>
 80074d2:	e132      	b.n	800773a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074d4:	23a0      	movs	r3, #160	; 0xa0
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2210      	movs	r2, #16
 80074dc:	4013      	ands	r3, r2
 80074de:	d100      	bne.n	80074e2 <HAL_UART_IRQHandler+0x2ca>
 80074e0:	e12b      	b.n	800773a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2210      	movs	r2, #16
 80074e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2240      	movs	r2, #64	; 0x40
 80074f2:	4013      	ands	r3, r2
 80074f4:	2b40      	cmp	r3, #64	; 0x40
 80074f6:	d000      	beq.n	80074fa <HAL_UART_IRQHandler+0x2e2>
 80074f8:	e09f      	b.n	800763a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	217e      	movs	r1, #126	; 0x7e
 8007504:	187b      	adds	r3, r7, r1
 8007506:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007508:	187b      	adds	r3, r7, r1
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d100      	bne.n	8007512 <HAL_UART_IRQHandler+0x2fa>
 8007510:	e156      	b.n	80077c0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2258      	movs	r2, #88	; 0x58
 8007516:	5a9b      	ldrh	r3, [r3, r2]
 8007518:	187a      	adds	r2, r7, r1
 800751a:	8812      	ldrh	r2, [r2, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d300      	bcc.n	8007522 <HAL_UART_IRQHandler+0x30a>
 8007520:	e14e      	b.n	80077c0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	187a      	adds	r2, r7, r1
 8007526:	215a      	movs	r1, #90	; 0x5a
 8007528:	8812      	ldrh	r2, [r2, #0]
 800752a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b20      	cmp	r3, #32
 8007534:	d06f      	beq.n	8007616 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007536:	f3ef 8310 	mrs	r3, PRIMASK
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800753e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007540:	2301      	movs	r3, #1
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	f383 8810 	msr	PRIMASK, r3
}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	499e      	ldr	r1, [pc, #632]	; (80077d0 <HAL_UART_IRQHandler+0x5b8>)
 8007558:	400a      	ands	r2, r1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800755e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	f383 8810 	msr	PRIMASK, r3
}
 8007566:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007568:	f3ef 8310 	mrs	r3, PRIMASK
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800756e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	677b      	str	r3, [r7, #116]	; 0x74
 8007572:	2301      	movs	r3, #1
 8007574:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007578:	f383 8810 	msr	PRIMASK, r3
}
 800757c:	46c0      	nop			; (mov r8, r8)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2101      	movs	r1, #1
 800758a:	438a      	bics	r2, r1
 800758c:	609a      	str	r2, [r3, #8]
 800758e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007590:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007594:	f383 8810 	msr	PRIMASK, r3
}
 8007598:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800759a:	f3ef 8310 	mrs	r3, PRIMASK
 800759e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80075a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075a2:	673b      	str	r3, [r7, #112]	; 0x70
 80075a4:	2301      	movs	r3, #1
 80075a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075aa:	f383 8810 	msr	PRIMASK, r3
}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2140      	movs	r1, #64	; 0x40
 80075bc:	438a      	bics	r2, r1
 80075be:	609a      	str	r2, [r3, #8]
 80075c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c6:	f383 8810 	msr	PRIMASK, r3
}
 80075ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2280      	movs	r2, #128	; 0x80
 80075d0:	2120      	movs	r1, #32
 80075d2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075da:	f3ef 8310 	mrs	r3, PRIMASK
 80075de:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80075e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075e4:	2301      	movs	r3, #1
 80075e6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075ea:	f383 8810 	msr	PRIMASK, r3
}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2110      	movs	r1, #16
 80075fc:	438a      	bics	r2, r1
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007606:	f383 8810 	msr	PRIMASK, r3
}
 800760a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007610:	0018      	movs	r0, r3
 8007612:	f7fd f969 	bl	80048e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2258      	movs	r2, #88	; 0x58
 8007620:	5a9a      	ldrh	r2, [r3, r2]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	215a      	movs	r1, #90	; 0x5a
 8007626:	5a5b      	ldrh	r3, [r3, r1]
 8007628:	b29b      	uxth	r3, r3
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	b29a      	uxth	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0011      	movs	r1, r2
 8007632:	0018      	movs	r0, r3
 8007634:	f000 f8e8 	bl	8007808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007638:	e0c2      	b.n	80077c0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2258      	movs	r2, #88	; 0x58
 800763e:	5a99      	ldrh	r1, [r3, r2]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	225a      	movs	r2, #90	; 0x5a
 8007644:	5a9b      	ldrh	r3, [r3, r2]
 8007646:	b29a      	uxth	r2, r3
 8007648:	208e      	movs	r0, #142	; 0x8e
 800764a:	183b      	adds	r3, r7, r0
 800764c:	1a8a      	subs	r2, r1, r2
 800764e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	225a      	movs	r2, #90	; 0x5a
 8007654:	5a9b      	ldrh	r3, [r3, r2]
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d100      	bne.n	800765e <HAL_UART_IRQHandler+0x446>
 800765c:	e0b2      	b.n	80077c4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800765e:	183b      	adds	r3, r7, r0
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d100      	bne.n	8007668 <HAL_UART_IRQHandler+0x450>
 8007666:	e0ad      	b.n	80077c4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007668:	f3ef 8310 	mrs	r3, PRIMASK
 800766c:	60fb      	str	r3, [r7, #12]
  return(result);
 800766e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007670:	2488      	movs	r4, #136	; 0x88
 8007672:	193a      	adds	r2, r7, r4
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	2301      	movs	r3, #1
 8007678:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f383 8810 	msr	PRIMASK, r3
}
 8007680:	46c0      	nop			; (mov r8, r8)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4951      	ldr	r1, [pc, #324]	; (80077d4 <HAL_UART_IRQHandler+0x5bc>)
 800768e:	400a      	ands	r2, r1
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	193b      	adds	r3, r7, r4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f383 8810 	msr	PRIMASK, r3
}
 800769e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a0:	f3ef 8310 	mrs	r3, PRIMASK
 80076a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80076a6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a8:	2484      	movs	r4, #132	; 0x84
 80076aa:	193a      	adds	r2, r7, r4
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	2301      	movs	r3, #1
 80076b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f383 8810 	msr	PRIMASK, r3
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2101      	movs	r1, #1
 80076c6:	438a      	bics	r2, r1
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	193b      	adds	r3, r7, r4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	f383 8810 	msr	PRIMASK, r3
}
 80076d6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2280      	movs	r2, #128	; 0x80
 80076dc:	2120      	movs	r1, #32
 80076de:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ec:	f3ef 8310 	mrs	r3, PRIMASK
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f4:	2480      	movs	r4, #128	; 0x80
 80076f6:	193a      	adds	r2, r7, r4
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	2301      	movs	r3, #1
 80076fc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	f383 8810 	msr	PRIMASK, r3
}
 8007704:	46c0      	nop			; (mov r8, r8)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2110      	movs	r1, #16
 8007712:	438a      	bics	r2, r1
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	193b      	adds	r3, r7, r4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	f383 8810 	msr	PRIMASK, r3
}
 8007722:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800772a:	183b      	adds	r3, r7, r0
 800772c:	881a      	ldrh	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	0011      	movs	r1, r2
 8007732:	0018      	movs	r0, r3
 8007734:	f000 f868 	bl	8007808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007738:	e044      	b.n	80077c4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800773a:	23a4      	movs	r3, #164	; 0xa4
 800773c:	18fb      	adds	r3, r7, r3
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	2380      	movs	r3, #128	; 0x80
 8007742:	035b      	lsls	r3, r3, #13
 8007744:	4013      	ands	r3, r2
 8007746:	d010      	beq.n	800776a <HAL_UART_IRQHandler+0x552>
 8007748:	239c      	movs	r3, #156	; 0x9c
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	2380      	movs	r3, #128	; 0x80
 8007750:	03db      	lsls	r3, r3, #15
 8007752:	4013      	ands	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2280      	movs	r2, #128	; 0x80
 800775c:	0352      	lsls	r2, r2, #13
 800775e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	0018      	movs	r0, r3
 8007764:	f000 ff32 	bl	80085cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007768:	e02f      	b.n	80077ca <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800776a:	23a4      	movs	r3, #164	; 0xa4
 800776c:	18fb      	adds	r3, r7, r3
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2280      	movs	r2, #128	; 0x80
 8007772:	4013      	ands	r3, r2
 8007774:	d00f      	beq.n	8007796 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007776:	23a0      	movs	r3, #160	; 0xa0
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2280      	movs	r2, #128	; 0x80
 800777e:	4013      	ands	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d01e      	beq.n	80077c8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	0010      	movs	r0, r2
 8007792:	4798      	blx	r3
    }
    return;
 8007794:	e018      	b.n	80077c8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007796:	23a4      	movs	r3, #164	; 0xa4
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2240      	movs	r2, #64	; 0x40
 800779e:	4013      	ands	r3, r2
 80077a0:	d013      	beq.n	80077ca <HAL_UART_IRQHandler+0x5b2>
 80077a2:	23a0      	movs	r3, #160	; 0xa0
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2240      	movs	r2, #64	; 0x40
 80077aa:	4013      	ands	r3, r2
 80077ac:	d00d      	beq.n	80077ca <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	0018      	movs	r0, r3
 80077b2:	f000 fd28 	bl	8008206 <UART_EndTransmit_IT>
    return;
 80077b6:	e008      	b.n	80077ca <HAL_UART_IRQHandler+0x5b2>
      return;
 80077b8:	46c0      	nop			; (mov r8, r8)
 80077ba:	e006      	b.n	80077ca <HAL_UART_IRQHandler+0x5b2>
    return;
 80077bc:	46c0      	nop			; (mov r8, r8)
 80077be:	e004      	b.n	80077ca <HAL_UART_IRQHandler+0x5b2>
      return;
 80077c0:	46c0      	nop			; (mov r8, r8)
 80077c2:	e002      	b.n	80077ca <HAL_UART_IRQHandler+0x5b2>
      return;
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	e000      	b.n	80077ca <HAL_UART_IRQHandler+0x5b2>
    return;
 80077c8:	46c0      	nop			; (mov r8, r8)
  }

}
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b02b      	add	sp, #172	; 0xac
 80077ce:	bd90      	pop	{r4, r7, pc}
 80077d0:	fffffeff 	.word	0xfffffeff
 80077d4:	fffffedf 	.word	0xfffffedf

080077d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b002      	add	sp, #8
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80077f0:	46c0      	nop			; (mov r8, r8)
 80077f2:	46bd      	mov	sp, r7
 80077f4:	b002      	add	sp, #8
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007800:	46c0      	nop			; (mov r8, r8)
 8007802:	46bd      	mov	sp, r7
 8007804:	b002      	add	sp, #8
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	000a      	movs	r2, r1
 8007812:	1cbb      	adds	r3, r7, #2
 8007814:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b002      	add	sp, #8
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007828:	231e      	movs	r3, #30
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4abe      	ldr	r2, [pc, #760]	; (8007b48 <UART_SetConfig+0x328>)
 8007850:	4013      	ands	r3, r2
 8007852:	0019      	movs	r1, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	430a      	orrs	r2, r1
 800785c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4ab9      	ldr	r2, [pc, #740]	; (8007b4c <UART_SetConfig+0x32c>)
 8007866:	4013      	ands	r3, r2
 8007868:	0019      	movs	r1, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4ab0      	ldr	r2, [pc, #704]	; (8007b50 <UART_SetConfig+0x330>)
 800788e:	4013      	ands	r3, r2
 8007890:	0019      	movs	r1, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	430a      	orrs	r2, r1
 800789a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4aac      	ldr	r2, [pc, #688]	; (8007b54 <UART_SetConfig+0x334>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d127      	bne.n	80078f6 <UART_SetConfig+0xd6>
 80078a6:	4bac      	ldr	r3, [pc, #688]	; (8007b58 <UART_SetConfig+0x338>)
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	2203      	movs	r2, #3
 80078ac:	4013      	ands	r3, r2
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d00d      	beq.n	80078ce <UART_SetConfig+0xae>
 80078b2:	d81b      	bhi.n	80078ec <UART_SetConfig+0xcc>
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d014      	beq.n	80078e2 <UART_SetConfig+0xc2>
 80078b8:	d818      	bhi.n	80078ec <UART_SetConfig+0xcc>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <UART_SetConfig+0xa4>
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d00a      	beq.n	80078d8 <UART_SetConfig+0xb8>
 80078c2:	e013      	b.n	80078ec <UART_SetConfig+0xcc>
 80078c4:	231f      	movs	r3, #31
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	e0bd      	b.n	8007a4a <UART_SetConfig+0x22a>
 80078ce:	231f      	movs	r3, #31
 80078d0:	18fb      	adds	r3, r7, r3
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	e0b8      	b.n	8007a4a <UART_SetConfig+0x22a>
 80078d8:	231f      	movs	r3, #31
 80078da:	18fb      	adds	r3, r7, r3
 80078dc:	2204      	movs	r2, #4
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e0b3      	b.n	8007a4a <UART_SetConfig+0x22a>
 80078e2:	231f      	movs	r3, #31
 80078e4:	18fb      	adds	r3, r7, r3
 80078e6:	2208      	movs	r2, #8
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e0ae      	b.n	8007a4a <UART_SetConfig+0x22a>
 80078ec:	231f      	movs	r3, #31
 80078ee:	18fb      	adds	r3, r7, r3
 80078f0:	2210      	movs	r2, #16
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	e0a9      	b.n	8007a4a <UART_SetConfig+0x22a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a98      	ldr	r2, [pc, #608]	; (8007b5c <UART_SetConfig+0x33c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d134      	bne.n	800796a <UART_SetConfig+0x14a>
 8007900:	4b95      	ldr	r3, [pc, #596]	; (8007b58 <UART_SetConfig+0x338>)
 8007902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007904:	23c0      	movs	r3, #192	; 0xc0
 8007906:	029b      	lsls	r3, r3, #10
 8007908:	4013      	ands	r3, r2
 800790a:	22c0      	movs	r2, #192	; 0xc0
 800790c:	0292      	lsls	r2, r2, #10
 800790e:	4293      	cmp	r3, r2
 8007910:	d017      	beq.n	8007942 <UART_SetConfig+0x122>
 8007912:	22c0      	movs	r2, #192	; 0xc0
 8007914:	0292      	lsls	r2, r2, #10
 8007916:	4293      	cmp	r3, r2
 8007918:	d822      	bhi.n	8007960 <UART_SetConfig+0x140>
 800791a:	2280      	movs	r2, #128	; 0x80
 800791c:	0292      	lsls	r2, r2, #10
 800791e:	4293      	cmp	r3, r2
 8007920:	d019      	beq.n	8007956 <UART_SetConfig+0x136>
 8007922:	2280      	movs	r2, #128	; 0x80
 8007924:	0292      	lsls	r2, r2, #10
 8007926:	4293      	cmp	r3, r2
 8007928:	d81a      	bhi.n	8007960 <UART_SetConfig+0x140>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <UART_SetConfig+0x118>
 800792e:	2280      	movs	r2, #128	; 0x80
 8007930:	0252      	lsls	r2, r2, #9
 8007932:	4293      	cmp	r3, r2
 8007934:	d00a      	beq.n	800794c <UART_SetConfig+0x12c>
 8007936:	e013      	b.n	8007960 <UART_SetConfig+0x140>
 8007938:	231f      	movs	r3, #31
 800793a:	18fb      	adds	r3, r7, r3
 800793c:	2200      	movs	r2, #0
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e083      	b.n	8007a4a <UART_SetConfig+0x22a>
 8007942:	231f      	movs	r3, #31
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	2202      	movs	r2, #2
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e07e      	b.n	8007a4a <UART_SetConfig+0x22a>
 800794c:	231f      	movs	r3, #31
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	2204      	movs	r2, #4
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	e079      	b.n	8007a4a <UART_SetConfig+0x22a>
 8007956:	231f      	movs	r3, #31
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	2208      	movs	r2, #8
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	e074      	b.n	8007a4a <UART_SetConfig+0x22a>
 8007960:	231f      	movs	r3, #31
 8007962:	18fb      	adds	r3, r7, r3
 8007964:	2210      	movs	r2, #16
 8007966:	701a      	strb	r2, [r3, #0]
 8007968:	e06f      	b.n	8007a4a <UART_SetConfig+0x22a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a7c      	ldr	r2, [pc, #496]	; (8007b60 <UART_SetConfig+0x340>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d134      	bne.n	80079de <UART_SetConfig+0x1be>
 8007974:	4b78      	ldr	r3, [pc, #480]	; (8007b58 <UART_SetConfig+0x338>)
 8007976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007978:	23c0      	movs	r3, #192	; 0xc0
 800797a:	031b      	lsls	r3, r3, #12
 800797c:	4013      	ands	r3, r2
 800797e:	22c0      	movs	r2, #192	; 0xc0
 8007980:	0312      	lsls	r2, r2, #12
 8007982:	4293      	cmp	r3, r2
 8007984:	d017      	beq.n	80079b6 <UART_SetConfig+0x196>
 8007986:	22c0      	movs	r2, #192	; 0xc0
 8007988:	0312      	lsls	r2, r2, #12
 800798a:	4293      	cmp	r3, r2
 800798c:	d822      	bhi.n	80079d4 <UART_SetConfig+0x1b4>
 800798e:	2280      	movs	r2, #128	; 0x80
 8007990:	0312      	lsls	r2, r2, #12
 8007992:	4293      	cmp	r3, r2
 8007994:	d019      	beq.n	80079ca <UART_SetConfig+0x1aa>
 8007996:	2280      	movs	r2, #128	; 0x80
 8007998:	0312      	lsls	r2, r2, #12
 800799a:	4293      	cmp	r3, r2
 800799c:	d81a      	bhi.n	80079d4 <UART_SetConfig+0x1b4>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <UART_SetConfig+0x18c>
 80079a2:	2280      	movs	r2, #128	; 0x80
 80079a4:	02d2      	lsls	r2, r2, #11
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00a      	beq.n	80079c0 <UART_SetConfig+0x1a0>
 80079aa:	e013      	b.n	80079d4 <UART_SetConfig+0x1b4>
 80079ac:	231f      	movs	r3, #31
 80079ae:	18fb      	adds	r3, r7, r3
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e049      	b.n	8007a4a <UART_SetConfig+0x22a>
 80079b6:	231f      	movs	r3, #31
 80079b8:	18fb      	adds	r3, r7, r3
 80079ba:	2202      	movs	r2, #2
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e044      	b.n	8007a4a <UART_SetConfig+0x22a>
 80079c0:	231f      	movs	r3, #31
 80079c2:	18fb      	adds	r3, r7, r3
 80079c4:	2204      	movs	r2, #4
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	e03f      	b.n	8007a4a <UART_SetConfig+0x22a>
 80079ca:	231f      	movs	r3, #31
 80079cc:	18fb      	adds	r3, r7, r3
 80079ce:	2208      	movs	r2, #8
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	e03a      	b.n	8007a4a <UART_SetConfig+0x22a>
 80079d4:	231f      	movs	r3, #31
 80079d6:	18fb      	adds	r3, r7, r3
 80079d8:	2210      	movs	r2, #16
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e035      	b.n	8007a4a <UART_SetConfig+0x22a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a60      	ldr	r2, [pc, #384]	; (8007b64 <UART_SetConfig+0x344>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d104      	bne.n	80079f2 <UART_SetConfig+0x1d2>
 80079e8:	231f      	movs	r3, #31
 80079ea:	18fb      	adds	r3, r7, r3
 80079ec:	2200      	movs	r2, #0
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e02b      	b.n	8007a4a <UART_SetConfig+0x22a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a5c      	ldr	r2, [pc, #368]	; (8007b68 <UART_SetConfig+0x348>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d104      	bne.n	8007a06 <UART_SetConfig+0x1e6>
 80079fc:	231f      	movs	r3, #31
 80079fe:	18fb      	adds	r3, r7, r3
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	e021      	b.n	8007a4a <UART_SetConfig+0x22a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a58      	ldr	r2, [pc, #352]	; (8007b6c <UART_SetConfig+0x34c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d104      	bne.n	8007a1a <UART_SetConfig+0x1fa>
 8007a10:	231f      	movs	r3, #31
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e017      	b.n	8007a4a <UART_SetConfig+0x22a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a54      	ldr	r2, [pc, #336]	; (8007b70 <UART_SetConfig+0x350>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d104      	bne.n	8007a2e <UART_SetConfig+0x20e>
 8007a24:	231f      	movs	r3, #31
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	e00d      	b.n	8007a4a <UART_SetConfig+0x22a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a50      	ldr	r2, [pc, #320]	; (8007b74 <UART_SetConfig+0x354>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d104      	bne.n	8007a42 <UART_SetConfig+0x222>
 8007a38:	231f      	movs	r3, #31
 8007a3a:	18fb      	adds	r3, r7, r3
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	e003      	b.n	8007a4a <UART_SetConfig+0x22a>
 8007a42:	231f      	movs	r3, #31
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	2210      	movs	r2, #16
 8007a48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69da      	ldr	r2, [r3, #28]
 8007a4e:	2380      	movs	r3, #128	; 0x80
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d15c      	bne.n	8007b10 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8007a56:	231f      	movs	r3, #31
 8007a58:	18fb      	adds	r3, r7, r3
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d015      	beq.n	8007a8c <UART_SetConfig+0x26c>
 8007a60:	dc18      	bgt.n	8007a94 <UART_SetConfig+0x274>
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d00d      	beq.n	8007a82 <UART_SetConfig+0x262>
 8007a66:	dc15      	bgt.n	8007a94 <UART_SetConfig+0x274>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <UART_SetConfig+0x252>
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d005      	beq.n	8007a7c <UART_SetConfig+0x25c>
 8007a70:	e010      	b.n	8007a94 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a72:	f7fd fe45 	bl	8005700 <HAL_RCC_GetPCLK1Freq>
 8007a76:	0003      	movs	r3, r0
 8007a78:	61bb      	str	r3, [r7, #24]
        break;
 8007a7a:	e012      	b.n	8007aa2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a7c:	4b3e      	ldr	r3, [pc, #248]	; (8007b78 <UART_SetConfig+0x358>)
 8007a7e:	61bb      	str	r3, [r7, #24]
        break;
 8007a80:	e00f      	b.n	8007aa2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a82:	f7fd fdc1 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 8007a86:	0003      	movs	r3, r0
 8007a88:	61bb      	str	r3, [r7, #24]
        break;
 8007a8a:	e00a      	b.n	8007aa2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a8c:	2380      	movs	r3, #128	; 0x80
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	61bb      	str	r3, [r7, #24]
        break;
 8007a92:	e006      	b.n	8007aa2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a98:	231e      	movs	r3, #30
 8007a9a:	18fb      	adds	r3, r7, r3
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	701a      	strb	r2, [r3, #0]
        break;
 8007aa0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d100      	bne.n	8007aaa <UART_SetConfig+0x28a>
 8007aa8:	e095      	b.n	8007bd6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	005a      	lsls	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	085b      	lsrs	r3, r3, #1
 8007ab4:	18d2      	adds	r2, r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	0019      	movs	r1, r3
 8007abc:	0010      	movs	r0, r2
 8007abe:	f7f8 fb21 	bl	8000104 <__udivsi3>
 8007ac2:	0003      	movs	r3, r0
 8007ac4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b0f      	cmp	r3, #15
 8007aca:	d91c      	bls.n	8007b06 <UART_SetConfig+0x2e6>
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	2380      	movs	r3, #128	; 0x80
 8007ad0:	025b      	lsls	r3, r3, #9
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d217      	bcs.n	8007b06 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	200e      	movs	r0, #14
 8007adc:	183b      	adds	r3, r7, r0
 8007ade:	210f      	movs	r1, #15
 8007ae0:	438a      	bics	r2, r1
 8007ae2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	085b      	lsrs	r3, r3, #1
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2207      	movs	r2, #7
 8007aec:	4013      	ands	r3, r2
 8007aee:	b299      	uxth	r1, r3
 8007af0:	183b      	adds	r3, r7, r0
 8007af2:	183a      	adds	r2, r7, r0
 8007af4:	8812      	ldrh	r2, [r2, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	183a      	adds	r2, r7, r0
 8007b00:	8812      	ldrh	r2, [r2, #0]
 8007b02:	60da      	str	r2, [r3, #12]
 8007b04:	e067      	b.n	8007bd6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007b06:	231e      	movs	r3, #30
 8007b08:	18fb      	adds	r3, r7, r3
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	e062      	b.n	8007bd6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b10:	231f      	movs	r3, #31
 8007b12:	18fb      	adds	r3, r7, r3
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d030      	beq.n	8007b7c <UART_SetConfig+0x35c>
 8007b1a:	dc33      	bgt.n	8007b84 <UART_SetConfig+0x364>
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d00d      	beq.n	8007b3c <UART_SetConfig+0x31c>
 8007b20:	dc30      	bgt.n	8007b84 <UART_SetConfig+0x364>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <UART_SetConfig+0x30c>
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d005      	beq.n	8007b36 <UART_SetConfig+0x316>
 8007b2a:	e02b      	b.n	8007b84 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7fd fde8 	bl	8005700 <HAL_RCC_GetPCLK1Freq>
 8007b30:	0003      	movs	r3, r0
 8007b32:	61bb      	str	r3, [r7, #24]
        break;
 8007b34:	e02d      	b.n	8007b92 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b36:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <UART_SetConfig+0x358>)
 8007b38:	61bb      	str	r3, [r7, #24]
        break;
 8007b3a:	e02a      	b.n	8007b92 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b3c:	f7fd fd64 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 8007b40:	0003      	movs	r3, r0
 8007b42:	61bb      	str	r3, [r7, #24]
        break;
 8007b44:	e025      	b.n	8007b92 <UART_SetConfig+0x372>
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	efff69f3 	.word	0xefff69f3
 8007b4c:	ffffcfff 	.word	0xffffcfff
 8007b50:	fffff4ff 	.word	0xfffff4ff
 8007b54:	40013800 	.word	0x40013800
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	40004400 	.word	0x40004400
 8007b60:	40004800 	.word	0x40004800
 8007b64:	40004c00 	.word	0x40004c00
 8007b68:	40005000 	.word	0x40005000
 8007b6c:	40011400 	.word	0x40011400
 8007b70:	40011800 	.word	0x40011800
 8007b74:	40011c00 	.word	0x40011c00
 8007b78:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	61bb      	str	r3, [r7, #24]
        break;
 8007b82:	e006      	b.n	8007b92 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b88:	231e      	movs	r3, #30
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	701a      	strb	r2, [r3, #0]
        break;
 8007b90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01e      	beq.n	8007bd6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	085a      	lsrs	r2, r3, #1
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	18d2      	adds	r2, r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	0019      	movs	r1, r3
 8007ba8:	0010      	movs	r0, r2
 8007baa:	f7f8 faab 	bl	8000104 <__udivsi3>
 8007bae:	0003      	movs	r3, r0
 8007bb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	2b0f      	cmp	r3, #15
 8007bb6:	d90a      	bls.n	8007bce <UART_SetConfig+0x3ae>
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	2380      	movs	r3, #128	; 0x80
 8007bbc:	025b      	lsls	r3, r3, #9
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d205      	bcs.n	8007bce <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60da      	str	r2, [r3, #12]
 8007bcc:	e003      	b.n	8007bd6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007bce:	231e      	movs	r3, #30
 8007bd0:	18fb      	adds	r3, r7, r3
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007be2:	231e      	movs	r3, #30
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	781b      	ldrb	r3, [r3, #0]
}
 8007be8:	0018      	movs	r0, r3
 8007bea:	46bd      	mov	sp, r7
 8007bec:	b008      	add	sp, #32
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a4a      	ldr	r2, [pc, #296]	; (8007d34 <UART_AdvFeatureConfig+0x144>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2202      	movs	r2, #2
 8007c20:	4013      	ands	r3, r2
 8007c22:	d00b      	beq.n	8007c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	4a43      	ldr	r2, [pc, #268]	; (8007d38 <UART_AdvFeatureConfig+0x148>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	0019      	movs	r1, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2204      	movs	r2, #4
 8007c42:	4013      	ands	r3, r2
 8007c44:	d00b      	beq.n	8007c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4a3b      	ldr	r2, [pc, #236]	; (8007d3c <UART_AdvFeatureConfig+0x14c>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	0019      	movs	r1, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	2208      	movs	r2, #8
 8007c64:	4013      	ands	r3, r2
 8007c66:	d00b      	beq.n	8007c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4a34      	ldr	r2, [pc, #208]	; (8007d40 <UART_AdvFeatureConfig+0x150>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	0019      	movs	r1, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2210      	movs	r2, #16
 8007c86:	4013      	ands	r3, r2
 8007c88:	d00b      	beq.n	8007ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4a2c      	ldr	r2, [pc, #176]	; (8007d44 <UART_AdvFeatureConfig+0x154>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	0019      	movs	r1, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	4013      	ands	r3, r2
 8007caa:	d00b      	beq.n	8007cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	4a25      	ldr	r2, [pc, #148]	; (8007d48 <UART_AdvFeatureConfig+0x158>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	0019      	movs	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2240      	movs	r2, #64	; 0x40
 8007cca:	4013      	ands	r3, r2
 8007ccc:	d01d      	beq.n	8007d0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	4a1d      	ldr	r2, [pc, #116]	; (8007d4c <UART_AdvFeatureConfig+0x15c>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	0019      	movs	r1, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cea:	2380      	movs	r3, #128	; 0x80
 8007cec:	035b      	lsls	r3, r3, #13
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d10b      	bne.n	8007d0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	4a15      	ldr	r2, [pc, #84]	; (8007d50 <UART_AdvFeatureConfig+0x160>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	0019      	movs	r1, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2280      	movs	r2, #128	; 0x80
 8007d10:	4013      	ands	r3, r2
 8007d12:	d00b      	beq.n	8007d2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4a0e      	ldr	r2, [pc, #56]	; (8007d54 <UART_AdvFeatureConfig+0x164>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	0019      	movs	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	605a      	str	r2, [r3, #4]
  }
}
 8007d2c:	46c0      	nop			; (mov r8, r8)
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	b002      	add	sp, #8
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	fffdffff 	.word	0xfffdffff
 8007d38:	fffeffff 	.word	0xfffeffff
 8007d3c:	fffbffff 	.word	0xfffbffff
 8007d40:	ffff7fff 	.word	0xffff7fff
 8007d44:	ffffefff 	.word	0xffffefff
 8007d48:	ffffdfff 	.word	0xffffdfff
 8007d4c:	ffefffff 	.word	0xffefffff
 8007d50:	ff9fffff 	.word	0xff9fffff
 8007d54:	fff7ffff 	.word	0xfff7ffff

08007d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b092      	sub	sp, #72	; 0x48
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2284      	movs	r2, #132	; 0x84
 8007d64:	2100      	movs	r1, #0
 8007d66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d68:	f7fc f8e8 	bl	8003f3c <HAL_GetTick>
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2208      	movs	r2, #8
 8007d78:	4013      	ands	r3, r2
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d12c      	bne.n	8007dd8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d80:	2280      	movs	r2, #128	; 0x80
 8007d82:	0391      	lsls	r1, r2, #14
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4a46      	ldr	r2, [pc, #280]	; (8007ea0 <UART_CheckIdleState+0x148>)
 8007d88:	9200      	str	r2, [sp, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f000 f88c 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007d90:	1e03      	subs	r3, r0, #0
 8007d92:	d021      	beq.n	8007dd8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d94:	f3ef 8310 	mrs	r3, PRIMASK
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d9e:	2301      	movs	r3, #1
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	f383 8810 	msr	PRIMASK, r3
}
 8007da8:	46c0      	nop			; (mov r8, r8)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	438a      	bics	r2, r1
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	f383 8810 	msr	PRIMASK, r3
}
 8007dc4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2278      	movs	r2, #120	; 0x78
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e05f      	b.n	8007e98 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2204      	movs	r2, #4
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d146      	bne.n	8007e74 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de8:	2280      	movs	r2, #128	; 0x80
 8007dea:	03d1      	lsls	r1, r2, #15
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4a2c      	ldr	r2, [pc, #176]	; (8007ea0 <UART_CheckIdleState+0x148>)
 8007df0:	9200      	str	r2, [sp, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f000 f858 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007df8:	1e03      	subs	r3, r0, #0
 8007dfa:	d03b      	beq.n	8007e74 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8007e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e02:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
 8007e06:	2301      	movs	r3, #1
 8007e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f383 8810 	msr	PRIMASK, r3
}
 8007e10:	46c0      	nop			; (mov r8, r8)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4921      	ldr	r1, [pc, #132]	; (8007ea4 <UART_CheckIdleState+0x14c>)
 8007e1e:	400a      	ands	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f383 8810 	msr	PRIMASK, r3
}
 8007e2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e32:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e34:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e36:	633b      	str	r3, [r7, #48]	; 0x30
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f383 8810 	msr	PRIMASK, r3
}
 8007e42:	46c0      	nop			; (mov r8, r8)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2101      	movs	r1, #1
 8007e50:	438a      	bics	r2, r1
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	f383 8810 	msr	PRIMASK, r3
}
 8007e5e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2280      	movs	r2, #128	; 0x80
 8007e64:	2120      	movs	r1, #32
 8007e66:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2278      	movs	r2, #120	; 0x78
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e011      	b.n	8007e98 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2220      	movs	r2, #32
 8007e78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2280      	movs	r2, #128	; 0x80
 8007e7e:	2120      	movs	r1, #32
 8007e80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2278      	movs	r2, #120	; 0x78
 8007e92:	2100      	movs	r1, #0
 8007e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	0018      	movs	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b010      	add	sp, #64	; 0x40
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	01ffffff 	.word	0x01ffffff
 8007ea4:	fffffedf 	.word	0xfffffedf

08007ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	1dfb      	adds	r3, r7, #7
 8007eb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb8:	e04b      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	d048      	beq.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec0:	f7fc f83c 	bl	8003f3c <HAL_GetTick>
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d302      	bcc.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e04b      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	d035      	beq.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	2208      	movs	r2, #8
 8007eee:	4013      	ands	r3, r2
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d111      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	0018      	movs	r0, r3
 8007f00:	f000 f906 	bl	8008110 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2284      	movs	r2, #132	; 0x84
 8007f08:	2108      	movs	r1, #8
 8007f0a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2278      	movs	r2, #120	; 0x78
 8007f10:	2100      	movs	r1, #0
 8007f12:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e02c      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69da      	ldr	r2, [r3, #28]
 8007f1e:	2380      	movs	r3, #128	; 0x80
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	401a      	ands	r2, r3
 8007f24:	2380      	movs	r3, #128	; 0x80
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d112      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2280      	movs	r2, #128	; 0x80
 8007f32:	0112      	lsls	r2, r2, #4
 8007f34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f000 f8e9 	bl	8008110 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2284      	movs	r2, #132	; 0x84
 8007f42:	2120      	movs	r1, #32
 8007f44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2278      	movs	r2, #120	; 0x78
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e00f      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	425a      	negs	r2, r3
 8007f62:	4153      	adcs	r3, r2
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	001a      	movs	r2, r3
 8007f68:	1dfb      	adds	r3, r7, #7
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d0a4      	beq.n	8007eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	0018      	movs	r0, r3
 8007f74:	46bd      	mov	sp, r7
 8007f76:	b004      	add	sp, #16
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b090      	sub	sp, #64	; 0x40
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	1dbb      	adds	r3, r7, #6
 8007f88:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	1dba      	adds	r2, r7, #6
 8007f94:	2158      	movs	r1, #88	; 0x58
 8007f96:	8812      	ldrh	r2, [r2, #0]
 8007f98:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	1dba      	adds	r2, r7, #6
 8007f9e:	215a      	movs	r1, #90	; 0x5a
 8007fa0:	8812      	ldrh	r2, [r2, #0]
 8007fa2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	2380      	movs	r3, #128	; 0x80
 8007fb0:	015b      	lsls	r3, r3, #5
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d10d      	bne.n	8007fd2 <UART_Start_Receive_IT+0x56>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <UART_Start_Receive_IT+0x4c>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	225c      	movs	r2, #92	; 0x5c
 8007fc2:	4950      	ldr	r1, [pc, #320]	; (8008104 <UART_Start_Receive_IT+0x188>)
 8007fc4:	5299      	strh	r1, [r3, r2]
 8007fc6:	e02e      	b.n	8008026 <UART_Start_Receive_IT+0xaa>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	225c      	movs	r2, #92	; 0x5c
 8007fcc:	21ff      	movs	r1, #255	; 0xff
 8007fce:	5299      	strh	r1, [r3, r2]
 8007fd0:	e029      	b.n	8008026 <UART_Start_Receive_IT+0xaa>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10d      	bne.n	8007ff6 <UART_Start_Receive_IT+0x7a>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <UART_Start_Receive_IT+0x70>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	225c      	movs	r2, #92	; 0x5c
 8007fe6:	21ff      	movs	r1, #255	; 0xff
 8007fe8:	5299      	strh	r1, [r3, r2]
 8007fea:	e01c      	b.n	8008026 <UART_Start_Receive_IT+0xaa>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	225c      	movs	r2, #92	; 0x5c
 8007ff0:	217f      	movs	r1, #127	; 0x7f
 8007ff2:	5299      	strh	r1, [r3, r2]
 8007ff4:	e017      	b.n	8008026 <UART_Start_Receive_IT+0xaa>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	2380      	movs	r3, #128	; 0x80
 8007ffc:	055b      	lsls	r3, r3, #21
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d10d      	bne.n	800801e <UART_Start_Receive_IT+0xa2>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d104      	bne.n	8008014 <UART_Start_Receive_IT+0x98>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	225c      	movs	r2, #92	; 0x5c
 800800e:	217f      	movs	r1, #127	; 0x7f
 8008010:	5299      	strh	r1, [r3, r2]
 8008012:	e008      	b.n	8008026 <UART_Start_Receive_IT+0xaa>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	225c      	movs	r2, #92	; 0x5c
 8008018:	213f      	movs	r1, #63	; 0x3f
 800801a:	5299      	strh	r1, [r3, r2]
 800801c:	e003      	b.n	8008026 <UART_Start_Receive_IT+0xaa>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	225c      	movs	r2, #92	; 0x5c
 8008022:	2100      	movs	r1, #0
 8008024:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2284      	movs	r2, #132	; 0x84
 800802a:	2100      	movs	r1, #0
 800802c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2280      	movs	r2, #128	; 0x80
 8008032:	2122      	movs	r1, #34	; 0x22
 8008034:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008036:	f3ef 8310 	mrs	r3, PRIMASK
 800803a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008040:	2301      	movs	r3, #1
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	f383 8810 	msr	PRIMASK, r3
}
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2101      	movs	r1, #1
 8008058:	430a      	orrs	r2, r1
 800805a:	609a      	str	r2, [r3, #8]
 800805c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	f383 8810 	msr	PRIMASK, r3
}
 8008066:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	2380      	movs	r3, #128	; 0x80
 800806e:	015b      	lsls	r3, r3, #5
 8008070:	429a      	cmp	r2, r3
 8008072:	d107      	bne.n	8008084 <UART_Start_Receive_IT+0x108>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d103      	bne.n	8008084 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4a22      	ldr	r2, [pc, #136]	; (8008108 <UART_Start_Receive_IT+0x18c>)
 8008080:	669a      	str	r2, [r3, #104]	; 0x68
 8008082:	e002      	b.n	800808a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4a21      	ldr	r2, [pc, #132]	; (800810c <UART_Start_Receive_IT+0x190>)
 8008088:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d019      	beq.n	80080c6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008092:	f3ef 8310 	mrs	r3, PRIMASK
 8008096:	61fb      	str	r3, [r7, #28]
  return(result);
 8008098:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
 800809c:	2301      	movs	r3, #1
 800809e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	f383 8810 	msr	PRIMASK, r3
}
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2190      	movs	r1, #144	; 0x90
 80080b4:	0049      	lsls	r1, r1, #1
 80080b6:	430a      	orrs	r2, r1
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	f383 8810 	msr	PRIMASK, r3
}
 80080c4:	e018      	b.n	80080f8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c6:	f3ef 8310 	mrs	r3, PRIMASK
 80080ca:	613b      	str	r3, [r7, #16]
  return(result);
 80080cc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80080ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f383 8810 	msr	PRIMASK, r3
}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2120      	movs	r1, #32
 80080e8:	430a      	orrs	r2, r1
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	f383 8810 	msr	PRIMASK, r3
}
 80080f6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	0018      	movs	r0, r3
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b010      	add	sp, #64	; 0x40
 8008100:	bd80      	pop	{r7, pc}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	000001ff 	.word	0x000001ff
 8008108:	08008415 	.word	0x08008415
 800810c:	0800825d 	.word	0x0800825d

08008110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08e      	sub	sp, #56	; 0x38
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008118:	f3ef 8310 	mrs	r3, PRIMASK
 800811c:	617b      	str	r3, [r7, #20]
  return(result);
 800811e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
 8008122:	2301      	movs	r3, #1
 8008124:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	f383 8810 	msr	PRIMASK, r3
}
 800812c:	46c0      	nop			; (mov r8, r8)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4926      	ldr	r1, [pc, #152]	; (80081d4 <UART_EndRxTransfer+0xc4>)
 800813a:	400a      	ands	r2, r1
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008140:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f383 8810 	msr	PRIMASK, r3
}
 8008148:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800814a:	f3ef 8310 	mrs	r3, PRIMASK
 800814e:	623b      	str	r3, [r7, #32]
  return(result);
 8008150:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008152:	633b      	str	r3, [r7, #48]	; 0x30
 8008154:	2301      	movs	r3, #1
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	f383 8810 	msr	PRIMASK, r3
}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2101      	movs	r1, #1
 800816c:	438a      	bics	r2, r1
 800816e:	609a      	str	r2, [r3, #8]
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	f383 8810 	msr	PRIMASK, r3
}
 800817a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008180:	2b01      	cmp	r3, #1
 8008182:	d118      	bne.n	80081b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008184:	f3ef 8310 	mrs	r3, PRIMASK
 8008188:	60bb      	str	r3, [r7, #8]
  return(result);
 800818a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800818c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800818e:	2301      	movs	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f383 8810 	msr	PRIMASK, r3
}
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2110      	movs	r1, #16
 80081a6:	438a      	bics	r2, r1
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f383 8810 	msr	PRIMASK, r3
}
 80081b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2280      	movs	r2, #128	; 0x80
 80081ba:	2120      	movs	r1, #32
 80081bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	46bd      	mov	sp, r7
 80081ce:	b00e      	add	sp, #56	; 0x38
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	fffffedf 	.word	0xfffffedf

080081d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	225a      	movs	r2, #90	; 0x5a
 80081ea:	2100      	movs	r1, #0
 80081ec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2252      	movs	r2, #82	; 0x52
 80081f2:	2100      	movs	r1, #0
 80081f4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	0018      	movs	r0, r3
 80081fa:	f7ff fafd 	bl	80077f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	46bd      	mov	sp, r7
 8008202:	b004      	add	sp, #16
 8008204:	bd80      	pop	{r7, pc}

08008206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b086      	sub	sp, #24
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800820e:	f3ef 8310 	mrs	r3, PRIMASK
 8008212:	60bb      	str	r3, [r7, #8]
  return(result);
 8008214:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	2301      	movs	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f383 8810 	msr	PRIMASK, r3
}
 8008222:	46c0      	nop			; (mov r8, r8)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2140      	movs	r1, #64	; 0x40
 8008230:	438a      	bics	r2, r1
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f383 8810 	msr	PRIMASK, r3
}
 800823e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	0018      	movs	r0, r3
 8008250:	f7ff fac2 	bl	80077d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	46bd      	mov	sp, r7
 8008258:	b006      	add	sp, #24
 800825a:	bd80      	pop	{r7, pc}

0800825c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b094      	sub	sp, #80	; 0x50
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008264:	204e      	movs	r0, #78	; 0x4e
 8008266:	183b      	adds	r3, r7, r0
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	215c      	movs	r1, #92	; 0x5c
 800826c:	5a52      	ldrh	r2, [r2, r1]
 800826e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2280      	movs	r2, #128	; 0x80
 8008274:	589b      	ldr	r3, [r3, r2]
 8008276:	2b22      	cmp	r3, #34	; 0x22
 8008278:	d000      	beq.n	800827c <UART_RxISR_8BIT+0x20>
 800827a:	e0ba      	b.n	80083f2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	214c      	movs	r1, #76	; 0x4c
 8008282:	187b      	adds	r3, r7, r1
 8008284:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008286:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008288:	187b      	adds	r3, r7, r1
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b2da      	uxtb	r2, r3
 800828e:	183b      	adds	r3, r7, r0
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b2d9      	uxtb	r1, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008298:	400a      	ands	r2, r1
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	225a      	movs	r2, #90	; 0x5a
 80082ac:	5a9b      	ldrh	r3, [r3, r2]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b299      	uxth	r1, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	225a      	movs	r2, #90	; 0x5a
 80082b8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	225a      	movs	r2, #90	; 0x5a
 80082be:	5a9b      	ldrh	r3, [r3, r2]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d000      	beq.n	80082c8 <UART_RxISR_8BIT+0x6c>
 80082c6:	e09c      	b.n	8008402 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c8:	f3ef 8310 	mrs	r3, PRIMASK
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80082d2:	2301      	movs	r3, #1
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	f383 8810 	msr	PRIMASK, r3
}
 80082dc:	46c0      	nop			; (mov r8, r8)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4948      	ldr	r1, [pc, #288]	; (800840c <UART_RxISR_8BIT+0x1b0>)
 80082ea:	400a      	ands	r2, r1
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	f383 8810 	msr	PRIMASK, r3
}
 80082f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082fa:	f3ef 8310 	mrs	r3, PRIMASK
 80082fe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008302:	647b      	str	r3, [r7, #68]	; 0x44
 8008304:	2301      	movs	r3, #1
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830a:	f383 8810 	msr	PRIMASK, r3
}
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2101      	movs	r1, #1
 800831c:	438a      	bics	r2, r1
 800831e:	609a      	str	r2, [r3, #8]
 8008320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008322:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	f383 8810 	msr	PRIMASK, r3
}
 800832a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2280      	movs	r2, #128	; 0x80
 8008330:	2120      	movs	r1, #32
 8008332:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	2380      	movs	r3, #128	; 0x80
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	4013      	ands	r3, r2
 800834c:	d018      	beq.n	8008380 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800834e:	f3ef 8310 	mrs	r3, PRIMASK
 8008352:	61bb      	str	r3, [r7, #24]
  return(result);
 8008354:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008356:	643b      	str	r3, [r7, #64]	; 0x40
 8008358:	2301      	movs	r3, #1
 800835a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f383 8810 	msr	PRIMASK, r3
}
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4928      	ldr	r1, [pc, #160]	; (8008410 <UART_RxISR_8BIT+0x1b4>)
 8008370:	400a      	ands	r2, r1
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008376:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	f383 8810 	msr	PRIMASK, r3
}
 800837e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008384:	2b01      	cmp	r3, #1
 8008386:	d12f      	bne.n	80083e8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800838e:	f3ef 8310 	mrs	r3, PRIMASK
 8008392:	60fb      	str	r3, [r7, #12]
  return(result);
 8008394:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008398:	2301      	movs	r3, #1
 800839a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f383 8810 	msr	PRIMASK, r3
}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2110      	movs	r1, #16
 80083b0:	438a      	bics	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f383 8810 	msr	PRIMASK, r3
}
 80083be:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	2210      	movs	r2, #16
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d103      	bne.n	80083d6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2210      	movs	r2, #16
 80083d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2258      	movs	r2, #88	; 0x58
 80083da:	5a9a      	ldrh	r2, [r3, r2]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	0011      	movs	r1, r2
 80083e0:	0018      	movs	r0, r3
 80083e2:	f7ff fa11 	bl	8007808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083e6:	e00c      	b.n	8008402 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	0018      	movs	r0, r3
 80083ec:	f7ff f9fc 	bl	80077e8 <HAL_UART_RxCpltCallback>
}
 80083f0:	e007      	b.n	8008402 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699a      	ldr	r2, [r3, #24]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2108      	movs	r1, #8
 80083fe:	430a      	orrs	r2, r1
 8008400:	619a      	str	r2, [r3, #24]
}
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	46bd      	mov	sp, r7
 8008406:	b014      	add	sp, #80	; 0x50
 8008408:	bd80      	pop	{r7, pc}
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	fffffedf 	.word	0xfffffedf
 8008410:	fbffffff 	.word	0xfbffffff

08008414 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b094      	sub	sp, #80	; 0x50
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800841c:	204e      	movs	r0, #78	; 0x4e
 800841e:	183b      	adds	r3, r7, r0
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	215c      	movs	r1, #92	; 0x5c
 8008424:	5a52      	ldrh	r2, [r2, r1]
 8008426:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2280      	movs	r2, #128	; 0x80
 800842c:	589b      	ldr	r3, [r3, r2]
 800842e:	2b22      	cmp	r3, #34	; 0x22
 8008430:	d000      	beq.n	8008434 <UART_RxISR_16BIT+0x20>
 8008432:	e0ba      	b.n	80085aa <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	214c      	movs	r1, #76	; 0x4c
 800843a:	187b      	adds	r3, r7, r1
 800843c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800843e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008444:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8008446:	187b      	adds	r3, r7, r1
 8008448:	183a      	adds	r2, r7, r0
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	8812      	ldrh	r2, [r2, #0]
 800844e:	4013      	ands	r3, r2
 8008450:	b29a      	uxth	r2, r3
 8008452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008454:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845a:	1c9a      	adds	r2, r3, #2
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	225a      	movs	r2, #90	; 0x5a
 8008464:	5a9b      	ldrh	r3, [r3, r2]
 8008466:	b29b      	uxth	r3, r3
 8008468:	3b01      	subs	r3, #1
 800846a:	b299      	uxth	r1, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	225a      	movs	r2, #90	; 0x5a
 8008470:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	225a      	movs	r2, #90	; 0x5a
 8008476:	5a9b      	ldrh	r3, [r3, r2]
 8008478:	b29b      	uxth	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d000      	beq.n	8008480 <UART_RxISR_16BIT+0x6c>
 800847e:	e09c      	b.n	80085ba <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008480:	f3ef 8310 	mrs	r3, PRIMASK
 8008484:	623b      	str	r3, [r7, #32]
  return(result);
 8008486:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
 800848a:	2301      	movs	r3, #1
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	f383 8810 	msr	PRIMASK, r3
}
 8008494:	46c0      	nop			; (mov r8, r8)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4948      	ldr	r1, [pc, #288]	; (80085c4 <UART_RxISR_16BIT+0x1b0>)
 80084a2:	400a      	ands	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	f383 8810 	msr	PRIMASK, r3
}
 80084b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b2:	f3ef 8310 	mrs	r3, PRIMASK
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ba:	643b      	str	r3, [r7, #64]	; 0x40
 80084bc:	2301      	movs	r3, #1
 80084be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	f383 8810 	msr	PRIMASK, r3
}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2101      	movs	r1, #1
 80084d4:	438a      	bics	r2, r1
 80084d6:	609a      	str	r2, [r3, #8]
 80084d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	f383 8810 	msr	PRIMASK, r3
}
 80084e2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2280      	movs	r2, #128	; 0x80
 80084e8:	2120      	movs	r1, #32
 80084ea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	2380      	movs	r3, #128	; 0x80
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	4013      	ands	r3, r2
 8008504:	d018      	beq.n	8008538 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008506:	f3ef 8310 	mrs	r3, PRIMASK
 800850a:	617b      	str	r3, [r7, #20]
  return(result);
 800850c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008510:	2301      	movs	r3, #1
 8008512:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f383 8810 	msr	PRIMASK, r3
}
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4928      	ldr	r1, [pc, #160]	; (80085c8 <UART_RxISR_16BIT+0x1b4>)
 8008528:	400a      	ands	r2, r1
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f383 8810 	msr	PRIMASK, r3
}
 8008536:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853c:	2b01      	cmp	r3, #1
 800853e:	d12f      	bne.n	80085a0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008546:	f3ef 8310 	mrs	r3, PRIMASK
 800854a:	60bb      	str	r3, [r7, #8]
  return(result);
 800854c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008550:	2301      	movs	r3, #1
 8008552:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f383 8810 	msr	PRIMASK, r3
}
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2110      	movs	r1, #16
 8008568:	438a      	bics	r2, r1
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f383 8810 	msr	PRIMASK, r3
}
 8008576:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	2210      	movs	r2, #16
 8008580:	4013      	ands	r3, r2
 8008582:	2b10      	cmp	r3, #16
 8008584:	d103      	bne.n	800858e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2210      	movs	r2, #16
 800858c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2258      	movs	r2, #88	; 0x58
 8008592:	5a9a      	ldrh	r2, [r3, r2]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	0011      	movs	r1, r2
 8008598:	0018      	movs	r0, r3
 800859a:	f7ff f935 	bl	8007808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800859e:	e00c      	b.n	80085ba <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	0018      	movs	r0, r3
 80085a4:	f7ff f920 	bl	80077e8 <HAL_UART_RxCpltCallback>
}
 80085a8:	e007      	b.n	80085ba <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2108      	movs	r1, #8
 80085b6:	430a      	orrs	r2, r1
 80085b8:	619a      	str	r2, [r3, #24]
}
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	46bd      	mov	sp, r7
 80085be:	b014      	add	sp, #80	; 0x50
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	fffffedf 	.word	0xfffffedf
 80085c8:	fbffffff 	.word	0xfbffffff

080085cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085d4:	46c0      	nop			; (mov r8, r8)
 80085d6:	46bd      	mov	sp, r7
 80085d8:	b002      	add	sp, #8
 80085da:	bd80      	pop	{r7, pc}

080085dc <memset>:
 80085dc:	0003      	movs	r3, r0
 80085de:	1882      	adds	r2, r0, r2
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d100      	bne.n	80085e6 <memset+0xa>
 80085e4:	4770      	bx	lr
 80085e6:	7019      	strb	r1, [r3, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	e7f9      	b.n	80085e0 <memset+0x4>

080085ec <strncmp>:
 80085ec:	b530      	push	{r4, r5, lr}
 80085ee:	0005      	movs	r5, r0
 80085f0:	1e10      	subs	r0, r2, #0
 80085f2:	d00b      	beq.n	800860c <strncmp+0x20>
 80085f4:	2400      	movs	r4, #0
 80085f6:	3a01      	subs	r2, #1
 80085f8:	5d2b      	ldrb	r3, [r5, r4]
 80085fa:	5d08      	ldrb	r0, [r1, r4]
 80085fc:	4283      	cmp	r3, r0
 80085fe:	d104      	bne.n	800860a <strncmp+0x1e>
 8008600:	42a2      	cmp	r2, r4
 8008602:	d002      	beq.n	800860a <strncmp+0x1e>
 8008604:	3401      	adds	r4, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f6      	bne.n	80085f8 <strncmp+0xc>
 800860a:	1a18      	subs	r0, r3, r0
 800860c:	bd30      	pop	{r4, r5, pc}
	...

08008610 <__libc_init_array>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	2600      	movs	r6, #0
 8008614:	4c0c      	ldr	r4, [pc, #48]	; (8008648 <__libc_init_array+0x38>)
 8008616:	4d0d      	ldr	r5, [pc, #52]	; (800864c <__libc_init_array+0x3c>)
 8008618:	1b64      	subs	r4, r4, r5
 800861a:	10a4      	asrs	r4, r4, #2
 800861c:	42a6      	cmp	r6, r4
 800861e:	d109      	bne.n	8008634 <__libc_init_array+0x24>
 8008620:	2600      	movs	r6, #0
 8008622:	f000 f819 	bl	8008658 <_init>
 8008626:	4c0a      	ldr	r4, [pc, #40]	; (8008650 <__libc_init_array+0x40>)
 8008628:	4d0a      	ldr	r5, [pc, #40]	; (8008654 <__libc_init_array+0x44>)
 800862a:	1b64      	subs	r4, r4, r5
 800862c:	10a4      	asrs	r4, r4, #2
 800862e:	42a6      	cmp	r6, r4
 8008630:	d105      	bne.n	800863e <__libc_init_array+0x2e>
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	00b3      	lsls	r3, r6, #2
 8008636:	58eb      	ldr	r3, [r5, r3]
 8008638:	4798      	blx	r3
 800863a:	3601      	adds	r6, #1
 800863c:	e7ee      	b.n	800861c <__libc_init_array+0xc>
 800863e:	00b3      	lsls	r3, r6, #2
 8008640:	58eb      	ldr	r3, [r5, r3]
 8008642:	4798      	blx	r3
 8008644:	3601      	adds	r6, #1
 8008646:	e7f2      	b.n	800862e <__libc_init_array+0x1e>
 8008648:	08008760 	.word	0x08008760
 800864c:	08008760 	.word	0x08008760
 8008650:	08008764 	.word	0x08008764
 8008654:	08008760 	.word	0x08008760

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
