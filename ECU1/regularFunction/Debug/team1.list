
team1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006488  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006544  08006544  00016544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006634  08006634  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08006634  08006634  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006634  08006634  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006634  08006634  00016634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800663c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000024  08006660  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08006660  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa90  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028d0  00000000  00000000  0002fb1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  000323f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa7  00000000  00000000  000331a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb12  00000000  00000000  00033c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013567  00000000  00000000  00050761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab66c  00000000  00000000  00063cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003178  00000000  00000000  0010f334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001124ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000024 	.word	0x20000024
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800652c 	.word	0x0800652c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000028 	.word	0x20000028
 8000100:	0800652c 	.word	0x0800652c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 f9d9 	bl	80015dc <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 f943 	bl	80014bc <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 fdba 	bl	8000db8 <__aeabi_dsub>
 8000244:	f001 f93a 	bl	80014bc <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_ddiv>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	030c      	lsls	r4, r1, #12
 8000266:	001f      	movs	r7, r3
 8000268:	004b      	lsls	r3, r1, #1
 800026a:	4681      	mov	r9, r0
 800026c:	4692      	mov	sl, r2
 800026e:	0005      	movs	r5, r0
 8000270:	b085      	sub	sp, #20
 8000272:	0b24      	lsrs	r4, r4, #12
 8000274:	0d5b      	lsrs	r3, r3, #21
 8000276:	0fce      	lsrs	r6, r1, #31
 8000278:	2b00      	cmp	r3, #0
 800027a:	d100      	bne.n	800027e <__aeabi_ddiv+0x26>
 800027c:	e152      	b.n	8000524 <__aeabi_ddiv+0x2cc>
 800027e:	4ad2      	ldr	r2, [pc, #840]	; (80005c8 <__aeabi_ddiv+0x370>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_ddiv+0x2e>
 8000284:	e16e      	b.n	8000564 <__aeabi_ddiv+0x30c>
 8000286:	0f42      	lsrs	r2, r0, #29
 8000288:	00e4      	lsls	r4, r4, #3
 800028a:	4314      	orrs	r4, r2
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	4322      	orrs	r2, r4
 8000292:	4690      	mov	r8, r2
 8000294:	4acd      	ldr	r2, [pc, #820]	; (80005cc <__aeabi_ddiv+0x374>)
 8000296:	00c5      	lsls	r5, r0, #3
 8000298:	4693      	mov	fp, r2
 800029a:	449b      	add	fp, r3
 800029c:	2300      	movs	r3, #0
 800029e:	4699      	mov	r9, r3
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	033c      	lsls	r4, r7, #12
 80002a4:	007b      	lsls	r3, r7, #1
 80002a6:	4650      	mov	r0, sl
 80002a8:	0b24      	lsrs	r4, r4, #12
 80002aa:	0d5b      	lsrs	r3, r3, #21
 80002ac:	0fff      	lsrs	r7, r7, #31
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d100      	bne.n	80002b4 <__aeabi_ddiv+0x5c>
 80002b2:	e11a      	b.n	80004ea <__aeabi_ddiv+0x292>
 80002b4:	4ac4      	ldr	r2, [pc, #784]	; (80005c8 <__aeabi_ddiv+0x370>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d100      	bne.n	80002bc <__aeabi_ddiv+0x64>
 80002ba:	e15e      	b.n	800057a <__aeabi_ddiv+0x322>
 80002bc:	0f42      	lsrs	r2, r0, #29
 80002be:	00e4      	lsls	r4, r4, #3
 80002c0:	4322      	orrs	r2, r4
 80002c2:	2480      	movs	r4, #128	; 0x80
 80002c4:	0424      	lsls	r4, r4, #16
 80002c6:	4314      	orrs	r4, r2
 80002c8:	4ac0      	ldr	r2, [pc, #768]	; (80005cc <__aeabi_ddiv+0x374>)
 80002ca:	00c1      	lsls	r1, r0, #3
 80002cc:	4694      	mov	ip, r2
 80002ce:	465a      	mov	r2, fp
 80002d0:	4463      	add	r3, ip
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	469b      	mov	fp, r3
 80002d6:	2000      	movs	r0, #0
 80002d8:	0033      	movs	r3, r6
 80002da:	407b      	eors	r3, r7
 80002dc:	469a      	mov	sl, r3
 80002de:	464b      	mov	r3, r9
 80002e0:	2b0f      	cmp	r3, #15
 80002e2:	d827      	bhi.n	8000334 <__aeabi_ddiv+0xdc>
 80002e4:	4aba      	ldr	r2, [pc, #744]	; (80005d0 <__aeabi_ddiv+0x378>)
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	58d3      	ldr	r3, [r2, r3]
 80002ea:	469f      	mov	pc, r3
 80002ec:	46b2      	mov	sl, r6
 80002ee:	9b00      	ldr	r3, [sp, #0]
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	d016      	beq.n	8000322 <__aeabi_ddiv+0xca>
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	d100      	bne.n	80002fa <__aeabi_ddiv+0xa2>
 80002f8:	e287      	b.n	800080a <__aeabi_ddiv+0x5b2>
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d000      	beq.n	8000300 <__aeabi_ddiv+0xa8>
 80002fe:	e0d5      	b.n	80004ac <__aeabi_ddiv+0x254>
 8000300:	2300      	movs	r3, #0
 8000302:	2200      	movs	r2, #0
 8000304:	2500      	movs	r5, #0
 8000306:	051b      	lsls	r3, r3, #20
 8000308:	4313      	orrs	r3, r2
 800030a:	4652      	mov	r2, sl
 800030c:	07d2      	lsls	r2, r2, #31
 800030e:	4313      	orrs	r3, r2
 8000310:	0028      	movs	r0, r5
 8000312:	0019      	movs	r1, r3
 8000314:	b005      	add	sp, #20
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	46bb      	mov	fp, r7
 800031a:	46b2      	mov	sl, r6
 800031c:	46a9      	mov	r9, r5
 800031e:	46a0      	mov	r8, r4
 8000320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000322:	2200      	movs	r2, #0
 8000324:	2500      	movs	r5, #0
 8000326:	4ba8      	ldr	r3, [pc, #672]	; (80005c8 <__aeabi_ddiv+0x370>)
 8000328:	e7ed      	b.n	8000306 <__aeabi_ddiv+0xae>
 800032a:	46ba      	mov	sl, r7
 800032c:	46a0      	mov	r8, r4
 800032e:	000d      	movs	r5, r1
 8000330:	9000      	str	r0, [sp, #0]
 8000332:	e7dc      	b.n	80002ee <__aeabi_ddiv+0x96>
 8000334:	4544      	cmp	r4, r8
 8000336:	d200      	bcs.n	800033a <__aeabi_ddiv+0xe2>
 8000338:	e1c4      	b.n	80006c4 <__aeabi_ddiv+0x46c>
 800033a:	d100      	bne.n	800033e <__aeabi_ddiv+0xe6>
 800033c:	e1bf      	b.n	80006be <__aeabi_ddiv+0x466>
 800033e:	2301      	movs	r3, #1
 8000340:	425b      	negs	r3, r3
 8000342:	469c      	mov	ip, r3
 8000344:	002e      	movs	r6, r5
 8000346:	4640      	mov	r0, r8
 8000348:	2500      	movs	r5, #0
 800034a:	44e3      	add	fp, ip
 800034c:	0223      	lsls	r3, r4, #8
 800034e:	0e0c      	lsrs	r4, r1, #24
 8000350:	431c      	orrs	r4, r3
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	4699      	mov	r9, r3
 8000356:	0423      	lsls	r3, r4, #16
 8000358:	020a      	lsls	r2, r1, #8
 800035a:	0c1f      	lsrs	r7, r3, #16
 800035c:	4649      	mov	r1, r9
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	9701      	str	r7, [sp, #4]
 8000362:	f7ff ff55 	bl	8000210 <__aeabi_uidivmod>
 8000366:	0002      	movs	r2, r0
 8000368:	437a      	muls	r2, r7
 800036a:	040b      	lsls	r3, r1, #16
 800036c:	0c31      	lsrs	r1, r6, #16
 800036e:	4680      	mov	r8, r0
 8000370:	4319      	orrs	r1, r3
 8000372:	428a      	cmp	r2, r1
 8000374:	d907      	bls.n	8000386 <__aeabi_ddiv+0x12e>
 8000376:	2301      	movs	r3, #1
 8000378:	425b      	negs	r3, r3
 800037a:	469c      	mov	ip, r3
 800037c:	1909      	adds	r1, r1, r4
 800037e:	44e0      	add	r8, ip
 8000380:	428c      	cmp	r4, r1
 8000382:	d800      	bhi.n	8000386 <__aeabi_ddiv+0x12e>
 8000384:	e201      	b.n	800078a <__aeabi_ddiv+0x532>
 8000386:	1a88      	subs	r0, r1, r2
 8000388:	4649      	mov	r1, r9
 800038a:	f7ff ff41 	bl	8000210 <__aeabi_uidivmod>
 800038e:	9a01      	ldr	r2, [sp, #4]
 8000390:	0436      	lsls	r6, r6, #16
 8000392:	4342      	muls	r2, r0
 8000394:	0409      	lsls	r1, r1, #16
 8000396:	0c36      	lsrs	r6, r6, #16
 8000398:	0003      	movs	r3, r0
 800039a:	430e      	orrs	r6, r1
 800039c:	42b2      	cmp	r2, r6
 800039e:	d904      	bls.n	80003aa <__aeabi_ddiv+0x152>
 80003a0:	1936      	adds	r6, r6, r4
 80003a2:	3b01      	subs	r3, #1
 80003a4:	42b4      	cmp	r4, r6
 80003a6:	d800      	bhi.n	80003aa <__aeabi_ddiv+0x152>
 80003a8:	e1e9      	b.n	800077e <__aeabi_ddiv+0x526>
 80003aa:	1ab0      	subs	r0, r6, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	9e00      	ldr	r6, [sp, #0]
 80003b0:	0412      	lsls	r2, r2, #16
 80003b2:	431a      	orrs	r2, r3
 80003b4:	0c33      	lsrs	r3, r6, #16
 80003b6:	001f      	movs	r7, r3
 80003b8:	0c11      	lsrs	r1, r2, #16
 80003ba:	4690      	mov	r8, r2
 80003bc:	9302      	str	r3, [sp, #8]
 80003be:	0413      	lsls	r3, r2, #16
 80003c0:	0432      	lsls	r2, r6, #16
 80003c2:	0c16      	lsrs	r6, r2, #16
 80003c4:	0032      	movs	r2, r6
 80003c6:	0c1b      	lsrs	r3, r3, #16
 80003c8:	435a      	muls	r2, r3
 80003ca:	9603      	str	r6, [sp, #12]
 80003cc:	437b      	muls	r3, r7
 80003ce:	434e      	muls	r6, r1
 80003d0:	4379      	muls	r1, r7
 80003d2:	0c17      	lsrs	r7, r2, #16
 80003d4:	46bc      	mov	ip, r7
 80003d6:	199b      	adds	r3, r3, r6
 80003d8:	4463      	add	r3, ip
 80003da:	429e      	cmp	r6, r3
 80003dc:	d903      	bls.n	80003e6 <__aeabi_ddiv+0x18e>
 80003de:	2680      	movs	r6, #128	; 0x80
 80003e0:	0276      	lsls	r6, r6, #9
 80003e2:	46b4      	mov	ip, r6
 80003e4:	4461      	add	r1, ip
 80003e6:	0c1e      	lsrs	r6, r3, #16
 80003e8:	1871      	adds	r1, r6, r1
 80003ea:	0416      	lsls	r6, r2, #16
 80003ec:	041b      	lsls	r3, r3, #16
 80003ee:	0c36      	lsrs	r6, r6, #16
 80003f0:	199e      	adds	r6, r3, r6
 80003f2:	4288      	cmp	r0, r1
 80003f4:	d302      	bcc.n	80003fc <__aeabi_ddiv+0x1a4>
 80003f6:	d112      	bne.n	800041e <__aeabi_ddiv+0x1c6>
 80003f8:	42b5      	cmp	r5, r6
 80003fa:	d210      	bcs.n	800041e <__aeabi_ddiv+0x1c6>
 80003fc:	4643      	mov	r3, r8
 80003fe:	1e5a      	subs	r2, r3, #1
 8000400:	9b00      	ldr	r3, [sp, #0]
 8000402:	469c      	mov	ip, r3
 8000404:	4465      	add	r5, ip
 8000406:	001f      	movs	r7, r3
 8000408:	429d      	cmp	r5, r3
 800040a:	419b      	sbcs	r3, r3
 800040c:	425b      	negs	r3, r3
 800040e:	191b      	adds	r3, r3, r4
 8000410:	18c0      	adds	r0, r0, r3
 8000412:	4284      	cmp	r4, r0
 8000414:	d200      	bcs.n	8000418 <__aeabi_ddiv+0x1c0>
 8000416:	e19e      	b.n	8000756 <__aeabi_ddiv+0x4fe>
 8000418:	d100      	bne.n	800041c <__aeabi_ddiv+0x1c4>
 800041a:	e199      	b.n	8000750 <__aeabi_ddiv+0x4f8>
 800041c:	4690      	mov	r8, r2
 800041e:	1bae      	subs	r6, r5, r6
 8000420:	42b5      	cmp	r5, r6
 8000422:	41ad      	sbcs	r5, r5
 8000424:	1a40      	subs	r0, r0, r1
 8000426:	426d      	negs	r5, r5
 8000428:	1b40      	subs	r0, r0, r5
 800042a:	4284      	cmp	r4, r0
 800042c:	d100      	bne.n	8000430 <__aeabi_ddiv+0x1d8>
 800042e:	e1d2      	b.n	80007d6 <__aeabi_ddiv+0x57e>
 8000430:	4649      	mov	r1, r9
 8000432:	f7ff feed 	bl	8000210 <__aeabi_uidivmod>
 8000436:	9a01      	ldr	r2, [sp, #4]
 8000438:	040b      	lsls	r3, r1, #16
 800043a:	4342      	muls	r2, r0
 800043c:	0c31      	lsrs	r1, r6, #16
 800043e:	0005      	movs	r5, r0
 8000440:	4319      	orrs	r1, r3
 8000442:	428a      	cmp	r2, r1
 8000444:	d900      	bls.n	8000448 <__aeabi_ddiv+0x1f0>
 8000446:	e16c      	b.n	8000722 <__aeabi_ddiv+0x4ca>
 8000448:	1a88      	subs	r0, r1, r2
 800044a:	4649      	mov	r1, r9
 800044c:	f7ff fee0 	bl	8000210 <__aeabi_uidivmod>
 8000450:	9a01      	ldr	r2, [sp, #4]
 8000452:	0436      	lsls	r6, r6, #16
 8000454:	4342      	muls	r2, r0
 8000456:	0409      	lsls	r1, r1, #16
 8000458:	0c36      	lsrs	r6, r6, #16
 800045a:	0003      	movs	r3, r0
 800045c:	430e      	orrs	r6, r1
 800045e:	42b2      	cmp	r2, r6
 8000460:	d900      	bls.n	8000464 <__aeabi_ddiv+0x20c>
 8000462:	e153      	b.n	800070c <__aeabi_ddiv+0x4b4>
 8000464:	9803      	ldr	r0, [sp, #12]
 8000466:	1ab6      	subs	r6, r6, r2
 8000468:	0002      	movs	r2, r0
 800046a:	042d      	lsls	r5, r5, #16
 800046c:	431d      	orrs	r5, r3
 800046e:	9f02      	ldr	r7, [sp, #8]
 8000470:	042b      	lsls	r3, r5, #16
 8000472:	0c1b      	lsrs	r3, r3, #16
 8000474:	435a      	muls	r2, r3
 8000476:	437b      	muls	r3, r7
 8000478:	469c      	mov	ip, r3
 800047a:	0c29      	lsrs	r1, r5, #16
 800047c:	4348      	muls	r0, r1
 800047e:	0c13      	lsrs	r3, r2, #16
 8000480:	4484      	add	ip, r0
 8000482:	4463      	add	r3, ip
 8000484:	4379      	muls	r1, r7
 8000486:	4298      	cmp	r0, r3
 8000488:	d903      	bls.n	8000492 <__aeabi_ddiv+0x23a>
 800048a:	2080      	movs	r0, #128	; 0x80
 800048c:	0240      	lsls	r0, r0, #9
 800048e:	4684      	mov	ip, r0
 8000490:	4461      	add	r1, ip
 8000492:	0c18      	lsrs	r0, r3, #16
 8000494:	0412      	lsls	r2, r2, #16
 8000496:	041b      	lsls	r3, r3, #16
 8000498:	0c12      	lsrs	r2, r2, #16
 800049a:	1840      	adds	r0, r0, r1
 800049c:	189b      	adds	r3, r3, r2
 800049e:	4286      	cmp	r6, r0
 80004a0:	d200      	bcs.n	80004a4 <__aeabi_ddiv+0x24c>
 80004a2:	e100      	b.n	80006a6 <__aeabi_ddiv+0x44e>
 80004a4:	d100      	bne.n	80004a8 <__aeabi_ddiv+0x250>
 80004a6:	e0fb      	b.n	80006a0 <__aeabi_ddiv+0x448>
 80004a8:	2301      	movs	r3, #1
 80004aa:	431d      	orrs	r5, r3
 80004ac:	4b49      	ldr	r3, [pc, #292]	; (80005d4 <__aeabi_ddiv+0x37c>)
 80004ae:	445b      	add	r3, fp
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dc00      	bgt.n	80004b6 <__aeabi_ddiv+0x25e>
 80004b4:	e0aa      	b.n	800060c <__aeabi_ddiv+0x3b4>
 80004b6:	076a      	lsls	r2, r5, #29
 80004b8:	d000      	beq.n	80004bc <__aeabi_ddiv+0x264>
 80004ba:	e13d      	b.n	8000738 <__aeabi_ddiv+0x4e0>
 80004bc:	08e9      	lsrs	r1, r5, #3
 80004be:	4642      	mov	r2, r8
 80004c0:	01d2      	lsls	r2, r2, #7
 80004c2:	d506      	bpl.n	80004d2 <__aeabi_ddiv+0x27a>
 80004c4:	4642      	mov	r2, r8
 80004c6:	4b44      	ldr	r3, [pc, #272]	; (80005d8 <__aeabi_ddiv+0x380>)
 80004c8:	401a      	ands	r2, r3
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	4690      	mov	r8, r2
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	445b      	add	r3, fp
 80004d2:	4a42      	ldr	r2, [pc, #264]	; (80005dc <__aeabi_ddiv+0x384>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	dd00      	ble.n	80004da <__aeabi_ddiv+0x282>
 80004d8:	e723      	b.n	8000322 <__aeabi_ddiv+0xca>
 80004da:	4642      	mov	r2, r8
 80004dc:	055b      	lsls	r3, r3, #21
 80004de:	0755      	lsls	r5, r2, #29
 80004e0:	0252      	lsls	r2, r2, #9
 80004e2:	430d      	orrs	r5, r1
 80004e4:	0b12      	lsrs	r2, r2, #12
 80004e6:	0d5b      	lsrs	r3, r3, #21
 80004e8:	e70d      	b.n	8000306 <__aeabi_ddiv+0xae>
 80004ea:	4651      	mov	r1, sl
 80004ec:	4321      	orrs	r1, r4
 80004ee:	d100      	bne.n	80004f2 <__aeabi_ddiv+0x29a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_ddiv+0x394>
 80004f2:	2c00      	cmp	r4, #0
 80004f4:	d100      	bne.n	80004f8 <__aeabi_ddiv+0x2a0>
 80004f6:	e0fb      	b.n	80006f0 <__aeabi_ddiv+0x498>
 80004f8:	0020      	movs	r0, r4
 80004fa:	f001 f879 	bl	80015f0 <__clzsi2>
 80004fe:	0002      	movs	r2, r0
 8000500:	3a0b      	subs	r2, #11
 8000502:	231d      	movs	r3, #29
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	4652      	mov	r2, sl
 8000508:	0001      	movs	r1, r0
 800050a:	40da      	lsrs	r2, r3
 800050c:	4653      	mov	r3, sl
 800050e:	3908      	subs	r1, #8
 8000510:	408b      	lsls	r3, r1
 8000512:	408c      	lsls	r4, r1
 8000514:	0019      	movs	r1, r3
 8000516:	4314      	orrs	r4, r2
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <__aeabi_ddiv+0x388>)
 800051a:	4458      	add	r0, fp
 800051c:	469b      	mov	fp, r3
 800051e:	4483      	add	fp, r0
 8000520:	2000      	movs	r0, #0
 8000522:	e6d9      	b.n	80002d8 <__aeabi_ddiv+0x80>
 8000524:	0003      	movs	r3, r0
 8000526:	4323      	orrs	r3, r4
 8000528:	4698      	mov	r8, r3
 800052a:	d044      	beq.n	80005b6 <__aeabi_ddiv+0x35e>
 800052c:	2c00      	cmp	r4, #0
 800052e:	d100      	bne.n	8000532 <__aeabi_ddiv+0x2da>
 8000530:	e0cf      	b.n	80006d2 <__aeabi_ddiv+0x47a>
 8000532:	0020      	movs	r0, r4
 8000534:	f001 f85c 	bl	80015f0 <__clzsi2>
 8000538:	0001      	movs	r1, r0
 800053a:	0002      	movs	r2, r0
 800053c:	390b      	subs	r1, #11
 800053e:	231d      	movs	r3, #29
 8000540:	1a5b      	subs	r3, r3, r1
 8000542:	4649      	mov	r1, r9
 8000544:	0010      	movs	r0, r2
 8000546:	40d9      	lsrs	r1, r3
 8000548:	3808      	subs	r0, #8
 800054a:	4084      	lsls	r4, r0
 800054c:	000b      	movs	r3, r1
 800054e:	464d      	mov	r5, r9
 8000550:	4323      	orrs	r3, r4
 8000552:	4698      	mov	r8, r3
 8000554:	4085      	lsls	r5, r0
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <__aeabi_ddiv+0x38c>)
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	469b      	mov	fp, r3
 800055c:	2300      	movs	r3, #0
 800055e:	4699      	mov	r9, r3
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	e69e      	b.n	80002a2 <__aeabi_ddiv+0x4a>
 8000564:	0002      	movs	r2, r0
 8000566:	4322      	orrs	r2, r4
 8000568:	4690      	mov	r8, r2
 800056a:	d11d      	bne.n	80005a8 <__aeabi_ddiv+0x350>
 800056c:	2208      	movs	r2, #8
 800056e:	469b      	mov	fp, r3
 8000570:	2302      	movs	r3, #2
 8000572:	2500      	movs	r5, #0
 8000574:	4691      	mov	r9, r2
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	e693      	b.n	80002a2 <__aeabi_ddiv+0x4a>
 800057a:	4651      	mov	r1, sl
 800057c:	4321      	orrs	r1, r4
 800057e:	d109      	bne.n	8000594 <__aeabi_ddiv+0x33c>
 8000580:	2302      	movs	r3, #2
 8000582:	464a      	mov	r2, r9
 8000584:	431a      	orrs	r2, r3
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <__aeabi_ddiv+0x390>)
 8000588:	4691      	mov	r9, r2
 800058a:	469c      	mov	ip, r3
 800058c:	2400      	movs	r4, #0
 800058e:	2002      	movs	r0, #2
 8000590:	44e3      	add	fp, ip
 8000592:	e6a1      	b.n	80002d8 <__aeabi_ddiv+0x80>
 8000594:	2303      	movs	r3, #3
 8000596:	464a      	mov	r2, r9
 8000598:	431a      	orrs	r2, r3
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <__aeabi_ddiv+0x390>)
 800059c:	4691      	mov	r9, r2
 800059e:	469c      	mov	ip, r3
 80005a0:	4651      	mov	r1, sl
 80005a2:	2003      	movs	r0, #3
 80005a4:	44e3      	add	fp, ip
 80005a6:	e697      	b.n	80002d8 <__aeabi_ddiv+0x80>
 80005a8:	220c      	movs	r2, #12
 80005aa:	469b      	mov	fp, r3
 80005ac:	2303      	movs	r3, #3
 80005ae:	46a0      	mov	r8, r4
 80005b0:	4691      	mov	r9, r2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	e675      	b.n	80002a2 <__aeabi_ddiv+0x4a>
 80005b6:	2304      	movs	r3, #4
 80005b8:	4699      	mov	r9, r3
 80005ba:	2300      	movs	r3, #0
 80005bc:	469b      	mov	fp, r3
 80005be:	3301      	adds	r3, #1
 80005c0:	2500      	movs	r5, #0
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	e66d      	b.n	80002a2 <__aeabi_ddiv+0x4a>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	000007ff 	.word	0x000007ff
 80005cc:	fffffc01 	.word	0xfffffc01
 80005d0:	080065bc 	.word	0x080065bc
 80005d4:	000003ff 	.word	0x000003ff
 80005d8:	feffffff 	.word	0xfeffffff
 80005dc:	000007fe 	.word	0x000007fe
 80005e0:	000003f3 	.word	0x000003f3
 80005e4:	fffffc0d 	.word	0xfffffc0d
 80005e8:	fffff801 	.word	0xfffff801
 80005ec:	464a      	mov	r2, r9
 80005ee:	2301      	movs	r3, #1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	4691      	mov	r9, r2
 80005f4:	2400      	movs	r4, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	e66e      	b.n	80002d8 <__aeabi_ddiv+0x80>
 80005fa:	2300      	movs	r3, #0
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	469a      	mov	sl, r3
 8000600:	2500      	movs	r5, #0
 8000602:	4b88      	ldr	r3, [pc, #544]	; (8000824 <__aeabi_ddiv+0x5cc>)
 8000604:	0312      	lsls	r2, r2, #12
 8000606:	e67e      	b.n	8000306 <__aeabi_ddiv+0xae>
 8000608:	2501      	movs	r5, #1
 800060a:	426d      	negs	r5, r5
 800060c:	2201      	movs	r2, #1
 800060e:	1ad2      	subs	r2, r2, r3
 8000610:	2a38      	cmp	r2, #56	; 0x38
 8000612:	dd00      	ble.n	8000616 <__aeabi_ddiv+0x3be>
 8000614:	e674      	b.n	8000300 <__aeabi_ddiv+0xa8>
 8000616:	2a1f      	cmp	r2, #31
 8000618:	dc00      	bgt.n	800061c <__aeabi_ddiv+0x3c4>
 800061a:	e0bd      	b.n	8000798 <__aeabi_ddiv+0x540>
 800061c:	211f      	movs	r1, #31
 800061e:	4249      	negs	r1, r1
 8000620:	1acb      	subs	r3, r1, r3
 8000622:	4641      	mov	r1, r8
 8000624:	40d9      	lsrs	r1, r3
 8000626:	000b      	movs	r3, r1
 8000628:	2a20      	cmp	r2, #32
 800062a:	d004      	beq.n	8000636 <__aeabi_ddiv+0x3de>
 800062c:	4641      	mov	r1, r8
 800062e:	4a7e      	ldr	r2, [pc, #504]	; (8000828 <__aeabi_ddiv+0x5d0>)
 8000630:	445a      	add	r2, fp
 8000632:	4091      	lsls	r1, r2
 8000634:	430d      	orrs	r5, r1
 8000636:	0029      	movs	r1, r5
 8000638:	1e4a      	subs	r2, r1, #1
 800063a:	4191      	sbcs	r1, r2
 800063c:	4319      	orrs	r1, r3
 800063e:	2307      	movs	r3, #7
 8000640:	001d      	movs	r5, r3
 8000642:	2200      	movs	r2, #0
 8000644:	400d      	ands	r5, r1
 8000646:	420b      	tst	r3, r1
 8000648:	d100      	bne.n	800064c <__aeabi_ddiv+0x3f4>
 800064a:	e0d0      	b.n	80007ee <__aeabi_ddiv+0x596>
 800064c:	220f      	movs	r2, #15
 800064e:	2300      	movs	r3, #0
 8000650:	400a      	ands	r2, r1
 8000652:	2a04      	cmp	r2, #4
 8000654:	d100      	bne.n	8000658 <__aeabi_ddiv+0x400>
 8000656:	e0c7      	b.n	80007e8 <__aeabi_ddiv+0x590>
 8000658:	1d0a      	adds	r2, r1, #4
 800065a:	428a      	cmp	r2, r1
 800065c:	4189      	sbcs	r1, r1
 800065e:	4249      	negs	r1, r1
 8000660:	185b      	adds	r3, r3, r1
 8000662:	0011      	movs	r1, r2
 8000664:	021a      	lsls	r2, r3, #8
 8000666:	d400      	bmi.n	800066a <__aeabi_ddiv+0x412>
 8000668:	e0be      	b.n	80007e8 <__aeabi_ddiv+0x590>
 800066a:	2301      	movs	r3, #1
 800066c:	2200      	movs	r2, #0
 800066e:	2500      	movs	r5, #0
 8000670:	e649      	b.n	8000306 <__aeabi_ddiv+0xae>
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	4643      	mov	r3, r8
 8000676:	0312      	lsls	r2, r2, #12
 8000678:	4213      	tst	r3, r2
 800067a:	d008      	beq.n	800068e <__aeabi_ddiv+0x436>
 800067c:	4214      	tst	r4, r2
 800067e:	d106      	bne.n	800068e <__aeabi_ddiv+0x436>
 8000680:	4322      	orrs	r2, r4
 8000682:	0312      	lsls	r2, r2, #12
 8000684:	46ba      	mov	sl, r7
 8000686:	000d      	movs	r5, r1
 8000688:	4b66      	ldr	r3, [pc, #408]	; (8000824 <__aeabi_ddiv+0x5cc>)
 800068a:	0b12      	lsrs	r2, r2, #12
 800068c:	e63b      	b.n	8000306 <__aeabi_ddiv+0xae>
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	4643      	mov	r3, r8
 8000692:	0312      	lsls	r2, r2, #12
 8000694:	431a      	orrs	r2, r3
 8000696:	0312      	lsls	r2, r2, #12
 8000698:	46b2      	mov	sl, r6
 800069a:	4b62      	ldr	r3, [pc, #392]	; (8000824 <__aeabi_ddiv+0x5cc>)
 800069c:	0b12      	lsrs	r2, r2, #12
 800069e:	e632      	b.n	8000306 <__aeabi_ddiv+0xae>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0x44e>
 80006a4:	e702      	b.n	80004ac <__aeabi_ddiv+0x254>
 80006a6:	19a6      	adds	r6, r4, r6
 80006a8:	1e6a      	subs	r2, r5, #1
 80006aa:	42a6      	cmp	r6, r4
 80006ac:	d200      	bcs.n	80006b0 <__aeabi_ddiv+0x458>
 80006ae:	e089      	b.n	80007c4 <__aeabi_ddiv+0x56c>
 80006b0:	4286      	cmp	r6, r0
 80006b2:	d200      	bcs.n	80006b6 <__aeabi_ddiv+0x45e>
 80006b4:	e09f      	b.n	80007f6 <__aeabi_ddiv+0x59e>
 80006b6:	d100      	bne.n	80006ba <__aeabi_ddiv+0x462>
 80006b8:	e0af      	b.n	800081a <__aeabi_ddiv+0x5c2>
 80006ba:	0015      	movs	r5, r2
 80006bc:	e6f4      	b.n	80004a8 <__aeabi_ddiv+0x250>
 80006be:	42a9      	cmp	r1, r5
 80006c0:	d900      	bls.n	80006c4 <__aeabi_ddiv+0x46c>
 80006c2:	e63c      	b.n	800033e <__aeabi_ddiv+0xe6>
 80006c4:	4643      	mov	r3, r8
 80006c6:	07de      	lsls	r6, r3, #31
 80006c8:	0858      	lsrs	r0, r3, #1
 80006ca:	086b      	lsrs	r3, r5, #1
 80006cc:	431e      	orrs	r6, r3
 80006ce:	07ed      	lsls	r5, r5, #31
 80006d0:	e63c      	b.n	800034c <__aeabi_ddiv+0xf4>
 80006d2:	f000 ff8d 	bl	80015f0 <__clzsi2>
 80006d6:	0001      	movs	r1, r0
 80006d8:	0002      	movs	r2, r0
 80006da:	3115      	adds	r1, #21
 80006dc:	3220      	adds	r2, #32
 80006de:	291c      	cmp	r1, #28
 80006e0:	dc00      	bgt.n	80006e4 <__aeabi_ddiv+0x48c>
 80006e2:	e72c      	b.n	800053e <__aeabi_ddiv+0x2e6>
 80006e4:	464b      	mov	r3, r9
 80006e6:	3808      	subs	r0, #8
 80006e8:	4083      	lsls	r3, r0
 80006ea:	2500      	movs	r5, #0
 80006ec:	4698      	mov	r8, r3
 80006ee:	e732      	b.n	8000556 <__aeabi_ddiv+0x2fe>
 80006f0:	f000 ff7e 	bl	80015f0 <__clzsi2>
 80006f4:	0003      	movs	r3, r0
 80006f6:	001a      	movs	r2, r3
 80006f8:	3215      	adds	r2, #21
 80006fa:	3020      	adds	r0, #32
 80006fc:	2a1c      	cmp	r2, #28
 80006fe:	dc00      	bgt.n	8000702 <__aeabi_ddiv+0x4aa>
 8000700:	e6ff      	b.n	8000502 <__aeabi_ddiv+0x2aa>
 8000702:	4654      	mov	r4, sl
 8000704:	3b08      	subs	r3, #8
 8000706:	2100      	movs	r1, #0
 8000708:	409c      	lsls	r4, r3
 800070a:	e705      	b.n	8000518 <__aeabi_ddiv+0x2c0>
 800070c:	1936      	adds	r6, r6, r4
 800070e:	3b01      	subs	r3, #1
 8000710:	42b4      	cmp	r4, r6
 8000712:	d900      	bls.n	8000716 <__aeabi_ddiv+0x4be>
 8000714:	e6a6      	b.n	8000464 <__aeabi_ddiv+0x20c>
 8000716:	42b2      	cmp	r2, r6
 8000718:	d800      	bhi.n	800071c <__aeabi_ddiv+0x4c4>
 800071a:	e6a3      	b.n	8000464 <__aeabi_ddiv+0x20c>
 800071c:	1e83      	subs	r3, r0, #2
 800071e:	1936      	adds	r6, r6, r4
 8000720:	e6a0      	b.n	8000464 <__aeabi_ddiv+0x20c>
 8000722:	1909      	adds	r1, r1, r4
 8000724:	3d01      	subs	r5, #1
 8000726:	428c      	cmp	r4, r1
 8000728:	d900      	bls.n	800072c <__aeabi_ddiv+0x4d4>
 800072a:	e68d      	b.n	8000448 <__aeabi_ddiv+0x1f0>
 800072c:	428a      	cmp	r2, r1
 800072e:	d800      	bhi.n	8000732 <__aeabi_ddiv+0x4da>
 8000730:	e68a      	b.n	8000448 <__aeabi_ddiv+0x1f0>
 8000732:	1e85      	subs	r5, r0, #2
 8000734:	1909      	adds	r1, r1, r4
 8000736:	e687      	b.n	8000448 <__aeabi_ddiv+0x1f0>
 8000738:	220f      	movs	r2, #15
 800073a:	402a      	ands	r2, r5
 800073c:	2a04      	cmp	r2, #4
 800073e:	d100      	bne.n	8000742 <__aeabi_ddiv+0x4ea>
 8000740:	e6bc      	b.n	80004bc <__aeabi_ddiv+0x264>
 8000742:	1d29      	adds	r1, r5, #4
 8000744:	42a9      	cmp	r1, r5
 8000746:	41ad      	sbcs	r5, r5
 8000748:	426d      	negs	r5, r5
 800074a:	08c9      	lsrs	r1, r1, #3
 800074c:	44a8      	add	r8, r5
 800074e:	e6b6      	b.n	80004be <__aeabi_ddiv+0x266>
 8000750:	42af      	cmp	r7, r5
 8000752:	d900      	bls.n	8000756 <__aeabi_ddiv+0x4fe>
 8000754:	e662      	b.n	800041c <__aeabi_ddiv+0x1c4>
 8000756:	4281      	cmp	r1, r0
 8000758:	d804      	bhi.n	8000764 <__aeabi_ddiv+0x50c>
 800075a:	d000      	beq.n	800075e <__aeabi_ddiv+0x506>
 800075c:	e65e      	b.n	800041c <__aeabi_ddiv+0x1c4>
 800075e:	42ae      	cmp	r6, r5
 8000760:	d800      	bhi.n	8000764 <__aeabi_ddiv+0x50c>
 8000762:	e65b      	b.n	800041c <__aeabi_ddiv+0x1c4>
 8000764:	2302      	movs	r3, #2
 8000766:	425b      	negs	r3, r3
 8000768:	469c      	mov	ip, r3
 800076a:	9b00      	ldr	r3, [sp, #0]
 800076c:	44e0      	add	r8, ip
 800076e:	469c      	mov	ip, r3
 8000770:	4465      	add	r5, ip
 8000772:	429d      	cmp	r5, r3
 8000774:	419b      	sbcs	r3, r3
 8000776:	425b      	negs	r3, r3
 8000778:	191b      	adds	r3, r3, r4
 800077a:	18c0      	adds	r0, r0, r3
 800077c:	e64f      	b.n	800041e <__aeabi_ddiv+0x1c6>
 800077e:	42b2      	cmp	r2, r6
 8000780:	d800      	bhi.n	8000784 <__aeabi_ddiv+0x52c>
 8000782:	e612      	b.n	80003aa <__aeabi_ddiv+0x152>
 8000784:	1e83      	subs	r3, r0, #2
 8000786:	1936      	adds	r6, r6, r4
 8000788:	e60f      	b.n	80003aa <__aeabi_ddiv+0x152>
 800078a:	428a      	cmp	r2, r1
 800078c:	d800      	bhi.n	8000790 <__aeabi_ddiv+0x538>
 800078e:	e5fa      	b.n	8000386 <__aeabi_ddiv+0x12e>
 8000790:	1e83      	subs	r3, r0, #2
 8000792:	4698      	mov	r8, r3
 8000794:	1909      	adds	r1, r1, r4
 8000796:	e5f6      	b.n	8000386 <__aeabi_ddiv+0x12e>
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <__aeabi_ddiv+0x5d4>)
 800079a:	0028      	movs	r0, r5
 800079c:	445b      	add	r3, fp
 800079e:	4641      	mov	r1, r8
 80007a0:	409d      	lsls	r5, r3
 80007a2:	4099      	lsls	r1, r3
 80007a4:	40d0      	lsrs	r0, r2
 80007a6:	1e6b      	subs	r3, r5, #1
 80007a8:	419d      	sbcs	r5, r3
 80007aa:	4643      	mov	r3, r8
 80007ac:	4301      	orrs	r1, r0
 80007ae:	4329      	orrs	r1, r5
 80007b0:	40d3      	lsrs	r3, r2
 80007b2:	074a      	lsls	r2, r1, #29
 80007b4:	d100      	bne.n	80007b8 <__aeabi_ddiv+0x560>
 80007b6:	e755      	b.n	8000664 <__aeabi_ddiv+0x40c>
 80007b8:	220f      	movs	r2, #15
 80007ba:	400a      	ands	r2, r1
 80007bc:	2a04      	cmp	r2, #4
 80007be:	d000      	beq.n	80007c2 <__aeabi_ddiv+0x56a>
 80007c0:	e74a      	b.n	8000658 <__aeabi_ddiv+0x400>
 80007c2:	e74f      	b.n	8000664 <__aeabi_ddiv+0x40c>
 80007c4:	0015      	movs	r5, r2
 80007c6:	4286      	cmp	r6, r0
 80007c8:	d000      	beq.n	80007cc <__aeabi_ddiv+0x574>
 80007ca:	e66d      	b.n	80004a8 <__aeabi_ddiv+0x250>
 80007cc:	9a00      	ldr	r2, [sp, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d000      	beq.n	80007d4 <__aeabi_ddiv+0x57c>
 80007d2:	e669      	b.n	80004a8 <__aeabi_ddiv+0x250>
 80007d4:	e66a      	b.n	80004ac <__aeabi_ddiv+0x254>
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <__aeabi_ddiv+0x5d8>)
 80007d8:	445b      	add	r3, fp
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dc00      	bgt.n	80007e0 <__aeabi_ddiv+0x588>
 80007de:	e713      	b.n	8000608 <__aeabi_ddiv+0x3b0>
 80007e0:	2501      	movs	r5, #1
 80007e2:	2100      	movs	r1, #0
 80007e4:	44a8      	add	r8, r5
 80007e6:	e66a      	b.n	80004be <__aeabi_ddiv+0x266>
 80007e8:	075d      	lsls	r5, r3, #29
 80007ea:	025b      	lsls	r3, r3, #9
 80007ec:	0b1a      	lsrs	r2, r3, #12
 80007ee:	08c9      	lsrs	r1, r1, #3
 80007f0:	2300      	movs	r3, #0
 80007f2:	430d      	orrs	r5, r1
 80007f4:	e587      	b.n	8000306 <__aeabi_ddiv+0xae>
 80007f6:	9900      	ldr	r1, [sp, #0]
 80007f8:	3d02      	subs	r5, #2
 80007fa:	004a      	lsls	r2, r1, #1
 80007fc:	428a      	cmp	r2, r1
 80007fe:	41bf      	sbcs	r7, r7
 8000800:	427f      	negs	r7, r7
 8000802:	193f      	adds	r7, r7, r4
 8000804:	19f6      	adds	r6, r6, r7
 8000806:	9200      	str	r2, [sp, #0]
 8000808:	e7dd      	b.n	80007c6 <__aeabi_ddiv+0x56e>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	4643      	mov	r3, r8
 800080e:	0312      	lsls	r2, r2, #12
 8000810:	431a      	orrs	r2, r3
 8000812:	0312      	lsls	r2, r2, #12
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <__aeabi_ddiv+0x5cc>)
 8000816:	0b12      	lsrs	r2, r2, #12
 8000818:	e575      	b.n	8000306 <__aeabi_ddiv+0xae>
 800081a:	9900      	ldr	r1, [sp, #0]
 800081c:	4299      	cmp	r1, r3
 800081e:	d3ea      	bcc.n	80007f6 <__aeabi_ddiv+0x59e>
 8000820:	0015      	movs	r5, r2
 8000822:	e7d3      	b.n	80007cc <__aeabi_ddiv+0x574>
 8000824:	000007ff 	.word	0x000007ff
 8000828:	0000043e 	.word	0x0000043e
 800082c:	0000041e 	.word	0x0000041e
 8000830:	000003ff 	.word	0x000003ff

08000834 <__aeabi_dmul>:
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000836:	4645      	mov	r5, r8
 8000838:	46de      	mov	lr, fp
 800083a:	4657      	mov	r7, sl
 800083c:	464e      	mov	r6, r9
 800083e:	b5e0      	push	{r5, r6, r7, lr}
 8000840:	001f      	movs	r7, r3
 8000842:	030b      	lsls	r3, r1, #12
 8000844:	0b1b      	lsrs	r3, r3, #12
 8000846:	469b      	mov	fp, r3
 8000848:	004d      	lsls	r5, r1, #1
 800084a:	0fcb      	lsrs	r3, r1, #31
 800084c:	0004      	movs	r4, r0
 800084e:	4691      	mov	r9, r2
 8000850:	4698      	mov	r8, r3
 8000852:	b087      	sub	sp, #28
 8000854:	0d6d      	lsrs	r5, r5, #21
 8000856:	d100      	bne.n	800085a <__aeabi_dmul+0x26>
 8000858:	e1cd      	b.n	8000bf6 <__aeabi_dmul+0x3c2>
 800085a:	4bce      	ldr	r3, [pc, #824]	; (8000b94 <__aeabi_dmul+0x360>)
 800085c:	429d      	cmp	r5, r3
 800085e:	d100      	bne.n	8000862 <__aeabi_dmul+0x2e>
 8000860:	e1e9      	b.n	8000c36 <__aeabi_dmul+0x402>
 8000862:	465a      	mov	r2, fp
 8000864:	0f43      	lsrs	r3, r0, #29
 8000866:	00d2      	lsls	r2, r2, #3
 8000868:	4313      	orrs	r3, r2
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	431a      	orrs	r2, r3
 8000870:	00c3      	lsls	r3, r0, #3
 8000872:	469a      	mov	sl, r3
 8000874:	4bc8      	ldr	r3, [pc, #800]	; (8000b98 <__aeabi_dmul+0x364>)
 8000876:	4693      	mov	fp, r2
 8000878:	469c      	mov	ip, r3
 800087a:	2300      	movs	r3, #0
 800087c:	2600      	movs	r6, #0
 800087e:	4465      	add	r5, ip
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	033c      	lsls	r4, r7, #12
 8000884:	007b      	lsls	r3, r7, #1
 8000886:	4648      	mov	r0, r9
 8000888:	0b24      	lsrs	r4, r4, #12
 800088a:	0d5b      	lsrs	r3, r3, #21
 800088c:	0fff      	lsrs	r7, r7, #31
 800088e:	2b00      	cmp	r3, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_dmul+0x60>
 8000892:	e189      	b.n	8000ba8 <__aeabi_dmul+0x374>
 8000894:	4abf      	ldr	r2, [pc, #764]	; (8000b94 <__aeabi_dmul+0x360>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d019      	beq.n	80008ce <__aeabi_dmul+0x9a>
 800089a:	0f42      	lsrs	r2, r0, #29
 800089c:	00e4      	lsls	r4, r4, #3
 800089e:	4322      	orrs	r2, r4
 80008a0:	2480      	movs	r4, #128	; 0x80
 80008a2:	0424      	lsls	r4, r4, #16
 80008a4:	4314      	orrs	r4, r2
 80008a6:	4abc      	ldr	r2, [pc, #752]	; (8000b98 <__aeabi_dmul+0x364>)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4694      	mov	ip, r2
 80008ac:	4642      	mov	r2, r8
 80008ae:	4463      	add	r3, ip
 80008b0:	195b      	adds	r3, r3, r5
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	9b01      	ldr	r3, [sp, #4]
 80008b6:	407a      	eors	r2, r7
 80008b8:	3301      	adds	r3, #1
 80008ba:	00c0      	lsls	r0, r0, #3
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	2e0a      	cmp	r6, #10
 80008c2:	dd1c      	ble.n	80008fe <__aeabi_dmul+0xca>
 80008c4:	003a      	movs	r2, r7
 80008c6:	2e0b      	cmp	r6, #11
 80008c8:	d05e      	beq.n	8000988 <__aeabi_dmul+0x154>
 80008ca:	4647      	mov	r7, r8
 80008cc:	e056      	b.n	800097c <__aeabi_dmul+0x148>
 80008ce:	4649      	mov	r1, r9
 80008d0:	4bb0      	ldr	r3, [pc, #704]	; (8000b94 <__aeabi_dmul+0x360>)
 80008d2:	4321      	orrs	r1, r4
 80008d4:	18eb      	adds	r3, r5, r3
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	2900      	cmp	r1, #0
 80008da:	d12a      	bne.n	8000932 <__aeabi_dmul+0xfe>
 80008dc:	2080      	movs	r0, #128	; 0x80
 80008de:	2202      	movs	r2, #2
 80008e0:	0100      	lsls	r0, r0, #4
 80008e2:	002b      	movs	r3, r5
 80008e4:	4684      	mov	ip, r0
 80008e6:	4316      	orrs	r6, r2
 80008e8:	4642      	mov	r2, r8
 80008ea:	4463      	add	r3, ip
 80008ec:	407a      	eors	r2, r7
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2e0a      	cmp	r6, #10
 80008f4:	dd00      	ble.n	80008f8 <__aeabi_dmul+0xc4>
 80008f6:	e231      	b.n	8000d5c <__aeabi_dmul+0x528>
 80008f8:	2000      	movs	r0, #0
 80008fa:	2400      	movs	r4, #0
 80008fc:	2102      	movs	r1, #2
 80008fe:	2e02      	cmp	r6, #2
 8000900:	dc26      	bgt.n	8000950 <__aeabi_dmul+0x11c>
 8000902:	3e01      	subs	r6, #1
 8000904:	2e01      	cmp	r6, #1
 8000906:	d852      	bhi.n	80009ae <__aeabi_dmul+0x17a>
 8000908:	2902      	cmp	r1, #2
 800090a:	d04c      	beq.n	80009a6 <__aeabi_dmul+0x172>
 800090c:	2901      	cmp	r1, #1
 800090e:	d000      	beq.n	8000912 <__aeabi_dmul+0xde>
 8000910:	e118      	b.n	8000b44 <__aeabi_dmul+0x310>
 8000912:	2300      	movs	r3, #0
 8000914:	2400      	movs	r4, #0
 8000916:	2500      	movs	r5, #0
 8000918:	051b      	lsls	r3, r3, #20
 800091a:	4323      	orrs	r3, r4
 800091c:	07d2      	lsls	r2, r2, #31
 800091e:	4313      	orrs	r3, r2
 8000920:	0028      	movs	r0, r5
 8000922:	0019      	movs	r1, r3
 8000924:	b007      	add	sp, #28
 8000926:	bcf0      	pop	{r4, r5, r6, r7}
 8000928:	46bb      	mov	fp, r7
 800092a:	46b2      	mov	sl, r6
 800092c:	46a9      	mov	r9, r5
 800092e:	46a0      	mov	r8, r4
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	2203      	movs	r2, #3
 8000936:	0109      	lsls	r1, r1, #4
 8000938:	002b      	movs	r3, r5
 800093a:	468c      	mov	ip, r1
 800093c:	4316      	orrs	r6, r2
 800093e:	4642      	mov	r2, r8
 8000940:	4463      	add	r3, ip
 8000942:	407a      	eors	r2, r7
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	2e0a      	cmp	r6, #10
 800094a:	dd00      	ble.n	800094e <__aeabi_dmul+0x11a>
 800094c:	e228      	b.n	8000da0 <__aeabi_dmul+0x56c>
 800094e:	2103      	movs	r1, #3
 8000950:	2501      	movs	r5, #1
 8000952:	40b5      	lsls	r5, r6
 8000954:	46ac      	mov	ip, r5
 8000956:	26a6      	movs	r6, #166	; 0xa6
 8000958:	4663      	mov	r3, ip
 800095a:	00f6      	lsls	r6, r6, #3
 800095c:	4035      	ands	r5, r6
 800095e:	4233      	tst	r3, r6
 8000960:	d10b      	bne.n	800097a <__aeabi_dmul+0x146>
 8000962:	2690      	movs	r6, #144	; 0x90
 8000964:	00b6      	lsls	r6, r6, #2
 8000966:	4233      	tst	r3, r6
 8000968:	d118      	bne.n	800099c <__aeabi_dmul+0x168>
 800096a:	3eb9      	subs	r6, #185	; 0xb9
 800096c:	3eff      	subs	r6, #255	; 0xff
 800096e:	421e      	tst	r6, r3
 8000970:	d01d      	beq.n	80009ae <__aeabi_dmul+0x17a>
 8000972:	46a3      	mov	fp, r4
 8000974:	4682      	mov	sl, r0
 8000976:	9100      	str	r1, [sp, #0]
 8000978:	e000      	b.n	800097c <__aeabi_dmul+0x148>
 800097a:	0017      	movs	r7, r2
 800097c:	9900      	ldr	r1, [sp, #0]
 800097e:	003a      	movs	r2, r7
 8000980:	2902      	cmp	r1, #2
 8000982:	d010      	beq.n	80009a6 <__aeabi_dmul+0x172>
 8000984:	465c      	mov	r4, fp
 8000986:	4650      	mov	r0, sl
 8000988:	2903      	cmp	r1, #3
 800098a:	d1bf      	bne.n	800090c <__aeabi_dmul+0xd8>
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	031b      	lsls	r3, r3, #12
 8000990:	431c      	orrs	r4, r3
 8000992:	0324      	lsls	r4, r4, #12
 8000994:	0005      	movs	r5, r0
 8000996:	4b7f      	ldr	r3, [pc, #508]	; (8000b94 <__aeabi_dmul+0x360>)
 8000998:	0b24      	lsrs	r4, r4, #12
 800099a:	e7bd      	b.n	8000918 <__aeabi_dmul+0xe4>
 800099c:	2480      	movs	r4, #128	; 0x80
 800099e:	2200      	movs	r2, #0
 80009a0:	4b7c      	ldr	r3, [pc, #496]	; (8000b94 <__aeabi_dmul+0x360>)
 80009a2:	0324      	lsls	r4, r4, #12
 80009a4:	e7b8      	b.n	8000918 <__aeabi_dmul+0xe4>
 80009a6:	2400      	movs	r4, #0
 80009a8:	2500      	movs	r5, #0
 80009aa:	4b7a      	ldr	r3, [pc, #488]	; (8000b94 <__aeabi_dmul+0x360>)
 80009ac:	e7b4      	b.n	8000918 <__aeabi_dmul+0xe4>
 80009ae:	4653      	mov	r3, sl
 80009b0:	041e      	lsls	r6, r3, #16
 80009b2:	0c36      	lsrs	r6, r6, #16
 80009b4:	0c1f      	lsrs	r7, r3, #16
 80009b6:	0033      	movs	r3, r6
 80009b8:	0c01      	lsrs	r1, r0, #16
 80009ba:	0400      	lsls	r0, r0, #16
 80009bc:	0c00      	lsrs	r0, r0, #16
 80009be:	4343      	muls	r3, r0
 80009c0:	4698      	mov	r8, r3
 80009c2:	0003      	movs	r3, r0
 80009c4:	437b      	muls	r3, r7
 80009c6:	4699      	mov	r9, r3
 80009c8:	0033      	movs	r3, r6
 80009ca:	434b      	muls	r3, r1
 80009cc:	469c      	mov	ip, r3
 80009ce:	4643      	mov	r3, r8
 80009d0:	000d      	movs	r5, r1
 80009d2:	0c1b      	lsrs	r3, r3, #16
 80009d4:	469a      	mov	sl, r3
 80009d6:	437d      	muls	r5, r7
 80009d8:	44cc      	add	ip, r9
 80009da:	44d4      	add	ip, sl
 80009dc:	9500      	str	r5, [sp, #0]
 80009de:	45e1      	cmp	r9, ip
 80009e0:	d904      	bls.n	80009ec <__aeabi_dmul+0x1b8>
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	025b      	lsls	r3, r3, #9
 80009e6:	4699      	mov	r9, r3
 80009e8:	444d      	add	r5, r9
 80009ea:	9500      	str	r5, [sp, #0]
 80009ec:	4663      	mov	r3, ip
 80009ee:	0c1b      	lsrs	r3, r3, #16
 80009f0:	001d      	movs	r5, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	041b      	lsls	r3, r3, #16
 80009f6:	469c      	mov	ip, r3
 80009f8:	4643      	mov	r3, r8
 80009fa:	041b      	lsls	r3, r3, #16
 80009fc:	0c1b      	lsrs	r3, r3, #16
 80009fe:	4698      	mov	r8, r3
 8000a00:	4663      	mov	r3, ip
 8000a02:	4443      	add	r3, r8
 8000a04:	9303      	str	r3, [sp, #12]
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	4698      	mov	r8, r3
 8000a0a:	0033      	movs	r3, r6
 8000a0c:	0424      	lsls	r4, r4, #16
 8000a0e:	0c24      	lsrs	r4, r4, #16
 8000a10:	4363      	muls	r3, r4
 8000a12:	469c      	mov	ip, r3
 8000a14:	0023      	movs	r3, r4
 8000a16:	437b      	muls	r3, r7
 8000a18:	4699      	mov	r9, r3
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	435e      	muls	r6, r3
 8000a1e:	435f      	muls	r7, r3
 8000a20:	444e      	add	r6, r9
 8000a22:	4663      	mov	r3, ip
 8000a24:	46b2      	mov	sl, r6
 8000a26:	0c1e      	lsrs	r6, r3, #16
 8000a28:	4456      	add	r6, sl
 8000a2a:	45b1      	cmp	r9, r6
 8000a2c:	d903      	bls.n	8000a36 <__aeabi_dmul+0x202>
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	4699      	mov	r9, r3
 8000a34:	444f      	add	r7, r9
 8000a36:	0c33      	lsrs	r3, r6, #16
 8000a38:	4699      	mov	r9, r3
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	444b      	add	r3, r9
 8000a3e:	9305      	str	r3, [sp, #20]
 8000a40:	4663      	mov	r3, ip
 8000a42:	46ac      	mov	ip, r5
 8000a44:	041f      	lsls	r7, r3, #16
 8000a46:	0c3f      	lsrs	r7, r7, #16
 8000a48:	0436      	lsls	r6, r6, #16
 8000a4a:	19f6      	adds	r6, r6, r7
 8000a4c:	44b4      	add	ip, r6
 8000a4e:	4663      	mov	r3, ip
 8000a50:	9304      	str	r3, [sp, #16]
 8000a52:	465b      	mov	r3, fp
 8000a54:	0c1b      	lsrs	r3, r3, #16
 8000a56:	469c      	mov	ip, r3
 8000a58:	465b      	mov	r3, fp
 8000a5a:	041f      	lsls	r7, r3, #16
 8000a5c:	0c3f      	lsrs	r7, r7, #16
 8000a5e:	003b      	movs	r3, r7
 8000a60:	4343      	muls	r3, r0
 8000a62:	4699      	mov	r9, r3
 8000a64:	4663      	mov	r3, ip
 8000a66:	4343      	muls	r3, r0
 8000a68:	469a      	mov	sl, r3
 8000a6a:	464b      	mov	r3, r9
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	0c1b      	lsrs	r3, r3, #16
 8000a70:	469b      	mov	fp, r3
 8000a72:	4348      	muls	r0, r1
 8000a74:	4379      	muls	r1, r7
 8000a76:	4451      	add	r1, sl
 8000a78:	4459      	add	r1, fp
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d903      	bls.n	8000a86 <__aeabi_dmul+0x252>
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	025b      	lsls	r3, r3, #9
 8000a82:	469a      	mov	sl, r3
 8000a84:	4450      	add	r0, sl
 8000a86:	0c0b      	lsrs	r3, r1, #16
 8000a88:	469a      	mov	sl, r3
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	0c1b      	lsrs	r3, r3, #16
 8000a90:	4699      	mov	r9, r3
 8000a92:	003b      	movs	r3, r7
 8000a94:	4363      	muls	r3, r4
 8000a96:	0409      	lsls	r1, r1, #16
 8000a98:	4645      	mov	r5, r8
 8000a9a:	4449      	add	r1, r9
 8000a9c:	4699      	mov	r9, r3
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	435c      	muls	r4, r3
 8000aa2:	436b      	muls	r3, r5
 8000aa4:	469c      	mov	ip, r3
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	4698      	mov	r8, r3
 8000aac:	436f      	muls	r7, r5
 8000aae:	193f      	adds	r7, r7, r4
 8000ab0:	4447      	add	r7, r8
 8000ab2:	4450      	add	r0, sl
 8000ab4:	42bc      	cmp	r4, r7
 8000ab6:	d903      	bls.n	8000ac0 <__aeabi_dmul+0x28c>
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	025b      	lsls	r3, r3, #9
 8000abc:	4698      	mov	r8, r3
 8000abe:	44c4      	add	ip, r8
 8000ac0:	9b04      	ldr	r3, [sp, #16]
 8000ac2:	9d00      	ldr	r5, [sp, #0]
 8000ac4:	4698      	mov	r8, r3
 8000ac6:	4445      	add	r5, r8
 8000ac8:	42b5      	cmp	r5, r6
 8000aca:	41b6      	sbcs	r6, r6
 8000acc:	4273      	negs	r3, r6
 8000ace:	4698      	mov	r8, r3
 8000ad0:	464b      	mov	r3, r9
 8000ad2:	041e      	lsls	r6, r3, #16
 8000ad4:	9b05      	ldr	r3, [sp, #20]
 8000ad6:	043c      	lsls	r4, r7, #16
 8000ad8:	4699      	mov	r9, r3
 8000ada:	0c36      	lsrs	r6, r6, #16
 8000adc:	19a4      	adds	r4, r4, r6
 8000ade:	444c      	add	r4, r9
 8000ae0:	46a1      	mov	r9, r4
 8000ae2:	4683      	mov	fp, r0
 8000ae4:	186e      	adds	r6, r5, r1
 8000ae6:	44c1      	add	r9, r8
 8000ae8:	428e      	cmp	r6, r1
 8000aea:	4189      	sbcs	r1, r1
 8000aec:	44cb      	add	fp, r9
 8000aee:	465d      	mov	r5, fp
 8000af0:	4249      	negs	r1, r1
 8000af2:	186d      	adds	r5, r5, r1
 8000af4:	429c      	cmp	r4, r3
 8000af6:	41a4      	sbcs	r4, r4
 8000af8:	45c1      	cmp	r9, r8
 8000afa:	419b      	sbcs	r3, r3
 8000afc:	4583      	cmp	fp, r0
 8000afe:	4180      	sbcs	r0, r0
 8000b00:	428d      	cmp	r5, r1
 8000b02:	4189      	sbcs	r1, r1
 8000b04:	425b      	negs	r3, r3
 8000b06:	4264      	negs	r4, r4
 8000b08:	431c      	orrs	r4, r3
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	9b03      	ldr	r3, [sp, #12]
 8000b0e:	4249      	negs	r1, r1
 8000b10:	4301      	orrs	r1, r0
 8000b12:	0270      	lsls	r0, r6, #9
 8000b14:	0c3f      	lsrs	r7, r7, #16
 8000b16:	4318      	orrs	r0, r3
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	1e47      	subs	r7, r0, #1
 8000b1c:	41b8      	sbcs	r0, r7
 8000b1e:	1864      	adds	r4, r4, r1
 8000b20:	4464      	add	r4, ip
 8000b22:	0df6      	lsrs	r6, r6, #23
 8000b24:	0261      	lsls	r1, r4, #9
 8000b26:	4330      	orrs	r0, r6
 8000b28:	0dec      	lsrs	r4, r5, #23
 8000b2a:	026e      	lsls	r6, r5, #9
 8000b2c:	430c      	orrs	r4, r1
 8000b2e:	4330      	orrs	r0, r6
 8000b30:	01c9      	lsls	r1, r1, #7
 8000b32:	d400      	bmi.n	8000b36 <__aeabi_dmul+0x302>
 8000b34:	e0f1      	b.n	8000d1a <__aeabi_dmul+0x4e6>
 8000b36:	2101      	movs	r1, #1
 8000b38:	0843      	lsrs	r3, r0, #1
 8000b3a:	4001      	ands	r1, r0
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	07e0      	lsls	r0, r4, #31
 8000b40:	4318      	orrs	r0, r3
 8000b42:	0864      	lsrs	r4, r4, #1
 8000b44:	4915      	ldr	r1, [pc, #84]	; (8000b9c <__aeabi_dmul+0x368>)
 8000b46:	9b02      	ldr	r3, [sp, #8]
 8000b48:	468c      	mov	ip, r1
 8000b4a:	4463      	add	r3, ip
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dc00      	bgt.n	8000b52 <__aeabi_dmul+0x31e>
 8000b50:	e097      	b.n	8000c82 <__aeabi_dmul+0x44e>
 8000b52:	0741      	lsls	r1, r0, #29
 8000b54:	d009      	beq.n	8000b6a <__aeabi_dmul+0x336>
 8000b56:	210f      	movs	r1, #15
 8000b58:	4001      	ands	r1, r0
 8000b5a:	2904      	cmp	r1, #4
 8000b5c:	d005      	beq.n	8000b6a <__aeabi_dmul+0x336>
 8000b5e:	1d01      	adds	r1, r0, #4
 8000b60:	4281      	cmp	r1, r0
 8000b62:	4180      	sbcs	r0, r0
 8000b64:	4240      	negs	r0, r0
 8000b66:	1824      	adds	r4, r4, r0
 8000b68:	0008      	movs	r0, r1
 8000b6a:	01e1      	lsls	r1, r4, #7
 8000b6c:	d506      	bpl.n	8000b7c <__aeabi_dmul+0x348>
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	00c9      	lsls	r1, r1, #3
 8000b72:	468c      	mov	ip, r1
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <__aeabi_dmul+0x36c>)
 8000b76:	401c      	ands	r4, r3
 8000b78:	9b02      	ldr	r3, [sp, #8]
 8000b7a:	4463      	add	r3, ip
 8000b7c:	4909      	ldr	r1, [pc, #36]	; (8000ba4 <__aeabi_dmul+0x370>)
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	dd00      	ble.n	8000b84 <__aeabi_dmul+0x350>
 8000b82:	e710      	b.n	80009a6 <__aeabi_dmul+0x172>
 8000b84:	0761      	lsls	r1, r4, #29
 8000b86:	08c5      	lsrs	r5, r0, #3
 8000b88:	0264      	lsls	r4, r4, #9
 8000b8a:	055b      	lsls	r3, r3, #21
 8000b8c:	430d      	orrs	r5, r1
 8000b8e:	0b24      	lsrs	r4, r4, #12
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	e6c1      	b.n	8000918 <__aeabi_dmul+0xe4>
 8000b94:	000007ff 	.word	0x000007ff
 8000b98:	fffffc01 	.word	0xfffffc01
 8000b9c:	000003ff 	.word	0x000003ff
 8000ba0:	feffffff 	.word	0xfeffffff
 8000ba4:	000007fe 	.word	0x000007fe
 8000ba8:	464b      	mov	r3, r9
 8000baa:	4323      	orrs	r3, r4
 8000bac:	d059      	beq.n	8000c62 <__aeabi_dmul+0x42e>
 8000bae:	2c00      	cmp	r4, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dmul+0x380>
 8000bb2:	e0a3      	b.n	8000cfc <__aeabi_dmul+0x4c8>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f000 fd1b 	bl	80015f0 <__clzsi2>
 8000bba:	0001      	movs	r1, r0
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	390b      	subs	r1, #11
 8000bc0:	221d      	movs	r2, #29
 8000bc2:	1a52      	subs	r2, r2, r1
 8000bc4:	4649      	mov	r1, r9
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	40d1      	lsrs	r1, r2
 8000bca:	464a      	mov	r2, r9
 8000bcc:	3808      	subs	r0, #8
 8000bce:	4082      	lsls	r2, r0
 8000bd0:	4084      	lsls	r4, r0
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	430c      	orrs	r4, r1
 8000bd6:	4a74      	ldr	r2, [pc, #464]	; (8000da8 <__aeabi_dmul+0x574>)
 8000bd8:	1aeb      	subs	r3, r5, r3
 8000bda:	4694      	mov	ip, r2
 8000bdc:	4642      	mov	r2, r8
 8000bde:	4463      	add	r3, ip
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	9b01      	ldr	r3, [sp, #4]
 8000be4:	407a      	eors	r2, r7
 8000be6:	3301      	adds	r3, #1
 8000be8:	2100      	movs	r1, #0
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2e0a      	cmp	r6, #10
 8000bf0:	dd00      	ble.n	8000bf4 <__aeabi_dmul+0x3c0>
 8000bf2:	e667      	b.n	80008c4 <__aeabi_dmul+0x90>
 8000bf4:	e683      	b.n	80008fe <__aeabi_dmul+0xca>
 8000bf6:	465b      	mov	r3, fp
 8000bf8:	4303      	orrs	r3, r0
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	d02a      	beq.n	8000c54 <__aeabi_dmul+0x420>
 8000bfe:	465b      	mov	r3, fp
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d06d      	beq.n	8000ce0 <__aeabi_dmul+0x4ac>
 8000c04:	4658      	mov	r0, fp
 8000c06:	f000 fcf3 	bl	80015f0 <__clzsi2>
 8000c0a:	0001      	movs	r1, r0
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	390b      	subs	r1, #11
 8000c10:	221d      	movs	r2, #29
 8000c12:	1a52      	subs	r2, r2, r1
 8000c14:	0021      	movs	r1, r4
 8000c16:	0018      	movs	r0, r3
 8000c18:	465d      	mov	r5, fp
 8000c1a:	40d1      	lsrs	r1, r2
 8000c1c:	3808      	subs	r0, #8
 8000c1e:	4085      	lsls	r5, r0
 8000c20:	000a      	movs	r2, r1
 8000c22:	4084      	lsls	r4, r0
 8000c24:	432a      	orrs	r2, r5
 8000c26:	4693      	mov	fp, r2
 8000c28:	46a2      	mov	sl, r4
 8000c2a:	4d5f      	ldr	r5, [pc, #380]	; (8000da8 <__aeabi_dmul+0x574>)
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	1aed      	subs	r5, r5, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	e625      	b.n	8000882 <__aeabi_dmul+0x4e>
 8000c36:	465b      	mov	r3, fp
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	d105      	bne.n	8000c4a <__aeabi_dmul+0x416>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	469b      	mov	fp, r3
 8000c42:	3302      	adds	r3, #2
 8000c44:	2608      	movs	r6, #8
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	e61b      	b.n	8000882 <__aeabi_dmul+0x4e>
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	4682      	mov	sl, r0
 8000c4e:	260c      	movs	r6, #12
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	e616      	b.n	8000882 <__aeabi_dmul+0x4e>
 8000c54:	2300      	movs	r3, #0
 8000c56:	469b      	mov	fp, r3
 8000c58:	3301      	adds	r3, #1
 8000c5a:	2604      	movs	r6, #4
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	e60f      	b.n	8000882 <__aeabi_dmul+0x4e>
 8000c62:	4642      	mov	r2, r8
 8000c64:	3301      	adds	r3, #1
 8000c66:	9501      	str	r5, [sp, #4]
 8000c68:	431e      	orrs	r6, r3
 8000c6a:	9b01      	ldr	r3, [sp, #4]
 8000c6c:	407a      	eors	r2, r7
 8000c6e:	3301      	adds	r3, #1
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	2101      	movs	r1, #1
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	9302      	str	r3, [sp, #8]
 8000c7a:	2e0a      	cmp	r6, #10
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dmul+0x44c>
 8000c7e:	e621      	b.n	80008c4 <__aeabi_dmul+0x90>
 8000c80:	e63d      	b.n	80008fe <__aeabi_dmul+0xca>
 8000c82:	2101      	movs	r1, #1
 8000c84:	1ac9      	subs	r1, r1, r3
 8000c86:	2938      	cmp	r1, #56	; 0x38
 8000c88:	dd00      	ble.n	8000c8c <__aeabi_dmul+0x458>
 8000c8a:	e642      	b.n	8000912 <__aeabi_dmul+0xde>
 8000c8c:	291f      	cmp	r1, #31
 8000c8e:	dd47      	ble.n	8000d20 <__aeabi_dmul+0x4ec>
 8000c90:	261f      	movs	r6, #31
 8000c92:	0025      	movs	r5, r4
 8000c94:	4276      	negs	r6, r6
 8000c96:	1af3      	subs	r3, r6, r3
 8000c98:	40dd      	lsrs	r5, r3
 8000c9a:	002b      	movs	r3, r5
 8000c9c:	2920      	cmp	r1, #32
 8000c9e:	d005      	beq.n	8000cac <__aeabi_dmul+0x478>
 8000ca0:	4942      	ldr	r1, [pc, #264]	; (8000dac <__aeabi_dmul+0x578>)
 8000ca2:	9d02      	ldr	r5, [sp, #8]
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	4465      	add	r5, ip
 8000ca8:	40ac      	lsls	r4, r5
 8000caa:	4320      	orrs	r0, r4
 8000cac:	1e41      	subs	r1, r0, #1
 8000cae:	4188      	sbcs	r0, r1
 8000cb0:	4318      	orrs	r0, r3
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	001d      	movs	r5, r3
 8000cb6:	2400      	movs	r4, #0
 8000cb8:	4005      	ands	r5, r0
 8000cba:	4203      	tst	r3, r0
 8000cbc:	d04a      	beq.n	8000d54 <__aeabi_dmul+0x520>
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	2400      	movs	r4, #0
 8000cc2:	4003      	ands	r3, r0
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d042      	beq.n	8000d4e <__aeabi_dmul+0x51a>
 8000cc8:	1d03      	adds	r3, r0, #4
 8000cca:	4283      	cmp	r3, r0
 8000ccc:	4180      	sbcs	r0, r0
 8000cce:	4240      	negs	r0, r0
 8000cd0:	1824      	adds	r4, r4, r0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	0223      	lsls	r3, r4, #8
 8000cd6:	d53a      	bpl.n	8000d4e <__aeabi_dmul+0x51a>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	2400      	movs	r4, #0
 8000cdc:	2500      	movs	r5, #0
 8000cde:	e61b      	b.n	8000918 <__aeabi_dmul+0xe4>
 8000ce0:	f000 fc86 	bl	80015f0 <__clzsi2>
 8000ce4:	0001      	movs	r1, r0
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	3115      	adds	r1, #21
 8000cea:	3320      	adds	r3, #32
 8000cec:	291c      	cmp	r1, #28
 8000cee:	dd8f      	ble.n	8000c10 <__aeabi_dmul+0x3dc>
 8000cf0:	3808      	subs	r0, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4084      	lsls	r4, r0
 8000cf6:	4692      	mov	sl, r2
 8000cf8:	46a3      	mov	fp, r4
 8000cfa:	e796      	b.n	8000c2a <__aeabi_dmul+0x3f6>
 8000cfc:	f000 fc78 	bl	80015f0 <__clzsi2>
 8000d00:	0001      	movs	r1, r0
 8000d02:	0003      	movs	r3, r0
 8000d04:	3115      	adds	r1, #21
 8000d06:	3320      	adds	r3, #32
 8000d08:	291c      	cmp	r1, #28
 8000d0a:	dc00      	bgt.n	8000d0e <__aeabi_dmul+0x4da>
 8000d0c:	e758      	b.n	8000bc0 <__aeabi_dmul+0x38c>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	464c      	mov	r4, r9
 8000d12:	3a08      	subs	r2, #8
 8000d14:	2000      	movs	r0, #0
 8000d16:	4094      	lsls	r4, r2
 8000d18:	e75d      	b.n	8000bd6 <__aeabi_dmul+0x3a2>
 8000d1a:	9b01      	ldr	r3, [sp, #4]
 8000d1c:	9302      	str	r3, [sp, #8]
 8000d1e:	e711      	b.n	8000b44 <__aeabi_dmul+0x310>
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <__aeabi_dmul+0x57c>)
 8000d22:	0026      	movs	r6, r4
 8000d24:	469c      	mov	ip, r3
 8000d26:	0003      	movs	r3, r0
 8000d28:	9d02      	ldr	r5, [sp, #8]
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	4465      	add	r5, ip
 8000d2e:	40ae      	lsls	r6, r5
 8000d30:	431e      	orrs	r6, r3
 8000d32:	0003      	movs	r3, r0
 8000d34:	40ab      	lsls	r3, r5
 8000d36:	1e58      	subs	r0, r3, #1
 8000d38:	4183      	sbcs	r3, r0
 8000d3a:	0030      	movs	r0, r6
 8000d3c:	4318      	orrs	r0, r3
 8000d3e:	40cc      	lsrs	r4, r1
 8000d40:	0743      	lsls	r3, r0, #29
 8000d42:	d0c7      	beq.n	8000cd4 <__aeabi_dmul+0x4a0>
 8000d44:	230f      	movs	r3, #15
 8000d46:	4003      	ands	r3, r0
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d1bd      	bne.n	8000cc8 <__aeabi_dmul+0x494>
 8000d4c:	e7c2      	b.n	8000cd4 <__aeabi_dmul+0x4a0>
 8000d4e:	0765      	lsls	r5, r4, #29
 8000d50:	0264      	lsls	r4, r4, #9
 8000d52:	0b24      	lsrs	r4, r4, #12
 8000d54:	08c0      	lsrs	r0, r0, #3
 8000d56:	2300      	movs	r3, #0
 8000d58:	4305      	orrs	r5, r0
 8000d5a:	e5dd      	b.n	8000918 <__aeabi_dmul+0xe4>
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	2302      	movs	r3, #2
 8000d60:	2e0f      	cmp	r6, #15
 8000d62:	d10c      	bne.n	8000d7e <__aeabi_dmul+0x54a>
 8000d64:	2480      	movs	r4, #128	; 0x80
 8000d66:	465b      	mov	r3, fp
 8000d68:	0324      	lsls	r4, r4, #12
 8000d6a:	4223      	tst	r3, r4
 8000d6c:	d00e      	beq.n	8000d8c <__aeabi_dmul+0x558>
 8000d6e:	4221      	tst	r1, r4
 8000d70:	d10c      	bne.n	8000d8c <__aeabi_dmul+0x558>
 8000d72:	430c      	orrs	r4, r1
 8000d74:	0324      	lsls	r4, r4, #12
 8000d76:	003a      	movs	r2, r7
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <__aeabi_dmul+0x580>)
 8000d7a:	0b24      	lsrs	r4, r4, #12
 8000d7c:	e5cc      	b.n	8000918 <__aeabi_dmul+0xe4>
 8000d7e:	2e0b      	cmp	r6, #11
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dmul+0x550>
 8000d82:	e5a2      	b.n	80008ca <__aeabi_dmul+0x96>
 8000d84:	468b      	mov	fp, r1
 8000d86:	46aa      	mov	sl, r5
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	e5f7      	b.n	800097c <__aeabi_dmul+0x148>
 8000d8c:	2480      	movs	r4, #128	; 0x80
 8000d8e:	465b      	mov	r3, fp
 8000d90:	0324      	lsls	r4, r4, #12
 8000d92:	431c      	orrs	r4, r3
 8000d94:	0324      	lsls	r4, r4, #12
 8000d96:	4642      	mov	r2, r8
 8000d98:	4655      	mov	r5, sl
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <__aeabi_dmul+0x580>)
 8000d9c:	0b24      	lsrs	r4, r4, #12
 8000d9e:	e5bb      	b.n	8000918 <__aeabi_dmul+0xe4>
 8000da0:	464d      	mov	r5, r9
 8000da2:	0021      	movs	r1, r4
 8000da4:	2303      	movs	r3, #3
 8000da6:	e7db      	b.n	8000d60 <__aeabi_dmul+0x52c>
 8000da8:	fffffc0d 	.word	0xfffffc0d
 8000dac:	0000043e 	.word	0x0000043e
 8000db0:	0000041e 	.word	0x0000041e
 8000db4:	000007ff 	.word	0x000007ff

08000db8 <__aeabi_dsub>:
 8000db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dba:	4657      	mov	r7, sl
 8000dbc:	464e      	mov	r6, r9
 8000dbe:	4645      	mov	r5, r8
 8000dc0:	46de      	mov	lr, fp
 8000dc2:	b5e0      	push	{r5, r6, r7, lr}
 8000dc4:	000d      	movs	r5, r1
 8000dc6:	0004      	movs	r4, r0
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0010      	movs	r0, r2
 8000dcc:	032b      	lsls	r3, r5, #12
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	0f62      	lsrs	r2, r4, #29
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	00e3      	lsls	r3, r4, #3
 8000dd6:	030c      	lsls	r4, r1, #12
 8000dd8:	0a64      	lsrs	r4, r4, #9
 8000dda:	0f47      	lsrs	r7, r0, #29
 8000ddc:	4327      	orrs	r7, r4
 8000dde:	4cd0      	ldr	r4, [pc, #832]	; (8001120 <__aeabi_dsub+0x368>)
 8000de0:	006e      	lsls	r6, r5, #1
 8000de2:	4691      	mov	r9, r2
 8000de4:	b083      	sub	sp, #12
 8000de6:	004a      	lsls	r2, r1, #1
 8000de8:	00c0      	lsls	r0, r0, #3
 8000dea:	4698      	mov	r8, r3
 8000dec:	46a2      	mov	sl, r4
 8000dee:	0d76      	lsrs	r6, r6, #21
 8000df0:	0fed      	lsrs	r5, r5, #31
 8000df2:	0d52      	lsrs	r2, r2, #21
 8000df4:	0fc9      	lsrs	r1, r1, #31
 8000df6:	9001      	str	r0, [sp, #4]
 8000df8:	42a2      	cmp	r2, r4
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dsub+0x46>
 8000dfc:	e0b9      	b.n	8000f72 <__aeabi_dsub+0x1ba>
 8000dfe:	2401      	movs	r4, #1
 8000e00:	4061      	eors	r1, r4
 8000e02:	468b      	mov	fp, r1
 8000e04:	428d      	cmp	r5, r1
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dsub+0x52>
 8000e08:	e08d      	b.n	8000f26 <__aeabi_dsub+0x16e>
 8000e0a:	1ab4      	subs	r4, r6, r2
 8000e0c:	46a4      	mov	ip, r4
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	dc00      	bgt.n	8000e14 <__aeabi_dsub+0x5c>
 8000e12:	e0b7      	b.n	8000f84 <__aeabi_dsub+0x1cc>
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	d100      	bne.n	8000e1a <__aeabi_dsub+0x62>
 8000e18:	e0cb      	b.n	8000fb2 <__aeabi_dsub+0x1fa>
 8000e1a:	4ac1      	ldr	r2, [pc, #772]	; (8001120 <__aeabi_dsub+0x368>)
 8000e1c:	4296      	cmp	r6, r2
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dsub+0x6a>
 8000e20:	e186      	b.n	8001130 <__aeabi_dsub+0x378>
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	0412      	lsls	r2, r2, #16
 8000e26:	4317      	orrs	r7, r2
 8000e28:	4662      	mov	r2, ip
 8000e2a:	2a38      	cmp	r2, #56	; 0x38
 8000e2c:	dd00      	ble.n	8000e30 <__aeabi_dsub+0x78>
 8000e2e:	e1a4      	b.n	800117a <__aeabi_dsub+0x3c2>
 8000e30:	2a1f      	cmp	r2, #31
 8000e32:	dd00      	ble.n	8000e36 <__aeabi_dsub+0x7e>
 8000e34:	e21d      	b.n	8001272 <__aeabi_dsub+0x4ba>
 8000e36:	4661      	mov	r1, ip
 8000e38:	2220      	movs	r2, #32
 8000e3a:	003c      	movs	r4, r7
 8000e3c:	1a52      	subs	r2, r2, r1
 8000e3e:	0001      	movs	r1, r0
 8000e40:	4090      	lsls	r0, r2
 8000e42:	4094      	lsls	r4, r2
 8000e44:	1e42      	subs	r2, r0, #1
 8000e46:	4190      	sbcs	r0, r2
 8000e48:	4662      	mov	r2, ip
 8000e4a:	46a0      	mov	r8, r4
 8000e4c:	4664      	mov	r4, ip
 8000e4e:	40d7      	lsrs	r7, r2
 8000e50:	464a      	mov	r2, r9
 8000e52:	40e1      	lsrs	r1, r4
 8000e54:	4644      	mov	r4, r8
 8000e56:	1bd2      	subs	r2, r2, r7
 8000e58:	4691      	mov	r9, r2
 8000e5a:	430c      	orrs	r4, r1
 8000e5c:	4304      	orrs	r4, r0
 8000e5e:	1b1c      	subs	r4, r3, r4
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	4192      	sbcs	r2, r2
 8000e64:	464b      	mov	r3, r9
 8000e66:	4252      	negs	r2, r2
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	4653      	mov	r3, sl
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	d400      	bmi.n	8000e74 <__aeabi_dsub+0xbc>
 8000e72:	e12b      	b.n	80010cc <__aeabi_dsub+0x314>
 8000e74:	4653      	mov	r3, sl
 8000e76:	025a      	lsls	r2, r3, #9
 8000e78:	0a53      	lsrs	r3, r2, #9
 8000e7a:	469a      	mov	sl, r3
 8000e7c:	4653      	mov	r3, sl
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dsub+0xcc>
 8000e82:	e166      	b.n	8001152 <__aeabi_dsub+0x39a>
 8000e84:	4650      	mov	r0, sl
 8000e86:	f000 fbb3 	bl	80015f0 <__clzsi2>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	3b08      	subs	r3, #8
 8000e8e:	2220      	movs	r2, #32
 8000e90:	0020      	movs	r0, r4
 8000e92:	1ad2      	subs	r2, r2, r3
 8000e94:	4651      	mov	r1, sl
 8000e96:	40d0      	lsrs	r0, r2
 8000e98:	4099      	lsls	r1, r3
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	409c      	lsls	r4, r3
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	dd00      	ble.n	8000ea6 <__aeabi_dsub+0xee>
 8000ea4:	e164      	b.n	8001170 <__aeabi_dsub+0x3b8>
 8000ea6:	1b9b      	subs	r3, r3, r6
 8000ea8:	1c59      	adds	r1, r3, #1
 8000eaa:	291f      	cmp	r1, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dsub+0xf8>
 8000eae:	e0fe      	b.n	80010ae <__aeabi_dsub+0x2f6>
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	0010      	movs	r0, r2
 8000eb4:	0026      	movs	r6, r4
 8000eb6:	1a5b      	subs	r3, r3, r1
 8000eb8:	409c      	lsls	r4, r3
 8000eba:	4098      	lsls	r0, r3
 8000ebc:	40ce      	lsrs	r6, r1
 8000ebe:	40ca      	lsrs	r2, r1
 8000ec0:	1e63      	subs	r3, r4, #1
 8000ec2:	419c      	sbcs	r4, r3
 8000ec4:	4330      	orrs	r0, r6
 8000ec6:	4692      	mov	sl, r2
 8000ec8:	2600      	movs	r6, #0
 8000eca:	4304      	orrs	r4, r0
 8000ecc:	0763      	lsls	r3, r4, #29
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_dsub+0x12c>
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	4023      	ands	r3, r4
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d005      	beq.n	8000ee4 <__aeabi_dsub+0x12c>
 8000ed8:	1d23      	adds	r3, r4, #4
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	41a4      	sbcs	r4, r4
 8000ede:	4264      	negs	r4, r4
 8000ee0:	44a2      	add	sl, r4
 8000ee2:	001c      	movs	r4, r3
 8000ee4:	4653      	mov	r3, sl
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	d400      	bmi.n	8000eec <__aeabi_dsub+0x134>
 8000eea:	e0f2      	b.n	80010d2 <__aeabi_dsub+0x31a>
 8000eec:	4b8c      	ldr	r3, [pc, #560]	; (8001120 <__aeabi_dsub+0x368>)
 8000eee:	3601      	adds	r6, #1
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dsub+0x13e>
 8000ef4:	e10f      	b.n	8001116 <__aeabi_dsub+0x35e>
 8000ef6:	4653      	mov	r3, sl
 8000ef8:	498a      	ldr	r1, [pc, #552]	; (8001124 <__aeabi_dsub+0x36c>)
 8000efa:	08e4      	lsrs	r4, r4, #3
 8000efc:	400b      	ands	r3, r1
 8000efe:	0019      	movs	r1, r3
 8000f00:	075b      	lsls	r3, r3, #29
 8000f02:	4323      	orrs	r3, r4
 8000f04:	0572      	lsls	r2, r6, #21
 8000f06:	024c      	lsls	r4, r1, #9
 8000f08:	0b24      	lsrs	r4, r4, #12
 8000f0a:	0d52      	lsrs	r2, r2, #21
 8000f0c:	0512      	lsls	r2, r2, #20
 8000f0e:	4322      	orrs	r2, r4
 8000f10:	07ed      	lsls	r5, r5, #31
 8000f12:	432a      	orrs	r2, r5
 8000f14:	0018      	movs	r0, r3
 8000f16:	0011      	movs	r1, r2
 8000f18:	b003      	add	sp, #12
 8000f1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f1c:	46bb      	mov	fp, r7
 8000f1e:	46b2      	mov	sl, r6
 8000f20:	46a9      	mov	r9, r5
 8000f22:	46a0      	mov	r8, r4
 8000f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f26:	1ab4      	subs	r4, r6, r2
 8000f28:	46a4      	mov	ip, r4
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	dd59      	ble.n	8000fe2 <__aeabi_dsub+0x22a>
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dsub+0x17c>
 8000f32:	e0b0      	b.n	8001096 <__aeabi_dsub+0x2de>
 8000f34:	4556      	cmp	r6, sl
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dsub+0x182>
 8000f38:	e0fa      	b.n	8001130 <__aeabi_dsub+0x378>
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	0412      	lsls	r2, r2, #16
 8000f3e:	4317      	orrs	r7, r2
 8000f40:	4662      	mov	r2, ip
 8000f42:	2a38      	cmp	r2, #56	; 0x38
 8000f44:	dd00      	ble.n	8000f48 <__aeabi_dsub+0x190>
 8000f46:	e0d4      	b.n	80010f2 <__aeabi_dsub+0x33a>
 8000f48:	2a1f      	cmp	r2, #31
 8000f4a:	dc00      	bgt.n	8000f4e <__aeabi_dsub+0x196>
 8000f4c:	e1c0      	b.n	80012d0 <__aeabi_dsub+0x518>
 8000f4e:	0039      	movs	r1, r7
 8000f50:	3a20      	subs	r2, #32
 8000f52:	40d1      	lsrs	r1, r2
 8000f54:	4662      	mov	r2, ip
 8000f56:	2a20      	cmp	r2, #32
 8000f58:	d006      	beq.n	8000f68 <__aeabi_dsub+0x1b0>
 8000f5a:	4664      	mov	r4, ip
 8000f5c:	2240      	movs	r2, #64	; 0x40
 8000f5e:	1b12      	subs	r2, r2, r4
 8000f60:	003c      	movs	r4, r7
 8000f62:	4094      	lsls	r4, r2
 8000f64:	4304      	orrs	r4, r0
 8000f66:	9401      	str	r4, [sp, #4]
 8000f68:	9c01      	ldr	r4, [sp, #4]
 8000f6a:	1e62      	subs	r2, r4, #1
 8000f6c:	4194      	sbcs	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	e0c3      	b.n	80010fa <__aeabi_dsub+0x342>
 8000f72:	003c      	movs	r4, r7
 8000f74:	4304      	orrs	r4, r0
 8000f76:	d02b      	beq.n	8000fd0 <__aeabi_dsub+0x218>
 8000f78:	468b      	mov	fp, r1
 8000f7a:	428d      	cmp	r5, r1
 8000f7c:	d02e      	beq.n	8000fdc <__aeabi_dsub+0x224>
 8000f7e:	4c6a      	ldr	r4, [pc, #424]	; (8001128 <__aeabi_dsub+0x370>)
 8000f80:	46a4      	mov	ip, r4
 8000f82:	44b4      	add	ip, r6
 8000f84:	4664      	mov	r4, ip
 8000f86:	2c00      	cmp	r4, #0
 8000f88:	d05f      	beq.n	800104a <__aeabi_dsub+0x292>
 8000f8a:	1b94      	subs	r4, r2, r6
 8000f8c:	46a4      	mov	ip, r4
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d000      	beq.n	8000f94 <__aeabi_dsub+0x1dc>
 8000f92:	e120      	b.n	80011d6 <__aeabi_dsub+0x41e>
 8000f94:	464c      	mov	r4, r9
 8000f96:	431c      	orrs	r4, r3
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dsub+0x1e4>
 8000f9a:	e1c7      	b.n	800132c <__aeabi_dsub+0x574>
 8000f9c:	4661      	mov	r1, ip
 8000f9e:	1e4c      	subs	r4, r1, #1
 8000fa0:	2901      	cmp	r1, #1
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dsub+0x1ee>
 8000fa4:	e223      	b.n	80013ee <__aeabi_dsub+0x636>
 8000fa6:	4d5e      	ldr	r5, [pc, #376]	; (8001120 <__aeabi_dsub+0x368>)
 8000fa8:	45ac      	cmp	ip, r5
 8000faa:	d100      	bne.n	8000fae <__aeabi_dsub+0x1f6>
 8000fac:	e1d8      	b.n	8001360 <__aeabi_dsub+0x5a8>
 8000fae:	46a4      	mov	ip, r4
 8000fb0:	e11a      	b.n	80011e8 <__aeabi_dsub+0x430>
 8000fb2:	003a      	movs	r2, r7
 8000fb4:	4302      	orrs	r2, r0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dsub+0x202>
 8000fb8:	e0e4      	b.n	8001184 <__aeabi_dsub+0x3cc>
 8000fba:	0022      	movs	r2, r4
 8000fbc:	3a01      	subs	r2, #1
 8000fbe:	2c01      	cmp	r4, #1
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_dsub+0x20c>
 8000fc2:	e1c3      	b.n	800134c <__aeabi_dsub+0x594>
 8000fc4:	4956      	ldr	r1, [pc, #344]	; (8001120 <__aeabi_dsub+0x368>)
 8000fc6:	428c      	cmp	r4, r1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_dsub+0x214>
 8000fca:	e0b1      	b.n	8001130 <__aeabi_dsub+0x378>
 8000fcc:	4694      	mov	ip, r2
 8000fce:	e72b      	b.n	8000e28 <__aeabi_dsub+0x70>
 8000fd0:	2401      	movs	r4, #1
 8000fd2:	4061      	eors	r1, r4
 8000fd4:	468b      	mov	fp, r1
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_dsub+0x224>
 8000fda:	e716      	b.n	8000e0a <__aeabi_dsub+0x52>
 8000fdc:	4952      	ldr	r1, [pc, #328]	; (8001128 <__aeabi_dsub+0x370>)
 8000fde:	468c      	mov	ip, r1
 8000fe0:	44b4      	add	ip, r6
 8000fe2:	4664      	mov	r4, ip
 8000fe4:	2c00      	cmp	r4, #0
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dsub+0x232>
 8000fe8:	e0d3      	b.n	8001192 <__aeabi_dsub+0x3da>
 8000fea:	1b91      	subs	r1, r2, r6
 8000fec:	468c      	mov	ip, r1
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_dsub+0x23c>
 8000ff2:	e15e      	b.n	80012b2 <__aeabi_dsub+0x4fa>
 8000ff4:	494a      	ldr	r1, [pc, #296]	; (8001120 <__aeabi_dsub+0x368>)
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dsub+0x244>
 8000ffa:	e1be      	b.n	800137a <__aeabi_dsub+0x5c2>
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	464c      	mov	r4, r9
 8001000:	0409      	lsls	r1, r1, #16
 8001002:	430c      	orrs	r4, r1
 8001004:	46a1      	mov	r9, r4
 8001006:	4661      	mov	r1, ip
 8001008:	2938      	cmp	r1, #56	; 0x38
 800100a:	dd00      	ble.n	800100e <__aeabi_dsub+0x256>
 800100c:	e1ba      	b.n	8001384 <__aeabi_dsub+0x5cc>
 800100e:	291f      	cmp	r1, #31
 8001010:	dd00      	ble.n	8001014 <__aeabi_dsub+0x25c>
 8001012:	e227      	b.n	8001464 <__aeabi_dsub+0x6ac>
 8001014:	2420      	movs	r4, #32
 8001016:	1a64      	subs	r4, r4, r1
 8001018:	4649      	mov	r1, r9
 800101a:	40a1      	lsls	r1, r4
 800101c:	001e      	movs	r6, r3
 800101e:	4688      	mov	r8, r1
 8001020:	4661      	mov	r1, ip
 8001022:	40a3      	lsls	r3, r4
 8001024:	40ce      	lsrs	r6, r1
 8001026:	4641      	mov	r1, r8
 8001028:	1e5c      	subs	r4, r3, #1
 800102a:	41a3      	sbcs	r3, r4
 800102c:	4331      	orrs	r1, r6
 800102e:	4319      	orrs	r1, r3
 8001030:	000c      	movs	r4, r1
 8001032:	4663      	mov	r3, ip
 8001034:	4649      	mov	r1, r9
 8001036:	40d9      	lsrs	r1, r3
 8001038:	187f      	adds	r7, r7, r1
 800103a:	1824      	adds	r4, r4, r0
 800103c:	4284      	cmp	r4, r0
 800103e:	419b      	sbcs	r3, r3
 8001040:	425b      	negs	r3, r3
 8001042:	469a      	mov	sl, r3
 8001044:	0016      	movs	r6, r2
 8001046:	44ba      	add	sl, r7
 8001048:	e05d      	b.n	8001106 <__aeabi_dsub+0x34e>
 800104a:	4c38      	ldr	r4, [pc, #224]	; (800112c <__aeabi_dsub+0x374>)
 800104c:	1c72      	adds	r2, r6, #1
 800104e:	4222      	tst	r2, r4
 8001050:	d000      	beq.n	8001054 <__aeabi_dsub+0x29c>
 8001052:	e0df      	b.n	8001214 <__aeabi_dsub+0x45c>
 8001054:	464a      	mov	r2, r9
 8001056:	431a      	orrs	r2, r3
 8001058:	2e00      	cmp	r6, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dsub+0x2a6>
 800105c:	e15c      	b.n	8001318 <__aeabi_dsub+0x560>
 800105e:	2a00      	cmp	r2, #0
 8001060:	d100      	bne.n	8001064 <__aeabi_dsub+0x2ac>
 8001062:	e1cf      	b.n	8001404 <__aeabi_dsub+0x64c>
 8001064:	003a      	movs	r2, r7
 8001066:	4302      	orrs	r2, r0
 8001068:	d100      	bne.n	800106c <__aeabi_dsub+0x2b4>
 800106a:	e17f      	b.n	800136c <__aeabi_dsub+0x5b4>
 800106c:	1a1c      	subs	r4, r3, r0
 800106e:	464a      	mov	r2, r9
 8001070:	42a3      	cmp	r3, r4
 8001072:	4189      	sbcs	r1, r1
 8001074:	1bd2      	subs	r2, r2, r7
 8001076:	4249      	negs	r1, r1
 8001078:	1a52      	subs	r2, r2, r1
 800107a:	4692      	mov	sl, r2
 800107c:	0212      	lsls	r2, r2, #8
 800107e:	d400      	bmi.n	8001082 <__aeabi_dsub+0x2ca>
 8001080:	e20a      	b.n	8001498 <__aeabi_dsub+0x6e0>
 8001082:	1ac4      	subs	r4, r0, r3
 8001084:	42a0      	cmp	r0, r4
 8001086:	4180      	sbcs	r0, r0
 8001088:	464b      	mov	r3, r9
 800108a:	4240      	negs	r0, r0
 800108c:	1aff      	subs	r7, r7, r3
 800108e:	1a3b      	subs	r3, r7, r0
 8001090:	469a      	mov	sl, r3
 8001092:	465d      	mov	r5, fp
 8001094:	e71a      	b.n	8000ecc <__aeabi_dsub+0x114>
 8001096:	003a      	movs	r2, r7
 8001098:	4302      	orrs	r2, r0
 800109a:	d073      	beq.n	8001184 <__aeabi_dsub+0x3cc>
 800109c:	0022      	movs	r2, r4
 800109e:	3a01      	subs	r2, #1
 80010a0:	2c01      	cmp	r4, #1
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dsub+0x2ee>
 80010a4:	e0cb      	b.n	800123e <__aeabi_dsub+0x486>
 80010a6:	4554      	cmp	r4, sl
 80010a8:	d042      	beq.n	8001130 <__aeabi_dsub+0x378>
 80010aa:	4694      	mov	ip, r2
 80010ac:	e748      	b.n	8000f40 <__aeabi_dsub+0x188>
 80010ae:	0010      	movs	r0, r2
 80010b0:	3b1f      	subs	r3, #31
 80010b2:	40d8      	lsrs	r0, r3
 80010b4:	2920      	cmp	r1, #32
 80010b6:	d003      	beq.n	80010c0 <__aeabi_dsub+0x308>
 80010b8:	2340      	movs	r3, #64	; 0x40
 80010ba:	1a5b      	subs	r3, r3, r1
 80010bc:	409a      	lsls	r2, r3
 80010be:	4314      	orrs	r4, r2
 80010c0:	1e63      	subs	r3, r4, #1
 80010c2:	419c      	sbcs	r4, r3
 80010c4:	2300      	movs	r3, #0
 80010c6:	2600      	movs	r6, #0
 80010c8:	469a      	mov	sl, r3
 80010ca:	4304      	orrs	r4, r0
 80010cc:	0763      	lsls	r3, r4, #29
 80010ce:	d000      	beq.n	80010d2 <__aeabi_dsub+0x31a>
 80010d0:	e6fe      	b.n	8000ed0 <__aeabi_dsub+0x118>
 80010d2:	4652      	mov	r2, sl
 80010d4:	08e3      	lsrs	r3, r4, #3
 80010d6:	0752      	lsls	r2, r2, #29
 80010d8:	4313      	orrs	r3, r2
 80010da:	4652      	mov	r2, sl
 80010dc:	46b4      	mov	ip, r6
 80010de:	08d2      	lsrs	r2, r2, #3
 80010e0:	490f      	ldr	r1, [pc, #60]	; (8001120 <__aeabi_dsub+0x368>)
 80010e2:	458c      	cmp	ip, r1
 80010e4:	d02a      	beq.n	800113c <__aeabi_dsub+0x384>
 80010e6:	0312      	lsls	r2, r2, #12
 80010e8:	0b14      	lsrs	r4, r2, #12
 80010ea:	4662      	mov	r2, ip
 80010ec:	0552      	lsls	r2, r2, #21
 80010ee:	0d52      	lsrs	r2, r2, #21
 80010f0:	e70c      	b.n	8000f0c <__aeabi_dsub+0x154>
 80010f2:	003c      	movs	r4, r7
 80010f4:	4304      	orrs	r4, r0
 80010f6:	1e62      	subs	r2, r4, #1
 80010f8:	4194      	sbcs	r4, r2
 80010fa:	18e4      	adds	r4, r4, r3
 80010fc:	429c      	cmp	r4, r3
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4252      	negs	r2, r2
 8001102:	444a      	add	r2, r9
 8001104:	4692      	mov	sl, r2
 8001106:	4653      	mov	r3, sl
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	d5df      	bpl.n	80010cc <__aeabi_dsub+0x314>
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__aeabi_dsub+0x368>)
 800110e:	3601      	adds	r6, #1
 8001110:	429e      	cmp	r6, r3
 8001112:	d000      	beq.n	8001116 <__aeabi_dsub+0x35e>
 8001114:	e0a0      	b.n	8001258 <__aeabi_dsub+0x4a0>
 8001116:	0032      	movs	r2, r6
 8001118:	2400      	movs	r4, #0
 800111a:	2300      	movs	r3, #0
 800111c:	e6f6      	b.n	8000f0c <__aeabi_dsub+0x154>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	000007ff 	.word	0x000007ff
 8001124:	ff7fffff 	.word	0xff7fffff
 8001128:	fffff801 	.word	0xfffff801
 800112c:	000007fe 	.word	0x000007fe
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	464a      	mov	r2, r9
 8001134:	0752      	lsls	r2, r2, #29
 8001136:	4313      	orrs	r3, r2
 8001138:	464a      	mov	r2, r9
 800113a:	08d2      	lsrs	r2, r2, #3
 800113c:	0019      	movs	r1, r3
 800113e:	4311      	orrs	r1, r2
 8001140:	d100      	bne.n	8001144 <__aeabi_dsub+0x38c>
 8001142:	e1b5      	b.n	80014b0 <__aeabi_dsub+0x6f8>
 8001144:	2480      	movs	r4, #128	; 0x80
 8001146:	0324      	lsls	r4, r4, #12
 8001148:	4314      	orrs	r4, r2
 800114a:	0324      	lsls	r4, r4, #12
 800114c:	4ad5      	ldr	r2, [pc, #852]	; (80014a4 <__aeabi_dsub+0x6ec>)
 800114e:	0b24      	lsrs	r4, r4, #12
 8001150:	e6dc      	b.n	8000f0c <__aeabi_dsub+0x154>
 8001152:	0020      	movs	r0, r4
 8001154:	f000 fa4c 	bl	80015f0 <__clzsi2>
 8001158:	0003      	movs	r3, r0
 800115a:	3318      	adds	r3, #24
 800115c:	2b1f      	cmp	r3, #31
 800115e:	dc00      	bgt.n	8001162 <__aeabi_dsub+0x3aa>
 8001160:	e695      	b.n	8000e8e <__aeabi_dsub+0xd6>
 8001162:	0022      	movs	r2, r4
 8001164:	3808      	subs	r0, #8
 8001166:	4082      	lsls	r2, r0
 8001168:	2400      	movs	r4, #0
 800116a:	429e      	cmp	r6, r3
 800116c:	dc00      	bgt.n	8001170 <__aeabi_dsub+0x3b8>
 800116e:	e69a      	b.n	8000ea6 <__aeabi_dsub+0xee>
 8001170:	1af6      	subs	r6, r6, r3
 8001172:	4bcd      	ldr	r3, [pc, #820]	; (80014a8 <__aeabi_dsub+0x6f0>)
 8001174:	401a      	ands	r2, r3
 8001176:	4692      	mov	sl, r2
 8001178:	e6a8      	b.n	8000ecc <__aeabi_dsub+0x114>
 800117a:	003c      	movs	r4, r7
 800117c:	4304      	orrs	r4, r0
 800117e:	1e62      	subs	r2, r4, #1
 8001180:	4194      	sbcs	r4, r2
 8001182:	e66c      	b.n	8000e5e <__aeabi_dsub+0xa6>
 8001184:	464a      	mov	r2, r9
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	0752      	lsls	r2, r2, #29
 800118a:	4313      	orrs	r3, r2
 800118c:	464a      	mov	r2, r9
 800118e:	08d2      	lsrs	r2, r2, #3
 8001190:	e7a6      	b.n	80010e0 <__aeabi_dsub+0x328>
 8001192:	4cc6      	ldr	r4, [pc, #792]	; (80014ac <__aeabi_dsub+0x6f4>)
 8001194:	1c72      	adds	r2, r6, #1
 8001196:	4222      	tst	r2, r4
 8001198:	d000      	beq.n	800119c <__aeabi_dsub+0x3e4>
 800119a:	e0ac      	b.n	80012f6 <__aeabi_dsub+0x53e>
 800119c:	464a      	mov	r2, r9
 800119e:	431a      	orrs	r2, r3
 80011a0:	2e00      	cmp	r6, #0
 80011a2:	d000      	beq.n	80011a6 <__aeabi_dsub+0x3ee>
 80011a4:	e105      	b.n	80013b2 <__aeabi_dsub+0x5fa>
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d100      	bne.n	80011ac <__aeabi_dsub+0x3f4>
 80011aa:	e156      	b.n	800145a <__aeabi_dsub+0x6a2>
 80011ac:	003a      	movs	r2, r7
 80011ae:	4302      	orrs	r2, r0
 80011b0:	d100      	bne.n	80011b4 <__aeabi_dsub+0x3fc>
 80011b2:	e0db      	b.n	800136c <__aeabi_dsub+0x5b4>
 80011b4:	181c      	adds	r4, r3, r0
 80011b6:	429c      	cmp	r4, r3
 80011b8:	419b      	sbcs	r3, r3
 80011ba:	444f      	add	r7, r9
 80011bc:	46ba      	mov	sl, r7
 80011be:	425b      	negs	r3, r3
 80011c0:	449a      	add	sl, r3
 80011c2:	4653      	mov	r3, sl
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	d400      	bmi.n	80011ca <__aeabi_dsub+0x412>
 80011c8:	e780      	b.n	80010cc <__aeabi_dsub+0x314>
 80011ca:	4652      	mov	r2, sl
 80011cc:	4bb6      	ldr	r3, [pc, #728]	; (80014a8 <__aeabi_dsub+0x6f0>)
 80011ce:	2601      	movs	r6, #1
 80011d0:	401a      	ands	r2, r3
 80011d2:	4692      	mov	sl, r2
 80011d4:	e77a      	b.n	80010cc <__aeabi_dsub+0x314>
 80011d6:	4cb3      	ldr	r4, [pc, #716]	; (80014a4 <__aeabi_dsub+0x6ec>)
 80011d8:	42a2      	cmp	r2, r4
 80011da:	d100      	bne.n	80011de <__aeabi_dsub+0x426>
 80011dc:	e0c0      	b.n	8001360 <__aeabi_dsub+0x5a8>
 80011de:	2480      	movs	r4, #128	; 0x80
 80011e0:	464d      	mov	r5, r9
 80011e2:	0424      	lsls	r4, r4, #16
 80011e4:	4325      	orrs	r5, r4
 80011e6:	46a9      	mov	r9, r5
 80011e8:	4664      	mov	r4, ip
 80011ea:	2c38      	cmp	r4, #56	; 0x38
 80011ec:	dc53      	bgt.n	8001296 <__aeabi_dsub+0x4de>
 80011ee:	4661      	mov	r1, ip
 80011f0:	2c1f      	cmp	r4, #31
 80011f2:	dd00      	ble.n	80011f6 <__aeabi_dsub+0x43e>
 80011f4:	e0cd      	b.n	8001392 <__aeabi_dsub+0x5da>
 80011f6:	2520      	movs	r5, #32
 80011f8:	001e      	movs	r6, r3
 80011fa:	1b2d      	subs	r5, r5, r4
 80011fc:	464c      	mov	r4, r9
 80011fe:	40ab      	lsls	r3, r5
 8001200:	40ac      	lsls	r4, r5
 8001202:	40ce      	lsrs	r6, r1
 8001204:	1e5d      	subs	r5, r3, #1
 8001206:	41ab      	sbcs	r3, r5
 8001208:	4334      	orrs	r4, r6
 800120a:	4323      	orrs	r3, r4
 800120c:	464c      	mov	r4, r9
 800120e:	40cc      	lsrs	r4, r1
 8001210:	1b3f      	subs	r7, r7, r4
 8001212:	e045      	b.n	80012a0 <__aeabi_dsub+0x4e8>
 8001214:	464a      	mov	r2, r9
 8001216:	1a1c      	subs	r4, r3, r0
 8001218:	1bd1      	subs	r1, r2, r7
 800121a:	42a3      	cmp	r3, r4
 800121c:	4192      	sbcs	r2, r2
 800121e:	4252      	negs	r2, r2
 8001220:	4692      	mov	sl, r2
 8001222:	000a      	movs	r2, r1
 8001224:	4651      	mov	r1, sl
 8001226:	1a52      	subs	r2, r2, r1
 8001228:	4692      	mov	sl, r2
 800122a:	0212      	lsls	r2, r2, #8
 800122c:	d500      	bpl.n	8001230 <__aeabi_dsub+0x478>
 800122e:	e083      	b.n	8001338 <__aeabi_dsub+0x580>
 8001230:	4653      	mov	r3, sl
 8001232:	4323      	orrs	r3, r4
 8001234:	d000      	beq.n	8001238 <__aeabi_dsub+0x480>
 8001236:	e621      	b.n	8000e7c <__aeabi_dsub+0xc4>
 8001238:	2200      	movs	r2, #0
 800123a:	2500      	movs	r5, #0
 800123c:	e753      	b.n	80010e6 <__aeabi_dsub+0x32e>
 800123e:	181c      	adds	r4, r3, r0
 8001240:	429c      	cmp	r4, r3
 8001242:	419b      	sbcs	r3, r3
 8001244:	444f      	add	r7, r9
 8001246:	46ba      	mov	sl, r7
 8001248:	425b      	negs	r3, r3
 800124a:	449a      	add	sl, r3
 800124c:	4653      	mov	r3, sl
 800124e:	2601      	movs	r6, #1
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	d400      	bmi.n	8001256 <__aeabi_dsub+0x49e>
 8001254:	e73a      	b.n	80010cc <__aeabi_dsub+0x314>
 8001256:	2602      	movs	r6, #2
 8001258:	4652      	mov	r2, sl
 800125a:	4b93      	ldr	r3, [pc, #588]	; (80014a8 <__aeabi_dsub+0x6f0>)
 800125c:	2101      	movs	r1, #1
 800125e:	401a      	ands	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	4021      	ands	r1, r4
 8001264:	0862      	lsrs	r2, r4, #1
 8001266:	430a      	orrs	r2, r1
 8001268:	07dc      	lsls	r4, r3, #31
 800126a:	085b      	lsrs	r3, r3, #1
 800126c:	469a      	mov	sl, r3
 800126e:	4314      	orrs	r4, r2
 8001270:	e62c      	b.n	8000ecc <__aeabi_dsub+0x114>
 8001272:	0039      	movs	r1, r7
 8001274:	3a20      	subs	r2, #32
 8001276:	40d1      	lsrs	r1, r2
 8001278:	4662      	mov	r2, ip
 800127a:	2a20      	cmp	r2, #32
 800127c:	d006      	beq.n	800128c <__aeabi_dsub+0x4d4>
 800127e:	4664      	mov	r4, ip
 8001280:	2240      	movs	r2, #64	; 0x40
 8001282:	1b12      	subs	r2, r2, r4
 8001284:	003c      	movs	r4, r7
 8001286:	4094      	lsls	r4, r2
 8001288:	4304      	orrs	r4, r0
 800128a:	9401      	str	r4, [sp, #4]
 800128c:	9c01      	ldr	r4, [sp, #4]
 800128e:	1e62      	subs	r2, r4, #1
 8001290:	4194      	sbcs	r4, r2
 8001292:	430c      	orrs	r4, r1
 8001294:	e5e3      	b.n	8000e5e <__aeabi_dsub+0xa6>
 8001296:	4649      	mov	r1, r9
 8001298:	4319      	orrs	r1, r3
 800129a:	000b      	movs	r3, r1
 800129c:	1e5c      	subs	r4, r3, #1
 800129e:	41a3      	sbcs	r3, r4
 80012a0:	1ac4      	subs	r4, r0, r3
 80012a2:	42a0      	cmp	r0, r4
 80012a4:	419b      	sbcs	r3, r3
 80012a6:	425b      	negs	r3, r3
 80012a8:	1afb      	subs	r3, r7, r3
 80012aa:	469a      	mov	sl, r3
 80012ac:	465d      	mov	r5, fp
 80012ae:	0016      	movs	r6, r2
 80012b0:	e5dc      	b.n	8000e6c <__aeabi_dsub+0xb4>
 80012b2:	4649      	mov	r1, r9
 80012b4:	4319      	orrs	r1, r3
 80012b6:	d100      	bne.n	80012ba <__aeabi_dsub+0x502>
 80012b8:	e0ae      	b.n	8001418 <__aeabi_dsub+0x660>
 80012ba:	4661      	mov	r1, ip
 80012bc:	4664      	mov	r4, ip
 80012be:	3901      	subs	r1, #1
 80012c0:	2c01      	cmp	r4, #1
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dsub+0x50e>
 80012c4:	e0e0      	b.n	8001488 <__aeabi_dsub+0x6d0>
 80012c6:	4c77      	ldr	r4, [pc, #476]	; (80014a4 <__aeabi_dsub+0x6ec>)
 80012c8:	45a4      	cmp	ip, r4
 80012ca:	d056      	beq.n	800137a <__aeabi_dsub+0x5c2>
 80012cc:	468c      	mov	ip, r1
 80012ce:	e69a      	b.n	8001006 <__aeabi_dsub+0x24e>
 80012d0:	4661      	mov	r1, ip
 80012d2:	2220      	movs	r2, #32
 80012d4:	003c      	movs	r4, r7
 80012d6:	1a52      	subs	r2, r2, r1
 80012d8:	4094      	lsls	r4, r2
 80012da:	0001      	movs	r1, r0
 80012dc:	4090      	lsls	r0, r2
 80012de:	46a0      	mov	r8, r4
 80012e0:	4664      	mov	r4, ip
 80012e2:	1e42      	subs	r2, r0, #1
 80012e4:	4190      	sbcs	r0, r2
 80012e6:	4662      	mov	r2, ip
 80012e8:	40e1      	lsrs	r1, r4
 80012ea:	4644      	mov	r4, r8
 80012ec:	40d7      	lsrs	r7, r2
 80012ee:	430c      	orrs	r4, r1
 80012f0:	4304      	orrs	r4, r0
 80012f2:	44b9      	add	r9, r7
 80012f4:	e701      	b.n	80010fa <__aeabi_dsub+0x342>
 80012f6:	496b      	ldr	r1, [pc, #428]	; (80014a4 <__aeabi_dsub+0x6ec>)
 80012f8:	428a      	cmp	r2, r1
 80012fa:	d100      	bne.n	80012fe <__aeabi_dsub+0x546>
 80012fc:	e70c      	b.n	8001118 <__aeabi_dsub+0x360>
 80012fe:	1818      	adds	r0, r3, r0
 8001300:	4298      	cmp	r0, r3
 8001302:	419b      	sbcs	r3, r3
 8001304:	444f      	add	r7, r9
 8001306:	425b      	negs	r3, r3
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	07dc      	lsls	r4, r3, #31
 800130c:	0840      	lsrs	r0, r0, #1
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	469a      	mov	sl, r3
 8001312:	0016      	movs	r6, r2
 8001314:	4304      	orrs	r4, r0
 8001316:	e6d9      	b.n	80010cc <__aeabi_dsub+0x314>
 8001318:	2a00      	cmp	r2, #0
 800131a:	d000      	beq.n	800131e <__aeabi_dsub+0x566>
 800131c:	e081      	b.n	8001422 <__aeabi_dsub+0x66a>
 800131e:	003b      	movs	r3, r7
 8001320:	4303      	orrs	r3, r0
 8001322:	d11d      	bne.n	8001360 <__aeabi_dsub+0x5a8>
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	2500      	movs	r5, #0
 8001328:	0312      	lsls	r2, r2, #12
 800132a:	e70b      	b.n	8001144 <__aeabi_dsub+0x38c>
 800132c:	08c0      	lsrs	r0, r0, #3
 800132e:	077b      	lsls	r3, r7, #29
 8001330:	465d      	mov	r5, fp
 8001332:	4303      	orrs	r3, r0
 8001334:	08fa      	lsrs	r2, r7, #3
 8001336:	e6d3      	b.n	80010e0 <__aeabi_dsub+0x328>
 8001338:	1ac4      	subs	r4, r0, r3
 800133a:	42a0      	cmp	r0, r4
 800133c:	4180      	sbcs	r0, r0
 800133e:	464b      	mov	r3, r9
 8001340:	4240      	negs	r0, r0
 8001342:	1aff      	subs	r7, r7, r3
 8001344:	1a3b      	subs	r3, r7, r0
 8001346:	469a      	mov	sl, r3
 8001348:	465d      	mov	r5, fp
 800134a:	e597      	b.n	8000e7c <__aeabi_dsub+0xc4>
 800134c:	1a1c      	subs	r4, r3, r0
 800134e:	464a      	mov	r2, r9
 8001350:	42a3      	cmp	r3, r4
 8001352:	419b      	sbcs	r3, r3
 8001354:	1bd7      	subs	r7, r2, r7
 8001356:	425b      	negs	r3, r3
 8001358:	1afb      	subs	r3, r7, r3
 800135a:	469a      	mov	sl, r3
 800135c:	2601      	movs	r6, #1
 800135e:	e585      	b.n	8000e6c <__aeabi_dsub+0xb4>
 8001360:	08c0      	lsrs	r0, r0, #3
 8001362:	077b      	lsls	r3, r7, #29
 8001364:	465d      	mov	r5, fp
 8001366:	4303      	orrs	r3, r0
 8001368:	08fa      	lsrs	r2, r7, #3
 800136a:	e6e7      	b.n	800113c <__aeabi_dsub+0x384>
 800136c:	464a      	mov	r2, r9
 800136e:	08db      	lsrs	r3, r3, #3
 8001370:	0752      	lsls	r2, r2, #29
 8001372:	4313      	orrs	r3, r2
 8001374:	464a      	mov	r2, r9
 8001376:	08d2      	lsrs	r2, r2, #3
 8001378:	e6b5      	b.n	80010e6 <__aeabi_dsub+0x32e>
 800137a:	08c0      	lsrs	r0, r0, #3
 800137c:	077b      	lsls	r3, r7, #29
 800137e:	4303      	orrs	r3, r0
 8001380:	08fa      	lsrs	r2, r7, #3
 8001382:	e6db      	b.n	800113c <__aeabi_dsub+0x384>
 8001384:	4649      	mov	r1, r9
 8001386:	4319      	orrs	r1, r3
 8001388:	000b      	movs	r3, r1
 800138a:	1e59      	subs	r1, r3, #1
 800138c:	418b      	sbcs	r3, r1
 800138e:	001c      	movs	r4, r3
 8001390:	e653      	b.n	800103a <__aeabi_dsub+0x282>
 8001392:	464d      	mov	r5, r9
 8001394:	3c20      	subs	r4, #32
 8001396:	40e5      	lsrs	r5, r4
 8001398:	2920      	cmp	r1, #32
 800139a:	d005      	beq.n	80013a8 <__aeabi_dsub+0x5f0>
 800139c:	2440      	movs	r4, #64	; 0x40
 800139e:	1a64      	subs	r4, r4, r1
 80013a0:	4649      	mov	r1, r9
 80013a2:	40a1      	lsls	r1, r4
 80013a4:	430b      	orrs	r3, r1
 80013a6:	4698      	mov	r8, r3
 80013a8:	4643      	mov	r3, r8
 80013aa:	1e5c      	subs	r4, r3, #1
 80013ac:	41a3      	sbcs	r3, r4
 80013ae:	432b      	orrs	r3, r5
 80013b0:	e776      	b.n	80012a0 <__aeabi_dsub+0x4e8>
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d0e1      	beq.n	800137a <__aeabi_dsub+0x5c2>
 80013b6:	003a      	movs	r2, r7
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	4302      	orrs	r2, r0
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dsub+0x608>
 80013be:	e6b8      	b.n	8001132 <__aeabi_dsub+0x37a>
 80013c0:	464a      	mov	r2, r9
 80013c2:	0752      	lsls	r2, r2, #29
 80013c4:	2480      	movs	r4, #128	; 0x80
 80013c6:	4313      	orrs	r3, r2
 80013c8:	464a      	mov	r2, r9
 80013ca:	0324      	lsls	r4, r4, #12
 80013cc:	08d2      	lsrs	r2, r2, #3
 80013ce:	4222      	tst	r2, r4
 80013d0:	d007      	beq.n	80013e2 <__aeabi_dsub+0x62a>
 80013d2:	08fe      	lsrs	r6, r7, #3
 80013d4:	4226      	tst	r6, r4
 80013d6:	d104      	bne.n	80013e2 <__aeabi_dsub+0x62a>
 80013d8:	465d      	mov	r5, fp
 80013da:	0032      	movs	r2, r6
 80013dc:	08c3      	lsrs	r3, r0, #3
 80013de:	077f      	lsls	r7, r7, #29
 80013e0:	433b      	orrs	r3, r7
 80013e2:	0f59      	lsrs	r1, r3, #29
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	0749      	lsls	r1, r1, #29
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	430b      	orrs	r3, r1
 80013ec:	e6a6      	b.n	800113c <__aeabi_dsub+0x384>
 80013ee:	1ac4      	subs	r4, r0, r3
 80013f0:	42a0      	cmp	r0, r4
 80013f2:	4180      	sbcs	r0, r0
 80013f4:	464b      	mov	r3, r9
 80013f6:	4240      	negs	r0, r0
 80013f8:	1aff      	subs	r7, r7, r3
 80013fa:	1a3b      	subs	r3, r7, r0
 80013fc:	469a      	mov	sl, r3
 80013fe:	465d      	mov	r5, fp
 8001400:	2601      	movs	r6, #1
 8001402:	e533      	b.n	8000e6c <__aeabi_dsub+0xb4>
 8001404:	003b      	movs	r3, r7
 8001406:	4303      	orrs	r3, r0
 8001408:	d100      	bne.n	800140c <__aeabi_dsub+0x654>
 800140a:	e715      	b.n	8001238 <__aeabi_dsub+0x480>
 800140c:	08c0      	lsrs	r0, r0, #3
 800140e:	077b      	lsls	r3, r7, #29
 8001410:	465d      	mov	r5, fp
 8001412:	4303      	orrs	r3, r0
 8001414:	08fa      	lsrs	r2, r7, #3
 8001416:	e666      	b.n	80010e6 <__aeabi_dsub+0x32e>
 8001418:	08c0      	lsrs	r0, r0, #3
 800141a:	077b      	lsls	r3, r7, #29
 800141c:	4303      	orrs	r3, r0
 800141e:	08fa      	lsrs	r2, r7, #3
 8001420:	e65e      	b.n	80010e0 <__aeabi_dsub+0x328>
 8001422:	003a      	movs	r2, r7
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	4302      	orrs	r2, r0
 8001428:	d100      	bne.n	800142c <__aeabi_dsub+0x674>
 800142a:	e682      	b.n	8001132 <__aeabi_dsub+0x37a>
 800142c:	464a      	mov	r2, r9
 800142e:	0752      	lsls	r2, r2, #29
 8001430:	2480      	movs	r4, #128	; 0x80
 8001432:	4313      	orrs	r3, r2
 8001434:	464a      	mov	r2, r9
 8001436:	0324      	lsls	r4, r4, #12
 8001438:	08d2      	lsrs	r2, r2, #3
 800143a:	4222      	tst	r2, r4
 800143c:	d007      	beq.n	800144e <__aeabi_dsub+0x696>
 800143e:	08fe      	lsrs	r6, r7, #3
 8001440:	4226      	tst	r6, r4
 8001442:	d104      	bne.n	800144e <__aeabi_dsub+0x696>
 8001444:	465d      	mov	r5, fp
 8001446:	0032      	movs	r2, r6
 8001448:	08c3      	lsrs	r3, r0, #3
 800144a:	077f      	lsls	r7, r7, #29
 800144c:	433b      	orrs	r3, r7
 800144e:	0f59      	lsrs	r1, r3, #29
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	0749      	lsls	r1, r1, #29
 8001456:	430b      	orrs	r3, r1
 8001458:	e670      	b.n	800113c <__aeabi_dsub+0x384>
 800145a:	08c0      	lsrs	r0, r0, #3
 800145c:	077b      	lsls	r3, r7, #29
 800145e:	4303      	orrs	r3, r0
 8001460:	08fa      	lsrs	r2, r7, #3
 8001462:	e640      	b.n	80010e6 <__aeabi_dsub+0x32e>
 8001464:	464c      	mov	r4, r9
 8001466:	3920      	subs	r1, #32
 8001468:	40cc      	lsrs	r4, r1
 800146a:	4661      	mov	r1, ip
 800146c:	2920      	cmp	r1, #32
 800146e:	d006      	beq.n	800147e <__aeabi_dsub+0x6c6>
 8001470:	4666      	mov	r6, ip
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	1b89      	subs	r1, r1, r6
 8001476:	464e      	mov	r6, r9
 8001478:	408e      	lsls	r6, r1
 800147a:	4333      	orrs	r3, r6
 800147c:	4698      	mov	r8, r3
 800147e:	4643      	mov	r3, r8
 8001480:	1e59      	subs	r1, r3, #1
 8001482:	418b      	sbcs	r3, r1
 8001484:	431c      	orrs	r4, r3
 8001486:	e5d8      	b.n	800103a <__aeabi_dsub+0x282>
 8001488:	181c      	adds	r4, r3, r0
 800148a:	4284      	cmp	r4, r0
 800148c:	4180      	sbcs	r0, r0
 800148e:	444f      	add	r7, r9
 8001490:	46ba      	mov	sl, r7
 8001492:	4240      	negs	r0, r0
 8001494:	4482      	add	sl, r0
 8001496:	e6d9      	b.n	800124c <__aeabi_dsub+0x494>
 8001498:	4653      	mov	r3, sl
 800149a:	4323      	orrs	r3, r4
 800149c:	d100      	bne.n	80014a0 <__aeabi_dsub+0x6e8>
 800149e:	e6cb      	b.n	8001238 <__aeabi_dsub+0x480>
 80014a0:	e614      	b.n	80010cc <__aeabi_dsub+0x314>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	000007ff 	.word	0x000007ff
 80014a8:	ff7fffff 	.word	0xff7fffff
 80014ac:	000007fe 	.word	0x000007fe
 80014b0:	2300      	movs	r3, #0
 80014b2:	4a01      	ldr	r2, [pc, #4]	; (80014b8 <__aeabi_dsub+0x700>)
 80014b4:	001c      	movs	r4, r3
 80014b6:	e529      	b.n	8000f0c <__aeabi_dsub+0x154>
 80014b8:	000007ff 	.word	0x000007ff

080014bc <__aeabi_d2iz>:
 80014bc:	000a      	movs	r2, r1
 80014be:	b530      	push	{r4, r5, lr}
 80014c0:	4c13      	ldr	r4, [pc, #76]	; (8001510 <__aeabi_d2iz+0x54>)
 80014c2:	0053      	lsls	r3, r2, #1
 80014c4:	0309      	lsls	r1, r1, #12
 80014c6:	0005      	movs	r5, r0
 80014c8:	0b09      	lsrs	r1, r1, #12
 80014ca:	2000      	movs	r0, #0
 80014cc:	0d5b      	lsrs	r3, r3, #21
 80014ce:	0fd2      	lsrs	r2, r2, #31
 80014d0:	42a3      	cmp	r3, r4
 80014d2:	dd04      	ble.n	80014de <__aeabi_d2iz+0x22>
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <__aeabi_d2iz+0x58>)
 80014d6:	4283      	cmp	r3, r0
 80014d8:	dd02      	ble.n	80014e0 <__aeabi_d2iz+0x24>
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <__aeabi_d2iz+0x5c>)
 80014dc:	18d0      	adds	r0, r2, r3
 80014de:	bd30      	pop	{r4, r5, pc}
 80014e0:	2080      	movs	r0, #128	; 0x80
 80014e2:	0340      	lsls	r0, r0, #13
 80014e4:	4301      	orrs	r1, r0
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <__aeabi_d2iz+0x60>)
 80014e8:	1ac0      	subs	r0, r0, r3
 80014ea:	281f      	cmp	r0, #31
 80014ec:	dd08      	ble.n	8001500 <__aeabi_d2iz+0x44>
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <__aeabi_d2iz+0x64>)
 80014f0:	1ac3      	subs	r3, r0, r3
 80014f2:	40d9      	lsrs	r1, r3
 80014f4:	000b      	movs	r3, r1
 80014f6:	4258      	negs	r0, r3
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	d1f0      	bne.n	80014de <__aeabi_d2iz+0x22>
 80014fc:	0018      	movs	r0, r3
 80014fe:	e7ee      	b.n	80014de <__aeabi_d2iz+0x22>
 8001500:	4c08      	ldr	r4, [pc, #32]	; (8001524 <__aeabi_d2iz+0x68>)
 8001502:	40c5      	lsrs	r5, r0
 8001504:	46a4      	mov	ip, r4
 8001506:	4463      	add	r3, ip
 8001508:	4099      	lsls	r1, r3
 800150a:	000b      	movs	r3, r1
 800150c:	432b      	orrs	r3, r5
 800150e:	e7f2      	b.n	80014f6 <__aeabi_d2iz+0x3a>
 8001510:	000003fe 	.word	0x000003fe
 8001514:	0000041d 	.word	0x0000041d
 8001518:	7fffffff 	.word	0x7fffffff
 800151c:	00000433 	.word	0x00000433
 8001520:	00000413 	.word	0x00000413
 8001524:	fffffbed 	.word	0xfffffbed

08001528 <__aeabi_ui2d>:
 8001528:	b510      	push	{r4, lr}
 800152a:	1e04      	subs	r4, r0, #0
 800152c:	d010      	beq.n	8001550 <__aeabi_ui2d+0x28>
 800152e:	f000 f85f 	bl	80015f0 <__clzsi2>
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <__aeabi_ui2d+0x48>)
 8001534:	1a1b      	subs	r3, r3, r0
 8001536:	280a      	cmp	r0, #10
 8001538:	dc11      	bgt.n	800155e <__aeabi_ui2d+0x36>
 800153a:	220b      	movs	r2, #11
 800153c:	0021      	movs	r1, r4
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	40d1      	lsrs	r1, r2
 8001542:	3015      	adds	r0, #21
 8001544:	030a      	lsls	r2, r1, #12
 8001546:	055b      	lsls	r3, r3, #21
 8001548:	4084      	lsls	r4, r0
 800154a:	0b12      	lsrs	r2, r2, #12
 800154c:	0d5b      	lsrs	r3, r3, #21
 800154e:	e001      	b.n	8001554 <__aeabi_ui2d+0x2c>
 8001550:	2300      	movs	r3, #0
 8001552:	2200      	movs	r2, #0
 8001554:	051b      	lsls	r3, r3, #20
 8001556:	4313      	orrs	r3, r2
 8001558:	0020      	movs	r0, r4
 800155a:	0019      	movs	r1, r3
 800155c:	bd10      	pop	{r4, pc}
 800155e:	0022      	movs	r2, r4
 8001560:	380b      	subs	r0, #11
 8001562:	4082      	lsls	r2, r0
 8001564:	055b      	lsls	r3, r3, #21
 8001566:	0312      	lsls	r2, r2, #12
 8001568:	2400      	movs	r4, #0
 800156a:	0b12      	lsrs	r2, r2, #12
 800156c:	0d5b      	lsrs	r3, r3, #21
 800156e:	e7f1      	b.n	8001554 <__aeabi_ui2d+0x2c>
 8001570:	0000041e 	.word	0x0000041e

08001574 <__aeabi_cdrcmple>:
 8001574:	4684      	mov	ip, r0
 8001576:	0010      	movs	r0, r2
 8001578:	4662      	mov	r2, ip
 800157a:	468c      	mov	ip, r1
 800157c:	0019      	movs	r1, r3
 800157e:	4663      	mov	r3, ip
 8001580:	e000      	b.n	8001584 <__aeabi_cdcmpeq>
 8001582:	46c0      	nop			; (mov r8, r8)

08001584 <__aeabi_cdcmpeq>:
 8001584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001586:	f000 f8f9 	bl	800177c <__ledf2>
 800158a:	2800      	cmp	r0, #0
 800158c:	d401      	bmi.n	8001592 <__aeabi_cdcmpeq+0xe>
 800158e:	2100      	movs	r1, #0
 8001590:	42c8      	cmn	r0, r1
 8001592:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001594 <__aeabi_dcmpeq>:
 8001594:	b510      	push	{r4, lr}
 8001596:	f000 f849 	bl	800162c <__eqdf2>
 800159a:	4240      	negs	r0, r0
 800159c:	3001      	adds	r0, #1
 800159e:	bd10      	pop	{r4, pc}

080015a0 <__aeabi_dcmplt>:
 80015a0:	b510      	push	{r4, lr}
 80015a2:	f000 f8eb 	bl	800177c <__ledf2>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	db01      	blt.n	80015ae <__aeabi_dcmplt+0xe>
 80015aa:	2000      	movs	r0, #0
 80015ac:	bd10      	pop	{r4, pc}
 80015ae:	2001      	movs	r0, #1
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)

080015b4 <__aeabi_dcmple>:
 80015b4:	b510      	push	{r4, lr}
 80015b6:	f000 f8e1 	bl	800177c <__ledf2>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	dd01      	ble.n	80015c2 <__aeabi_dcmple+0xe>
 80015be:	2000      	movs	r0, #0
 80015c0:	bd10      	pop	{r4, pc}
 80015c2:	2001      	movs	r0, #1
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)

080015c8 <__aeabi_dcmpgt>:
 80015c8:	b510      	push	{r4, lr}
 80015ca:	f000 f871 	bl	80016b0 <__gedf2>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	dc01      	bgt.n	80015d6 <__aeabi_dcmpgt+0xe>
 80015d2:	2000      	movs	r0, #0
 80015d4:	bd10      	pop	{r4, pc}
 80015d6:	2001      	movs	r0, #1
 80015d8:	bd10      	pop	{r4, pc}
 80015da:	46c0      	nop			; (mov r8, r8)

080015dc <__aeabi_dcmpge>:
 80015dc:	b510      	push	{r4, lr}
 80015de:	f000 f867 	bl	80016b0 <__gedf2>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	da01      	bge.n	80015ea <__aeabi_dcmpge+0xe>
 80015e6:	2000      	movs	r0, #0
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	2001      	movs	r0, #1
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)

080015f0 <__clzsi2>:
 80015f0:	211c      	movs	r1, #28
 80015f2:	2301      	movs	r3, #1
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	4298      	cmp	r0, r3
 80015f8:	d301      	bcc.n	80015fe <__clzsi2+0xe>
 80015fa:	0c00      	lsrs	r0, r0, #16
 80015fc:	3910      	subs	r1, #16
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	4298      	cmp	r0, r3
 8001602:	d301      	bcc.n	8001608 <__clzsi2+0x18>
 8001604:	0a00      	lsrs	r0, r0, #8
 8001606:	3908      	subs	r1, #8
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	4298      	cmp	r0, r3
 800160c:	d301      	bcc.n	8001612 <__clzsi2+0x22>
 800160e:	0900      	lsrs	r0, r0, #4
 8001610:	3904      	subs	r1, #4
 8001612:	a202      	add	r2, pc, #8	; (adr r2, 800161c <__clzsi2+0x2c>)
 8001614:	5c10      	ldrb	r0, [r2, r0]
 8001616:	1840      	adds	r0, r0, r1
 8001618:	4770      	bx	lr
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	02020304 	.word	0x02020304
 8001620:	01010101 	.word	0x01010101
	...

0800162c <__eqdf2>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	464e      	mov	r6, r9
 8001630:	4645      	mov	r5, r8
 8001632:	46de      	mov	lr, fp
 8001634:	4657      	mov	r7, sl
 8001636:	4690      	mov	r8, r2
 8001638:	b5e0      	push	{r5, r6, r7, lr}
 800163a:	0017      	movs	r7, r2
 800163c:	031a      	lsls	r2, r3, #12
 800163e:	0b12      	lsrs	r2, r2, #12
 8001640:	0005      	movs	r5, r0
 8001642:	4684      	mov	ip, r0
 8001644:	4819      	ldr	r0, [pc, #100]	; (80016ac <__eqdf2+0x80>)
 8001646:	030e      	lsls	r6, r1, #12
 8001648:	004c      	lsls	r4, r1, #1
 800164a:	4691      	mov	r9, r2
 800164c:	005a      	lsls	r2, r3, #1
 800164e:	0fdb      	lsrs	r3, r3, #31
 8001650:	469b      	mov	fp, r3
 8001652:	0b36      	lsrs	r6, r6, #12
 8001654:	0d64      	lsrs	r4, r4, #21
 8001656:	0fc9      	lsrs	r1, r1, #31
 8001658:	0d52      	lsrs	r2, r2, #21
 800165a:	4284      	cmp	r4, r0
 800165c:	d019      	beq.n	8001692 <__eqdf2+0x66>
 800165e:	4282      	cmp	r2, r0
 8001660:	d010      	beq.n	8001684 <__eqdf2+0x58>
 8001662:	2001      	movs	r0, #1
 8001664:	4294      	cmp	r4, r2
 8001666:	d10e      	bne.n	8001686 <__eqdf2+0x5a>
 8001668:	454e      	cmp	r6, r9
 800166a:	d10c      	bne.n	8001686 <__eqdf2+0x5a>
 800166c:	2001      	movs	r0, #1
 800166e:	45c4      	cmp	ip, r8
 8001670:	d109      	bne.n	8001686 <__eqdf2+0x5a>
 8001672:	4559      	cmp	r1, fp
 8001674:	d017      	beq.n	80016a6 <__eqdf2+0x7a>
 8001676:	2c00      	cmp	r4, #0
 8001678:	d105      	bne.n	8001686 <__eqdf2+0x5a>
 800167a:	0030      	movs	r0, r6
 800167c:	4328      	orrs	r0, r5
 800167e:	1e43      	subs	r3, r0, #1
 8001680:	4198      	sbcs	r0, r3
 8001682:	e000      	b.n	8001686 <__eqdf2+0x5a>
 8001684:	2001      	movs	r0, #1
 8001686:	bcf0      	pop	{r4, r5, r6, r7}
 8001688:	46bb      	mov	fp, r7
 800168a:	46b2      	mov	sl, r6
 800168c:	46a9      	mov	r9, r5
 800168e:	46a0      	mov	r8, r4
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001692:	0033      	movs	r3, r6
 8001694:	2001      	movs	r0, #1
 8001696:	432b      	orrs	r3, r5
 8001698:	d1f5      	bne.n	8001686 <__eqdf2+0x5a>
 800169a:	42a2      	cmp	r2, r4
 800169c:	d1f3      	bne.n	8001686 <__eqdf2+0x5a>
 800169e:	464b      	mov	r3, r9
 80016a0:	433b      	orrs	r3, r7
 80016a2:	d1f0      	bne.n	8001686 <__eqdf2+0x5a>
 80016a4:	e7e2      	b.n	800166c <__eqdf2+0x40>
 80016a6:	2000      	movs	r0, #0
 80016a8:	e7ed      	b.n	8001686 <__eqdf2+0x5a>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	000007ff 	.word	0x000007ff

080016b0 <__gedf2>:
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b2:	4647      	mov	r7, r8
 80016b4:	46ce      	mov	lr, r9
 80016b6:	0004      	movs	r4, r0
 80016b8:	0018      	movs	r0, r3
 80016ba:	0016      	movs	r6, r2
 80016bc:	031b      	lsls	r3, r3, #12
 80016be:	0b1b      	lsrs	r3, r3, #12
 80016c0:	4d2d      	ldr	r5, [pc, #180]	; (8001778 <__gedf2+0xc8>)
 80016c2:	004a      	lsls	r2, r1, #1
 80016c4:	4699      	mov	r9, r3
 80016c6:	b580      	push	{r7, lr}
 80016c8:	0043      	lsls	r3, r0, #1
 80016ca:	030f      	lsls	r7, r1, #12
 80016cc:	46a4      	mov	ip, r4
 80016ce:	46b0      	mov	r8, r6
 80016d0:	0b3f      	lsrs	r7, r7, #12
 80016d2:	0d52      	lsrs	r2, r2, #21
 80016d4:	0fc9      	lsrs	r1, r1, #31
 80016d6:	0d5b      	lsrs	r3, r3, #21
 80016d8:	0fc0      	lsrs	r0, r0, #31
 80016da:	42aa      	cmp	r2, r5
 80016dc:	d021      	beq.n	8001722 <__gedf2+0x72>
 80016de:	42ab      	cmp	r3, r5
 80016e0:	d013      	beq.n	800170a <__gedf2+0x5a>
 80016e2:	2a00      	cmp	r2, #0
 80016e4:	d122      	bne.n	800172c <__gedf2+0x7c>
 80016e6:	433c      	orrs	r4, r7
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <__gedf2+0x42>
 80016ec:	464d      	mov	r5, r9
 80016ee:	432e      	orrs	r6, r5
 80016f0:	d022      	beq.n	8001738 <__gedf2+0x88>
 80016f2:	2c00      	cmp	r4, #0
 80016f4:	d010      	beq.n	8001718 <__gedf2+0x68>
 80016f6:	4281      	cmp	r1, r0
 80016f8:	d022      	beq.n	8001740 <__gedf2+0x90>
 80016fa:	2002      	movs	r0, #2
 80016fc:	3901      	subs	r1, #1
 80016fe:	4008      	ands	r0, r1
 8001700:	3801      	subs	r0, #1
 8001702:	bcc0      	pop	{r6, r7}
 8001704:	46b9      	mov	r9, r7
 8001706:	46b0      	mov	r8, r6
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170a:	464d      	mov	r5, r9
 800170c:	432e      	orrs	r6, r5
 800170e:	d129      	bne.n	8001764 <__gedf2+0xb4>
 8001710:	2a00      	cmp	r2, #0
 8001712:	d1f0      	bne.n	80016f6 <__gedf2+0x46>
 8001714:	433c      	orrs	r4, r7
 8001716:	d1ee      	bne.n	80016f6 <__gedf2+0x46>
 8001718:	2800      	cmp	r0, #0
 800171a:	d1f2      	bne.n	8001702 <__gedf2+0x52>
 800171c:	2001      	movs	r0, #1
 800171e:	4240      	negs	r0, r0
 8001720:	e7ef      	b.n	8001702 <__gedf2+0x52>
 8001722:	003d      	movs	r5, r7
 8001724:	4325      	orrs	r5, r4
 8001726:	d11d      	bne.n	8001764 <__gedf2+0xb4>
 8001728:	4293      	cmp	r3, r2
 800172a:	d0ee      	beq.n	800170a <__gedf2+0x5a>
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1e2      	bne.n	80016f6 <__gedf2+0x46>
 8001730:	464c      	mov	r4, r9
 8001732:	4326      	orrs	r6, r4
 8001734:	d1df      	bne.n	80016f6 <__gedf2+0x46>
 8001736:	e7e0      	b.n	80016fa <__gedf2+0x4a>
 8001738:	2000      	movs	r0, #0
 800173a:	2c00      	cmp	r4, #0
 800173c:	d0e1      	beq.n	8001702 <__gedf2+0x52>
 800173e:	e7dc      	b.n	80016fa <__gedf2+0x4a>
 8001740:	429a      	cmp	r2, r3
 8001742:	dc0a      	bgt.n	800175a <__gedf2+0xaa>
 8001744:	dbe8      	blt.n	8001718 <__gedf2+0x68>
 8001746:	454f      	cmp	r7, r9
 8001748:	d8d7      	bhi.n	80016fa <__gedf2+0x4a>
 800174a:	d00e      	beq.n	800176a <__gedf2+0xba>
 800174c:	2000      	movs	r0, #0
 800174e:	454f      	cmp	r7, r9
 8001750:	d2d7      	bcs.n	8001702 <__gedf2+0x52>
 8001752:	2900      	cmp	r1, #0
 8001754:	d0e2      	beq.n	800171c <__gedf2+0x6c>
 8001756:	0008      	movs	r0, r1
 8001758:	e7d3      	b.n	8001702 <__gedf2+0x52>
 800175a:	4243      	negs	r3, r0
 800175c:	4158      	adcs	r0, r3
 800175e:	0040      	lsls	r0, r0, #1
 8001760:	3801      	subs	r0, #1
 8001762:	e7ce      	b.n	8001702 <__gedf2+0x52>
 8001764:	2002      	movs	r0, #2
 8001766:	4240      	negs	r0, r0
 8001768:	e7cb      	b.n	8001702 <__gedf2+0x52>
 800176a:	45c4      	cmp	ip, r8
 800176c:	d8c5      	bhi.n	80016fa <__gedf2+0x4a>
 800176e:	2000      	movs	r0, #0
 8001770:	45c4      	cmp	ip, r8
 8001772:	d2c6      	bcs.n	8001702 <__gedf2+0x52>
 8001774:	e7ed      	b.n	8001752 <__gedf2+0xa2>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	000007ff 	.word	0x000007ff

0800177c <__ledf2>:
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	4647      	mov	r7, r8
 8001780:	46ce      	mov	lr, r9
 8001782:	0004      	movs	r4, r0
 8001784:	0018      	movs	r0, r3
 8001786:	0016      	movs	r6, r2
 8001788:	031b      	lsls	r3, r3, #12
 800178a:	0b1b      	lsrs	r3, r3, #12
 800178c:	4d2c      	ldr	r5, [pc, #176]	; (8001840 <__ledf2+0xc4>)
 800178e:	004a      	lsls	r2, r1, #1
 8001790:	4699      	mov	r9, r3
 8001792:	b580      	push	{r7, lr}
 8001794:	0043      	lsls	r3, r0, #1
 8001796:	030f      	lsls	r7, r1, #12
 8001798:	46a4      	mov	ip, r4
 800179a:	46b0      	mov	r8, r6
 800179c:	0b3f      	lsrs	r7, r7, #12
 800179e:	0d52      	lsrs	r2, r2, #21
 80017a0:	0fc9      	lsrs	r1, r1, #31
 80017a2:	0d5b      	lsrs	r3, r3, #21
 80017a4:	0fc0      	lsrs	r0, r0, #31
 80017a6:	42aa      	cmp	r2, r5
 80017a8:	d00d      	beq.n	80017c6 <__ledf2+0x4a>
 80017aa:	42ab      	cmp	r3, r5
 80017ac:	d010      	beq.n	80017d0 <__ledf2+0x54>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d127      	bne.n	8001802 <__ledf2+0x86>
 80017b2:	433c      	orrs	r4, r7
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d111      	bne.n	80017dc <__ledf2+0x60>
 80017b8:	464d      	mov	r5, r9
 80017ba:	432e      	orrs	r6, r5
 80017bc:	d10e      	bne.n	80017dc <__ledf2+0x60>
 80017be:	2000      	movs	r0, #0
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d015      	beq.n	80017f0 <__ledf2+0x74>
 80017c4:	e00e      	b.n	80017e4 <__ledf2+0x68>
 80017c6:	003d      	movs	r5, r7
 80017c8:	4325      	orrs	r5, r4
 80017ca:	d110      	bne.n	80017ee <__ledf2+0x72>
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d118      	bne.n	8001802 <__ledf2+0x86>
 80017d0:	464d      	mov	r5, r9
 80017d2:	432e      	orrs	r6, r5
 80017d4:	d10b      	bne.n	80017ee <__ledf2+0x72>
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d102      	bne.n	80017e0 <__ledf2+0x64>
 80017da:	433c      	orrs	r4, r7
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d00b      	beq.n	80017f8 <__ledf2+0x7c>
 80017e0:	4281      	cmp	r1, r0
 80017e2:	d014      	beq.n	800180e <__ledf2+0x92>
 80017e4:	2002      	movs	r0, #2
 80017e6:	3901      	subs	r1, #1
 80017e8:	4008      	ands	r0, r1
 80017ea:	3801      	subs	r0, #1
 80017ec:	e000      	b.n	80017f0 <__ledf2+0x74>
 80017ee:	2002      	movs	r0, #2
 80017f0:	bcc0      	pop	{r6, r7}
 80017f2:	46b9      	mov	r9, r7
 80017f4:	46b0      	mov	r8, r6
 80017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d1f9      	bne.n	80017f0 <__ledf2+0x74>
 80017fc:	2001      	movs	r0, #1
 80017fe:	4240      	negs	r0, r0
 8001800:	e7f6      	b.n	80017f0 <__ledf2+0x74>
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ec      	bne.n	80017e0 <__ledf2+0x64>
 8001806:	464c      	mov	r4, r9
 8001808:	4326      	orrs	r6, r4
 800180a:	d1e9      	bne.n	80017e0 <__ledf2+0x64>
 800180c:	e7ea      	b.n	80017e4 <__ledf2+0x68>
 800180e:	429a      	cmp	r2, r3
 8001810:	dd04      	ble.n	800181c <__ledf2+0xa0>
 8001812:	4243      	negs	r3, r0
 8001814:	4158      	adcs	r0, r3
 8001816:	0040      	lsls	r0, r0, #1
 8001818:	3801      	subs	r0, #1
 800181a:	e7e9      	b.n	80017f0 <__ledf2+0x74>
 800181c:	429a      	cmp	r2, r3
 800181e:	dbeb      	blt.n	80017f8 <__ledf2+0x7c>
 8001820:	454f      	cmp	r7, r9
 8001822:	d8df      	bhi.n	80017e4 <__ledf2+0x68>
 8001824:	d006      	beq.n	8001834 <__ledf2+0xb8>
 8001826:	2000      	movs	r0, #0
 8001828:	454f      	cmp	r7, r9
 800182a:	d2e1      	bcs.n	80017f0 <__ledf2+0x74>
 800182c:	2900      	cmp	r1, #0
 800182e:	d0e5      	beq.n	80017fc <__ledf2+0x80>
 8001830:	0008      	movs	r0, r1
 8001832:	e7dd      	b.n	80017f0 <__ledf2+0x74>
 8001834:	45c4      	cmp	ip, r8
 8001836:	d8d5      	bhi.n	80017e4 <__ledf2+0x68>
 8001838:	2000      	movs	r0, #0
 800183a:	45c4      	cmp	ip, r8
 800183c:	d2d8      	bcs.n	80017f0 <__ledf2+0x74>
 800183e:	e7f5      	b.n	800182c <__ledf2+0xb0>
 8001840:	000007ff 	.word	0x000007ff

08001844 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	0018      	movs	r0, r3
 800184e:	230c      	movs	r3, #12
 8001850:	001a      	movs	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	f004 fe2c 	bl	80064b0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001858:	4b39      	ldr	r3, [pc, #228]	; (8001940 <MX_ADC_Init+0xfc>)
 800185a:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <MX_ADC_Init+0x100>)
 800185c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <MX_ADC_Init+0xfc>)
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <MX_ADC_Init+0xfc>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <MX_ADC_Init+0xfc>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <MX_ADC_Init+0xfc>)
 8001872:	2201      	movs	r2, #1
 8001874:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <MX_ADC_Init+0xfc>)
 8001878:	2204      	movs	r2, #4
 800187a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <MX_ADC_Init+0xfc>)
 800187e:	2200      	movs	r2, #0
 8001880:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <MX_ADC_Init+0xfc>)
 8001884:	2200      	movs	r2, #0
 8001886:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <MX_ADC_Init+0xfc>)
 800188a:	2200      	movs	r2, #0
 800188c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <MX_ADC_Init+0xfc>)
 8001890:	2200      	movs	r2, #0
 8001892:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <MX_ADC_Init+0xfc>)
 8001896:	22c2      	movs	r2, #194	; 0xc2
 8001898:	32ff      	adds	r2, #255	; 0xff
 800189a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <MX_ADC_Init+0xfc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <MX_ADC_Init+0xfc>)
 80018a4:	2224      	movs	r2, #36	; 0x24
 80018a6:	2100      	movs	r1, #0
 80018a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <MX_ADC_Init+0xfc>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <MX_ADC_Init+0xfc>)
 80018b2:	0018      	movs	r0, r3
 80018b4:	f001 f916 	bl	8002ae4 <HAL_ADC_Init>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d001      	beq.n	80018c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80018bc:	f000 f9bf 	bl	8001c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	0152      	lsls	r2, r2, #5
 80018cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	0552      	lsls	r2, r2, #21
 80018d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018d6:	1d3a      	adds	r2, r7, #4
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_ADC_Init+0xfc>)
 80018da:	0011      	movs	r1, r2
 80018dc:	0018      	movs	r0, r3
 80018de:	f001 fa41 	bl	8002d64 <HAL_ADC_ConfigChannel>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d001      	beq.n	80018ea <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80018e6:	f000 f9aa 	bl	8001c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018f0:	1d3a      	adds	r2, r7, #4
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_ADC_Init+0xfc>)
 80018f4:	0011      	movs	r1, r2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f001 fa34 	bl	8002d64 <HAL_ADC_ConfigChannel>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001900:	f000 f99d 	bl	8001c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2202      	movs	r2, #2
 8001908:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800190a:	1d3a      	adds	r2, r7, #4
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_ADC_Init+0xfc>)
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f001 fa27 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d001      	beq.n	800191e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800191a:	f000 f990 	bl	8001c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2203      	movs	r2, #3
 8001922:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001924:	1d3a      	adds	r2, r7, #4
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_ADC_Init+0xfc>)
 8001928:	0011      	movs	r1, r2
 800192a:	0018      	movs	r0, r3
 800192c:	f001 fa1a 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001934:	f000 f983 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b004      	add	sp, #16
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000040 	.word	0x20000040
 8001944:	40012400 	.word	0x40012400

08001948 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08b      	sub	sp, #44	; 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	2414      	movs	r4, #20
 8001952:	193b      	adds	r3, r7, r4
 8001954:	0018      	movs	r0, r3
 8001956:	2314      	movs	r3, #20
 8001958:	001a      	movs	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	f004 fda8 	bl	80064b0 <memset>
  if(adcHandle->Instance==ADC1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <HAL_ADC_MspInit+0x84>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12b      	bne.n	80019c2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_ADC_MspInit+0x88>)
 800196c:	699a      	ldr	r2, [r3, #24]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_ADC_MspInit+0x88>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0089      	lsls	r1, r1, #2
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_ADC_MspInit+0x88>)
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_ADC_MspInit+0x88>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_ADC_MspInit+0x88>)
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	0289      	lsls	r1, r1, #10
 8001990:	430a      	orrs	r2, r1
 8001992:	615a      	str	r2, [r3, #20]
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_ADC_MspInit+0x88>)
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	029b      	lsls	r3, r3, #10
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	220f      	movs	r2, #15
 80019a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	2203      	movs	r2, #3
 80019ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	193a      	adds	r2, r7, r4
 80019b6:	2390      	movs	r3, #144	; 0x90
 80019b8:	05db      	lsls	r3, r3, #23
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 fbbd 	bl	800313c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b00b      	add	sp, #44	; 0x2c
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	40012400 	.word	0x40012400
 80019d0:	40021000 	.word	0x40021000

080019d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	240c      	movs	r4, #12
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	0018      	movs	r0, r3
 80019e0:	2314      	movs	r3, #20
 80019e2:	001a      	movs	r2, r3
 80019e4:	2100      	movs	r1, #0
 80019e6:	f004 fd63 	bl	80064b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b30      	ldr	r3, [pc, #192]	; (8001aac <MX_GPIO_Init+0xd8>)
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <MX_GPIO_Init+0xd8>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	0309      	lsls	r1, r1, #12
 80019f4:	430a      	orrs	r2, r1
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <MX_GPIO_Init+0xd8>)
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	031b      	lsls	r3, r3, #12
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <MX_GPIO_Init+0xd8>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <MX_GPIO_Init+0xd8>)
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	0289      	lsls	r1, r1, #10
 8001a10:	430a      	orrs	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MX_GPIO_Init+0xd8>)
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	029b      	lsls	r3, r3, #10
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_GPIO_Init+0xd8>)
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_GPIO_Init+0xd8>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	02c9      	lsls	r1, r1, #11
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	615a      	str	r2, [r3, #20]
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_GPIO_Init+0xd8>)
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	02db      	lsls	r3, r3, #11
 8001a38:	4013      	ands	r3, r2
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a3e:	491c      	ldr	r1, [pc, #112]	; (8001ab0 <MX_GPIO_Init+0xdc>)
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <MX_GPIO_Init+0xe0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	0018      	movs	r0, r3
 8001a46:	f001 fcf1 	bl	800342c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	019b      	lsls	r3, r3, #6
 8001a4e:	481a      	ldr	r0, [pc, #104]	; (8001ab8 <MX_GPIO_Init+0xe4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	0019      	movs	r1, r3
 8001a54:	f001 fcea 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <MX_GPIO_Init+0xdc>)
 8001a5c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2201      	movs	r2, #1
 8001a62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <MX_GPIO_Init+0xe0>)
 8001a74:	0019      	movs	r1, r3
 8001a76:	0010      	movs	r0, r2
 8001a78:	f001 fb60 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a7c:	0021      	movs	r1, r4
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0192      	lsls	r2, r2, #6
 8001a84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2201      	movs	r2, #1
 8001a8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <MX_GPIO_Init+0xe4>)
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	0010      	movs	r0, r2
 8001aa0:	f001 fb4c 	bl	800313c <HAL_GPIO_Init>

}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b009      	add	sp, #36	; 0x24
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	000003ff 	.word	0x000003ff
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	48000400 	.word	0x48000400

08001abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac2:	f000 ff87 	bl	80029d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac6:	f000 f853 	bl	8001b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aca:	f7ff ff83 	bl	80019d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001ace:	f000 fed1 	bl	8002874 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001ad2:	f000 fb9f 	bl	8002214 <MX_TIM1_Init>
  MX_ADC_Init();
 8001ad6:	f7ff feb5 	bl	8001844 <MX_ADC_Init>
  MX_TIM15_Init();
 8001ada:	f000 fd4b 	bl	8002574 <MX_TIM15_Init>
  MX_TIM2_Init();
 8001ade:	f000 fc75 	bl	80023cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ae2:	f000 fcf1 	bl	80024c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Uart1_Init();
 8001ae6:	f000 f8af 	bl	8001c48 <Uart1_Init>
  Servo_Init(&htim1,TIM_CHANNEL_1);
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <main+0xa0>)
 8001aec:	2100      	movs	r1, #0
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 fa3c 	bl	8001f6c <Servo_Init>
  Servo_Init(&htim1,TIM_CHANNEL_2);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <main+0xa0>)
 8001af6:	2104      	movs	r1, #4
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 fa37 	bl	8001f6c <Servo_Init>
  Servo_Init(&htim1,TIM_CHANNEL_3);
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <main+0xa0>)
 8001b00:	2108      	movs	r1, #8
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 fa32 	bl	8001f6c <Servo_Init>
  Servo_Init(&htim1,TIM_CHANNEL_4);
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <main+0xa0>)
 8001b0a:	210c      	movs	r1, #12
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 fa2d 	bl	8001f6c <Servo_Init>

  //
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <main+0xa4>)
 8001b14:	2100      	movs	r1, #0
 8001b16:	0018      	movs	r0, r3
 8001b18:	f002 fb98 	bl	800424c <HAL_TIM_IC_Start_IT>

	  //uint8_t buffer[256];
	  //sprintf((char *)buffer, "check : %d\n", num_port[0]);
	  //HAL_UART_Transmit(&huart1, buffer, strlen((char *)buffer), 100);

	  for(int i = 0; i < 10; i++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	e017      	b.n	8001b52 <main+0x96>
	  {
		  GPIOC -> ODR &= 0xff80;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <main+0xa8>)
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <main+0xa8>)
 8001b28:	490f      	ldr	r1, [pc, #60]	; (8001b68 <main+0xac>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	615a      	str	r2, [r3, #20]
		  GPIOC -> ODR |= num[i];
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <main+0xa8>)
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <main+0xb0>)
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	0049      	lsls	r1, r1, #1
 8001b38:	5acb      	ldrh	r3, [r1, r3]
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <main+0xa8>)
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	615a      	str	r2, [r3, #20]
		  HAL_Delay(500);
 8001b42:	23fa      	movs	r3, #250	; 0xfa
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 ffa8 	bl	8002a9c <HAL_Delay>
	  for(int i = 0; i < 10; i++)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	dde4      	ble.n	8001b22 <main+0x66>
 8001b58:	e7e0      	b.n	8001b1c <main+0x60>
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	200000b8 	.word	0x200000b8
 8001b60:	20000190 	.word	0x20000190
 8001b64:	48000800 	.word	0x48000800
 8001b68:	0000ff80 	.word	0x0000ff80
 8001b6c:	20000000 	.word	0x20000000

08001b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b099      	sub	sp, #100	; 0x64
 8001b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b76:	242c      	movs	r4, #44	; 0x2c
 8001b78:	193b      	adds	r3, r7, r4
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	2334      	movs	r3, #52	; 0x34
 8001b7e:	001a      	movs	r2, r3
 8001b80:	2100      	movs	r1, #0
 8001b82:	f004 fc95 	bl	80064b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b86:	231c      	movs	r3, #28
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	001a      	movs	r2, r3
 8001b90:	2100      	movs	r1, #0
 8001b92:	f004 fc8d 	bl	80064b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b96:	003b      	movs	r3, r7
 8001b98:	0018      	movs	r0, r3
 8001b9a:	231c      	movs	r3, #28
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f004 fc86 	bl	80064b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001ba4:	0021      	movs	r1, r4
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2212      	movs	r2, #18
 8001baa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	2201      	movs	r2, #1
 8001bb0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	2210      	movs	r2, #16
 8001bbc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	0212      	lsls	r2, r2, #8
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2200      	movs	r2, #0
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	0018      	movs	r0, r3
 8001be2:	f001 fc41 	bl	8003468 <HAL_RCC_OscConfig>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001bea:	f000 f828 	bl	8001c3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	211c      	movs	r1, #28
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f001 ffb1 	bl	8003b74 <HAL_RCC_ClockConfig>
 8001c12:	1e03      	subs	r3, r0, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001c16:	f000 f812 	bl	8001c3e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c1a:	003b      	movs	r3, r7
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c20:	003b      	movs	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c26:	003b      	movs	r3, r7
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f002 f90f 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c32:	f000 f804 	bl	8001c3e <Error_Handler>
  }
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b019      	add	sp, #100	; 0x64
 8001c3c:	bd90      	pop	{r4, r7, pc}

08001c3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c42:	b672      	cpsid	i
}
 8001c44:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <Error_Handler+0x8>

08001c48 <Uart1_Init>:
uint8_t data = 0;
uint8_t index_rx = 0;
/* VARIABLES END */

void Uart1_Init()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
   HAL_UART_Receive_IT(&huart1, (uint8_t*)RX_Data, DATALENGTH);
 8001c4c:	4904      	ldr	r1, [pc, #16]	; (8001c60 <Uart1_Init+0x18>)
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <Uart1_Init+0x1c>)
 8001c50:	2208      	movs	r2, #8
 8001c52:	0018      	movs	r0, r3
 8001c54:	f003 fd2e 	bl	80056b4 <HAL_UART_Receive_IT>
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	20000094 	.word	0x20000094
 8001c64:	200001d8 	.word	0x200001d8

08001c68 <Uart1_Handler>:
   TX_Data[7] = '>';
   HAL_UART_Transmit(&huart1,(uint8_t*)TX_Data, DATALENGTH, 10);
}

void Uart1_Handler()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	Rx_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <Uart1_Handler+0x84>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2220      	movs	r2, #32
 8001c74:	4013      	ands	r3, r2
 8001c76:	3b20      	subs	r3, #32
 8001c78:	425a      	negs	r2, r3
 8001c7a:	4153      	adcs	r3, r2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	001a      	movs	r2, r3
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <Uart1_Handler+0x88>)
 8001c82:	601a      	str	r2, [r3, #0]
	Rx_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <Uart1_Handler+0x84>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	4193      	sbcs	r3, r2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	001a      	movs	r2, r3
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <Uart1_Handler+0x8c>)
 8001c98:	601a      	str	r2, [r3, #0]

	if ((Rx_flag != RESET) && (Rx_it_source != RESET)) {
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <Uart1_Handler+0x88>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <Uart1_Handler+0x6a>
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <Uart1_Handler+0x8c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d013      	beq.n	8001cd2 <Uart1_Handler+0x6a>
		 /* 1Byte copy */
		 data = (uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <Uart1_Handler+0x84>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <Uart1_Handler+0x90>)
 8001cb6:	701a      	strb	r2, [r3, #0]
		 RX_Data[index_rx] = data;
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <Uart1_Handler+0x94>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <Uart1_Handler+0x90>)
 8001cc0:	7819      	ldrb	r1, [r3, #0]
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <Uart1_Handler+0x98>)
 8001cc4:	5499      	strb	r1, [r3, r2]
		 index_rx++;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <Uart1_Handler+0x94>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <Uart1_Handler+0x94>)
 8001cd0:	701a      	strb	r2, [r3, #0]
	}
	else;

	if(index_rx >= 8)
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <Uart1_Handler+0x94>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d904      	bls.n	8001ce4 <Uart1_Handler+0x7c>
	{
		Check_Protocol();
 8001cda:	f000 f813 	bl	8001d04 <Check_Protocol>

		index_rx = 0;
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <Uart1_Handler+0x94>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
	}
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	200001d8 	.word	0x200001d8
 8001cf0:	2000009c 	.word	0x2000009c
 8001cf4:	200000a0 	.word	0x200000a0
 8001cf8:	200000a4 	.word	0x200000a4
 8001cfc:	200000a5 	.word	0x200000a5
 8001d00:	20000094 	.word	0x20000094

08001d04 <Check_Protocol>:

void Check_Protocol()
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	if(strncmp(RX_Data, "<WAH--->", 4) == 0 && RX_Data[7] == '>')
 8001d08:	498b      	ldr	r1, [pc, #556]	; (8001f38 <Check_Protocol+0x234>)
 8001d0a:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <Check_Protocol+0x238>)
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f004 fbd6 	bl	80064c0 <strncmp>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d11d      	bne.n	8001d54 <Check_Protocol+0x50>
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <Check_Protocol+0x238>)
 8001d1a:	79db      	ldrb	r3, [r3, #7]
 8001d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8001d1e:	d119      	bne.n	8001d54 <Check_Protocol+0x50>
	{
		FlagInfo.Air_Dir_Flag = 1;
 8001d20:	4b87      	ldr	r3, [pc, #540]	; (8001f40 <Check_Protocol+0x23c>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
		DataInfo.Air_Dir_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <Check_Protocol+0x238>)
 8001d28:	791b      	ldrb	r3, [r3, #4]
 8001d2a:	2264      	movs	r2, #100	; 0x64
 8001d2c:	4353      	muls	r3, r2
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <Check_Protocol+0x238>)
 8001d32:	795b      	ldrb	r3, [r3, #5]
 8001d34:	1c19      	adds	r1, r3, #0
 8001d36:	0089      	lsls	r1, r1, #2
 8001d38:	18cb      	adds	r3, r1, r3
 8001d3a:	18db      	adds	r3, r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	18d3      	adds	r3, r2, r3
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <Check_Protocol+0x238>)
 8001d44:	799b      	ldrb	r3, [r3, #6]
 8001d46:	18d3      	adds	r3, r2, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3330      	adds	r3, #48	; 0x30
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b7d      	ldr	r3, [pc, #500]	; (8001f44 <Check_Protocol+0x240>)
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e0ed      	b.n	8001f30 <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WAL--->", 4) == 0 && RX_Data[7] == '>')
 8001d54:	497c      	ldr	r1, [pc, #496]	; (8001f48 <Check_Protocol+0x244>)
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <Check_Protocol+0x238>)
 8001d58:	2204      	movs	r2, #4
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f004 fbb0 	bl	80064c0 <strncmp>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d11d      	bne.n	8001da0 <Check_Protocol+0x9c>
 8001d64:	4b75      	ldr	r3, [pc, #468]	; (8001f3c <Check_Protocol+0x238>)
 8001d66:	79db      	ldrb	r3, [r3, #7]
 8001d68:	2b3e      	cmp	r3, #62	; 0x3e
 8001d6a:	d119      	bne.n	8001da0 <Check_Protocol+0x9c>
	{
		FlagInfo.Air_Speed_Flag = 1;
 8001d6c:	4b74      	ldr	r3, [pc, #464]	; (8001f40 <Check_Protocol+0x23c>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	705a      	strb	r2, [r3, #1]
		DataInfo.Air_Speed_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <Check_Protocol+0x238>)
 8001d74:	791b      	ldrb	r3, [r3, #4]
 8001d76:	2264      	movs	r2, #100	; 0x64
 8001d78:	4353      	muls	r3, r2
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <Check_Protocol+0x238>)
 8001d7e:	795b      	ldrb	r3, [r3, #5]
 8001d80:	1c19      	adds	r1, r3, #0
 8001d82:	0089      	lsls	r1, r1, #2
 8001d84:	18cb      	adds	r3, r1, r3
 8001d86:	18db      	adds	r3, r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	18d3      	adds	r3, r2, r3
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <Check_Protocol+0x238>)
 8001d90:	799b      	ldrb	r3, [r3, #6]
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3330      	adds	r3, #48	; 0x30
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b6a      	ldr	r3, [pc, #424]	; (8001f44 <Check_Protocol+0x240>)
 8001d9c:	705a      	strb	r2, [r3, #1]
 8001d9e:	e0c7      	b.n	8001f30 <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WCH--->", 4) == 0 && RX_Data[7] == '>')
 8001da0:	496a      	ldr	r1, [pc, #424]	; (8001f4c <Check_Protocol+0x248>)
 8001da2:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <Check_Protocol+0x238>)
 8001da4:	2204      	movs	r2, #4
 8001da6:	0018      	movs	r0, r3
 8001da8:	f004 fb8a 	bl	80064c0 <strncmp>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d11d      	bne.n	8001dec <Check_Protocol+0xe8>
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <Check_Protocol+0x238>)
 8001db2:	79db      	ldrb	r3, [r3, #7]
 8001db4:	2b3e      	cmp	r3, #62	; 0x3e
 8001db6:	d119      	bne.n	8001dec <Check_Protocol+0xe8>
	{
		FlagInfo.Seat_UpDown_Flag = 1;
 8001db8:	4b61      	ldr	r3, [pc, #388]	; (8001f40 <Check_Protocol+0x23c>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	709a      	strb	r2, [r3, #2]
		DataInfo.Seat_UpDown_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <Check_Protocol+0x238>)
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	2264      	movs	r2, #100	; 0x64
 8001dc4:	4353      	muls	r3, r2
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <Check_Protocol+0x238>)
 8001dca:	795b      	ldrb	r3, [r3, #5]
 8001dcc:	1c19      	adds	r1, r3, #0
 8001dce:	0089      	lsls	r1, r1, #2
 8001dd0:	18cb      	adds	r3, r1, r3
 8001dd2:	18db      	adds	r3, r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	18d3      	adds	r3, r2, r3
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <Check_Protocol+0x238>)
 8001ddc:	799b      	ldrb	r3, [r3, #6]
 8001dde:	18d3      	adds	r3, r2, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3330      	adds	r3, #48	; 0x30
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <Check_Protocol+0x240>)
 8001de8:	709a      	strb	r2, [r3, #2]
 8001dea:	e0a1      	b.n	8001f30 <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WCL--->", 4) == 0 && RX_Data[7] == '>')
 8001dec:	4958      	ldr	r1, [pc, #352]	; (8001f50 <Check_Protocol+0x24c>)
 8001dee:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <Check_Protocol+0x238>)
 8001df0:	2204      	movs	r2, #4
 8001df2:	0018      	movs	r0, r3
 8001df4:	f004 fb64 	bl	80064c0 <strncmp>
 8001df8:	1e03      	subs	r3, r0, #0
 8001dfa:	d11d      	bne.n	8001e38 <Check_Protocol+0x134>
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <Check_Protocol+0x238>)
 8001dfe:	79db      	ldrb	r3, [r3, #7]
 8001e00:	2b3e      	cmp	r3, #62	; 0x3e
 8001e02:	d119      	bne.n	8001e38 <Check_Protocol+0x134>
	{
		FlagInfo.Seat_RightLeft_Flag = 1;
 8001e04:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <Check_Protocol+0x23c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	70da      	strb	r2, [r3, #3]
		DataInfo.Seat_RightLeft_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <Check_Protocol+0x238>)
 8001e0c:	791b      	ldrb	r3, [r3, #4]
 8001e0e:	2264      	movs	r2, #100	; 0x64
 8001e10:	4353      	muls	r3, r2
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <Check_Protocol+0x238>)
 8001e16:	795b      	ldrb	r3, [r3, #5]
 8001e18:	1c19      	adds	r1, r3, #0
 8001e1a:	0089      	lsls	r1, r1, #2
 8001e1c:	18cb      	adds	r3, r1, r3
 8001e1e:	18db      	adds	r3, r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b45      	ldr	r3, [pc, #276]	; (8001f3c <Check_Protocol+0x238>)
 8001e28:	799b      	ldrb	r3, [r3, #6]
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	3330      	adds	r3, #48	; 0x30
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <Check_Protocol+0x240>)
 8001e34:	70da      	strb	r2, [r3, #3]
 8001e36:	e07b      	b.n	8001f30 <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WSH--->", 4) == 0 && RX_Data[7] == '>')
 8001e38:	4946      	ldr	r1, [pc, #280]	; (8001f54 <Check_Protocol+0x250>)
 8001e3a:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <Check_Protocol+0x238>)
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f004 fb3e 	bl	80064c0 <strncmp>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d11d      	bne.n	8001e84 <Check_Protocol+0x180>
 8001e48:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <Check_Protocol+0x238>)
 8001e4a:	79db      	ldrb	r3, [r3, #7]
 8001e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e4e:	d119      	bne.n	8001e84 <Check_Protocol+0x180>
	{
		FlagInfo.Side_UpDown_Flag = 1;
 8001e50:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <Check_Protocol+0x23c>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	711a      	strb	r2, [r3, #4]
		DataInfo.Side_UpDown_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8001e56:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <Check_Protocol+0x238>)
 8001e58:	791b      	ldrb	r3, [r3, #4]
 8001e5a:	2264      	movs	r2, #100	; 0x64
 8001e5c:	4353      	muls	r3, r2
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <Check_Protocol+0x238>)
 8001e62:	795b      	ldrb	r3, [r3, #5]
 8001e64:	1c19      	adds	r1, r3, #0
 8001e66:	0089      	lsls	r1, r1, #2
 8001e68:	18cb      	adds	r3, r1, r3
 8001e6a:	18db      	adds	r3, r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	18d3      	adds	r3, r2, r3
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <Check_Protocol+0x238>)
 8001e74:	799b      	ldrb	r3, [r3, #6]
 8001e76:	18d3      	adds	r3, r2, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3330      	adds	r3, #48	; 0x30
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <Check_Protocol+0x240>)
 8001e80:	711a      	strb	r2, [r3, #4]
 8001e82:	e055      	b.n	8001f30 <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WSL--->", 4) == 0 && RX_Data[7] == '>')
 8001e84:	4934      	ldr	r1, [pc, #208]	; (8001f58 <Check_Protocol+0x254>)
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <Check_Protocol+0x238>)
 8001e88:	2204      	movs	r2, #4
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f004 fb18 	bl	80064c0 <strncmp>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d11d      	bne.n	8001ed0 <Check_Protocol+0x1cc>
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <Check_Protocol+0x238>)
 8001e96:	79db      	ldrb	r3, [r3, #7]
 8001e98:	2b3e      	cmp	r3, #62	; 0x3e
 8001e9a:	d119      	bne.n	8001ed0 <Check_Protocol+0x1cc>
	{
		FlagInfo.Side_RightLeft_Flag = 1;
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <Check_Protocol+0x23c>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	715a      	strb	r2, [r3, #5]
		DataInfo.Side_RightLeft_Data = ((RX_Data[4] -'0') * 100) + ((RX_Data[5] -'0') * 10) + (RX_Data[6] -'0');
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <Check_Protocol+0x238>)
 8001ea4:	791b      	ldrb	r3, [r3, #4]
 8001ea6:	2264      	movs	r2, #100	; 0x64
 8001ea8:	4353      	muls	r3, r2
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <Check_Protocol+0x238>)
 8001eae:	795b      	ldrb	r3, [r3, #5]
 8001eb0:	1c19      	adds	r1, r3, #0
 8001eb2:	0089      	lsls	r1, r1, #2
 8001eb4:	18cb      	adds	r3, r1, r3
 8001eb6:	18db      	adds	r3, r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	18d3      	adds	r3, r2, r3
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <Check_Protocol+0x238>)
 8001ec0:	799b      	ldrb	r3, [r3, #6]
 8001ec2:	18d3      	adds	r3, r2, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3330      	adds	r3, #48	; 0x30
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <Check_Protocol+0x240>)
 8001ecc:	715a      	strb	r2, [r3, #5]
 8001ece:	e02f      	b.n	8001f30 <Check_Protocol+0x22c>
	}
	else if(strncmp(RX_Data, "<WK0001>", 8) == 0)
 8001ed0:	4922      	ldr	r1, [pc, #136]	; (8001f5c <Check_Protocol+0x258>)
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <Check_Protocol+0x238>)
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f004 faf2 	bl	80064c0 <strncmp>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	d103      	bne.n	8001ee8 <Check_Protocol+0x1e4>
	{
		FlagInfo.Key_Close_Flag = 1;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <Check_Protocol+0x23c>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	719a      	strb	r2, [r3, #6]
	else if(strncmp(RX_Data, "<WK0011>", 8) == 0)
	{
		FlagInfo.Key_On_Flag = 1;
	}
	else;
}
 8001ee6:	e023      	b.n	8001f30 <Check_Protocol+0x22c>
	else if(strncmp(RX_Data, "<WK0000>", 8) == 0)
 8001ee8:	491d      	ldr	r1, [pc, #116]	; (8001f60 <Check_Protocol+0x25c>)
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <Check_Protocol+0x238>)
 8001eec:	2208      	movs	r2, #8
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f004 fae6 	bl	80064c0 <strncmp>
 8001ef4:	1e03      	subs	r3, r0, #0
 8001ef6:	d103      	bne.n	8001f00 <Check_Protocol+0x1fc>
		FlagInfo.Key_Far_Flag = 1;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <Check_Protocol+0x23c>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	71da      	strb	r2, [r3, #7]
}
 8001efe:	e017      	b.n	8001f30 <Check_Protocol+0x22c>
	else if(strncmp(RX_Data, "<WK0010>", 8) == 0)
 8001f00:	4918      	ldr	r1, [pc, #96]	; (8001f64 <Check_Protocol+0x260>)
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <Check_Protocol+0x238>)
 8001f04:	2208      	movs	r2, #8
 8001f06:	0018      	movs	r0, r3
 8001f08:	f004 fada 	bl	80064c0 <strncmp>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d103      	bne.n	8001f18 <Check_Protocol+0x214>
		FlagInfo.Key_Off_Flag = 1;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <Check_Protocol+0x23c>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	721a      	strb	r2, [r3, #8]
}
 8001f16:	e00b      	b.n	8001f30 <Check_Protocol+0x22c>
	else if(strncmp(RX_Data, "<WK0011>", 8) == 0)
 8001f18:	4913      	ldr	r1, [pc, #76]	; (8001f68 <Check_Protocol+0x264>)
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <Check_Protocol+0x238>)
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f004 face 	bl	80064c0 <strncmp>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d103      	bne.n	8001f30 <Check_Protocol+0x22c>
		FlagInfo.Key_On_Flag = 1;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <Check_Protocol+0x23c>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	725a      	strb	r2, [r3, #9]
}
 8001f2e:	e7ff      	b.n	8001f30 <Check_Protocol+0x22c>
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	08006544 	.word	0x08006544
 8001f3c:	20000094 	.word	0x20000094
 8001f40:	20000080 	.word	0x20000080
 8001f44:	2000008c 	.word	0x2000008c
 8001f48:	08006550 	.word	0x08006550
 8001f4c:	0800655c 	.word	0x0800655c
 8001f50:	08006568 	.word	0x08006568
 8001f54:	08006574 	.word	0x08006574
 8001f58:	08006580 	.word	0x08006580
 8001f5c:	0800658c 	.word	0x0800658c
 8001f60:	08006598 	.word	0x08006598
 8001f64:	080065a4 	.word	0x080065a4
 8001f68:	080065b0 	.word	0x080065b0

08001f6c <Servo_Init>:

/* VARIABLES END */


void Servo_Init(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  //note : Check the parameters
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  //note : Set the TIM channel state
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d104      	bne.n	8001f86 <Servo_Init+0x1a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	223e      	movs	r2, #62	; 0x3e
 8001f80:	2102      	movs	r1, #2
 8001f82:	5499      	strb	r1, [r3, r2]
 8001f84:	e013      	b.n	8001fae <Servo_Init+0x42>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d104      	bne.n	8001f96 <Servo_Init+0x2a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	223f      	movs	r2, #63	; 0x3f
 8001f90:	2102      	movs	r1, #2
 8001f92:	5499      	strb	r1, [r3, r2]
 8001f94:	e00b      	b.n	8001fae <Servo_Init+0x42>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d104      	bne.n	8001fa6 <Servo_Init+0x3a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	5499      	strb	r1, [r3, r2]
 8001fa4:	e003      	b.n	8001fae <Servo_Init+0x42>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2241      	movs	r2, #65	; 0x41
 8001faa:	2102      	movs	r1, #2
 8001fac:	5499      	strb	r1, [r3, r2]

  //note : Enable the Capture compare channel
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6839      	ldr	r1, [r7, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f003 fa38 	bl	800542c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a15      	ldr	r2, [pc, #84]	; (8002018 <Servo_Init+0xac>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00e      	beq.n	8001fe4 <Servo_Init+0x78>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a14      	ldr	r2, [pc, #80]	; (800201c <Servo_Init+0xb0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <Servo_Init+0x78>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a12      	ldr	r2, [pc, #72]	; (8002020 <Servo_Init+0xb4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <Servo_Init+0x78>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <Servo_Init+0xb8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <Servo_Init+0x7c>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <Servo_Init+0x7e>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <Servo_Init+0x94>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0209      	lsls	r1, r1, #8
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  __HAL_TIM_ENABLE(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2101      	movs	r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
}
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b002      	add	sp, #8
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40012c00 	.word	0x40012c00
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800

08002028 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim15, 0);
	while (__HAL_TIM_GET_COUNTER (&htim15) < time);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7f1b      	ldrb	r3, [r3, #28]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d000      	beq.n	800203a <HAL_TIM_IC_CaptureCallback+0x12>
 8002038:	e081      	b.n	800213e <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_TIM_IC_CaptureCallback+0x120>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d11b      	bne.n	800207a <HAL_TIM_IC_CaptureCallback+0x52>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2100      	movs	r1, #0
 8002046:	0018      	movs	r0, r3
 8002048:	f002 fd62 	bl	8004b10 <HAL_TIM_ReadCapturedValue>
 800204c:	0002      	movs	r2, r0
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_TIM_IC_CaptureCallback+0x124>)
 8002050:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a1a      	ldr	r2, [r3, #32]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	210a      	movs	r1, #10
 8002064:	438a      	bics	r2, r1
 8002066:	621a      	str	r2, [r3, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a1a      	ldr	r2, [r3, #32]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2102      	movs	r1, #2
 8002074:	430a      	orrs	r2, r1
 8002076:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim15, TIM_IT_CC1);
		}
	}
}
 8002078:	e061      	b.n	800213e <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_TIM_IC_CaptureCallback+0x120>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d15d      	bne.n	800213e <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f002 fd42 	bl	8004b10 <HAL_TIM_ReadCapturedValue>
 800208c:	0002      	movs	r2, r0
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002090:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_TIM_IC_CaptureCallback+0x128>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_TIM_IC_CaptureCallback+0x124>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d907      	bls.n	80020b6 <HAL_TIM_IC_CaptureCallback+0x8e>
				Difference = IC_Val2-IC_Val1;
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_TIM_IC_CaptureCallback+0x128>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_TIM_IC_CaptureCallback+0x124>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	4b28      	ldr	r3, [pc, #160]	; (8002154 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e00e      	b.n	80020d4 <HAL_TIM_IC_CaptureCallback+0xac>
			else if (IC_Val1 > IC_Val2)
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_TIM_IC_CaptureCallback+0x124>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_TIM_IC_CaptureCallback+0x128>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d908      	bls.n	80020d4 <HAL_TIM_IC_CaptureCallback+0xac>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_TIM_IC_CaptureCallback+0x128>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_TIM_IC_CaptureCallback+0x124>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	4a22      	ldr	r2, [pc, #136]	; (8002158 <HAL_TIM_IC_CaptureCallback+0x130>)
 80020ce:	189a      	adds	r2, r3, r2
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80020d2:	601a      	str	r2, [r3, #0]
			Distance = Difference * .034/2;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0018      	movs	r0, r3
 80020da:	f7ff fa25 	bl	8001528 <__aeabi_ui2d>
 80020de:	4a1f      	ldr	r2, [pc, #124]	; (800215c <HAL_TIM_IC_CaptureCallback+0x134>)
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_TIM_IC_CaptureCallback+0x138>)
 80020e2:	f7fe fba7 	bl	8000834 <__aeabi_dmul>
 80020e6:	0002      	movs	r2, r0
 80020e8:	000b      	movs	r3, r1
 80020ea:	0010      	movs	r0, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	2200      	movs	r2, #0
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	05db      	lsls	r3, r3, #23
 80020f4:	f7fe f8b0 	bl	8000258 <__aeabi_ddiv>
 80020f8:	0002      	movs	r2, r0
 80020fa:	000b      	movs	r3, r1
 80020fc:	0010      	movs	r0, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	f7fe f88c 	bl	800021c <__aeabi_d2uiz>
 8002104:	0003      	movs	r3, r0
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800210a:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_TIM_IC_CaptureCallback+0x120>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	210a      	movs	r1, #10
 800211e:	438a      	bics	r2, r1
 8002120:	621a      	str	r2, [r3, #32]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a12      	ldr	r2, [r2, #32]
 800212c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim15, TIM_IT_CC1);
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2102      	movs	r1, #2
 800213a:	438a      	bics	r2, r1
 800213c:	60da      	str	r2, [r3, #12]
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	200000b4 	.word	0x200000b4
 800214c:	200000a8 	.word	0x200000a8
 8002150:	200000ac 	.word	0x200000ac
 8002154:	200000b0 	.word	0x200000b0
 8002158:	0000ffff 	.word	0x0000ffff
 800215c:	b020c49c 	.word	0xb020c49c
 8002160:	3fa16872 	.word	0x3fa16872
 8002164:	20000014 	.word	0x20000014
 8002168:	20000190 	.word	0x20000190

0800216c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_MspInit+0x44>)
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_MspInit+0x44>)
 8002178:	2101      	movs	r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	619a      	str	r2, [r3, #24]
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_MspInit+0x44>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2201      	movs	r2, #1
 8002184:	4013      	ands	r3, r2
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_MspInit+0x44>)
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_MspInit+0x44>)
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	0549      	lsls	r1, r1, #21
 8002194:	430a      	orrs	r2, r1
 8002196:	61da      	str	r2, [r3, #28]
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_MspInit+0x44>)
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	055b      	lsls	r3, r3, #21
 80021a0:	4013      	ands	r3, r2
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b002      	add	sp, #8
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40021000 	.word	0x40021000

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b8:	e7fe      	b.n	80021b8 <NMI_Handler+0x4>

080021ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <HardFault_Handler+0x4>

080021c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d8:	f000 fc44 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <TIM15_IRQHandler+0x14>)
 80021ea:	0018      	movs	r0, r3
 80021ec:	f002 f93c 	bl	8004468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	20000190 	.word	0x20000190

080021fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart1_Handler();
 8002200:	f7ff fd32 	bl	8001c68 <Uart1_Handler>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b096      	sub	sp, #88	; 0x58
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	2348      	movs	r3, #72	; 0x48
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	0018      	movs	r0, r3
 8002220:	2310      	movs	r3, #16
 8002222:	001a      	movs	r2, r3
 8002224:	2100      	movs	r1, #0
 8002226:	f004 f943 	bl	80064b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	0018      	movs	r0, r3
 8002230:	2308      	movs	r3, #8
 8002232:	001a      	movs	r2, r3
 8002234:	2100      	movs	r1, #0
 8002236:	f004 f93b 	bl	80064b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800223a:	2324      	movs	r3, #36	; 0x24
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	0018      	movs	r0, r3
 8002240:	231c      	movs	r3, #28
 8002242:	001a      	movs	r2, r3
 8002244:	2100      	movs	r1, #0
 8002246:	f004 f933 	bl	80064b0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	0018      	movs	r0, r3
 800224e:	2320      	movs	r3, #32
 8002250:	001a      	movs	r2, r3
 8002252:	2100      	movs	r1, #0
 8002254:	f004 f92c 	bl	80064b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 800225a:	4a5a      	ldr	r2, [pc, #360]	; (80023c4 <MX_TIM1_Init+0x1b0>)
 800225c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 800225e:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	32ff      	adds	r2, #255	; 0xff
 8002264:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002266:	4b56      	ldr	r3, [pc, #344]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800226c:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 800226e:	4a56      	ldr	r2, [pc, #344]	; (80023c8 <MX_TIM1_Init+0x1b4>)
 8002270:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002278:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 800227a:	2200      	movs	r2, #0
 800227c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227e:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002284:	4b4e      	ldr	r3, [pc, #312]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 8002286:	0018      	movs	r0, r3
 8002288:	f001 fee0 	bl	800404c <HAL_TIM_Base_Init>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002290:	f7ff fcd5 	bl	8001c3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002294:	2148      	movs	r1, #72	; 0x48
 8002296:	187b      	adds	r3, r7, r1
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	0152      	lsls	r2, r2, #5
 800229c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800229e:	187a      	adds	r2, r7, r1
 80022a0:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 80022a2:	0011      	movs	r1, r2
 80022a4:	0018      	movs	r0, r3
 80022a6:	f002 fb5f 	bl	8004968 <HAL_TIM_ConfigClockSource>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80022ae:	f7ff fcc6 	bl	8001c3e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 80022b4:	0018      	movs	r0, r3
 80022b6:	f001 ff19 	bl	80040ec <HAL_TIM_PWM_Init>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80022be:	f7ff fcbe 	bl	8001c3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c2:	2140      	movs	r1, #64	; 0x40
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022d0:	187a      	adds	r2, r7, r1
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 80022d4:	0011      	movs	r1, r2
 80022d6:	0018      	movs	r0, r3
 80022d8:	f003 f8cc 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80022e0:	f7ff fcad 	bl	8001c3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e4:	2124      	movs	r1, #36	; 0x24
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	2260      	movs	r2, #96	; 0x60
 80022ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500-1;
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	22f4      	movs	r2, #244	; 0xf4
 80022f0:	32ff      	adds	r2, #255	; 0xff
 80022f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002300:	187b      	adds	r3, r7, r1
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002306:	187b      	adds	r3, r7, r1
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800230c:	187b      	adds	r3, r7, r1
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002312:	1879      	adds	r1, r7, r1
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 8002316:	2200      	movs	r2, #0
 8002318:	0018      	movs	r0, r3
 800231a:	f002 fa5f 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002322:	f7ff fc8c 	bl	8001c3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002326:	2324      	movs	r3, #36	; 0x24
 8002328:	18f9      	adds	r1, r7, r3
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 800232c:	2204      	movs	r2, #4
 800232e:	0018      	movs	r0, r3
 8002330:	f002 fa54 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d001      	beq.n	800233c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002338:	f7ff fc81 	bl	8001c3e <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800233c:	2124      	movs	r1, #36	; 0x24
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002344:	1879      	adds	r1, r7, r1
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 8002348:	2208      	movs	r2, #8
 800234a:	0018      	movs	r0, r3
 800234c:	f002 fa46 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 8002350:	1e03      	subs	r3, r0, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002354:	f7ff fc73 	bl	8001c3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002358:	2324      	movs	r3, #36	; 0x24
 800235a:	18f9      	adds	r1, r7, r3
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 800235e:	220c      	movs	r2, #12
 8002360:	0018      	movs	r0, r3
 8002362:	f002 fa3b 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d001      	beq.n	800236e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800236a:	f7ff fc68 	bl	8001c3e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	2200      	movs	r2, #0
 8002378:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0192      	lsls	r2, r2, #6
 8002392:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800239a:	1d3a      	adds	r2, r7, #4
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 800239e:	0011      	movs	r1, r2
 80023a0:	0018      	movs	r0, r3
 80023a2:	f003 f8c5 	bl	8005530 <HAL_TIMEx_ConfigBreakDeadTime>
 80023a6:	1e03      	subs	r3, r0, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 80023aa:	f7ff fc48 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <MX_TIM1_Init+0x1ac>)
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f9f3 	bl	800279c <HAL_TIM_MspPostInit>

}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b016      	add	sp, #88	; 0x58
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	200000b8 	.word	0x200000b8
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	000003e7 	.word	0x000003e7

080023cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	; 0x38
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d2:	2328      	movs	r3, #40	; 0x28
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	0018      	movs	r0, r3
 80023d8:	2310      	movs	r3, #16
 80023da:	001a      	movs	r2, r3
 80023dc:	2100      	movs	r1, #0
 80023de:	f004 f867 	bl	80064b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e2:	2320      	movs	r3, #32
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	0018      	movs	r0, r3
 80023e8:	2308      	movs	r3, #8
 80023ea:	001a      	movs	r2, r3
 80023ec:	2100      	movs	r1, #0
 80023ee:	f004 f85f 	bl	80064b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	0018      	movs	r0, r3
 80023f6:	231c      	movs	r3, #28
 80023f8:	001a      	movs	r2, r3
 80023fa:	2100      	movs	r1, #0
 80023fc:	f004 f858 	bl	80064b0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <MX_TIM2_Init+0xf8>)
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	05d2      	lsls	r2, r2, #23
 8002406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002408:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <MX_TIM2_Init+0xf8>)
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <MX_TIM2_Init+0xf8>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <MX_TIM2_Init+0xf8>)
 8002416:	2201      	movs	r2, #1
 8002418:	4252      	negs	r2, r2
 800241a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <MX_TIM2_Init+0xf8>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <MX_TIM2_Init+0xf8>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002428:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <MX_TIM2_Init+0xf8>)
 800242a:	0018      	movs	r0, r3
 800242c:	f001 fe0e 	bl	800404c <HAL_TIM_Base_Init>
 8002430:	1e03      	subs	r3, r0, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002434:	f7ff fc03 	bl	8001c3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002438:	2128      	movs	r1, #40	; 0x28
 800243a:	187b      	adds	r3, r7, r1
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	0152      	lsls	r2, r2, #5
 8002440:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002442:	187a      	adds	r2, r7, r1
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <MX_TIM2_Init+0xf8>)
 8002446:	0011      	movs	r1, r2
 8002448:	0018      	movs	r0, r3
 800244a:	f002 fa8d 	bl	8004968 <HAL_TIM_ConfigClockSource>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002452:	f7ff fbf4 	bl	8001c3e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <MX_TIM2_Init+0xf8>)
 8002458:	0018      	movs	r0, r3
 800245a:	f001 fe47 	bl	80040ec <HAL_TIM_PWM_Init>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002462:	f7ff fbec 	bl	8001c3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2120      	movs	r1, #32
 8002468:	187b      	adds	r3, r7, r1
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002474:	187a      	adds	r2, r7, r1
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <MX_TIM2_Init+0xf8>)
 8002478:	0011      	movs	r1, r2
 800247a:	0018      	movs	r0, r3
 800247c:	f002 fffa 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 8002480:	1e03      	subs	r3, r0, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002484:	f7ff fbdb 	bl	8001c3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2260      	movs	r2, #96	; 0x60
 800248c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a0:	1d39      	adds	r1, r7, #4
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <MX_TIM2_Init+0xf8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	0018      	movs	r0, r3
 80024a8:	f002 f998 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 80024ac:	1e03      	subs	r3, r0, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80024b0:	f7ff fbc5 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <MX_TIM2_Init+0xf8>)
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 f970 	bl	800279c <HAL_TIM_MspPostInit>

}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b00e      	add	sp, #56	; 0x38
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000100 	.word	0x20000100

080024c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	2308      	movs	r3, #8
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	0018      	movs	r0, r3
 80024d4:	2310      	movs	r3, #16
 80024d6:	001a      	movs	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	f003 ffe9 	bl	80064b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024de:	003b      	movs	r3, r7
 80024e0:	0018      	movs	r0, r3
 80024e2:	2308      	movs	r3, #8
 80024e4:	001a      	movs	r2, r3
 80024e6:	2100      	movs	r1, #0
 80024e8:	f003 ffe2 	bl	80064b0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <MX_TIM3_Init+0xa0>)
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <MX_TIM3_Init+0xa4>)
 80024f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <MX_TIM3_Init+0xa0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <MX_TIM3_Init+0xa0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_TIM3_Init+0xa0>)
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <MX_TIM3_Init+0xa8>)
 8002502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <MX_TIM3_Init+0xa0>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_TIM3_Init+0xa0>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <MX_TIM3_Init+0xa0>)
 8002512:	0018      	movs	r0, r3
 8002514:	f001 fd9a 	bl	800404c <HAL_TIM_Base_Init>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800251c:	f7ff fb8f 	bl	8001c3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002520:	2108      	movs	r1, #8
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	0152      	lsls	r2, r2, #5
 8002528:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800252a:	187a      	adds	r2, r7, r1
 800252c:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_TIM3_Init+0xa0>)
 800252e:	0011      	movs	r1, r2
 8002530:	0018      	movs	r0, r3
 8002532:	f002 fa19 	bl	8004968 <HAL_TIM_ConfigClockSource>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d001      	beq.n	800253e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800253a:	f7ff fb80 	bl	8001c3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253e:	003b      	movs	r3, r7
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002544:	003b      	movs	r3, r7
 8002546:	2200      	movs	r2, #0
 8002548:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800254a:	003a      	movs	r2, r7
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_TIM3_Init+0xa0>)
 800254e:	0011      	movs	r1, r2
 8002550:	0018      	movs	r0, r3
 8002552:	f002 ff8f 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800255a:	f7ff fb70 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b006      	add	sp, #24
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	20000148 	.word	0x20000148
 800256c:	40000400 	.word	0x40000400
 8002570:	0000ffff 	.word	0x0000ffff

08002574 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257a:	2318      	movs	r3, #24
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	0018      	movs	r0, r3
 8002580:	2310      	movs	r3, #16
 8002582:	001a      	movs	r2, r3
 8002584:	2100      	movs	r1, #0
 8002586:	f003 ff93 	bl	80064b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258a:	2310      	movs	r3, #16
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	0018      	movs	r0, r3
 8002590:	2308      	movs	r3, #8
 8002592:	001a      	movs	r2, r3
 8002594:	2100      	movs	r1, #0
 8002596:	f003 ff8b 	bl	80064b0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800259a:	003b      	movs	r3, r7
 800259c:	0018      	movs	r0, r3
 800259e:	2310      	movs	r3, #16
 80025a0:	001a      	movs	r2, r3
 80025a2:	2100      	movs	r1, #0
 80025a4:	f003 ff84 	bl	80064b0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025aa:	4a30      	ldr	r2, [pc, #192]	; (800266c <MX_TIM15_Init+0xf8>)
 80025ac:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16-1;
 80025ae:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025b0:	220f      	movs	r2, #15
 80025b2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025bc:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <MX_TIM15_Init+0xfc>)
 80025be:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80025c6:	4b28      	ldr	r3, [pc, #160]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80025d2:	4b25      	ldr	r3, [pc, #148]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025d4:	0018      	movs	r0, r3
 80025d6:	f001 fd39 	bl	800404c <HAL_TIM_Base_Init>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80025de:	f7ff fb2e 	bl	8001c3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e2:	2118      	movs	r1, #24
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	0152      	lsls	r2, r2, #5
 80025ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80025ec:	187a      	adds	r2, r7, r1
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <MX_TIM15_Init+0xf4>)
 80025f0:	0011      	movs	r1, r2
 80025f2:	0018      	movs	r0, r3
 80025f4:	f002 f9b8 	bl	8004968 <HAL_TIM_ConfigClockSource>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80025fc:	f7ff fb1f 	bl	8001c3e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <MX_TIM15_Init+0xf4>)
 8002602:	0018      	movs	r0, r3
 8002604:	f001 fdca 	bl	800419c <HAL_TIM_IC_Init>
 8002608:	1e03      	subs	r3, r0, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 800260c:	f7ff fb17 	bl	8001c3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002610:	2110      	movs	r1, #16
 8002612:	187b      	adds	r3, r7, r1
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	187b      	adds	r3, r7, r1
 800261a:	2200      	movs	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800261e:	187a      	adds	r2, r7, r1
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_TIM15_Init+0xf4>)
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f002 ff25 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 800262e:	f7ff fb06 	bl	8001c3e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002632:	003b      	movs	r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002638:	003b      	movs	r3, r7
 800263a:	2201      	movs	r2, #1
 800263c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800263e:	003b      	movs	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002644:	003b      	movs	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800264a:	0039      	movs	r1, r7
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_TIM15_Init+0xf4>)
 800264e:	2200      	movs	r2, #0
 8002650:	0018      	movs	r0, r3
 8002652:	f002 f81f 	bl	8004694 <HAL_TIM_IC_ConfigChannel>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d001      	beq.n	800265e <MX_TIM15_Init+0xea>
  {
    Error_Handler();
 800265a:	f7ff faf0 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b00a      	add	sp, #40	; 0x28
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	20000190 	.word	0x20000190
 800266c:	40014000 	.word	0x40014000
 8002670:	0000ffff 	.word	0x0000ffff

08002674 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	231c      	movs	r3, #28
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	0018      	movs	r0, r3
 8002682:	2314      	movs	r3, #20
 8002684:	001a      	movs	r2, r3
 8002686:	2100      	movs	r1, #0
 8002688:	f003 ff12 	bl	80064b0 <memset>
  if(tim_baseHandle->Instance==TIM1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3d      	ldr	r2, [pc, #244]	; (8002788 <HAL_TIM_Base_MspInit+0x114>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	4b3c      	ldr	r3, [pc, #240]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0109      	lsls	r1, r1, #4
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80026b2:	e064      	b.n	800277e <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	05db      	lsls	r3, r3, #23
 80026bc:	429a      	cmp	r2, r3
 80026be:	d10c      	bne.n	80026da <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	430a      	orrs	r2, r1
 80026ca:	61da      	str	r2, [r3, #28]
 80026cc:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]
}
 80026d8:	e051      	b.n	800277e <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM3)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2c      	ldr	r2, [pc, #176]	; (8002790 <HAL_TIM_Base_MspInit+0x11c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10c      	bne.n	80026fe <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	4b28      	ldr	r3, [pc, #160]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 80026ea:	2102      	movs	r1, #2
 80026ec:	430a      	orrs	r2, r1
 80026ee:	61da      	str	r2, [r3, #28]
 80026f0:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2202      	movs	r2, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
}
 80026fc:	e03f      	b.n	800277e <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM15)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a24      	ldr	r2, [pc, #144]	; (8002794 <HAL_TIM_Base_MspInit+0x120>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d13a      	bne.n	800277e <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 800270a:	699a      	ldr	r2, [r3, #24]
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	0249      	lsls	r1, r1, #9
 8002712:	430a      	orrs	r2, r1
 8002714:	619a      	str	r2, [r3, #24]
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	025b      	lsls	r3, r3, #9
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	02c9      	lsls	r1, r1, #11
 800272e:	430a      	orrs	r2, r1
 8002730:	615a      	str	r2, [r3, #20]
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_TIM_Base_MspInit+0x118>)
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	02db      	lsls	r3, r3, #11
 800273a:	4013      	ands	r3, r2
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002740:	211c      	movs	r1, #28
 8002742:	187b      	adds	r3, r7, r1
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	01d2      	lsls	r2, r2, #7
 8002748:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	187b      	adds	r3, r7, r1
 800274c:	2202      	movs	r2, #2
 800274e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2200      	movs	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2201      	movs	r2, #1
 8002760:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	187b      	adds	r3, r7, r1
 8002764:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <HAL_TIM_Base_MspInit+0x124>)
 8002766:	0019      	movs	r1, r3
 8002768:	0010      	movs	r0, r2
 800276a:	f000 fce7 	bl	800313c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2014      	movs	r0, #20
 8002774:	f000 fcb0 	bl	80030d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002778:	2014      	movs	r0, #20
 800277a:	f000 fcc2 	bl	8003102 <HAL_NVIC_EnableIRQ>
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b00c      	add	sp, #48	; 0x30
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40021000 	.word	0x40021000
 8002790:	40000400 	.word	0x40000400
 8002794:	40014000 	.word	0x40014000
 8002798:	48000400 	.word	0x48000400

0800279c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	2414      	movs	r4, #20
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	0018      	movs	r0, r3
 80027aa:	2314      	movs	r3, #20
 80027ac:	001a      	movs	r2, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	f003 fe7e 	bl	80064b0 <memset>
  if(timHandle->Instance==TIM1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2c      	ldr	r2, [pc, #176]	; (800286c <HAL_TIM_MspPostInit+0xd0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d126      	bne.n	800280c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_TIM_MspPostInit+0xd4>)
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_TIM_MspPostInit+0xd4>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0289      	lsls	r1, r1, #10
 80027c8:	430a      	orrs	r2, r1
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_TIM_MspPostInit+0xd4>)
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	22f0      	movs	r2, #240	; 0xf0
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	0021      	movs	r1, r4
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	2202      	movs	r2, #2
 80027e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80027f6:	187b      	adds	r3, r7, r1
 80027f8:	2202      	movs	r2, #2
 80027fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	187a      	adds	r2, r7, r1
 80027fe:	2390      	movs	r3, #144	; 0x90
 8002800:	05db      	lsls	r3, r3, #23
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fc99 	bl	800313c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800280a:	e02a      	b.n	8002862 <HAL_TIM_MspPostInit+0xc6>
  else if(timHandle->Instance==TIM2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	05db      	lsls	r3, r3, #23
 8002814:	429a      	cmp	r2, r3
 8002816:	d124      	bne.n	8002862 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_TIM_MspPostInit+0xd4>)
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_TIM_MspPostInit+0xd4>)
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0289      	lsls	r1, r1, #10
 8002822:	430a      	orrs	r2, r1
 8002824:	615a      	str	r2, [r3, #20]
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_TIM_MspPostInit+0xd4>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	029b      	lsls	r3, r3, #10
 800282e:	4013      	ands	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002834:	2114      	movs	r1, #20
 8002836:	187b      	adds	r3, r7, r1
 8002838:	2220      	movs	r2, #32
 800283a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	187b      	adds	r3, r7, r1
 800283e:	2202      	movs	r2, #2
 8002840:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	187b      	adds	r3, r7, r1
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	187b      	adds	r3, r7, r1
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800284e:	187b      	adds	r3, r7, r1
 8002850:	2202      	movs	r2, #2
 8002852:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	187a      	adds	r2, r7, r1
 8002856:	2390      	movs	r3, #144	; 0x90
 8002858:	05db      	lsls	r3, r3, #23
 800285a:	0011      	movs	r1, r2
 800285c:	0018      	movs	r0, r3
 800285e:	f000 fc6d 	bl	800313c <HAL_GPIO_Init>
}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b00b      	add	sp, #44	; 0x2c
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40021000 	.word	0x40021000

08002874 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <MX_USART1_UART_Init+0x58>)
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <MX_USART1_UART_Init+0x5c>)
 800287c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <MX_USART1_UART_Init+0x58>)
 8002880:	22e1      	movs	r2, #225	; 0xe1
 8002882:	0252      	lsls	r2, r2, #9
 8002884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_USART1_UART_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MX_USART1_UART_Init+0x58>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_USART1_UART_Init+0x58>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_USART1_UART_Init+0x58>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028b8:	0018      	movs	r0, r3
 80028ba:	f002 fea7 	bl	800560c <HAL_UART_Init>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80028c2:	f7ff f9bc 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200001d8 	.word	0x200001d8
 80028d0:	40013800 	.word	0x40013800

080028d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b08b      	sub	sp, #44	; 0x2c
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	2414      	movs	r4, #20
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	0018      	movs	r0, r3
 80028e2:	2314      	movs	r3, #20
 80028e4:	001a      	movs	r2, r3
 80028e6:	2100      	movs	r1, #0
 80028e8:	f003 fde2 	bl	80064b0 <memset>
  if(uartHandle->Instance==USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <HAL_UART_MspInit+0xa0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d139      	bne.n	800296a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_UART_MspInit+0xa4>)
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_UART_MspInit+0xa4>)
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	01c9      	lsls	r1, r1, #7
 8002900:	430a      	orrs	r2, r1
 8002902:	619a      	str	r2, [r3, #24]
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_UART_MspInit+0xa4>)
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	01db      	lsls	r3, r3, #7
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_UART_MspInit+0xa4>)
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_UART_MspInit+0xa4>)
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	02c9      	lsls	r1, r1, #11
 800291c:	430a      	orrs	r2, r1
 800291e:	615a      	str	r2, [r3, #20]
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_UART_MspInit+0xa4>)
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	02db      	lsls	r3, r3, #11
 8002928:	4013      	ands	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800292e:	0021      	movs	r1, r4
 8002930:	187b      	adds	r3, r7, r1
 8002932:	22c0      	movs	r2, #192	; 0xc0
 8002934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2202      	movs	r2, #2
 800293a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	187b      	adds	r3, r7, r1
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002942:	187b      	adds	r3, r7, r1
 8002944:	2203      	movs	r2, #3
 8002946:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	187b      	adds	r3, r7, r1
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <HAL_UART_MspInit+0xa8>)
 8002952:	0019      	movs	r1, r3
 8002954:	0010      	movs	r0, r2
 8002956:	f000 fbf1 	bl	800313c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	201b      	movs	r0, #27
 8002960:	f000 fbba 	bl	80030d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002964:	201b      	movs	r0, #27
 8002966:	f000 fbcc 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b00b      	add	sp, #44	; 0x2c
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40013800 	.word	0x40013800
 8002978:	40021000 	.word	0x40021000
 800297c:	48000400 	.word	0x48000400

08002980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002982:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002984:	f7ff fc41 	bl	800220a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002988:	480c      	ldr	r0, [pc, #48]	; (80029bc <LoopForever+0x6>)
  ldr r1, =_edata
 800298a:	490d      	ldr	r1, [pc, #52]	; (80029c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800298c:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <LoopForever+0xe>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029a0:	4c0a      	ldr	r4, [pc, #40]	; (80029cc <LoopForever+0x16>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029ae:	f003 fd99 	bl	80064e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029b2:	f7ff f883 	bl	8001abc <main>

080029b6 <LoopForever>:

LoopForever:
    b LoopForever
 80029b6:	e7fe      	b.n	80029b6 <LoopForever>
  ldr   r0, =_estack
 80029b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80029bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80029c4:	0800663c 	.word	0x0800663c
  ldr r2, =_sbss
 80029c8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80029cc:	20000264 	.word	0x20000264

080029d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <ADC1_COMP_IRQHandler>
	...

080029d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_Init+0x24>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_Init+0x24>)
 80029de:	2110      	movs	r1, #16
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f000 f809 	bl	80029fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ea:	f7ff fbbf 	bl	800216c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40022000 	.word	0x40022000

080029fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_InitTick+0x5c>)
 8002a06:	681c      	ldr	r4, [r3, #0]
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_InitTick+0x60>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	23fa      	movs	r3, #250	; 0xfa
 8002a10:	0098      	lsls	r0, r3, #2
 8002a12:	f7fd fb77 	bl	8000104 <__udivsi3>
 8002a16:	0003      	movs	r3, r0
 8002a18:	0019      	movs	r1, r3
 8002a1a:	0020      	movs	r0, r4
 8002a1c:	f7fd fb72 	bl	8000104 <__udivsi3>
 8002a20:	0003      	movs	r3, r0
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 fb7d 	bl	8003122 <HAL_SYSTICK_Config>
 8002a28:	1e03      	subs	r3, r0, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e00f      	b.n	8002a50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d80b      	bhi.n	8002a4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	425b      	negs	r3, r3
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 fb4a 	bl	80030d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_InitTick+0x64>)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b003      	add	sp, #12
 8002a56:	bd90      	pop	{r4, r7, pc}
 8002a58:	20000018 	.word	0x20000018
 8002a5c:	20000020 	.word	0x20000020
 8002a60:	2000001c 	.word	0x2000001c

08002a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_IncTick+0x1c>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_IncTick+0x20>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	18d2      	adds	r2, r2, r3
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_IncTick+0x20>)
 8002a76:	601a      	str	r2, [r3, #0]
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	20000020 	.word	0x20000020
 8002a84:	20000260 	.word	0x20000260

08002a88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <HAL_GetTick+0x10>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	20000260 	.word	0x20000260

08002a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff fff0 	bl	8002a88 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_Delay+0x44>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	001a      	movs	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	f7ff ffe0 	bl	8002a88 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d8f7      	bhi.n	8002ac4 <HAL_Delay+0x28>
  {
  }
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b004      	add	sp, #16
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000020 	.word	0x20000020

08002ae4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aec:	230f      	movs	r3, #15
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e125      	b.n	8002d4e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2234      	movs	r2, #52	; 0x34
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7fe ff14 	bl	8001948 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	2210      	movs	r2, #16
 8002b26:	4013      	ands	r3, r2
 8002b28:	d000      	beq.n	8002b2c <HAL_ADC_Init+0x48>
 8002b2a:	e103      	b.n	8002d34 <HAL_ADC_Init+0x250>
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d000      	beq.n	8002b38 <HAL_ADC_Init+0x54>
 8002b36:	e0fd      	b.n	8002d34 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002b42:	d000      	beq.n	8002b46 <HAL_ADC_Init+0x62>
 8002b44:	e0f6      	b.n	8002d34 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	4a83      	ldr	r2, [pc, #524]	; (8002d58 <HAL_ADC_Init+0x274>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2202      	movs	r2, #2
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d112      	bne.n	8002b8a <HAL_ADC_Init+0xa6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d009      	beq.n	8002b86 <HAL_ADC_Init+0xa2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Init+0xa6>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_ADC_Init+0xa8>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d116      	bne.n	8002bbe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2218      	movs	r2, #24
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	0899      	lsrs	r1, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4964      	ldr	r1, [pc, #400]	; (8002d5c <HAL_ADC_Init+0x278>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7e1b      	ldrb	r3, [r3, #24]
 8002bd2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7e5b      	ldrb	r3, [r3, #25]
 8002bd8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bda:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7e9b      	ldrb	r3, [r3, #26]
 8002be0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002be2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d002      	beq.n	8002bf2 <HAL_ADC_Init+0x10e>
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	015b      	lsls	r3, r3, #5
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_Init+0x110>
 8002bf2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bf4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002bfa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_Init+0x124>
 8002c04:	2304      	movs	r3, #4
 8002c06:	e000      	b.n	8002c0a <HAL_ADC_Init+0x126>
 8002c08:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2124      	movs	r1, #36	; 0x24
 8002c10:	5c5b      	ldrb	r3, [r3, r1]
 8002c12:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c14:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7edb      	ldrb	r3, [r3, #27]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d115      	bne.n	8002c50 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e9b      	ldrb	r3, [r3, #26]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	0252      	lsls	r2, r2, #9
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	e00b      	b.n	8002c50 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	2201      	movs	r2, #1
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	23c2      	movs	r3, #194	; 0xc2
 8002c56:	33ff      	adds	r3, #255	; 0xff
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d007      	beq.n	8002c6c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c64:	4313      	orrs	r3, r2
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68d9      	ldr	r1, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	055b      	lsls	r3, r3, #21
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d01b      	beq.n	8002cc0 <HAL_ADC_Init+0x1dc>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d017      	beq.n	8002cc0 <HAL_ADC_Init+0x1dc>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d013      	beq.n	8002cc0 <HAL_ADC_Init+0x1dc>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d00f      	beq.n	8002cc0 <HAL_ADC_Init+0x1dc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_ADC_Init+0x1dc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d007      	beq.n	8002cc0 <HAL_ADC_Init+0x1dc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	2b06      	cmp	r3, #6
 8002cb6:	d003      	beq.n	8002cc0 <HAL_ADC_Init+0x1dc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	2b07      	cmp	r3, #7
 8002cbe:	d112      	bne.n	8002ce6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2107      	movs	r1, #7
 8002ccc:	438a      	bics	r2, r1
 8002cce:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6959      	ldr	r1, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	2207      	movs	r2, #7
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <HAL_ADC_Init+0x27c>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d10b      	bne.n	8002d0e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	2203      	movs	r2, #3
 8002d02:	4393      	bics	r3, r2
 8002d04:	2201      	movs	r2, #1
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d0c:	e01c      	b.n	8002d48 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	2212      	movs	r2, #18
 8002d14:	4393      	bics	r3, r2
 8002d16:	2210      	movs	r2, #16
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	2201      	movs	r2, #1
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d2a:	230f      	movs	r3, #15
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d32:	e009      	b.n	8002d48 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	2210      	movs	r2, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002d40:	230f      	movs	r3, #15
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d48:	230f      	movs	r3, #15
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	fffffefd 	.word	0xfffffefd
 8002d5c:	fffe0219 	.word	0xfffe0219
 8002d60:	833fffe7 	.word	0x833fffe7

08002d64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6e:	230f      	movs	r3, #15
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	055b      	lsls	r3, r3, #21
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d011      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x46>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d00d      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x46>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d009      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x46>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d005      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x46>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d001      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x46>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2234      	movs	r2, #52	; 0x34
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x54>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0d0      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1f6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2234      	movs	r2, #52	; 0x34
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d000      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x6a>
 8002dcc:	e0b4      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a64      	ldr	r2, [pc, #400]	; (8002f64 <HAL_ADC_ConfigChannel+0x200>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d100      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x76>
 8002dd8:	e082      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	055b      	lsls	r3, r3, #21
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d037      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d033      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d02f      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d02b      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d027      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d023      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d01f      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	2b07      	cmp	r3, #7
 8002e32:	d01b      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2107      	movs	r1, #7
 8002e40:	400b      	ands	r3, r1
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d012      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2107      	movs	r1, #7
 8002e52:	438a      	bics	r2, r1
 8002e54:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6959      	ldr	r1, [r3, #20]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2207      	movs	r2, #7
 8002e62:	401a      	ands	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d007      	beq.n	8002e84 <HAL_ADC_ConfigChannel+0x120>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b11      	cmp	r3, #17
 8002e7a:	d003      	beq.n	8002e84 <HAL_ADC_ConfigChannel+0x120>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b12      	cmp	r3, #18
 8002e82:	d163      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e84:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <HAL_ADC_ConfigChannel+0x204>)
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d009      	beq.n	8002ea4 <HAL_ADC_ConfigChannel+0x140>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b11      	cmp	r3, #17
 8002e96:	d102      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x13a>
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	03db      	lsls	r3, r3, #15
 8002e9c:	e004      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x144>
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	045b      	lsls	r3, r3, #17
 8002ea2:	e001      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x144>
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	041b      	lsls	r3, r3, #16
 8002ea8:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <HAL_ADC_ConfigChannel+0x204>)
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d14a      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_ADC_ConfigChannel+0x208>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	492d      	ldr	r1, [pc, #180]	; (8002f70 <HAL_ADC_ConfigChannel+0x20c>)
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fd f921 	bl	8000104 <__udivsi3>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ed0:	e002      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f9      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x16e>
 8002ede:	e035      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2101      	movs	r1, #1
 8002eec:	4099      	lsls	r1, r3
 8002eee:	000b      	movs	r3, r1
 8002ef0:	43d9      	mvns	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d007      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x1ae>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b11      	cmp	r3, #17
 8002f08:	d003      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x1ae>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b12      	cmp	r3, #18
 8002f10:	d11c      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_ADC_ConfigChannel+0x204>)
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d007      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x1ca>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b11      	cmp	r3, #17
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x1c6>
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_ADC_ConfigChannel+0x210>)
 8002f28:	e002      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x1cc>
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_ADC_ConfigChannel+0x214>)
 8002f2c:	e000      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x1cc>
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <HAL_ADC_ConfigChannel+0x218>)
 8002f30:	4a0d      	ldr	r2, [pc, #52]	; (8002f68 <HAL_ADC_ConfigChannel+0x204>)
 8002f32:	400b      	ands	r3, r1
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e009      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002f44:	230f      	movs	r3, #15
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2234      	movs	r2, #52	; 0x34
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	230f      	movs	r3, #15
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	00001001 	.word	0x00001001
 8002f68:	40012708 	.word	0x40012708
 8002f6c:	20000018 	.word	0x20000018
 8002f70:	000f4240 	.word	0x000f4240
 8002f74:	ffbfffff 	.word	0xffbfffff
 8002f78:	feffffff 	.word	0xfeffffff
 8002f7c:	ff7fffff 	.word	0xff7fffff

08002f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	0002      	movs	r2, r0
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	1dfb      	adds	r3, r7, #7
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b7f      	cmp	r3, #127	; 0x7f
 8002f92:	d809      	bhi.n	8002fa8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f94:	1dfb      	adds	r3, r7, #7
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	001a      	movs	r2, r3
 8002f9a:	231f      	movs	r3, #31
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <__NVIC_EnableIRQ+0x30>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4091      	lsls	r1, r2
 8002fa4:	000a      	movs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
  }
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	0002      	movs	r2, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc8:	d828      	bhi.n	800301c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fca:	4a2f      	ldr	r2, [pc, #188]	; (8003088 <__NVIC_SetPriority+0xd4>)
 8002fcc:	1dfb      	adds	r3, r7, #7
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	33c0      	adds	r3, #192	; 0xc0
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	589b      	ldr	r3, [r3, r2]
 8002fda:	1dfa      	adds	r2, r7, #7
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	0011      	movs	r1, r2
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	00d2      	lsls	r2, r2, #3
 8002fe6:	21ff      	movs	r1, #255	; 0xff
 8002fe8:	4091      	lsls	r1, r2
 8002fea:	000a      	movs	r2, r1
 8002fec:	43d2      	mvns	r2, r2
 8002fee:	401a      	ands	r2, r3
 8002ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	019b      	lsls	r3, r3, #6
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	0018      	movs	r0, r3
 8003000:	2303      	movs	r3, #3
 8003002:	4003      	ands	r3, r0
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003008:	481f      	ldr	r0, [pc, #124]	; (8003088 <__NVIC_SetPriority+0xd4>)
 800300a:	1dfb      	adds	r3, r7, #7
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b25b      	sxtb	r3, r3
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	430a      	orrs	r2, r1
 8003014:	33c0      	adds	r3, #192	; 0xc0
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800301a:	e031      	b.n	8003080 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <__NVIC_SetPriority+0xd8>)
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	0019      	movs	r1, r3
 8003024:	230f      	movs	r3, #15
 8003026:	400b      	ands	r3, r1
 8003028:	3b08      	subs	r3, #8
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3306      	adds	r3, #6
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	1dfa      	adds	r2, r7, #7
 8003038:	7812      	ldrb	r2, [r2, #0]
 800303a:	0011      	movs	r1, r2
 800303c:	2203      	movs	r2, #3
 800303e:	400a      	ands	r2, r1
 8003040:	00d2      	lsls	r2, r2, #3
 8003042:	21ff      	movs	r1, #255	; 0xff
 8003044:	4091      	lsls	r1, r2
 8003046:	000a      	movs	r2, r1
 8003048:	43d2      	mvns	r2, r2
 800304a:	401a      	ands	r2, r3
 800304c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	22ff      	movs	r2, #255	; 0xff
 8003054:	401a      	ands	r2, r3
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	0018      	movs	r0, r3
 800305c:	2303      	movs	r3, #3
 800305e:	4003      	ands	r3, r0
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003064:	4809      	ldr	r0, [pc, #36]	; (800308c <__NVIC_SetPriority+0xd8>)
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	001c      	movs	r4, r3
 800306c:	230f      	movs	r3, #15
 800306e:	4023      	ands	r3, r4
 8003070:	3b08      	subs	r3, #8
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	430a      	orrs	r2, r1
 8003076:	3306      	adds	r3, #6
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	18c3      	adds	r3, r0, r3
 800307c:	3304      	adds	r3, #4
 800307e:	601a      	str	r2, [r3, #0]
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b003      	add	sp, #12
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1e5a      	subs	r2, r3, #1
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	045b      	lsls	r3, r3, #17
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d301      	bcc.n	80030a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a4:	2301      	movs	r3, #1
 80030a6:	e010      	b.n	80030ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <SysTick_Config+0x44>)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	3a01      	subs	r2, #1
 80030ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030b0:	2301      	movs	r3, #1
 80030b2:	425b      	negs	r3, r3
 80030b4:	2103      	movs	r1, #3
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff ff7c 	bl	8002fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <SysTick_Config+0x44>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c2:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <SysTick_Config+0x44>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	e000e010 	.word	0xe000e010

080030d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	210f      	movs	r1, #15
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	1c02      	adds	r2, r0, #0
 80030e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7ff ff5d 	bl	8002fb4 <__NVIC_SetPriority>
}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b004      	add	sp, #16
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	0002      	movs	r2, r0
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b25b      	sxtb	r3, r3
 8003114:	0018      	movs	r0, r3
 8003116:	f7ff ff33 	bl	8002f80 <__NVIC_EnableIRQ>
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff ffaf 	bl	8003090 <SysTick_Config>
 8003132:	0003      	movs	r3, r0
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	e155      	b.n	80033f8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4091      	lsls	r1, r2
 8003156:	000a      	movs	r2, r1
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d100      	bne.n	8003164 <HAL_GPIO_Init+0x28>
 8003162:	e146      	b.n	80033f2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	4013      	ands	r3, r2
 800316c:	2b01      	cmp	r3, #1
 800316e:	d005      	beq.n	800317c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2203      	movs	r2, #3
 8003176:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003178:	2b02      	cmp	r3, #2
 800317a:	d130      	bne.n	80031de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	409a      	lsls	r2, r3
 800318a:	0013      	movs	r3, r2
 800318c:	43da      	mvns	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	409a      	lsls	r2, r3
 800319e:	0013      	movs	r3, r2
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031b2:	2201      	movs	r2, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
 80031b8:	0013      	movs	r3, r2
 80031ba:	43da      	mvns	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	2201      	movs	r2, #1
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
 80031d0:	0013      	movs	r3, r2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2203      	movs	r2, #3
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d017      	beq.n	800321a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	409a      	lsls	r2, r3
 80031f8:	0013      	movs	r3, r2
 80031fa:	43da      	mvns	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	0013      	movs	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2203      	movs	r2, #3
 8003220:	4013      	ands	r3, r2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d123      	bne.n	800326e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3208      	adds	r2, #8
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	58d3      	ldr	r3, [r2, r3]
 8003232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2207      	movs	r2, #7
 8003238:	4013      	ands	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	409a      	lsls	r2, r3
 8003240:	0013      	movs	r3, r2
 8003242:	43da      	mvns	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2107      	movs	r1, #7
 8003252:	400b      	ands	r3, r1
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	409a      	lsls	r2, r3
 8003258:	0013      	movs	r3, r2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	0092      	lsls	r2, r2, #2
 800326a:	6939      	ldr	r1, [r7, #16]
 800326c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	409a      	lsls	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	43da      	mvns	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2203      	movs	r2, #3
 800328c:	401a      	ands	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	409a      	lsls	r2, r3
 8003294:	0013      	movs	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	23c0      	movs	r3, #192	; 0xc0
 80032a8:	029b      	lsls	r3, r3, #10
 80032aa:	4013      	ands	r3, r2
 80032ac:	d100      	bne.n	80032b0 <HAL_GPIO_Init+0x174>
 80032ae:	e0a0      	b.n	80033f2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b0:	4b57      	ldr	r3, [pc, #348]	; (8003410 <HAL_GPIO_Init+0x2d4>)
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	4b56      	ldr	r3, [pc, #344]	; (8003410 <HAL_GPIO_Init+0x2d4>)
 80032b6:	2101      	movs	r1, #1
 80032b8:	430a      	orrs	r2, r1
 80032ba:	619a      	str	r2, [r3, #24]
 80032bc:	4b54      	ldr	r3, [pc, #336]	; (8003410 <HAL_GPIO_Init+0x2d4>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_GPIO_Init+0x2d8>)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	589b      	ldr	r3, [r3, r2]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2203      	movs	r2, #3
 80032da:	4013      	ands	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	220f      	movs	r2, #15
 80032e0:	409a      	lsls	r2, r3
 80032e2:	0013      	movs	r3, r2
 80032e4:	43da      	mvns	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	2390      	movs	r3, #144	; 0x90
 80032f0:	05db      	lsls	r3, r3, #23
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d019      	beq.n	800332a <HAL_GPIO_Init+0x1ee>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a47      	ldr	r2, [pc, #284]	; (8003418 <HAL_GPIO_Init+0x2dc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_GPIO_Init+0x1ea>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a46      	ldr	r2, [pc, #280]	; (800341c <HAL_GPIO_Init+0x2e0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00d      	beq.n	8003322 <HAL_GPIO_Init+0x1e6>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a45      	ldr	r2, [pc, #276]	; (8003420 <HAL_GPIO_Init+0x2e4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <HAL_GPIO_Init+0x1e2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a44      	ldr	r2, [pc, #272]	; (8003424 <HAL_GPIO_Init+0x2e8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_GPIO_Init+0x1de>
 8003316:	2304      	movs	r3, #4
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x1f0>
 800331a:	2305      	movs	r3, #5
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x1f0>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x1f0>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x1f0>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x1f0>
 800332a:	2300      	movs	r3, #0
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	2103      	movs	r1, #3
 8003330:	400a      	ands	r2, r1
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800333c:	4935      	ldr	r1, [pc, #212]	; (8003414 <HAL_GPIO_Init+0x2d8>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334a:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43da      	mvns	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	035b      	lsls	r3, r3, #13
 8003362:	4013      	ands	r3, r2
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800336e:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003374:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43da      	mvns	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	039b      	lsls	r3, r3, #14
 800338c:	4013      	ands	r3, r2
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	43da      	mvns	r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	029b      	lsls	r3, r3, #10
 80033b6:	4013      	ands	r3, r2
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033c2:	4b19      	ldr	r3, [pc, #100]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80033c8:	4b17      	ldr	r3, [pc, #92]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43da      	mvns	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	4013      	ands	r3, r2
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3301      	adds	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	40da      	lsrs	r2, r3
 8003400:	1e13      	subs	r3, r2, #0
 8003402:	d000      	beq.n	8003406 <HAL_GPIO_Init+0x2ca>
 8003404:	e6a2      	b.n	800314c <HAL_GPIO_Init+0x10>
  } 
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b006      	add	sp, #24
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	40010000 	.word	0x40010000
 8003418:	48000400 	.word	0x48000400
 800341c:	48000800 	.word	0x48000800
 8003420:	48000c00 	.word	0x48000c00
 8003424:	48001000 	.word	0x48001000
 8003428:	40010400 	.word	0x40010400

0800342c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	0008      	movs	r0, r1
 8003436:	0011      	movs	r1, r2
 8003438:	1cbb      	adds	r3, r7, #2
 800343a:	1c02      	adds	r2, r0, #0
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	1c7b      	adds	r3, r7, #1
 8003440:	1c0a      	adds	r2, r1, #0
 8003442:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003444:	1c7b      	adds	r3, r7, #1
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800344c:	1cbb      	adds	r3, r7, #2
 800344e:	881a      	ldrh	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003456:	1cbb      	adds	r3, r7, #2
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b002      	add	sp, #8
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f000 fb76 	bl	8003b68 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2201      	movs	r2, #1
 8003482:	4013      	ands	r3, r2
 8003484:	d100      	bne.n	8003488 <HAL_RCC_OscConfig+0x20>
 8003486:	e08e      	b.n	80035a6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003488:	4bc5      	ldr	r3, [pc, #788]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	220c      	movs	r2, #12
 800348e:	4013      	ands	r3, r2
 8003490:	2b04      	cmp	r3, #4
 8003492:	d00e      	beq.n	80034b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003494:	4bc2      	ldr	r3, [pc, #776]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	220c      	movs	r2, #12
 800349a:	4013      	ands	r3, r2
 800349c:	2b08      	cmp	r3, #8
 800349e:	d117      	bne.n	80034d0 <HAL_RCC_OscConfig+0x68>
 80034a0:	4bbf      	ldr	r3, [pc, #764]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	23c0      	movs	r3, #192	; 0xc0
 80034a6:	025b      	lsls	r3, r3, #9
 80034a8:	401a      	ands	r2, r3
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	025b      	lsls	r3, r3, #9
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d10e      	bne.n	80034d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b2:	4bbb      	ldr	r3, [pc, #748]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	029b      	lsls	r3, r3, #10
 80034ba:	4013      	ands	r3, r2
 80034bc:	d100      	bne.n	80034c0 <HAL_RCC_OscConfig+0x58>
 80034be:	e071      	b.n	80035a4 <HAL_RCC_OscConfig+0x13c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d000      	beq.n	80034ca <HAL_RCC_OscConfig+0x62>
 80034c8:	e06c      	b.n	80035a4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f000 fb4c 	bl	8003b68 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x80>
 80034d8:	4bb1      	ldr	r3, [pc, #708]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4bb0      	ldr	r3, [pc, #704]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80034de:	2180      	movs	r1, #128	; 0x80
 80034e0:	0249      	lsls	r1, r1, #9
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e02f      	b.n	8003548 <HAL_RCC_OscConfig+0xe0>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10c      	bne.n	800350a <HAL_RCC_OscConfig+0xa2>
 80034f0:	4bab      	ldr	r3, [pc, #684]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4baa      	ldr	r3, [pc, #680]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80034f6:	49ab      	ldr	r1, [pc, #684]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	4ba8      	ldr	r3, [pc, #672]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4ba7      	ldr	r3, [pc, #668]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003502:	49a9      	ldr	r1, [pc, #676]	; (80037a8 <HAL_RCC_OscConfig+0x340>)
 8003504:	400a      	ands	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e01e      	b.n	8003548 <HAL_RCC_OscConfig+0xe0>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b05      	cmp	r3, #5
 8003510:	d10e      	bne.n	8003530 <HAL_RCC_OscConfig+0xc8>
 8003512:	4ba3      	ldr	r3, [pc, #652]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4ba2      	ldr	r3, [pc, #648]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	02c9      	lsls	r1, r1, #11
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4b9f      	ldr	r3, [pc, #636]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b9e      	ldr	r3, [pc, #632]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	0249      	lsls	r1, r1, #9
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xe0>
 8003530:	4b9b      	ldr	r3, [pc, #620]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b9a      	ldr	r3, [pc, #616]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003536:	499b      	ldr	r1, [pc, #620]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003538:	400a      	ands	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	4b98      	ldr	r3, [pc, #608]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b97      	ldr	r3, [pc, #604]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003542:	4999      	ldr	r1, [pc, #612]	; (80037a8 <HAL_RCC_OscConfig+0x340>)
 8003544:	400a      	ands	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d014      	beq.n	800357a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7ff fa9a 	bl	8002a88 <HAL_GetTick>
 8003554:	0003      	movs	r3, r0
 8003556:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355a:	f7ff fa95 	bl	8002a88 <HAL_GetTick>
 800355e:	0002      	movs	r2, r0
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	; 0x64
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e2fd      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356c:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	029b      	lsls	r3, r3, #10
 8003574:	4013      	ands	r3, r2
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0xf2>
 8003578:	e015      	b.n	80035a6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7ff fa85 	bl	8002a88 <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7ff fa80 	bl	8002a88 <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e2e8      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	4b82      	ldr	r3, [pc, #520]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	4013      	ands	r3, r2
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x11c>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2202      	movs	r2, #2
 80035ac:	4013      	ands	r3, r2
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x14a>
 80035b0:	e06c      	b.n	800368c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	220c      	movs	r2, #12
 80035b8:	4013      	ands	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035bc:	4b78      	ldr	r3, [pc, #480]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	220c      	movs	r2, #12
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d11f      	bne.n	8003608 <HAL_RCC_OscConfig+0x1a0>
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	23c0      	movs	r3, #192	; 0xc0
 80035ce:	025b      	lsls	r3, r3, #9
 80035d0:	401a      	ands	r2, r3
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d116      	bne.n	8003608 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	4b71      	ldr	r3, [pc, #452]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2202      	movs	r2, #2
 80035e0:	4013      	ands	r3, r2
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_OscConfig+0x188>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e2bb      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b6b      	ldr	r3, [pc, #428]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	22f8      	movs	r2, #248	; 0xf8
 80035f6:	4393      	bics	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00da      	lsls	r2, r3, #3
 8003600:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	e041      	b.n	800368c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d024      	beq.n	800365a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003610:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b62      	ldr	r3, [pc, #392]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003616:	2101      	movs	r1, #1
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7ff fa34 	bl	8002a88 <HAL_GetTick>
 8003620:	0003      	movs	r3, r0
 8003622:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003626:	f7ff fa2f 	bl	8002a88 <HAL_GetTick>
 800362a:	0002      	movs	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e297      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2202      	movs	r2, #2
 800363e:	4013      	ands	r3, r2
 8003640:	d0f1      	beq.n	8003626 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	22f8      	movs	r2, #248	; 0xf8
 8003648:	4393      	bics	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	00da      	lsls	r2, r3, #3
 8003652:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e018      	b.n	800368c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365a:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003660:	2101      	movs	r1, #1
 8003662:	438a      	bics	r2, r1
 8003664:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7ff fa0f 	bl	8002a88 <HAL_GetTick>
 800366a:	0003      	movs	r3, r0
 800366c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003670:	f7ff fa0a 	bl	8002a88 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e272      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2202      	movs	r2, #2
 8003688:	4013      	ands	r3, r2
 800368a:	d1f1      	bne.n	8003670 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2208      	movs	r2, #8
 8003692:	4013      	ands	r3, r2
 8003694:	d036      	beq.n	8003704 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d019      	beq.n	80036d2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369e:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80036a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80036a4:	2101      	movs	r1, #1
 80036a6:	430a      	orrs	r2, r1
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7ff f9ed 	bl	8002a88 <HAL_GetTick>
 80036ae:	0003      	movs	r3, r0
 80036b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b4:	f7ff f9e8 	bl	8002a88 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e250      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	2202      	movs	r2, #2
 80036cc:	4013      	ands	r3, r2
 80036ce:	d0f1      	beq.n	80036b4 <HAL_RCC_OscConfig+0x24c>
 80036d0:	e018      	b.n	8003704 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d2:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80036d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d6:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80036d8:	2101      	movs	r1, #1
 80036da:	438a      	bics	r2, r1
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036de:	f7ff f9d3 	bl	8002a88 <HAL_GetTick>
 80036e2:	0003      	movs	r3, r0
 80036e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e8:	f7ff f9ce 	bl	8002a88 <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e236      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2202      	movs	r2, #2
 8003700:	4013      	ands	r3, r2
 8003702:	d1f1      	bne.n	80036e8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2204      	movs	r2, #4
 800370a:	4013      	ands	r3, r2
 800370c:	d100      	bne.n	8003710 <HAL_RCC_OscConfig+0x2a8>
 800370e:	e0b5      	b.n	800387c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003710:	201f      	movs	r0, #31
 8003712:	183b      	adds	r3, r7, r0
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	055b      	lsls	r3, r3, #21
 8003720:	4013      	ands	r3, r2
 8003722:	d110      	bne.n	8003746 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	0549      	lsls	r1, r1, #21
 800372e:	430a      	orrs	r2, r1
 8003730:	61da      	str	r2, [r3, #28]
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	055b      	lsls	r3, r3, #21
 800373a:	4013      	ands	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003740:	183b      	adds	r3, r7, r0
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCC_OscConfig+0x344>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4013      	ands	r3, r2
 8003750:	d11a      	bne.n	8003788 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <HAL_RCC_OscConfig+0x344>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <HAL_RCC_OscConfig+0x344>)
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	0049      	lsls	r1, r1, #1
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003760:	f7ff f992 	bl	8002a88 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7ff f98d 	bl	8002a88 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	; 0x64
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e1f5      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_OscConfig+0x344>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10f      	bne.n	80037b0 <HAL_RCC_OscConfig+0x348>
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	4b02      	ldr	r3, [pc, #8]	; (80037a0 <HAL_RCC_OscConfig+0x338>)
 8003796:	2101      	movs	r1, #1
 8003798:	430a      	orrs	r2, r1
 800379a:	621a      	str	r2, [r3, #32]
 800379c:	e036      	b.n	800380c <HAL_RCC_OscConfig+0x3a4>
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	40021000 	.word	0x40021000
 80037a4:	fffeffff 	.word	0xfffeffff
 80037a8:	fffbffff 	.word	0xfffbffff
 80037ac:	40007000 	.word	0x40007000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10c      	bne.n	80037d2 <HAL_RCC_OscConfig+0x36a>
 80037b8:	4bca      	ldr	r3, [pc, #808]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	4bc9      	ldr	r3, [pc, #804]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037be:	2101      	movs	r1, #1
 80037c0:	438a      	bics	r2, r1
 80037c2:	621a      	str	r2, [r3, #32]
 80037c4:	4bc7      	ldr	r3, [pc, #796]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	4bc6      	ldr	r3, [pc, #792]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037ca:	2104      	movs	r1, #4
 80037cc:	438a      	bics	r2, r1
 80037ce:	621a      	str	r2, [r3, #32]
 80037d0:	e01c      	b.n	800380c <HAL_RCC_OscConfig+0x3a4>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x38c>
 80037da:	4bc2      	ldr	r3, [pc, #776]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	4bc1      	ldr	r3, [pc, #772]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037e0:	2104      	movs	r1, #4
 80037e2:	430a      	orrs	r2, r1
 80037e4:	621a      	str	r2, [r3, #32]
 80037e6:	4bbf      	ldr	r3, [pc, #764]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	4bbe      	ldr	r3, [pc, #760]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037ec:	2101      	movs	r1, #1
 80037ee:	430a      	orrs	r2, r1
 80037f0:	621a      	str	r2, [r3, #32]
 80037f2:	e00b      	b.n	800380c <HAL_RCC_OscConfig+0x3a4>
 80037f4:	4bbb      	ldr	r3, [pc, #748]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	4bba      	ldr	r3, [pc, #744]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80037fa:	2101      	movs	r1, #1
 80037fc:	438a      	bics	r2, r1
 80037fe:	621a      	str	r2, [r3, #32]
 8003800:	4bb8      	ldr	r3, [pc, #736]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003802:	6a1a      	ldr	r2, [r3, #32]
 8003804:	4bb7      	ldr	r3, [pc, #732]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003806:	2104      	movs	r1, #4
 8003808:	438a      	bics	r2, r1
 800380a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d014      	beq.n	800383e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003814:	f7ff f938 	bl	8002a88 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	e009      	b.n	8003832 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7ff f933 	bl	8002a88 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	4aaf      	ldr	r2, [pc, #700]	; (8003ae8 <HAL_RCC_OscConfig+0x680>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e19a      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003832:	4bac      	ldr	r3, [pc, #688]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	2202      	movs	r2, #2
 8003838:	4013      	ands	r3, r2
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x3b6>
 800383c:	e013      	b.n	8003866 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383e:	f7ff f923 	bl	8002a88 <HAL_GetTick>
 8003842:	0003      	movs	r3, r0
 8003844:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003846:	e009      	b.n	800385c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7ff f91e 	bl	8002a88 <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	4aa5      	ldr	r2, [pc, #660]	; (8003ae8 <HAL_RCC_OscConfig+0x680>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e185      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385c:	4ba1      	ldr	r3, [pc, #644]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	2202      	movs	r2, #2
 8003862:	4013      	ands	r3, r2
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003866:	231f      	movs	r3, #31
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b9c      	ldr	r3, [pc, #624]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	4b9b      	ldr	r3, [pc, #620]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003876:	499d      	ldr	r1, [pc, #628]	; (8003aec <HAL_RCC_OscConfig+0x684>)
 8003878:	400a      	ands	r2, r1
 800387a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2210      	movs	r2, #16
 8003882:	4013      	ands	r3, r2
 8003884:	d063      	beq.n	800394e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d12a      	bne.n	80038e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800388e:	4b95      	ldr	r3, [pc, #596]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003892:	4b94      	ldr	r3, [pc, #592]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003894:	2104      	movs	r1, #4
 8003896:	430a      	orrs	r2, r1
 8003898:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800389a:	4b92      	ldr	r3, [pc, #584]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 800389c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389e:	4b91      	ldr	r3, [pc, #580]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80038a0:	2101      	movs	r1, #1
 80038a2:	430a      	orrs	r2, r1
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a6:	f7ff f8ef 	bl	8002a88 <HAL_GetTick>
 80038aa:	0003      	movs	r3, r0
 80038ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038b0:	f7ff f8ea 	bl	8002a88 <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e152      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038c2:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d0f1      	beq.n	80038b0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038cc:	4b85      	ldr	r3, [pc, #532]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	22f8      	movs	r2, #248	; 0xf8
 80038d2:	4393      	bics	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	00da      	lsls	r2, r3, #3
 80038dc:	4b81      	ldr	r3, [pc, #516]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80038de:	430a      	orrs	r2, r1
 80038e0:	635a      	str	r2, [r3, #52]	; 0x34
 80038e2:	e034      	b.n	800394e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	3305      	adds	r3, #5
 80038ea:	d111      	bne.n	8003910 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80038ec:	4b7d      	ldr	r3, [pc, #500]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80038ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f0:	4b7c      	ldr	r3, [pc, #496]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80038f2:	2104      	movs	r1, #4
 80038f4:	438a      	bics	r2, r1
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038f8:	4b7a      	ldr	r3, [pc, #488]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	22f8      	movs	r2, #248	; 0xf8
 80038fe:	4393      	bics	r3, r2
 8003900:	0019      	movs	r1, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	00da      	lsls	r2, r3, #3
 8003908:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 800390a:	430a      	orrs	r2, r1
 800390c:	635a      	str	r2, [r3, #52]	; 0x34
 800390e:	e01e      	b.n	800394e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003910:	4b74      	ldr	r3, [pc, #464]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003914:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003916:	2104      	movs	r1, #4
 8003918:	430a      	orrs	r2, r1
 800391a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800391c:	4b71      	ldr	r3, [pc, #452]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	4b70      	ldr	r3, [pc, #448]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003922:	2101      	movs	r1, #1
 8003924:	438a      	bics	r2, r1
 8003926:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003928:	f7ff f8ae 	bl	8002a88 <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003932:	f7ff f8a9 	bl	8002a88 <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e111      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003944:	4b67      	ldr	r3, [pc, #412]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	2202      	movs	r2, #2
 800394a:	4013      	ands	r3, r2
 800394c:	d1f1      	bne.n	8003932 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2220      	movs	r2, #32
 8003954:	4013      	ands	r3, r2
 8003956:	d05c      	beq.n	8003a12 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003958:	4b62      	ldr	r3, [pc, #392]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	220c      	movs	r2, #12
 800395e:	4013      	ands	r3, r2
 8003960:	2b0c      	cmp	r3, #12
 8003962:	d00e      	beq.n	8003982 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003964:	4b5f      	ldr	r3, [pc, #380]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	220c      	movs	r2, #12
 800396a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800396c:	2b08      	cmp	r3, #8
 800396e:	d114      	bne.n	800399a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003970:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	025b      	lsls	r3, r3, #9
 8003978:	401a      	ands	r2, r3
 800397a:	23c0      	movs	r3, #192	; 0xc0
 800397c:	025b      	lsls	r3, r3, #9
 800397e:	429a      	cmp	r2, r3
 8003980:	d10b      	bne.n	800399a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003982:	4b58      	ldr	r3, [pc, #352]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	029b      	lsls	r3, r3, #10
 800398a:	4013      	ands	r3, r2
 800398c:	d040      	beq.n	8003a10 <HAL_RCC_OscConfig+0x5a8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d03c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e6      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01b      	beq.n	80039da <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80039a2:	4b50      	ldr	r3, [pc, #320]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80039a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a6:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	0249      	lsls	r1, r1, #9
 80039ac:	430a      	orrs	r2, r1
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff f86a 	bl	8002a88 <HAL_GetTick>
 80039b4:	0003      	movs	r3, r0
 80039b6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ba:	f7ff f865 	bl	8002a88 <HAL_GetTick>
 80039be:	0002      	movs	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0cd      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039cc:	4b45      	ldr	r3, [pc, #276]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80039ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	029b      	lsls	r3, r3, #10
 80039d4:	4013      	ands	r3, r2
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x552>
 80039d8:	e01b      	b.n	8003a12 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80039da:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80039dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 80039e0:	4943      	ldr	r1, [pc, #268]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7ff f84f 	bl	8002a88 <HAL_GetTick>
 80039ea:	0003      	movs	r3, r0
 80039ec:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f0:	f7ff f84a 	bl	8002a88 <HAL_GetTick>
 80039f4:	0002      	movs	r2, r0
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0b2      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a02:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	029b      	lsls	r3, r3, #10
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x588>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a10:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d100      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5b4>
 8003a1a:	e0a4      	b.n	8003b66 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a1c:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	220c      	movs	r2, #12
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d100      	bne.n	8003a2a <HAL_RCC_OscConfig+0x5c2>
 8003a28:	e078      	b.n	8003b1c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d14c      	bne.n	8003acc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b2c      	ldr	r3, [pc, #176]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a38:	492e      	ldr	r1, [pc, #184]	; (8003af4 <HAL_RCC_OscConfig+0x68c>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7ff f823 	bl	8002a88 <HAL_GetTick>
 8003a42:	0003      	movs	r3, r0
 8003a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a48:	f7ff f81e 	bl	8002a88 <HAL_GetTick>
 8003a4c:	0002      	movs	r2, r0
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e086      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5a:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	049b      	lsls	r3, r3, #18
 8003a62:	4013      	ands	r3, r2
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a66:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	4393      	bics	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a76:	430a      	orrs	r2, r1
 8003a78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <HAL_RCC_OscConfig+0x690>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	0449      	lsls	r1, r1, #17
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fe fff1 	bl	8002a88 <HAL_GetTick>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fe ffec 	bl	8002a88 <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e054      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	049b      	lsls	r3, r3, #18
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x644>
 8003aca:	e04c      	b.n	8003b66 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_RCC_OscConfig+0x67c>)
 8003ad2:	4908      	ldr	r1, [pc, #32]	; (8003af4 <HAL_RCC_OscConfig+0x68c>)
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe ffd6 	bl	8002a88 <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae0:	e015      	b.n	8003b0e <HAL_RCC_OscConfig+0x6a6>
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	00001388 	.word	0x00001388
 8003aec:	efffffff 	.word	0xefffffff
 8003af0:	fffeffff 	.word	0xfffeffff
 8003af4:	feffffff 	.word	0xfeffffff
 8003af8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe ffc4 	bl	8002a88 <HAL_GetTick>
 8003b00:	0002      	movs	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e02c      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_RCC_OscConfig+0x708>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	2380      	movs	r3, #128	; 0x80
 8003b14:	049b      	lsls	r3, r3, #18
 8003b16:	4013      	ands	r3, r2
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x694>
 8003b1a:	e024      	b.n	8003b66 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e01f      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_OscConfig+0x708>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_RCC_OscConfig+0x708>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	23c0      	movs	r3, #192	; 0xc0
 8003b38:	025b      	lsls	r3, r3, #9
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d10e      	bne.n	8003b62 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	220f      	movs	r2, #15
 8003b48:	401a      	ands	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	23f0      	movs	r3, #240	; 0xf0
 8003b56:	039b      	lsls	r3, r3, #14
 8003b58:	401a      	ands	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d001      	beq.n	8003b66 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	0018      	movs	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b008      	add	sp, #32
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0bf      	b.n	8003d08 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <HAL_RCC_ClockConfig+0x19c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d911      	bls.n	8003bba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <HAL_RCC_ClockConfig+0x19c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <HAL_RCC_ClockConfig+0x19c>)
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_ClockConfig+0x19c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	4013      	ands	r3, r2
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0a6      	b.n	8003d08 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d015      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d006      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bce:	4b51      	ldr	r3, [pc, #324]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	4b50      	ldr	r3, [pc, #320]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003bd4:	21e0      	movs	r1, #224	; 0xe0
 8003bd6:	00c9      	lsls	r1, r1, #3
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b4d      	ldr	r3, [pc, #308]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	22f0      	movs	r2, #240	; 0xf0
 8003be2:	4393      	bics	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	4b4a      	ldr	r3, [pc, #296]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d04c      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b44      	ldr	r3, [pc, #272]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	029b      	lsls	r3, r3, #10
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d120      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07a      	b.n	8003d08 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	049b      	lsls	r3, r3, #18
 8003c22:	4013      	ands	r3, r2
 8003c24:	d114      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06e      	b.n	8003d08 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003c32:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	029b      	lsls	r3, r3, #10
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d108      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e062      	b.n	8003d08 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2202      	movs	r2, #2
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e05b      	b.n	8003d08 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c50:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2203      	movs	r2, #3
 8003c56:	4393      	bics	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c64:	f7fe ff10 	bl	8002a88 <HAL_GetTick>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6c:	e009      	b.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6e:	f7fe ff0b 	bl	8002a88 <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	4a27      	ldr	r2, [pc, #156]	; (8003d18 <HAL_RCC_ClockConfig+0x1a4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e042      	b.n	8003d08 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	220c      	movs	r2, #12
 8003c88:	401a      	ands	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1ec      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c94:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <HAL_RCC_ClockConfig+0x19c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d211      	bcs.n	8003cc6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_RCC_ClockConfig+0x19c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4393      	bics	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <HAL_RCC_ClockConfig+0x19c>)
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb4:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <HAL_RCC_ClockConfig+0x19c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	4013      	ands	r3, r2
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e020      	b.n	8003d08 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2204      	movs	r2, #4
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_RCC_ClockConfig+0x1a8>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ce4:	f000 f820 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003ce8:	0001      	movs	r1, r0
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x1a0>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	000a      	movs	r2, r1
 8003cfa:	40da      	lsrs	r2, r3
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d00:	2003      	movs	r0, #3
 8003d02:	f7fe fe7b 	bl	80029fc <HAL_InitTick>
  
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b004      	add	sp, #16
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40022000 	.word	0x40022000
 8003d14:	40021000 	.word	0x40021000
 8003d18:	00001388 	.word	0x00001388
 8003d1c:	fffff8ff 	.word	0xfffff8ff
 8003d20:	080065fc 	.word	0x080065fc
 8003d24:	20000018 	.word	0x20000018

08003d28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d42:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	220c      	movs	r2, #12
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	d046      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0xb8>
 8003d52:	d848      	bhi.n	8003de6 <HAL_RCC_GetSysClockFreq+0xbe>
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d002      	beq.n	8003d5e <HAL_RCC_GetSysClockFreq+0x36>
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d003      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x3c>
 8003d5c:	e043      	b.n	8003de6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d5e:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d60:	613b      	str	r3, [r7, #16]
      break;
 8003d62:	e043      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	220f      	movs	r2, #15
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d72:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	220f      	movs	r2, #15
 8003d78:	4013      	ands	r3, r2
 8003d7a:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003d7c:	5cd3      	ldrb	r3, [r2, r3]
 8003d7e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	23c0      	movs	r3, #192	; 0xc0
 8003d84:	025b      	lsls	r3, r3, #9
 8003d86:	401a      	ands	r2, r3
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	025b      	lsls	r3, r3, #9
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d109      	bne.n	8003da4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	481a      	ldr	r0, [pc, #104]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d94:	f7fc f9b6 	bl	8000104 <__udivsi3>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4353      	muls	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	e01a      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	23c0      	movs	r3, #192	; 0xc0
 8003da8:	025b      	lsls	r3, r3, #9
 8003daa:	401a      	ands	r2, r3
 8003dac:	23c0      	movs	r3, #192	; 0xc0
 8003dae:	025b      	lsls	r3, r3, #9
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	4814      	ldr	r0, [pc, #80]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003db8:	f7fc f9a4 	bl	8000104 <__udivsi3>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4353      	muls	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	480c      	ldr	r0, [pc, #48]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003dcc:	f7fc f99a 	bl	8000104 <__udivsi3>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4353      	muls	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	613b      	str	r3, [r7, #16]
      break;
 8003dde:	e005      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003de2:	613b      	str	r3, [r7, #16]
      break;
 8003de4:	e002      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003de8:	613b      	str	r3, [r7, #16]
      break;
 8003dea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dec:	693b      	ldr	r3, [r7, #16]
}
 8003dee:	0018      	movs	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b006      	add	sp, #24
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	08006614 	.word	0x08006614
 8003e04:	08006624 	.word	0x08006624
 8003e08:	02dc6c00 	.word	0x02dc6c00

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	20000018 	.word	0x20000018

08003e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003e24:	f7ff fff2 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e28:	0001      	movs	r1, r0
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	2207      	movs	r2, #7
 8003e32:	4013      	ands	r3, r2
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	40d9      	lsrs	r1, r3
 8003e3a:	000b      	movs	r3, r1
}    
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	40021000 	.word	0x40021000
 8003e48:	0800660c 	.word	0x0800660c

08003e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	025b      	lsls	r3, r3, #9
 8003e64:	4013      	ands	r3, r2
 8003e66:	d100      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003e68:	e08e      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003e6a:	2017      	movs	r0, #23
 8003e6c:	183b      	adds	r3, r7, r0
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e72:	4b6e      	ldr	r3, [pc, #440]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	055b      	lsls	r3, r3, #21
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d110      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	4b6b      	ldr	r3, [pc, #428]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	4b6a      	ldr	r3, [pc, #424]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	0549      	lsls	r1, r1, #21
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
 8003e8c:	4b67      	ldr	r3, [pc, #412]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	055b      	lsls	r3, r3, #21
 8003e94:	4013      	ands	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	183b      	adds	r3, r7, r0
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b63      	ldr	r3, [pc, #396]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d11a      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eac:	4b60      	ldr	r3, [pc, #384]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b5f      	ldr	r3, [pc, #380]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	0049      	lsls	r1, r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eba:	f7fe fde5 	bl	8002a88 <HAL_GetTick>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec4:	f7fe fde0 	bl	8002a88 <HAL_GetTick>
 8003ec8:	0002      	movs	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0a6      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b56      	ldr	r3, [pc, #344]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ee2:	4b52      	ldr	r3, [pc, #328]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	23c0      	movs	r3, #192	; 0xc0
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d034      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	23c0      	movs	r3, #192	; 0xc0
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4013      	ands	r3, r2
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d02c      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f04:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	4a4a      	ldr	r2, [pc, #296]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f10:	6a1a      	ldr	r2, [r3, #32]
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f14:	2180      	movs	r1, #128	; 0x80
 8003f16:	0249      	lsls	r1, r1, #9
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1c:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
 8003f20:	4b42      	ldr	r3, [pc, #264]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f22:	4945      	ldr	r1, [pc, #276]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003f24:	400a      	ands	r2, r1
 8003f26:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f28:	4b40      	ldr	r3, [pc, #256]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	4013      	ands	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fe fda7 	bl	8002a88 <HAL_GetTick>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	e009      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fe fda2 	bl	8002a88 <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	4a3c      	ldr	r2, [pc, #240]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e067      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	4b35      	ldr	r3, [pc, #212]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5e:	4b33      	ldr	r3, [pc, #204]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4a34      	ldr	r2, [pc, #208]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f72:	2317      	movs	r3, #23
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f82:	492f      	ldr	r1, [pc, #188]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	2203      	movs	r2, #3
 8003f98:	4393      	bics	r3, r2
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	4b22      	ldr	r3, [pc, #136]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb0:	4b1e      	ldr	r3, [pc, #120]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	4a23      	ldr	r2, [pc, #140]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	02db      	lsls	r3, r3, #11
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d009      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fd0:	4b16      	ldr	r3, [pc, #88]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	0019      	movs	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	4b13      	ldr	r3, [pc, #76]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	4013      	ands	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fee:	4b0f      	ldr	r3, [pc, #60]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	4393      	bics	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4013      	ands	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	2240      	movs	r2, #64	; 0x40
 8004014:	4393      	bics	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699a      	ldr	r2, [r3, #24]
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800401e:	430a      	orrs	r2, r1
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b006      	add	sp, #24
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	40007000 	.word	0x40007000
 8004034:	fffffcff 	.word	0xfffffcff
 8004038:	fffeffff 	.word	0xfffeffff
 800403c:	00001388 	.word	0x00001388
 8004040:	efffffff 	.word	0xefffffff
 8004044:	fffcffff 	.word	0xfffcffff
 8004048:	fff3ffff 	.word	0xfff3ffff

0800404c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e042      	b.n	80040e4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	223d      	movs	r2, #61	; 0x3d
 8004062:	5c9b      	ldrb	r3, [r3, r2]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	223c      	movs	r2, #60	; 0x3c
 800406e:	2100      	movs	r1, #0
 8004070:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f7fe fafd 	bl	8002674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	223d      	movs	r2, #61	; 0x3d
 800407e:	2102      	movs	r1, #2
 8004080:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	0019      	movs	r1, r3
 800408c:	0010      	movs	r0, r2
 800408e:	f000 fd93 	bl	8004bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2246      	movs	r2, #70	; 0x46
 8004096:	2101      	movs	r1, #1
 8004098:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	223e      	movs	r2, #62	; 0x3e
 800409e:	2101      	movs	r1, #1
 80040a0:	5499      	strb	r1, [r3, r2]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	223f      	movs	r2, #63	; 0x3f
 80040a6:	2101      	movs	r1, #1
 80040a8:	5499      	strb	r1, [r3, r2]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	2101      	movs	r1, #1
 80040b0:	5499      	strb	r1, [r3, r2]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2241      	movs	r2, #65	; 0x41
 80040b6:	2101      	movs	r1, #1
 80040b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2242      	movs	r2, #66	; 0x42
 80040be:	2101      	movs	r1, #1
 80040c0:	5499      	strb	r1, [r3, r2]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2243      	movs	r2, #67	; 0x43
 80040c6:	2101      	movs	r1, #1
 80040c8:	5499      	strb	r1, [r3, r2]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2244      	movs	r2, #68	; 0x44
 80040ce:	2101      	movs	r1, #1
 80040d0:	5499      	strb	r1, [r3, r2]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2245      	movs	r2, #69	; 0x45
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	223d      	movs	r2, #61	; 0x3d
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e042      	b.n	8004184 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	223d      	movs	r2, #61	; 0x3d
 8004102:	5c9b      	ldrb	r3, [r3, r2]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	223c      	movs	r2, #60	; 0x3c
 800410e:	2100      	movs	r1, #0
 8004110:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f000 f839 	bl	800418c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	223d      	movs	r2, #61	; 0x3d
 800411e:	2102      	movs	r1, #2
 8004120:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	0019      	movs	r1, r3
 800412c:	0010      	movs	r0, r2
 800412e:	f000 fd43 	bl	8004bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2246      	movs	r2, #70	; 0x46
 8004136:	2101      	movs	r1, #1
 8004138:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	223e      	movs	r2, #62	; 0x3e
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	223f      	movs	r2, #63	; 0x3f
 8004146:	2101      	movs	r1, #1
 8004148:	5499      	strb	r1, [r3, r2]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2240      	movs	r2, #64	; 0x40
 800414e:	2101      	movs	r1, #1
 8004150:	5499      	strb	r1, [r3, r2]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2241      	movs	r2, #65	; 0x41
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2242      	movs	r2, #66	; 0x42
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2243      	movs	r2, #67	; 0x43
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2244      	movs	r2, #68	; 0x44
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2245      	movs	r2, #69	; 0x45
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	223d      	movs	r2, #61	; 0x3d
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b002      	add	sp, #8
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e042      	b.n	8004234 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	223d      	movs	r2, #61	; 0x3d
 80041b2:	5c9b      	ldrb	r3, [r3, r2]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d107      	bne.n	80041ca <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	223c      	movs	r2, #60	; 0x3c
 80041be:	2100      	movs	r1, #0
 80041c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 f839 	bl	800423c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	223d      	movs	r2, #61	; 0x3d
 80041ce:	2102      	movs	r1, #2
 80041d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	0019      	movs	r1, r3
 80041dc:	0010      	movs	r0, r2
 80041de:	f000 fceb 	bl	8004bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2246      	movs	r2, #70	; 0x46
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	223e      	movs	r2, #62	; 0x3e
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	223f      	movs	r2, #63	; 0x3f
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2240      	movs	r2, #64	; 0x40
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2241      	movs	r2, #65	; 0x41
 8004206:	2101      	movs	r1, #1
 8004208:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2242      	movs	r2, #66	; 0x42
 800420e:	2101      	movs	r1, #1
 8004210:	5499      	strb	r1, [r3, r2]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2243      	movs	r2, #67	; 0x43
 8004216:	2101      	movs	r1, #1
 8004218:	5499      	strb	r1, [r3, r2]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2244      	movs	r2, #68	; 0x44
 800421e:	2101      	movs	r1, #1
 8004220:	5499      	strb	r1, [r3, r2]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2245      	movs	r2, #69	; 0x45
 8004226:	2101      	movs	r1, #1
 8004228:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	223d      	movs	r2, #61	; 0x3d
 800422e:	2101      	movs	r1, #1
 8004230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b002      	add	sp, #8
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	230f      	movs	r3, #15
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <HAL_TIM_IC_Start_IT+0x22>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	223e      	movs	r2, #62	; 0x3e
 8004268:	5c9b      	ldrb	r3, [r3, r2]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e013      	b.n	8004296 <HAL_TIM_IC_Start_IT+0x4a>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d104      	bne.n	800427e <HAL_TIM_IC_Start_IT+0x32>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	223f      	movs	r2, #63	; 0x3f
 8004278:	5c9b      	ldrb	r3, [r3, r2]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e00b      	b.n	8004296 <HAL_TIM_IC_Start_IT+0x4a>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d104      	bne.n	800428e <HAL_TIM_IC_Start_IT+0x42>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2240      	movs	r2, #64	; 0x40
 8004288:	5c9b      	ldrb	r3, [r3, r2]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	e003      	b.n	8004296 <HAL_TIM_IC_Start_IT+0x4a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2241      	movs	r2, #65	; 0x41
 8004292:	5c9b      	ldrb	r3, [r3, r2]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	220e      	movs	r2, #14
 8004298:	18ba      	adds	r2, r7, r2
 800429a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <HAL_TIM_IC_Start_IT+0x60>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2242      	movs	r2, #66	; 0x42
 80042a6:	5c9b      	ldrb	r3, [r3, r2]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e013      	b.n	80042d4 <HAL_TIM_IC_Start_IT+0x88>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d104      	bne.n	80042bc <HAL_TIM_IC_Start_IT+0x70>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2243      	movs	r2, #67	; 0x43
 80042b6:	5c9b      	ldrb	r3, [r3, r2]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	e00b      	b.n	80042d4 <HAL_TIM_IC_Start_IT+0x88>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d104      	bne.n	80042cc <HAL_TIM_IC_Start_IT+0x80>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2244      	movs	r2, #68	; 0x44
 80042c6:	5c9b      	ldrb	r3, [r3, r2]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e003      	b.n	80042d4 <HAL_TIM_IC_Start_IT+0x88>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2245      	movs	r2, #69	; 0x45
 80042d0:	5c9b      	ldrb	r3, [r3, r2]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	210d      	movs	r1, #13
 80042d6:	187a      	adds	r2, r7, r1
 80042d8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80042da:	230e      	movs	r3, #14
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d103      	bne.n	80042ec <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80042e4:	187b      	adds	r3, r7, r1
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0b1      	b.n	8004454 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d104      	bne.n	8004300 <HAL_TIM_IC_Start_IT+0xb4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	223e      	movs	r2, #62	; 0x3e
 80042fa:	2102      	movs	r1, #2
 80042fc:	5499      	strb	r1, [r3, r2]
 80042fe:	e013      	b.n	8004328 <HAL_TIM_IC_Start_IT+0xdc>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b04      	cmp	r3, #4
 8004304:	d104      	bne.n	8004310 <HAL_TIM_IC_Start_IT+0xc4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	223f      	movs	r2, #63	; 0x3f
 800430a:	2102      	movs	r1, #2
 800430c:	5499      	strb	r1, [r3, r2]
 800430e:	e00b      	b.n	8004328 <HAL_TIM_IC_Start_IT+0xdc>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b08      	cmp	r3, #8
 8004314:	d104      	bne.n	8004320 <HAL_TIM_IC_Start_IT+0xd4>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2240      	movs	r2, #64	; 0x40
 800431a:	2102      	movs	r1, #2
 800431c:	5499      	strb	r1, [r3, r2]
 800431e:	e003      	b.n	8004328 <HAL_TIM_IC_Start_IT+0xdc>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2241      	movs	r2, #65	; 0x41
 8004324:	2102      	movs	r1, #2
 8004326:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <HAL_TIM_IC_Start_IT+0xec>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2242      	movs	r2, #66	; 0x42
 8004332:	2102      	movs	r1, #2
 8004334:	5499      	strb	r1, [r3, r2]
 8004336:	e013      	b.n	8004360 <HAL_TIM_IC_Start_IT+0x114>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b04      	cmp	r3, #4
 800433c:	d104      	bne.n	8004348 <HAL_TIM_IC_Start_IT+0xfc>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2243      	movs	r2, #67	; 0x43
 8004342:	2102      	movs	r1, #2
 8004344:	5499      	strb	r1, [r3, r2]
 8004346:	e00b      	b.n	8004360 <HAL_TIM_IC_Start_IT+0x114>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b08      	cmp	r3, #8
 800434c:	d104      	bne.n	8004358 <HAL_TIM_IC_Start_IT+0x10c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2244      	movs	r2, #68	; 0x44
 8004352:	2102      	movs	r1, #2
 8004354:	5499      	strb	r1, [r3, r2]
 8004356:	e003      	b.n	8004360 <HAL_TIM_IC_Start_IT+0x114>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2245      	movs	r2, #69	; 0x45
 800435c:	2102      	movs	r1, #2
 800435e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d02a      	beq.n	80043bc <HAL_TIM_IC_Start_IT+0x170>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	d830      	bhi.n	80043ce <HAL_TIM_IC_Start_IT+0x182>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d01b      	beq.n	80043aa <HAL_TIM_IC_Start_IT+0x15e>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d82a      	bhi.n	80043ce <HAL_TIM_IC_Start_IT+0x182>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IC_Start_IT+0x13a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d009      	beq.n	8004398 <HAL_TIM_IC_Start_IT+0x14c>
 8004384:	e023      	b.n	80043ce <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2102      	movs	r1, #2
 8004392:	430a      	orrs	r2, r1
 8004394:	60da      	str	r2, [r3, #12]
      break;
 8004396:	e01f      	b.n	80043d8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2104      	movs	r1, #4
 80043a4:	430a      	orrs	r2, r1
 80043a6:	60da      	str	r2, [r3, #12]
      break;
 80043a8:	e016      	b.n	80043d8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2108      	movs	r1, #8
 80043b6:	430a      	orrs	r2, r1
 80043b8:	60da      	str	r2, [r3, #12]
      break;
 80043ba:	e00d      	b.n	80043d8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2110      	movs	r1, #16
 80043c8:	430a      	orrs	r2, r1
 80043ca:	60da      	str	r2, [r3, #12]
      break;
 80043cc:	e004      	b.n	80043d8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80043ce:	230f      	movs	r3, #15
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
      break;
 80043d6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80043d8:	230f      	movs	r3, #15
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d135      	bne.n	800444e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6839      	ldr	r1, [r7, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	0018      	movs	r0, r3
 80043ec:	f001 f81e 	bl	800542c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <HAL_TIM_IC_Start_IT+0x210>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00f      	beq.n	800441a <HAL_TIM_IC_Start_IT+0x1ce>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	05db      	lsls	r3, r3, #23
 8004402:	429a      	cmp	r2, r3
 8004404:	d009      	beq.n	800441a <HAL_TIM_IC_Start_IT+0x1ce>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <HAL_TIM_IC_Start_IT+0x214>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIM_IC_Start_IT+0x1ce>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_TIM_IC_Start_IT+0x218>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2207      	movs	r2, #7
 8004422:	4013      	ands	r3, r2
 8004424:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d010      	beq.n	800444e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2101      	movs	r1, #1
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443c:	e007      	b.n	800444e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2101      	movs	r1, #1
 800444a:	430a      	orrs	r2, r1
 800444c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800444e:	230f      	movs	r3, #15
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	781b      	ldrb	r3, [r3, #0]
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	b004      	add	sp, #16
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40014000 	.word	0x40014000

08004468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2202      	movs	r2, #2
 8004478:	4013      	ands	r3, r2
 800447a:	2b02      	cmp	r3, #2
 800447c:	d124      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2202      	movs	r2, #2
 8004486:	4013      	ands	r3, r2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d11d      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2203      	movs	r2, #3
 8004492:	4252      	negs	r2, r2
 8004494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2203      	movs	r2, #3
 80044a4:	4013      	ands	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7fd fdbc 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e007      	b.n	80044c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 fb67 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	0018      	movs	r0, r3
 80044be:	f000 fb6b 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2204      	movs	r2, #4
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d125      	bne.n	8004522 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2204      	movs	r2, #4
 80044de:	4013      	ands	r3, r2
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d11e      	bne.n	8004522 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2205      	movs	r2, #5
 80044ea:	4252      	negs	r2, r2
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	23c0      	movs	r3, #192	; 0xc0
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4013      	ands	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f7fd fd8f 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 800450a:	e007      	b.n	800451c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0018      	movs	r0, r3
 8004510:	f000 fb3a 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0018      	movs	r0, r3
 8004518:	f000 fb3e 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2208      	movs	r2, #8
 800452a:	4013      	ands	r3, r2
 800452c:	2b08      	cmp	r3, #8
 800452e:	d124      	bne.n	800457a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2208      	movs	r2, #8
 8004538:	4013      	ands	r3, r2
 800453a:	2b08      	cmp	r3, #8
 800453c:	d11d      	bne.n	800457a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2209      	movs	r2, #9
 8004544:	4252      	negs	r2, r2
 8004546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2204      	movs	r2, #4
 800454c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	2203      	movs	r2, #3
 8004556:	4013      	ands	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f7fd fd63 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8004562:	e007      	b.n	8004574 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 fb0e 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 fb12 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2210      	movs	r2, #16
 8004582:	4013      	ands	r3, r2
 8004584:	2b10      	cmp	r3, #16
 8004586:	d125      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2210      	movs	r2, #16
 8004590:	4013      	ands	r3, r2
 8004592:	2b10      	cmp	r3, #16
 8004594:	d11e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2211      	movs	r2, #17
 800459c:	4252      	negs	r2, r2
 800459e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2208      	movs	r2, #8
 80045a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	23c0      	movs	r3, #192	; 0xc0
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4013      	ands	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7fd fd36 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 80045bc:	e007      	b.n	80045ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 fae1 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f000 fae5 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2201      	movs	r2, #1
 80045dc:	4013      	ands	r3, r2
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10f      	bne.n	8004602 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d108      	bne.n	8004602 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2202      	movs	r2, #2
 80045f6:	4252      	negs	r2, r2
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 fabb 	bl	8004b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	4013      	ands	r3, r2
 800460c:	2b80      	cmp	r3, #128	; 0x80
 800460e:	d10f      	bne.n	8004630 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	4013      	ands	r3, r2
 800461a:	2b80      	cmp	r3, #128	; 0x80
 800461c:	d108      	bne.n	8004630 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2281      	movs	r2, #129	; 0x81
 8004624:	4252      	negs	r2, r2
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	0018      	movs	r0, r3
 800462c:	f000 ffe6 	bl	80055fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	4013      	ands	r3, r2
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d10f      	bne.n	800465e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2240      	movs	r2, #64	; 0x40
 8004646:	4013      	ands	r3, r2
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d108      	bne.n	800465e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2241      	movs	r2, #65	; 0x41
 8004652:	4252      	negs	r2, r2
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f000 faa5 	bl	8004ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2220      	movs	r2, #32
 8004666:	4013      	ands	r3, r2
 8004668:	2b20      	cmp	r3, #32
 800466a:	d10f      	bne.n	800468c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	4013      	ands	r3, r2
 8004676:	2b20      	cmp	r3, #32
 8004678:	d108      	bne.n	800468c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2221      	movs	r2, #33	; 0x21
 8004680:	4252      	negs	r2, r2
 8004682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	0018      	movs	r0, r3
 8004688:	f000 ffb0 	bl	80055ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a0:	2317      	movs	r3, #23
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	223c      	movs	r2, #60	; 0x3c
 80046ac:	5c9b      	ldrb	r3, [r3, r2]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x22>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e08c      	b.n	80047d0 <HAL_TIM_IC_ConfigChannel+0x13c>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	223c      	movs	r2, #60	; 0x3c
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11b      	bne.n	80046fc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80046d4:	f000 fcec 	bl	80050b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	210c      	movs	r1, #12
 80046e4:	438a      	bics	r2, r1
 80046e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	619a      	str	r2, [r3, #24]
 80046fa:	e062      	b.n	80047c2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d11c      	bne.n	800473c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004712:	f000 fd57 	bl	80051c4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	492d      	ldr	r1, [pc, #180]	; (80047d8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004722:	400a      	ands	r2, r1
 8004724:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6999      	ldr	r1, [r3, #24]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	021a      	lsls	r2, r3, #8
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	619a      	str	r2, [r3, #24]
 800473a:	e042      	b.n	80047c2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d11b      	bne.n	800477a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004752:	f000 fdab 	bl	80052ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	210c      	movs	r1, #12
 8004762:	438a      	bics	r2, r1
 8004764:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	61da      	str	r2, [r3, #28]
 8004778:	e023      	b.n	80047c2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b0c      	cmp	r3, #12
 800477e:	d11c      	bne.n	80047ba <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004790:	f000 fdcc 	bl	800532c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	490e      	ldr	r1, [pc, #56]	; (80047d8 <HAL_TIM_IC_ConfigChannel+0x144>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69d9      	ldr	r1, [r3, #28]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	021a      	lsls	r2, r3, #8
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	61da      	str	r2, [r3, #28]
 80047b8:	e003      	b.n	80047c2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80047ba:	2317      	movs	r3, #23
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	223c      	movs	r2, #60	; 0x3c
 80047c6:	2100      	movs	r1, #0
 80047c8:	5499      	strb	r1, [r3, r2]

  return status;
 80047ca:	2317      	movs	r3, #23
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	781b      	ldrb	r3, [r3, #0]
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b006      	add	sp, #24
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	fffff3ff 	.word	0xfffff3ff

080047dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e8:	2317      	movs	r3, #23
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	223c      	movs	r2, #60	; 0x3c
 80047f4:	5c9b      	ldrb	r3, [r3, r2]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0ad      	b.n	800495a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	223c      	movs	r2, #60	; 0x3c
 8004802:	2101      	movs	r1, #1
 8004804:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d100      	bne.n	800480e <HAL_TIM_PWM_ConfigChannel+0x32>
 800480c:	e076      	b.n	80048fc <HAL_TIM_PWM_ConfigChannel+0x120>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d900      	bls.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004814:	e095      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d04e      	beq.n	80048ba <HAL_TIM_PWM_ConfigChannel+0xde>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b08      	cmp	r3, #8
 8004820:	d900      	bls.n	8004824 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004822:	e08e      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x56>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d021      	beq.n	8004874 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004830:	e087      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	0011      	movs	r1, r2
 800483a:	0018      	movs	r0, r3
 800483c:	f000 fa3c 	bl	8004cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2108      	movs	r1, #8
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2104      	movs	r1, #4
 800485c:	438a      	bics	r2, r1
 800485e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	619a      	str	r2, [r3, #24]
      break;
 8004872:	e06b      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	0011      	movs	r1, r2
 800487c:	0018      	movs	r0, r3
 800487e:	f000 faa3 	bl	8004dc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	0109      	lsls	r1, r1, #4
 8004890:	430a      	orrs	r2, r1
 8004892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4931      	ldr	r1, [pc, #196]	; (8004964 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6999      	ldr	r1, [r3, #24]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	021a      	lsls	r2, r3, #8
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	619a      	str	r2, [r3, #24]
      break;
 80048b8:	e048      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	0011      	movs	r1, r2
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 fb04 	bl	8004ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2108      	movs	r1, #8
 80048d4:	430a      	orrs	r2, r1
 80048d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2104      	movs	r1, #4
 80048e4:	438a      	bics	r2, r1
 80048e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69d9      	ldr	r1, [r3, #28]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	61da      	str	r2, [r3, #28]
      break;
 80048fa:	e027      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	0011      	movs	r1, r2
 8004904:	0018      	movs	r0, r3
 8004906:	f000 fb69 	bl	8004fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	0109      	lsls	r1, r1, #4
 8004918:	430a      	orrs	r2, r1
 800491a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	490f      	ldr	r1, [pc, #60]	; (8004964 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004928:	400a      	ands	r2, r1
 800492a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69d9      	ldr	r1, [r3, #28]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	61da      	str	r2, [r3, #28]
      break;
 8004940:	e004      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004942:	2317      	movs	r3, #23
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
      break;
 800494a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	223c      	movs	r2, #60	; 0x3c
 8004950:	2100      	movs	r1, #0
 8004952:	5499      	strb	r1, [r3, r2]

  return status;
 8004954:	2317      	movs	r3, #23
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	781b      	ldrb	r3, [r3, #0]
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b006      	add	sp, #24
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	fffffbff 	.word	0xfffffbff

08004968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	230f      	movs	r3, #15
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	223c      	movs	r2, #60	; 0x3c
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_TIM_ConfigClockSource+0x20>
 8004984:	2302      	movs	r3, #2
 8004986:	e0bc      	b.n	8004b02 <HAL_TIM_ConfigClockSource+0x19a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	223c      	movs	r2, #60	; 0x3c
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	223d      	movs	r2, #61	; 0x3d
 8004994:	2102      	movs	r1, #2
 8004996:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2277      	movs	r2, #119	; 0x77
 80049a4:	4393      	bics	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4a58      	ldr	r2, [pc, #352]	; (8004b0c <HAL_TIM_ConfigClockSource+0x1a4>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2280      	movs	r2, #128	; 0x80
 80049be:	0192      	lsls	r2, r2, #6
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d040      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0xde>
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	0192      	lsls	r2, r2, #6
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d900      	bls.n	80049ce <HAL_TIM_ConfigClockSource+0x66>
 80049cc:	e088      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
 80049ce:	2280      	movs	r2, #128	; 0x80
 80049d0:	0152      	lsls	r2, r2, #5
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d100      	bne.n	80049d8 <HAL_TIM_ConfigClockSource+0x70>
 80049d6:	e088      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x182>
 80049d8:	2280      	movs	r2, #128	; 0x80
 80049da:	0152      	lsls	r2, r2, #5
 80049dc:	4293      	cmp	r3, r2
 80049de:	d900      	bls.n	80049e2 <HAL_TIM_ConfigClockSource+0x7a>
 80049e0:	e07e      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
 80049e2:	2b70      	cmp	r3, #112	; 0x70
 80049e4:	d018      	beq.n	8004a18 <HAL_TIM_ConfigClockSource+0xb0>
 80049e6:	d900      	bls.n	80049ea <HAL_TIM_ConfigClockSource+0x82>
 80049e8:	e07a      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
 80049ea:	2b60      	cmp	r3, #96	; 0x60
 80049ec:	d04f      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x126>
 80049ee:	d900      	bls.n	80049f2 <HAL_TIM_ConfigClockSource+0x8a>
 80049f0:	e076      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
 80049f2:	2b50      	cmp	r3, #80	; 0x50
 80049f4:	d03b      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x106>
 80049f6:	d900      	bls.n	80049fa <HAL_TIM_ConfigClockSource+0x92>
 80049f8:	e072      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d057      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x146>
 80049fe:	d900      	bls.n	8004a02 <HAL_TIM_ConfigClockSource+0x9a>
 8004a00:	e06e      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
 8004a02:	2b30      	cmp	r3, #48	; 0x30
 8004a04:	d063      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x166>
 8004a06:	d86b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d060      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x166>
 8004a0c:	d868      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d05d      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x166>
 8004a12:	2b10      	cmp	r3, #16
 8004a14:	d05b      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x166>
 8004a16:	e063      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a28:	f000 fce0 	bl	80053ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2277      	movs	r2, #119	; 0x77
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
      break;
 8004a44:	e052      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a56:	f000 fcc9 	bl	80053ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2180      	movs	r1, #128	; 0x80
 8004a66:	01c9      	lsls	r1, r1, #7
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
      break;
 8004a6c:	e03e      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7a:	001a      	movs	r2, r3
 8004a7c:	f000 fb74 	bl	8005168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2150      	movs	r1, #80	; 0x50
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 fc96 	bl	80053b8 <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e02e      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	f000 fbd4 	bl	8005248 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2160      	movs	r1, #96	; 0x60
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 fc86 	bl	80053b8 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e01e      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	001a      	movs	r2, r3
 8004abc:	f000 fb54 	bl	8005168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 fc76 	bl	80053b8 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e00e      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	0010      	movs	r0, r2
 8004ada:	f000 fc6d 	bl	80053b8 <TIM_ITRx_SetConfig>
      break;
 8004ade:	e005      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004ae0:	230f      	movs	r3, #15
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
      break;
 8004ae8:	e000      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004aea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	223d      	movs	r2, #61	; 0x3d
 8004af0:	2101      	movs	r1, #1
 8004af2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	223c      	movs	r2, #60	; 0x3c
 8004af8:	2100      	movs	r1, #0
 8004afa:	5499      	strb	r1, [r3, r2]

  return status;
 8004afc:	230f      	movs	r3, #15
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	781b      	ldrb	r3, [r3, #0]
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b004      	add	sp, #16
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	ffff00ff 	.word	0xffff00ff

08004b10 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b0c      	cmp	r3, #12
 8004b22:	d01e      	beq.n	8004b62 <HAL_TIM_ReadCapturedValue+0x52>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d820      	bhi.n	8004b6c <HAL_TIM_ReadCapturedValue+0x5c>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d013      	beq.n	8004b58 <HAL_TIM_ReadCapturedValue+0x48>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d81a      	bhi.n	8004b6c <HAL_TIM_ReadCapturedValue+0x5c>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_TIM_ReadCapturedValue+0x34>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d005      	beq.n	8004b4e <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8004b42:	e013      	b.n	8004b6c <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	60fb      	str	r3, [r7, #12]
      break;
 8004b4c:	e00f      	b.n	8004b6e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	60fb      	str	r3, [r7, #12]
      break;
 8004b56:	e00a      	b.n	8004b6e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	60fb      	str	r3, [r7, #12]
      break;
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	60fb      	str	r3, [r7, #12]
      break;
 8004b6a:	e000      	b.n	8004b6e <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8004b6c:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b004      	add	sp, #16
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb0:	46c0      	nop			; (mov r8, r8)
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a34      	ldr	r2, [pc, #208]	; (8004c9c <TIM_Base_SetConfig+0xe4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d008      	beq.n	8004be2 <TIM_Base_SetConfig+0x2a>
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	05db      	lsls	r3, r3, #23
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d003      	beq.n	8004be2 <TIM_Base_SetConfig+0x2a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a30      	ldr	r2, [pc, #192]	; (8004ca0 <TIM_Base_SetConfig+0xe8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d108      	bne.n	8004bf4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2270      	movs	r2, #112	; 0x70
 8004be6:	4393      	bics	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <TIM_Base_SetConfig+0xe4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <TIM_Base_SetConfig+0x76>
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	2380      	movs	r3, #128	; 0x80
 8004c00:	05db      	lsls	r3, r3, #23
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d013      	beq.n	8004c2e <TIM_Base_SetConfig+0x76>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a25      	ldr	r2, [pc, #148]	; (8004ca0 <TIM_Base_SetConfig+0xe8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00f      	beq.n	8004c2e <TIM_Base_SetConfig+0x76>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <TIM_Base_SetConfig+0xec>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <TIM_Base_SetConfig+0x76>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a23      	ldr	r2, [pc, #140]	; (8004ca8 <TIM_Base_SetConfig+0xf0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d007      	beq.n	8004c2e <TIM_Base_SetConfig+0x76>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a22      	ldr	r2, [pc, #136]	; (8004cac <TIM_Base_SetConfig+0xf4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_Base_SetConfig+0x76>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <TIM_Base_SetConfig+0xf8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <TIM_Base_SetConfig+0xfc>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	4393      	bics	r3, r2
 8004c46:	001a      	movs	r2, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <TIM_Base_SetConfig+0xe4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0xce>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <TIM_Base_SetConfig+0xf0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0xce>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <TIM_Base_SetConfig+0xf4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0xce>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a0b      	ldr	r2, [pc, #44]	; (8004cb0 <TIM_Base_SetConfig+0xf8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d103      	bne.n	8004c8e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	615a      	str	r2, [r3, #20]
}
 8004c94:	46c0      	nop			; (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b004      	add	sp, #16
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40002000 	.word	0x40002000
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800
 8004cb4:	fffffcff 	.word	0xfffffcff

08004cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4393      	bics	r3, r2
 8004cca:	001a      	movs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2270      	movs	r2, #112	; 0x70
 8004ce6:	4393      	bics	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2203      	movs	r2, #3
 8004cee:	4393      	bics	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4393      	bics	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_OC1_SetConfig+0xf8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_OC1_SetConfig+0x76>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <TIM_OC1_SetConfig+0xfc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_OC1_SetConfig+0x76>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <TIM_OC1_SetConfig+0x100>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC1_SetConfig+0x76>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <TIM_OC1_SetConfig+0x104>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10c      	bne.n	8004d48 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2208      	movs	r2, #8
 8004d32:	4393      	bics	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2204      	movs	r2, #4
 8004d44:	4393      	bics	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <TIM_OC1_SetConfig+0xf8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <TIM_OC1_SetConfig+0xb0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <TIM_OC1_SetConfig+0xfc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_OC1_SetConfig+0xb0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <TIM_OC1_SetConfig+0x100>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_OC1_SetConfig+0xb0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <TIM_OC1_SetConfig+0x104>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d111      	bne.n	8004d8c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <TIM_OC1_SetConfig+0x108>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <TIM_OC1_SetConfig+0x10c>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	621a      	str	r2, [r3, #32]
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b006      	add	sp, #24
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800
 8004dc0:	fffffeff 	.word	0xfffffeff
 8004dc4:	fffffdff 	.word	0xfffffdff

08004dc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	4393      	bics	r3, r2
 8004dda:	001a      	movs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a2e      	ldr	r2, [pc, #184]	; (8004eb0 <TIM_OC2_SetConfig+0xe8>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <TIM_OC2_SetConfig+0xec>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2220      	movs	r2, #32
 8004e12:	4393      	bics	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <TIM_OC2_SetConfig+0xf0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10d      	bne.n	8004e46 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	4393      	bics	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2240      	movs	r2, #64	; 0x40
 8004e42:	4393      	bics	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <TIM_OC2_SetConfig+0xf0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_OC2_SetConfig+0x9e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1a      	ldr	r2, [pc, #104]	; (8004ebc <TIM_OC2_SetConfig+0xf4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_OC2_SetConfig+0x9e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <TIM_OC2_SetConfig+0xf8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC2_SetConfig+0x9e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <TIM_OC2_SetConfig+0xfc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <TIM_OC2_SetConfig+0x100>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4a16      	ldr	r2, [pc, #88]	; (8004ecc <TIM_OC2_SetConfig+0x104>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b006      	add	sp, #24
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	ffff8fff 	.word	0xffff8fff
 8004eb4:	fffffcff 	.word	0xfffffcff
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800
 8004ec8:	fffffbff 	.word	0xfffffbff
 8004ecc:	fffff7ff 	.word	0xfffff7ff

08004ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	4a35      	ldr	r2, [pc, #212]	; (8004fb4 <TIM_OC3_SetConfig+0xe4>)
 8004ee0:	401a      	ands	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2270      	movs	r2, #112	; 0x70
 8004efc:	4393      	bics	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2203      	movs	r2, #3
 8004f04:	4393      	bics	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	4a28      	ldr	r2, [pc, #160]	; (8004fb8 <TIM_OC3_SetConfig+0xe8>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a24      	ldr	r2, [pc, #144]	; (8004fbc <TIM_OC3_SetConfig+0xec>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d10d      	bne.n	8004f4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <TIM_OC3_SetConfig+0xf0>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <TIM_OC3_SetConfig+0xf4>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <TIM_OC3_SetConfig+0xec>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00b      	beq.n	8004f6a <TIM_OC3_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <TIM_OC3_SetConfig+0xf8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <TIM_OC3_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <TIM_OC3_SetConfig+0xfc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_OC3_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1a      	ldr	r2, [pc, #104]	; (8004fd0 <TIM_OC3_SetConfig+0x100>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d113      	bne.n	8004f92 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4a19      	ldr	r2, [pc, #100]	; (8004fd4 <TIM_OC3_SetConfig+0x104>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <TIM_OC3_SetConfig+0x108>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	621a      	str	r2, [r3, #32]
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b006      	add	sp, #24
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	fffffeff 	.word	0xfffffeff
 8004fb8:	fffffdff 	.word	0xfffffdff
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	fffff7ff 	.word	0xfffff7ff
 8004fc4:	fffffbff 	.word	0xfffffbff
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800
 8004fd4:	ffffefff 	.word	0xffffefff
 8004fd8:	ffffdfff 	.word	0xffffdfff

08004fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a28      	ldr	r2, [pc, #160]	; (800508c <TIM_OC4_SetConfig+0xb0>)
 8004fec:	401a      	ands	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a22      	ldr	r2, [pc, #136]	; (8005090 <TIM_OC4_SetConfig+0xb4>)
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a21      	ldr	r2, [pc, #132]	; (8005094 <TIM_OC4_SetConfig+0xb8>)
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <TIM_OC4_SetConfig+0xbc>)
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	031b      	lsls	r3, r3, #12
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a19      	ldr	r2, [pc, #100]	; (800509c <TIM_OC4_SetConfig+0xc0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_OC4_SetConfig+0x78>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <TIM_OC4_SetConfig+0xc4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_OC4_SetConfig+0x78>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <TIM_OC4_SetConfig+0xc8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC4_SetConfig+0x78>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <TIM_OC4_SetConfig+0xcc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d109      	bne.n	8005068 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <TIM_OC4_SetConfig+0xd0>)
 8005058:	4013      	ands	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	46bd      	mov	sp, r7
 8005086:	b006      	add	sp, #24
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	ffffefff 	.word	0xffffefff
 8005090:	ffff8fff 	.word	0xffff8fff
 8005094:	fffffcff 	.word	0xfffffcff
 8005098:	ffffdfff 	.word	0xffffdfff
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800
 80050ac:	ffffbfff 	.word	0xffffbfff

080050b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	2201      	movs	r2, #1
 80050c4:	4393      	bics	r3, r2
 80050c6:	001a      	movs	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4a20      	ldr	r2, [pc, #128]	; (800515c <TIM_TI1_SetConfig+0xac>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00c      	beq.n	80050fa <TIM_TI1_SetConfig+0x4a>
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	05db      	lsls	r3, r3, #23
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d007      	beq.n	80050fa <TIM_TI1_SetConfig+0x4a>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <TIM_TI1_SetConfig+0xb0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <TIM_TI1_SetConfig+0x4a>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <TIM_TI1_SetConfig+0xb4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <TIM_TI1_SetConfig+0x4e>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <TIM_TI1_SetConfig+0x50>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2203      	movs	r2, #3
 8005108:	4393      	bics	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e003      	b.n	800511e <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2201      	movs	r2, #1
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	22f0      	movs	r2, #240	; 0xf0
 8005122:	4393      	bics	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	22ff      	movs	r2, #255	; 0xff
 800512c:	4013      	ands	r3, r2
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	220a      	movs	r2, #10
 8005138:	4393      	bics	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	220a      	movs	r2, #10
 8005140:	4013      	ands	r3, r2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	621a      	str	r2, [r3, #32]
}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	46bd      	mov	sp, r7
 8005158:	b006      	add	sp, #24
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40000400 	.word	0x40000400
 8005164:	40014000 	.word	0x40014000

08005168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	2201      	movs	r2, #1
 8005180:	4393      	bics	r3, r2
 8005182:	001a      	movs	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	22f0      	movs	r2, #240	; 0xf0
 8005192:	4393      	bics	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	220a      	movs	r2, #10
 80051a4:	4393      	bics	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b006      	add	sp, #24
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	2210      	movs	r2, #16
 80051d8:	4393      	bics	r3, r2
 80051da:	001a      	movs	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4a14      	ldr	r2, [pc, #80]	; (8005240 <TIM_TI2_SetConfig+0x7c>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4a10      	ldr	r2, [pc, #64]	; (8005244 <TIM_TI2_SetConfig+0x80>)
 8005202:	4013      	ands	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	031b      	lsls	r3, r3, #12
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	22a0      	movs	r2, #160	; 0xa0
 8005218:	4393      	bics	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	22a0      	movs	r2, #160	; 0xa0
 8005222:	4013      	ands	r3, r2
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	46bd      	mov	sp, r7
 800523a:	b006      	add	sp, #24
 800523c:	bd80      	pop	{r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	fffffcff 	.word	0xfffffcff
 8005244:	ffff0fff 	.word	0xffff0fff

08005248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	2210      	movs	r2, #16
 800525a:	4393      	bics	r3, r2
 800525c:	001a      	movs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <TIM_TI2_ConfigInputStage+0x60>)
 8005272:	4013      	ands	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	22a0      	movs	r2, #160	; 0xa0
 8005284:	4393      	bics	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b006      	add	sp, #24
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	ffff0fff 	.word	0xffff0fff

080052ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <TIM_TI3_SetConfig+0x78>)
 80052c0:	401a      	ands	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2203      	movs	r2, #3
 80052d6:	4393      	bics	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	22f0      	movs	r2, #240	; 0xf0
 80052e6:	4393      	bics	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	22ff      	movs	r2, #255	; 0xff
 80052f0:	4013      	ands	r3, r2
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4a0b      	ldr	r2, [pc, #44]	; (8005328 <TIM_TI3_SetConfig+0x7c>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	23a0      	movs	r3, #160	; 0xa0
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	4013      	ands	r3, r2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b006      	add	sp, #24
 8005322:	bd80      	pop	{r7, pc}
 8005324:	fffffeff 	.word	0xfffffeff
 8005328:	fffff5ff 	.word	0xfffff5ff

0800532c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <TIM_TI4_SetConfig+0x7c>)
 8005340:	401a      	ands	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <TIM_TI4_SetConfig+0x80>)
 8005356:	4013      	ands	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <TIM_TI4_SetConfig+0x84>)
 8005368:	4013      	ands	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	031b      	lsls	r3, r3, #12
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <TIM_TI4_SetConfig+0x88>)
 800537e:	4013      	ands	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	031a      	lsls	r2, r3, #12
 8005386:	23a0      	movs	r3, #160	; 0xa0
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	4013      	ands	r3, r2
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b006      	add	sp, #24
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	ffffefff 	.word	0xffffefff
 80053ac:	fffffcff 	.word	0xfffffcff
 80053b0:	ffff0fff 	.word	0xffff0fff
 80053b4:	ffff5fff 	.word	0xffff5fff

080053b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2270      	movs	r2, #112	; 0x70
 80053cc:	4393      	bics	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	2207      	movs	r2, #7
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b004      	add	sp, #16
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4a09      	ldr	r2, [pc, #36]	; (8005428 <TIM_ETR_SetConfig+0x3c>)
 8005404:	4013      	ands	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	431a      	orrs	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	609a      	str	r2, [r3, #8]
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b006      	add	sp, #24
 8005426:	bd80      	pop	{r7, pc}
 8005428:	ffff00ff 	.word	0xffff00ff

0800542c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	221f      	movs	r2, #31
 800543c:	4013      	ands	r3, r2
 800543e:	2201      	movs	r2, #1
 8005440:	409a      	lsls	r2, r3
 8005442:	0013      	movs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	43d2      	mvns	r2, r2
 800544e:	401a      	ands	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	211f      	movs	r1, #31
 800545c:	400b      	ands	r3, r1
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4099      	lsls	r1, r3
 8005462:	000b      	movs	r3, r1
 8005464:	431a      	orrs	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b006      	add	sp, #24
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	223c      	movs	r2, #60	; 0x3c
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e047      	b.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	223c      	movs	r2, #60	; 0x3c
 8005490:	2101      	movs	r1, #1
 8005492:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	223d      	movs	r2, #61	; 0x3d
 8005498:	2102      	movs	r1, #2
 800549a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2270      	movs	r2, #112	; 0x70
 80054b0:	4393      	bics	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00f      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	05db      	lsls	r3, r3, #23
 80054d8:	429a      	cmp	r2, r3
 80054da:	d009      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a11      	ldr	r2, [pc, #68]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a10      	ldr	r2, [pc, #64]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10c      	bne.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2280      	movs	r2, #128	; 0x80
 80054f4:	4393      	bics	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	223d      	movs	r2, #61	; 0x3d
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	223c      	movs	r2, #60	; 0x3c
 8005516:	2100      	movs	r1, #0
 8005518:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b004      	add	sp, #16
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40014000 	.word	0x40014000

08005530 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	223c      	movs	r2, #60	; 0x3c
 8005542:	5c9b      	ldrb	r3, [r3, r2]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005548:	2302      	movs	r3, #2
 800554a:	e03e      	b.n	80055ca <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	223c      	movs	r2, #60	; 0x3c
 8005550:	2101      	movs	r1, #1
 8005552:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	22ff      	movs	r2, #255	; 0xff
 8005558:	4393      	bics	r3, r2
 800555a:	001a      	movs	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005568:	401a      	ands	r2, r3
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005576:	401a      	ands	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a16      	ldr	r2, [pc, #88]	; (80055dc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005584:	401a      	ands	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005592:	401a      	ands	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80055a0:	401a      	ands	r2, r3
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a0e      	ldr	r2, [pc, #56]	; (80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80055ae:	401a      	ands	r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	223c      	movs	r2, #60	; 0x3c
 80055c4:	2100      	movs	r1, #0
 80055c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b004      	add	sp, #16
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	fffffcff 	.word	0xfffffcff
 80055d8:	fffffbff 	.word	0xfffffbff
 80055dc:	fffff7ff 	.word	0xfffff7ff
 80055e0:	ffffefff 	.word	0xffffefff
 80055e4:	ffffdfff 	.word	0xffffdfff
 80055e8:	ffffbfff 	.word	0xffffbfff

080055ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f4:	46c0      	nop			; (mov r8, r8)
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b002      	add	sp, #8
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	46bd      	mov	sp, r7
 8005608:	b002      	add	sp, #8
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e044      	b.n	80056a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d107      	bne.n	8005636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2278      	movs	r2, #120	; 0x78
 800562a:	2100      	movs	r1, #0
 800562c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	0018      	movs	r0, r3
 8005632:	f7fd f94f 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2224      	movs	r2, #36	; 0x24
 800563a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2101      	movs	r1, #1
 8005648:	438a      	bics	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	0018      	movs	r0, r3
 8005650:	f000 f89a 	bl	8005788 <UART_SetConfig>
 8005654:	0003      	movs	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e024      	b.n	80056a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0018      	movs	r0, r3
 800566a:	f000 fa75 	bl	8005b58 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	490d      	ldr	r1, [pc, #52]	; (80056b0 <HAL_UART_Init+0xa4>)
 800567a:	400a      	ands	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	212a      	movs	r1, #42	; 0x2a
 800568a:	438a      	bics	r2, r1
 800568c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2101      	movs	r1, #1
 800569a:	430a      	orrs	r2, r1
 800569c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 fb0d 	bl	8005cc0 <UART_CheckIdleState>
 80056a6:	0003      	movs	r3, r0
}
 80056a8:	0018      	movs	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b002      	add	sp, #8
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	ffffb7ff 	.word	0xffffb7ff

080056b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	1dbb      	adds	r3, r7, #6
 80056c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	589b      	ldr	r3, [r3, r2]
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d145      	bne.n	8005758 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_UART_Receive_IT+0x26>
 80056d2:	1dbb      	adds	r3, r7, #6
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e03d      	b.n	800575a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	015b      	lsls	r3, r3, #5
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d109      	bne.n	80056fe <HAL_UART_Receive_IT+0x4a>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d105      	bne.n	80056fe <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	d001      	beq.n	80056fe <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e02d      	b.n	800575a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	2380      	movs	r3, #128	; 0x80
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	4013      	ands	r3, r2
 8005710:	d019      	beq.n	8005746 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005712:	f3ef 8310 	mrs	r3, PRIMASK
 8005716:	613b      	str	r3, [r7, #16]
  return(result);
 8005718:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	2301      	movs	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f383 8810 	msr	PRIMASK, r3
}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2180      	movs	r1, #128	; 0x80
 8005734:	04c9      	lsls	r1, r1, #19
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	f383 8810 	msr	PRIMASK, r3
}
 8005744:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005746:	1dbb      	adds	r3, r7, #6
 8005748:	881a      	ldrh	r2, [r3, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 fbc8 	bl	8005ee4 <UART_Start_Receive_IT>
 8005754:	0003      	movs	r3, r0
 8005756:	e000      	b.n	800575a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b008      	add	sp, #32
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	46bd      	mov	sp, r7
 800576e:	b002      	add	sp, #8
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	000a      	movs	r2, r1
 800577c:	1cbb      	adds	r3, r7, #2
 800577e:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b002      	add	sp, #8
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005790:	231e      	movs	r3, #30
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4abe      	ldr	r2, [pc, #760]	; (8005ab0 <UART_SetConfig+0x328>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	0019      	movs	r1, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4ab9      	ldr	r2, [pc, #740]	; (8005ab4 <UART_SetConfig+0x32c>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	0019      	movs	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4ab0      	ldr	r2, [pc, #704]	; (8005ab8 <UART_SetConfig+0x330>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4aac      	ldr	r2, [pc, #688]	; (8005abc <UART_SetConfig+0x334>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d127      	bne.n	800585e <UART_SetConfig+0xd6>
 800580e:	4bac      	ldr	r3, [pc, #688]	; (8005ac0 <UART_SetConfig+0x338>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	2203      	movs	r2, #3
 8005814:	4013      	ands	r3, r2
 8005816:	2b03      	cmp	r3, #3
 8005818:	d00d      	beq.n	8005836 <UART_SetConfig+0xae>
 800581a:	d81b      	bhi.n	8005854 <UART_SetConfig+0xcc>
 800581c:	2b02      	cmp	r3, #2
 800581e:	d014      	beq.n	800584a <UART_SetConfig+0xc2>
 8005820:	d818      	bhi.n	8005854 <UART_SetConfig+0xcc>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <UART_SetConfig+0xa4>
 8005826:	2b01      	cmp	r3, #1
 8005828:	d00a      	beq.n	8005840 <UART_SetConfig+0xb8>
 800582a:	e013      	b.n	8005854 <UART_SetConfig+0xcc>
 800582c:	231f      	movs	r3, #31
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e0bd      	b.n	80059b2 <UART_SetConfig+0x22a>
 8005836:	231f      	movs	r3, #31
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2202      	movs	r2, #2
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e0b8      	b.n	80059b2 <UART_SetConfig+0x22a>
 8005840:	231f      	movs	r3, #31
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2204      	movs	r2, #4
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e0b3      	b.n	80059b2 <UART_SetConfig+0x22a>
 800584a:	231f      	movs	r3, #31
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	2208      	movs	r2, #8
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	e0ae      	b.n	80059b2 <UART_SetConfig+0x22a>
 8005854:	231f      	movs	r3, #31
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	2210      	movs	r2, #16
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e0a9      	b.n	80059b2 <UART_SetConfig+0x22a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a98      	ldr	r2, [pc, #608]	; (8005ac4 <UART_SetConfig+0x33c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d134      	bne.n	80058d2 <UART_SetConfig+0x14a>
 8005868:	4b95      	ldr	r3, [pc, #596]	; (8005ac0 <UART_SetConfig+0x338>)
 800586a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586c:	23c0      	movs	r3, #192	; 0xc0
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	4013      	ands	r3, r2
 8005872:	22c0      	movs	r2, #192	; 0xc0
 8005874:	0292      	lsls	r2, r2, #10
 8005876:	4293      	cmp	r3, r2
 8005878:	d017      	beq.n	80058aa <UART_SetConfig+0x122>
 800587a:	22c0      	movs	r2, #192	; 0xc0
 800587c:	0292      	lsls	r2, r2, #10
 800587e:	4293      	cmp	r3, r2
 8005880:	d822      	bhi.n	80058c8 <UART_SetConfig+0x140>
 8005882:	2280      	movs	r2, #128	; 0x80
 8005884:	0292      	lsls	r2, r2, #10
 8005886:	4293      	cmp	r3, r2
 8005888:	d019      	beq.n	80058be <UART_SetConfig+0x136>
 800588a:	2280      	movs	r2, #128	; 0x80
 800588c:	0292      	lsls	r2, r2, #10
 800588e:	4293      	cmp	r3, r2
 8005890:	d81a      	bhi.n	80058c8 <UART_SetConfig+0x140>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <UART_SetConfig+0x118>
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	0252      	lsls	r2, r2, #9
 800589a:	4293      	cmp	r3, r2
 800589c:	d00a      	beq.n	80058b4 <UART_SetConfig+0x12c>
 800589e:	e013      	b.n	80058c8 <UART_SetConfig+0x140>
 80058a0:	231f      	movs	r3, #31
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e083      	b.n	80059b2 <UART_SetConfig+0x22a>
 80058aa:	231f      	movs	r3, #31
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	2202      	movs	r2, #2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e07e      	b.n	80059b2 <UART_SetConfig+0x22a>
 80058b4:	231f      	movs	r3, #31
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	2204      	movs	r2, #4
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e079      	b.n	80059b2 <UART_SetConfig+0x22a>
 80058be:	231f      	movs	r3, #31
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	2208      	movs	r2, #8
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e074      	b.n	80059b2 <UART_SetConfig+0x22a>
 80058c8:	231f      	movs	r3, #31
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	2210      	movs	r2, #16
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e06f      	b.n	80059b2 <UART_SetConfig+0x22a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a7c      	ldr	r2, [pc, #496]	; (8005ac8 <UART_SetConfig+0x340>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d134      	bne.n	8005946 <UART_SetConfig+0x1be>
 80058dc:	4b78      	ldr	r3, [pc, #480]	; (8005ac0 <UART_SetConfig+0x338>)
 80058de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e0:	23c0      	movs	r3, #192	; 0xc0
 80058e2:	031b      	lsls	r3, r3, #12
 80058e4:	4013      	ands	r3, r2
 80058e6:	22c0      	movs	r2, #192	; 0xc0
 80058e8:	0312      	lsls	r2, r2, #12
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d017      	beq.n	800591e <UART_SetConfig+0x196>
 80058ee:	22c0      	movs	r2, #192	; 0xc0
 80058f0:	0312      	lsls	r2, r2, #12
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d822      	bhi.n	800593c <UART_SetConfig+0x1b4>
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	0312      	lsls	r2, r2, #12
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d019      	beq.n	8005932 <UART_SetConfig+0x1aa>
 80058fe:	2280      	movs	r2, #128	; 0x80
 8005900:	0312      	lsls	r2, r2, #12
 8005902:	4293      	cmp	r3, r2
 8005904:	d81a      	bhi.n	800593c <UART_SetConfig+0x1b4>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <UART_SetConfig+0x18c>
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	02d2      	lsls	r2, r2, #11
 800590e:	4293      	cmp	r3, r2
 8005910:	d00a      	beq.n	8005928 <UART_SetConfig+0x1a0>
 8005912:	e013      	b.n	800593c <UART_SetConfig+0x1b4>
 8005914:	231f      	movs	r3, #31
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e049      	b.n	80059b2 <UART_SetConfig+0x22a>
 800591e:	231f      	movs	r3, #31
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	2202      	movs	r2, #2
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	e044      	b.n	80059b2 <UART_SetConfig+0x22a>
 8005928:	231f      	movs	r3, #31
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	2204      	movs	r2, #4
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e03f      	b.n	80059b2 <UART_SetConfig+0x22a>
 8005932:	231f      	movs	r3, #31
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	2208      	movs	r2, #8
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e03a      	b.n	80059b2 <UART_SetConfig+0x22a>
 800593c:	231f      	movs	r3, #31
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	2210      	movs	r2, #16
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e035      	b.n	80059b2 <UART_SetConfig+0x22a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a60      	ldr	r2, [pc, #384]	; (8005acc <UART_SetConfig+0x344>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d104      	bne.n	800595a <UART_SetConfig+0x1d2>
 8005950:	231f      	movs	r3, #31
 8005952:	18fb      	adds	r3, r7, r3
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	e02b      	b.n	80059b2 <UART_SetConfig+0x22a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a5c      	ldr	r2, [pc, #368]	; (8005ad0 <UART_SetConfig+0x348>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d104      	bne.n	800596e <UART_SetConfig+0x1e6>
 8005964:	231f      	movs	r3, #31
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e021      	b.n	80059b2 <UART_SetConfig+0x22a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a58      	ldr	r2, [pc, #352]	; (8005ad4 <UART_SetConfig+0x34c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d104      	bne.n	8005982 <UART_SetConfig+0x1fa>
 8005978:	231f      	movs	r3, #31
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e017      	b.n	80059b2 <UART_SetConfig+0x22a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a54      	ldr	r2, [pc, #336]	; (8005ad8 <UART_SetConfig+0x350>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d104      	bne.n	8005996 <UART_SetConfig+0x20e>
 800598c:	231f      	movs	r3, #31
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e00d      	b.n	80059b2 <UART_SetConfig+0x22a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a50      	ldr	r2, [pc, #320]	; (8005adc <UART_SetConfig+0x354>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d104      	bne.n	80059aa <UART_SetConfig+0x222>
 80059a0:	231f      	movs	r3, #31
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e003      	b.n	80059b2 <UART_SetConfig+0x22a>
 80059aa:	231f      	movs	r3, #31
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	2210      	movs	r2, #16
 80059b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69da      	ldr	r2, [r3, #28]
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d15c      	bne.n	8005a78 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80059be:	231f      	movs	r3, #31
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d015      	beq.n	80059f4 <UART_SetConfig+0x26c>
 80059c8:	dc18      	bgt.n	80059fc <UART_SetConfig+0x274>
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d00d      	beq.n	80059ea <UART_SetConfig+0x262>
 80059ce:	dc15      	bgt.n	80059fc <UART_SetConfig+0x274>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <UART_SetConfig+0x252>
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d005      	beq.n	80059e4 <UART_SetConfig+0x25c>
 80059d8:	e010      	b.n	80059fc <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059da:	f7fe fa21 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 80059de:	0003      	movs	r3, r0
 80059e0:	61bb      	str	r3, [r7, #24]
        break;
 80059e2:	e012      	b.n	8005a0a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e4:	4b3e      	ldr	r3, [pc, #248]	; (8005ae0 <UART_SetConfig+0x358>)
 80059e6:	61bb      	str	r3, [r7, #24]
        break;
 80059e8:	e00f      	b.n	8005a0a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ea:	f7fe f99d 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 80059ee:	0003      	movs	r3, r0
 80059f0:	61bb      	str	r3, [r7, #24]
        break;
 80059f2:	e00a      	b.n	8005a0a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	61bb      	str	r3, [r7, #24]
        break;
 80059fa:	e006      	b.n	8005a0a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a00:	231e      	movs	r3, #30
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
        break;
 8005a08:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d100      	bne.n	8005a12 <UART_SetConfig+0x28a>
 8005a10:	e095      	b.n	8005b3e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	005a      	lsls	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	18d2      	adds	r2, r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	0019      	movs	r1, r3
 8005a24:	0010      	movs	r0, r2
 8005a26:	f7fa fb6d 	bl	8000104 <__udivsi3>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b0f      	cmp	r3, #15
 8005a32:	d91c      	bls.n	8005a6e <UART_SetConfig+0x2e6>
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	025b      	lsls	r3, r3, #9
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d217      	bcs.n	8005a6e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	200e      	movs	r0, #14
 8005a44:	183b      	adds	r3, r7, r0
 8005a46:	210f      	movs	r1, #15
 8005a48:	438a      	bics	r2, r1
 8005a4a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2207      	movs	r2, #7
 8005a54:	4013      	ands	r3, r2
 8005a56:	b299      	uxth	r1, r3
 8005a58:	183b      	adds	r3, r7, r0
 8005a5a:	183a      	adds	r2, r7, r0
 8005a5c:	8812      	ldrh	r2, [r2, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	183a      	adds	r2, r7, r0
 8005a68:	8812      	ldrh	r2, [r2, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	e067      	b.n	8005b3e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005a6e:	231e      	movs	r3, #30
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e062      	b.n	8005b3e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a78:	231f      	movs	r3, #31
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d030      	beq.n	8005ae4 <UART_SetConfig+0x35c>
 8005a82:	dc33      	bgt.n	8005aec <UART_SetConfig+0x364>
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d00d      	beq.n	8005aa4 <UART_SetConfig+0x31c>
 8005a88:	dc30      	bgt.n	8005aec <UART_SetConfig+0x364>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <UART_SetConfig+0x30c>
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d005      	beq.n	8005a9e <UART_SetConfig+0x316>
 8005a92:	e02b      	b.n	8005aec <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a94:	f7fe f9c4 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	61bb      	str	r3, [r7, #24]
        break;
 8005a9c:	e02d      	b.n	8005afa <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <UART_SetConfig+0x358>)
 8005aa0:	61bb      	str	r3, [r7, #24]
        break;
 8005aa2:	e02a      	b.n	8005afa <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa4:	f7fe f940 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	61bb      	str	r3, [r7, #24]
        break;
 8005aac:	e025      	b.n	8005afa <UART_SetConfig+0x372>
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	efff69f3 	.word	0xefff69f3
 8005ab4:	ffffcfff 	.word	0xffffcfff
 8005ab8:	fffff4ff 	.word	0xfffff4ff
 8005abc:	40013800 	.word	0x40013800
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40004400 	.word	0x40004400
 8005ac8:	40004800 	.word	0x40004800
 8005acc:	40004c00 	.word	0x40004c00
 8005ad0:	40005000 	.word	0x40005000
 8005ad4:	40011400 	.word	0x40011400
 8005ad8:	40011800 	.word	0x40011800
 8005adc:	40011c00 	.word	0x40011c00
 8005ae0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	61bb      	str	r3, [r7, #24]
        break;
 8005aea:	e006      	b.n	8005afa <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005af0:	231e      	movs	r3, #30
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
        break;
 8005af8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01e      	beq.n	8005b3e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	085a      	lsrs	r2, r3, #1
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	18d2      	adds	r2, r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	0019      	movs	r1, r3
 8005b10:	0010      	movs	r0, r2
 8005b12:	f7fa faf7 	bl	8000104 <__udivsi3>
 8005b16:	0003      	movs	r3, r0
 8005b18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b0f      	cmp	r3, #15
 8005b1e:	d90a      	bls.n	8005b36 <UART_SetConfig+0x3ae>
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	025b      	lsls	r3, r3, #9
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d205      	bcs.n	8005b36 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60da      	str	r2, [r3, #12]
 8005b34:	e003      	b.n	8005b3e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005b36:	231e      	movs	r3, #30
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b4a:	231e      	movs	r3, #30
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	781b      	ldrb	r3, [r3, #0]
}
 8005b50:	0018      	movs	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b008      	add	sp, #32
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2201      	movs	r2, #1
 8005b66:	4013      	ands	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4a4a      	ldr	r2, [pc, #296]	; (8005c9c <UART_AdvFeatureConfig+0x144>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	0019      	movs	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2202      	movs	r2, #2
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d00b      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4a43      	ldr	r2, [pc, #268]	; (8005ca0 <UART_AdvFeatureConfig+0x148>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	0019      	movs	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2204      	movs	r2, #4
 8005baa:	4013      	ands	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4a3b      	ldr	r2, [pc, #236]	; (8005ca4 <UART_AdvFeatureConfig+0x14c>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2208      	movs	r2, #8
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4a34      	ldr	r2, [pc, #208]	; (8005ca8 <UART_AdvFeatureConfig+0x150>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	0019      	movs	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2210      	movs	r2, #16
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d00b      	beq.n	8005c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <UART_AdvFeatureConfig+0x154>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2220      	movs	r2, #32
 8005c10:	4013      	ands	r3, r2
 8005c12:	d00b      	beq.n	8005c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4a25      	ldr	r2, [pc, #148]	; (8005cb0 <UART_AdvFeatureConfig+0x158>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	0019      	movs	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2240      	movs	r2, #64	; 0x40
 8005c32:	4013      	ands	r3, r2
 8005c34:	d01d      	beq.n	8005c72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	; (8005cb4 <UART_AdvFeatureConfig+0x15c>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	0019      	movs	r1, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c52:	2380      	movs	r3, #128	; 0x80
 8005c54:	035b      	lsls	r3, r3, #13
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d10b      	bne.n	8005c72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <UART_AdvFeatureConfig+0x160>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	0019      	movs	r1, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	4a0e      	ldr	r2, [pc, #56]	; (8005cbc <UART_AdvFeatureConfig+0x164>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	605a      	str	r2, [r3, #4]
  }
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b002      	add	sp, #8
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	fffdffff 	.word	0xfffdffff
 8005ca0:	fffeffff 	.word	0xfffeffff
 8005ca4:	fffbffff 	.word	0xfffbffff
 8005ca8:	ffff7fff 	.word	0xffff7fff
 8005cac:	ffffefff 	.word	0xffffefff
 8005cb0:	ffffdfff 	.word	0xffffdfff
 8005cb4:	ffefffff 	.word	0xffefffff
 8005cb8:	ff9fffff 	.word	0xff9fffff
 8005cbc:	fff7ffff 	.word	0xfff7ffff

08005cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b092      	sub	sp, #72	; 0x48
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2284      	movs	r2, #132	; 0x84
 8005ccc:	2100      	movs	r1, #0
 8005cce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cd0:	f7fc feda 	bl	8002a88 <HAL_GetTick>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2208      	movs	r2, #8
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d12c      	bne.n	8005d40 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	0391      	lsls	r1, r2, #14
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4a46      	ldr	r2, [pc, #280]	; (8005e08 <UART_CheckIdleState+0x148>)
 8005cf0:	9200      	str	r2, [sp, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f000 f88c 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005cf8:	1e03      	subs	r3, r0, #0
 8005cfa:	d021      	beq.n	8005d40 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d06:	2301      	movs	r3, #1
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	f383 8810 	msr	PRIMASK, r3
}
 8005d10:	46c0      	nop			; (mov r8, r8)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	438a      	bics	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2278      	movs	r2, #120	; 0x78
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e05f      	b.n	8005e00 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2204      	movs	r2, #4
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d146      	bne.n	8005ddc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	03d1      	lsls	r1, r2, #15
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <UART_CheckIdleState+0x148>)
 8005d58:	9200      	str	r2, [sp, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f000 f858 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005d60:	1e03      	subs	r3, r0, #0
 8005d62:	d03b      	beq.n	8005ddc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d64:	f3ef 8310 	mrs	r3, PRIMASK
 8005d68:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6e:	2301      	movs	r3, #1
 8005d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f383 8810 	msr	PRIMASK, r3
}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4921      	ldr	r1, [pc, #132]	; (8005e0c <UART_CheckIdleState+0x14c>)
 8005d86:	400a      	ands	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f383 8810 	msr	PRIMASK, r3
}
 8005d94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d96:	f3ef 8310 	mrs	r3, PRIMASK
 8005d9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005da0:	2301      	movs	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f383 8810 	msr	PRIMASK, r3
}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2101      	movs	r1, #1
 8005db8:	438a      	bics	r2, r1
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	f383 8810 	msr	PRIMASK, r3
}
 8005dc6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2280      	movs	r2, #128	; 0x80
 8005dcc:	2120      	movs	r1, #32
 8005dce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2278      	movs	r2, #120	; 0x78
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e011      	b.n	8005e00 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2280      	movs	r2, #128	; 0x80
 8005de6:	2120      	movs	r1, #32
 8005de8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2278      	movs	r2, #120	; 0x78
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	0018      	movs	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b010      	add	sp, #64	; 0x40
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	01ffffff 	.word	0x01ffffff
 8005e0c:	fffffedf 	.word	0xfffffedf

08005e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	1dfb      	adds	r3, r7, #7
 8005e1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e20:	e04b      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	3301      	adds	r3, #1
 8005e26:	d048      	beq.n	8005eba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e28:	f7fc fe2e 	bl	8002a88 <HAL_GetTick>
 8005e2c:	0002      	movs	r2, r0
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d302      	bcc.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e04b      	b.n	8005eda <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d035      	beq.n	8005eba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	2208      	movs	r2, #8
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d111      	bne.n	8005e80 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2208      	movs	r2, #8
 8005e62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 f906 	bl	8006078 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2284      	movs	r2, #132	; 0x84
 8005e70:	2108      	movs	r1, #8
 8005e72:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2278      	movs	r2, #120	; 0x78
 8005e78:	2100      	movs	r1, #0
 8005e7a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e02c      	b.n	8005eda <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69da      	ldr	r2, [r3, #28]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d112      	bne.n	8005eba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2280      	movs	r2, #128	; 0x80
 8005e9a:	0112      	lsls	r2, r2, #4
 8005e9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f000 f8e9 	bl	8006078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2284      	movs	r2, #132	; 0x84
 8005eaa:	2120      	movs	r1, #32
 8005eac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2278      	movs	r2, #120	; 0x78
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e00f      	b.n	8005eda <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	425a      	negs	r2, r3
 8005eca:	4153      	adcs	r3, r2
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	001a      	movs	r2, r3
 8005ed0:	1dfb      	adds	r3, r7, #7
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d0a4      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	0018      	movs	r0, r3
 8005edc:	46bd      	mov	sp, r7
 8005ede:	b004      	add	sp, #16
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b090      	sub	sp, #64	; 0x40
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	1dbb      	adds	r3, r7, #6
 8005ef0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1dba      	adds	r2, r7, #6
 8005efc:	2158      	movs	r1, #88	; 0x58
 8005efe:	8812      	ldrh	r2, [r2, #0]
 8005f00:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1dba      	adds	r2, r7, #6
 8005f06:	215a      	movs	r1, #90	; 0x5a
 8005f08:	8812      	ldrh	r2, [r2, #0]
 8005f0a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	2380      	movs	r3, #128	; 0x80
 8005f18:	015b      	lsls	r3, r3, #5
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d10d      	bne.n	8005f3a <UART_Start_Receive_IT+0x56>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d104      	bne.n	8005f30 <UART_Start_Receive_IT+0x4c>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	225c      	movs	r2, #92	; 0x5c
 8005f2a:	4950      	ldr	r1, [pc, #320]	; (800606c <UART_Start_Receive_IT+0x188>)
 8005f2c:	5299      	strh	r1, [r3, r2]
 8005f2e:	e02e      	b.n	8005f8e <UART_Start_Receive_IT+0xaa>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	225c      	movs	r2, #92	; 0x5c
 8005f34:	21ff      	movs	r1, #255	; 0xff
 8005f36:	5299      	strh	r1, [r3, r2]
 8005f38:	e029      	b.n	8005f8e <UART_Start_Receive_IT+0xaa>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10d      	bne.n	8005f5e <UART_Start_Receive_IT+0x7a>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <UART_Start_Receive_IT+0x70>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	225c      	movs	r2, #92	; 0x5c
 8005f4e:	21ff      	movs	r1, #255	; 0xff
 8005f50:	5299      	strh	r1, [r3, r2]
 8005f52:	e01c      	b.n	8005f8e <UART_Start_Receive_IT+0xaa>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	225c      	movs	r2, #92	; 0x5c
 8005f58:	217f      	movs	r1, #127	; 0x7f
 8005f5a:	5299      	strh	r1, [r3, r2]
 8005f5c:	e017      	b.n	8005f8e <UART_Start_Receive_IT+0xaa>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	055b      	lsls	r3, r3, #21
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d10d      	bne.n	8005f86 <UART_Start_Receive_IT+0xa2>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <UART_Start_Receive_IT+0x98>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	225c      	movs	r2, #92	; 0x5c
 8005f76:	217f      	movs	r1, #127	; 0x7f
 8005f78:	5299      	strh	r1, [r3, r2]
 8005f7a:	e008      	b.n	8005f8e <UART_Start_Receive_IT+0xaa>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	225c      	movs	r2, #92	; 0x5c
 8005f80:	213f      	movs	r1, #63	; 0x3f
 8005f82:	5299      	strh	r1, [r3, r2]
 8005f84:	e003      	b.n	8005f8e <UART_Start_Receive_IT+0xaa>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	225c      	movs	r2, #92	; 0x5c
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2284      	movs	r2, #132	; 0x84
 8005f92:	2100      	movs	r1, #0
 8005f94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2280      	movs	r2, #128	; 0x80
 8005f9a:	2122      	movs	r1, #34	; 0x22
 8005f9c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa8:	2301      	movs	r3, #1
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	f383 8810 	msr	PRIMASK, r3
}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	f383 8810 	msr	PRIMASK, r3
}
 8005fce:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	015b      	lsls	r3, r3, #5
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d107      	bne.n	8005fec <UART_Start_Receive_IT+0x108>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4a22      	ldr	r2, [pc, #136]	; (8006070 <UART_Start_Receive_IT+0x18c>)
 8005fe8:	669a      	str	r2, [r3, #104]	; 0x68
 8005fea:	e002      	b.n	8005ff2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <UART_Start_Receive_IT+0x190>)
 8005ff0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d019      	beq.n	800602e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffe:	61fb      	str	r3, [r7, #28]
  return(result);
 8006000:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
 8006004:	2301      	movs	r3, #1
 8006006:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f383 8810 	msr	PRIMASK, r3
}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2190      	movs	r1, #144	; 0x90
 800601c:	0049      	lsls	r1, r1, #1
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	f383 8810 	msr	PRIMASK, r3
}
 800602c:	e018      	b.n	8006060 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800602e:	f3ef 8310 	mrs	r3, PRIMASK
 8006032:	613b      	str	r3, [r7, #16]
  return(result);
 8006034:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006036:	63bb      	str	r3, [r7, #56]	; 0x38
 8006038:	2301      	movs	r3, #1
 800603a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f383 8810 	msr	PRIMASK, r3
}
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2120      	movs	r1, #32
 8006050:	430a      	orrs	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f383 8810 	msr	PRIMASK, r3
}
 800605e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	0018      	movs	r0, r3
 8006064:	46bd      	mov	sp, r7
 8006066:	b010      	add	sp, #64	; 0x40
 8006068:	bd80      	pop	{r7, pc}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	000001ff 	.word	0x000001ff
 8006070:	080062f9 	.word	0x080062f9
 8006074:	08006141 	.word	0x08006141

08006078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08e      	sub	sp, #56	; 0x38
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006080:	f3ef 8310 	mrs	r3, PRIMASK
 8006084:	617b      	str	r3, [r7, #20]
  return(result);
 8006086:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
 800608a:	2301      	movs	r3, #1
 800608c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	f383 8810 	msr	PRIMASK, r3
}
 8006094:	46c0      	nop			; (mov r8, r8)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4926      	ldr	r1, [pc, #152]	; (800613c <UART_EndRxTransfer+0xc4>)
 80060a2:	400a      	ands	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	f383 8810 	msr	PRIMASK, r3
}
 80060b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b2:	f3ef 8310 	mrs	r3, PRIMASK
 80060b6:	623b      	str	r3, [r7, #32]
  return(result);
 80060b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ba:	633b      	str	r3, [r7, #48]	; 0x30
 80060bc:	2301      	movs	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	f383 8810 	msr	PRIMASK, r3
}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2101      	movs	r1, #1
 80060d4:	438a      	bics	r2, r1
 80060d6:	609a      	str	r2, [r3, #8]
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	f383 8810 	msr	PRIMASK, r3
}
 80060e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d118      	bne.n	800611e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ec:	f3ef 8310 	mrs	r3, PRIMASK
 80060f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80060f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060f6:	2301      	movs	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f383 8810 	msr	PRIMASK, r3
}
 8006100:	46c0      	nop			; (mov r8, r8)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2110      	movs	r1, #16
 800610e:	438a      	bics	r2, r1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f383 8810 	msr	PRIMASK, r3
}
 800611c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2280      	movs	r2, #128	; 0x80
 8006122:	2120      	movs	r1, #32
 8006124:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	46bd      	mov	sp, r7
 8006136:	b00e      	add	sp, #56	; 0x38
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	fffffedf 	.word	0xfffffedf

08006140 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b094      	sub	sp, #80	; 0x50
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006148:	204e      	movs	r0, #78	; 0x4e
 800614a:	183b      	adds	r3, r7, r0
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	215c      	movs	r1, #92	; 0x5c
 8006150:	5a52      	ldrh	r2, [r2, r1]
 8006152:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2280      	movs	r2, #128	; 0x80
 8006158:	589b      	ldr	r3, [r3, r2]
 800615a:	2b22      	cmp	r3, #34	; 0x22
 800615c:	d000      	beq.n	8006160 <UART_RxISR_8BIT+0x20>
 800615e:	e0ba      	b.n	80062d6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	214c      	movs	r1, #76	; 0x4c
 8006166:	187b      	adds	r3, r7, r1
 8006168:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800616a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800616c:	187b      	adds	r3, r7, r1
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	183b      	adds	r3, r7, r0
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b2d9      	uxtb	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	400a      	ands	r2, r1
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	225a      	movs	r2, #90	; 0x5a
 8006190:	5a9b      	ldrh	r3, [r3, r2]
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b299      	uxth	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	225a      	movs	r2, #90	; 0x5a
 800619c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	225a      	movs	r2, #90	; 0x5a
 80061a2:	5a9b      	ldrh	r3, [r3, r2]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d000      	beq.n	80061ac <UART_RxISR_8BIT+0x6c>
 80061aa:	e09c      	b.n	80062e6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ac:	f3ef 8310 	mrs	r3, PRIMASK
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80061b6:	2301      	movs	r3, #1
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	f383 8810 	msr	PRIMASK, r3
}
 80061c0:	46c0      	nop			; (mov r8, r8)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4948      	ldr	r1, [pc, #288]	; (80062f0 <UART_RxISR_8BIT+0x1b0>)
 80061ce:	400a      	ands	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	f383 8810 	msr	PRIMASK, r3
}
 80061dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061de:	f3ef 8310 	mrs	r3, PRIMASK
 80061e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	647b      	str	r3, [r7, #68]	; 0x44
 80061e8:	2301      	movs	r3, #1
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	f383 8810 	msr	PRIMASK, r3
}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2101      	movs	r1, #1
 8006200:	438a      	bics	r2, r1
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006206:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	f383 8810 	msr	PRIMASK, r3
}
 800620e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	2120      	movs	r1, #32
 8006216:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	041b      	lsls	r3, r3, #16
 800622e:	4013      	ands	r3, r2
 8006230:	d018      	beq.n	8006264 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006232:	f3ef 8310 	mrs	r3, PRIMASK
 8006236:	61bb      	str	r3, [r7, #24]
  return(result);
 8006238:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800623a:	643b      	str	r3, [r7, #64]	; 0x40
 800623c:	2301      	movs	r3, #1
 800623e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f383 8810 	msr	PRIMASK, r3
}
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4928      	ldr	r1, [pc, #160]	; (80062f4 <UART_RxISR_8BIT+0x1b4>)
 8006254:	400a      	ands	r2, r1
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	f383 8810 	msr	PRIMASK, r3
}
 8006262:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006268:	2b01      	cmp	r3, #1
 800626a:	d12f      	bne.n	80062cc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006272:	f3ef 8310 	mrs	r3, PRIMASK
 8006276:	60fb      	str	r3, [r7, #12]
  return(result);
 8006278:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800627c:	2301      	movs	r3, #1
 800627e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f383 8810 	msr	PRIMASK, r3
}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2110      	movs	r1, #16
 8006294:	438a      	bics	r2, r1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f383 8810 	msr	PRIMASK, r3
}
 80062a2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	2210      	movs	r2, #16
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d103      	bne.n	80062ba <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2210      	movs	r2, #16
 80062b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2258      	movs	r2, #88	; 0x58
 80062be:	5a9a      	ldrh	r2, [r3, r2]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	0011      	movs	r1, r2
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7ff fa54 	bl	8005772 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062ca:	e00c      	b.n	80062e6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7ff fa47 	bl	8005762 <HAL_UART_RxCpltCallback>
}
 80062d4:	e007      	b.n	80062e6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2108      	movs	r1, #8
 80062e2:	430a      	orrs	r2, r1
 80062e4:	619a      	str	r2, [r3, #24]
}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b014      	add	sp, #80	; 0x50
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	fffffedf 	.word	0xfffffedf
 80062f4:	fbffffff 	.word	0xfbffffff

080062f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b094      	sub	sp, #80	; 0x50
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006300:	204e      	movs	r0, #78	; 0x4e
 8006302:	183b      	adds	r3, r7, r0
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	215c      	movs	r1, #92	; 0x5c
 8006308:	5a52      	ldrh	r2, [r2, r1]
 800630a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2280      	movs	r2, #128	; 0x80
 8006310:	589b      	ldr	r3, [r3, r2]
 8006312:	2b22      	cmp	r3, #34	; 0x22
 8006314:	d000      	beq.n	8006318 <UART_RxISR_16BIT+0x20>
 8006316:	e0ba      	b.n	800648e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	214c      	movs	r1, #76	; 0x4c
 800631e:	187b      	adds	r3, r7, r1
 8006320:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006322:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800632a:	187b      	adds	r3, r7, r1
 800632c:	183a      	adds	r2, r7, r0
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	8812      	ldrh	r2, [r2, #0]
 8006332:	4013      	ands	r3, r2
 8006334:	b29a      	uxth	r2, r3
 8006336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006338:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	1c9a      	adds	r2, r3, #2
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	225a      	movs	r2, #90	; 0x5a
 8006348:	5a9b      	ldrh	r3, [r3, r2]
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b299      	uxth	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	225a      	movs	r2, #90	; 0x5a
 8006354:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	225a      	movs	r2, #90	; 0x5a
 800635a:	5a9b      	ldrh	r3, [r3, r2]
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d000      	beq.n	8006364 <UART_RxISR_16BIT+0x6c>
 8006362:	e09c      	b.n	800649e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006364:	f3ef 8310 	mrs	r3, PRIMASK
 8006368:	623b      	str	r3, [r7, #32]
  return(result);
 800636a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636c:	647b      	str	r3, [r7, #68]	; 0x44
 800636e:	2301      	movs	r3, #1
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	f383 8810 	msr	PRIMASK, r3
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4948      	ldr	r1, [pc, #288]	; (80064a8 <UART_RxISR_16BIT+0x1b0>)
 8006386:	400a      	ands	r2, r1
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	f383 8810 	msr	PRIMASK, r3
}
 8006394:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006396:	f3ef 8310 	mrs	r3, PRIMASK
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639e:	643b      	str	r3, [r7, #64]	; 0x40
 80063a0:	2301      	movs	r3, #1
 80063a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	f383 8810 	msr	PRIMASK, r3
}
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2101      	movs	r1, #1
 80063b8:	438a      	bics	r2, r1
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c2:	f383 8810 	msr	PRIMASK, r3
}
 80063c6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	2120      	movs	r1, #32
 80063ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	041b      	lsls	r3, r3, #16
 80063e6:	4013      	ands	r3, r2
 80063e8:	d018      	beq.n	800641c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ea:	f3ef 8310 	mrs	r3, PRIMASK
 80063ee:	617b      	str	r3, [r7, #20]
  return(result);
 80063f0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f4:	2301      	movs	r3, #1
 80063f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f383 8810 	msr	PRIMASK, r3
}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4928      	ldr	r1, [pc, #160]	; (80064ac <UART_RxISR_16BIT+0x1b4>)
 800640c:	400a      	ands	r2, r1
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006412:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f383 8810 	msr	PRIMASK, r3
}
 800641a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006420:	2b01      	cmp	r3, #1
 8006422:	d12f      	bne.n	8006484 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642a:	f3ef 8310 	mrs	r3, PRIMASK
 800642e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006430:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006432:	63bb      	str	r3, [r7, #56]	; 0x38
 8006434:	2301      	movs	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f383 8810 	msr	PRIMASK, r3
}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2110      	movs	r1, #16
 800644c:	438a      	bics	r2, r1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f383 8810 	msr	PRIMASK, r3
}
 800645a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	2210      	movs	r2, #16
 8006464:	4013      	ands	r3, r2
 8006466:	2b10      	cmp	r3, #16
 8006468:	d103      	bne.n	8006472 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2210      	movs	r2, #16
 8006470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2258      	movs	r2, #88	; 0x58
 8006476:	5a9a      	ldrh	r2, [r3, r2]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	0011      	movs	r1, r2
 800647c:	0018      	movs	r0, r3
 800647e:	f7ff f978 	bl	8005772 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006482:	e00c      	b.n	800649e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	0018      	movs	r0, r3
 8006488:	f7ff f96b 	bl	8005762 <HAL_UART_RxCpltCallback>
}
 800648c:	e007      	b.n	800649e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2108      	movs	r1, #8
 800649a:	430a      	orrs	r2, r1
 800649c:	619a      	str	r2, [r3, #24]
}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b014      	add	sp, #80	; 0x50
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	fffffedf 	.word	0xfffffedf
 80064ac:	fbffffff 	.word	0xfbffffff

080064b0 <memset>:
 80064b0:	0003      	movs	r3, r0
 80064b2:	1882      	adds	r2, r0, r2
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d100      	bne.n	80064ba <memset+0xa>
 80064b8:	4770      	bx	lr
 80064ba:	7019      	strb	r1, [r3, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	e7f9      	b.n	80064b4 <memset+0x4>

080064c0 <strncmp>:
 80064c0:	b530      	push	{r4, r5, lr}
 80064c2:	0005      	movs	r5, r0
 80064c4:	1e10      	subs	r0, r2, #0
 80064c6:	d00b      	beq.n	80064e0 <strncmp+0x20>
 80064c8:	2400      	movs	r4, #0
 80064ca:	3a01      	subs	r2, #1
 80064cc:	5d2b      	ldrb	r3, [r5, r4]
 80064ce:	5d08      	ldrb	r0, [r1, r4]
 80064d0:	4283      	cmp	r3, r0
 80064d2:	d104      	bne.n	80064de <strncmp+0x1e>
 80064d4:	42a2      	cmp	r2, r4
 80064d6:	d002      	beq.n	80064de <strncmp+0x1e>
 80064d8:	3401      	adds	r4, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f6      	bne.n	80064cc <strncmp+0xc>
 80064de:	1a18      	subs	r0, r3, r0
 80064e0:	bd30      	pop	{r4, r5, pc}
	...

080064e4 <__libc_init_array>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	2600      	movs	r6, #0
 80064e8:	4c0c      	ldr	r4, [pc, #48]	; (800651c <__libc_init_array+0x38>)
 80064ea:	4d0d      	ldr	r5, [pc, #52]	; (8006520 <__libc_init_array+0x3c>)
 80064ec:	1b64      	subs	r4, r4, r5
 80064ee:	10a4      	asrs	r4, r4, #2
 80064f0:	42a6      	cmp	r6, r4
 80064f2:	d109      	bne.n	8006508 <__libc_init_array+0x24>
 80064f4:	2600      	movs	r6, #0
 80064f6:	f000 f819 	bl	800652c <_init>
 80064fa:	4c0a      	ldr	r4, [pc, #40]	; (8006524 <__libc_init_array+0x40>)
 80064fc:	4d0a      	ldr	r5, [pc, #40]	; (8006528 <__libc_init_array+0x44>)
 80064fe:	1b64      	subs	r4, r4, r5
 8006500:	10a4      	asrs	r4, r4, #2
 8006502:	42a6      	cmp	r6, r4
 8006504:	d105      	bne.n	8006512 <__libc_init_array+0x2e>
 8006506:	bd70      	pop	{r4, r5, r6, pc}
 8006508:	00b3      	lsls	r3, r6, #2
 800650a:	58eb      	ldr	r3, [r5, r3]
 800650c:	4798      	blx	r3
 800650e:	3601      	adds	r6, #1
 8006510:	e7ee      	b.n	80064f0 <__libc_init_array+0xc>
 8006512:	00b3      	lsls	r3, r6, #2
 8006514:	58eb      	ldr	r3, [r5, r3]
 8006516:	4798      	blx	r3
 8006518:	3601      	adds	r6, #1
 800651a:	e7f2      	b.n	8006502 <__libc_init_array+0x1e>
 800651c:	08006634 	.word	0x08006634
 8006520:	08006634 	.word	0x08006634
 8006524:	08006638 	.word	0x08006638
 8006528:	08006634 	.word	0x08006634

0800652c <_init>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr

08006538 <_fini>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr
